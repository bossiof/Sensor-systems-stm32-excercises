
hw_4B_ADC_INT_TIM_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08008e08  08008e08  00018e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092ec  080092ec  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  080092ec  080092ec  000192ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092f4  080092f4  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092f4  080092f4  000192f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092f8  080092f8  000192f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080092fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000208  08009504  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08009504  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faaa  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215f  00000000  00000000  0002fce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00031e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  00032cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018619  00000000  00000000  00033a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001014f  00000000  00000000  0004c059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aaae  00000000  00000000  0005c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6c56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005290  00000000  00000000  000f6ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008df0 	.word	0x08008df0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	08008df0 	.word	0x08008df0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <DWT_Delay_Init+0x58>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	4a13      	ldr	r2, [pc, #76]	; (8001060 <DWT_Delay_Init+0x58>)
 8001012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001016:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <DWT_Delay_Init+0x58>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	4a10      	ldr	r2, [pc, #64]	; (8001060 <DWT_Delay_Init+0x58>)
 800101e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001022:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <DWT_Delay_Init+0x5c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <DWT_Delay_Init+0x5c>)
 800102a:	f023 0301 	bic.w	r3, r3, #1
 800102e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <DWT_Delay_Init+0x5c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <DWT_Delay_Init+0x5c>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <DWT_Delay_Init+0x5c>)
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8001042:	bf00      	nop
    __ASM volatile ("NOP");
 8001044:	bf00      	nop
    __ASM volatile ("NOP");
 8001046:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <DWT_Delay_Init+0x5c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001050:	2300      	movs	r3, #0
 8001052:	e000      	b.n	8001056 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001054:	2301      	movs	r3, #1
    }
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000edf0 	.word	0xe000edf0
 8001064:	e0001000 	.word	0xe0001000

08001068 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <DWT_Delay_us+0x48>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8001076:	f002 fa9f 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 800107a:	4603      	mov	r3, r0
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <DWT_Delay_us+0x4c>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	0c9b      	lsrs	r3, r3, #18
 8001084:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	fb02 f303 	mul.w	r3, r2, r3
 800108e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8001090:	bf00      	nop
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <DWT_Delay_us+0x48>)
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	1ad2      	subs	r2, r2, r3
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1acb      	subs	r3, r1, r3
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d3f6      	bcc.n	8001092 <DWT_Delay_us+0x2a>
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e0001000 	.word	0xe0001000
 80010b4:	431bde83 	.word	0x431bde83

080010b8 <lcd_enable>:


//  LCD code


void lcd_enable(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 80010bc:	2201      	movs	r2, #1
 80010be:	2102      	movs	r1, #2
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <lcd_enable+0x28>)
 80010c2:	f001 fdfb 	bl	8002cbc <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 80010c6:	2032      	movs	r0, #50	; 0x32
 80010c8:	f7ff ffce 	bl	8001068 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2102      	movs	r1, #2
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <lcd_enable+0x28>)
 80010d2:	f001 fdf3 	bl	8002cbc <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 80010d6:	2032      	movs	r0, #50	; 0x32
 80010d8:	f7ff ffc6 	bl	8001068 <DWT_Delay_us>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40020400 	.word	0x40020400

080010e4 <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fc:	4816      	ldr	r0, [pc, #88]	; (8001158 <lcd_write4+0x74>)
 80010fe:	f001 fddd 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	105b      	asrs	r3, r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001114:	4810      	ldr	r0, [pc, #64]	; (8001158 <lcd_write4+0x74>)
 8001116:	f001 fdd1 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	109b      	asrs	r3, r3, #2
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800112c:	480a      	ldr	r0, [pc, #40]	; (8001158 <lcd_write4+0x74>)
 800112e:	f001 fdc5 	bl	8002cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	10db      	asrs	r3, r3, #3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <lcd_write4+0x74>)
 8001146:	f001 fdb9 	bl	8002cbc <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 800114a:	f7ff ffb5 	bl	80010b8 <lcd_enable>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020400 	.word	0x40020400

0800115c <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ffb9 	bl	80010e4 <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ffb5 	bl	80010e4 <lcd_write4>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 800118e:	2200      	movs	r2, #0
 8001190:	2104      	movs	r1, #4
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <lcd_command+0x24>)
 8001194:	f001 fd92 	bl	8002cbc <HAL_GPIO_WritePin>
	lcd_write(byte);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ffde 	bl	800115c <lcd_write>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020400 	.word	0x40020400

080011ac <lcd_clear>:

void lcd_clear(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	lcd_command(LCD_CLEAR_COMMAND);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7ff ffe7 	bl	8001184 <lcd_command>
	DWT_Delay_us(2000);
 80011b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011ba:	f7ff ff55 	bl	8001068 <DWT_Delay_us>
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <lcd_data>:

//  send data to the LCD
void lcd_data(uint8_t byte){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 80011ce:	2201      	movs	r2, #1
 80011d0:	2104      	movs	r1, #4
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <lcd_data+0x24>)
 80011d4:	f001 fd72 	bl	8002cbc <HAL_GPIO_WritePin>
	lcd_write(byte);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ffbe 	bl	800115c <lcd_write>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40020400 	.word	0x40020400

080011ec <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	3301      	adds	r3, #1
 8001200:	79ba      	ldrb	r2, [r7, #6]
 8001202:	3201      	adds	r2, #1
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	2b4f      	cmp	r3, #79	; 0x4f
 800120a:	dc10      	bgt.n	800122e <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	461a      	mov	r2, r3
 8001210:	0092      	lsls	r2, r2, #2
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	b2da      	uxtb	r2, r3
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	4413      	add	r3, r2
 800121c:	b2db      	uxtb	r3, r3
 800121e:	b25b      	sxtb	r3, r3
 8001220:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001224:	b25b      	sxtb	r3, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ffab 	bl	8001184 <lcd_command>
	}
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7fe ffce 	bl	80001e0 <strlen>
 8001244:	4603      	mov	r3, r0
 8001246:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 8001248:	e006      	b.n	8001258 <lcd_print+0x22>
		lcd_data(*string++);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ffb6 	bl	80011c4 <lcd_data>
	while (size--){
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1e5a      	subs	r2, r3, #1
 800125c:	60fa      	str	r2, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f3      	bne.n	800124a <lcd_print+0x14>
	}
}
 8001262:	bf00      	nop
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <lcd_println>:

void lcd_println(char string[], uint8_t row){
 800126c:	b5b0      	push	{r4, r5, r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <lcd_println+0x6c>)
 800127a:	f107 0408 	add.w	r4, r7, #8
 800127e:	461d      	mov	r5, r3
 8001280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001284:	682b      	ldr	r3, [r5, #0]
 8001286:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7fe ffa9 	bl	80001e0 <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	2b10      	cmp	r3, #16
 8001296:	dd0c      	ble.n	80012b2 <lcd_println+0x46>
		size = 16;
 8001298:	2310      	movs	r3, #16
 800129a:	61fb      	str	r3, [r7, #28]

	while (size--){
 800129c:	e009      	b.n	80012b2 <lcd_println+0x46>
		line[size] = string[size];
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	7819      	ldrb	r1, [r3, #0]
 80012a6:	f107 0208 	add.w	r2, r7, #8
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	4413      	add	r3, r2
 80012ae:	460a      	mov	r2, r1
 80012b0:	701a      	strb	r2, [r3, #0]
	while (size--){
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	1e5a      	subs	r2, r3, #1
 80012b6:	61fa      	str	r2, [r7, #28]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f0      	bne.n	800129e <lcd_println+0x32>
	}
	setCursor(0, row);
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	4619      	mov	r1, r3
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff ff93 	bl	80011ec <setCursor>
	lcd_print(line);
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ffb3 	bl	8001236 <lcd_print>
}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bdb0      	pop	{r4, r5, r7, pc}
 80012d8:	08008e08 	.word	0x08008e08

080012dc <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff40 	bl	8001184 <lcd_command>
	for (int i = 0; i<8; i++){
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e009      	b.n	800131e <writeCustomChar+0x42>
		lcd_data(map[i]);	
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff56 	bl	80011c4 <lcd_data>
	for (int i = 0; i<8; i++){
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2b07      	cmp	r3, #7
 8001322:	ddf2      	ble.n	800130a <writeCustomChar+0x2e>
	}
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 8001334:	490a      	ldr	r1, [pc, #40]	; (8001360 <loadCustomChars+0x30>)
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff ffd0 	bl	80012dc <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 800133c:	4909      	ldr	r1, [pc, #36]	; (8001364 <loadCustomChars+0x34>)
 800133e:	2002      	movs	r0, #2
 8001340:	f7ff ffcc 	bl	80012dc <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 8001344:	4908      	ldr	r1, [pc, #32]	; (8001368 <loadCustomChars+0x38>)
 8001346:	2003      	movs	r0, #3
 8001348:	f7ff ffc8 	bl	80012dc <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <loadCustomChars+0x3c>)
 800134e:	2004      	movs	r0, #4
 8001350:	f7ff ffc4 	bl	80012dc <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 8001354:	4906      	ldr	r1, [pc, #24]	; (8001370 <loadCustomChars+0x40>)
 8001356:	2005      	movs	r0, #5
 8001358:	f7ff ffc0 	bl	80012dc <writeCustomChar>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000000 	.word	0x20000000
 8001364:	20000008 	.word	0x20000008
 8001368:	20000010 	.word	0x20000010
 800136c:	20000018 	.word	0x20000018
 8001370:	20000020 	.word	0x20000020

08001374 <lcd_drawBar>:

void lcd_drawBar(int value){ //draws a bar using custom characters and spaces
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	setCursor(0,1); //bar is placed in the bottom row
 800137c:	2101      	movs	r1, #1
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff ff34 	bl	80011ec <setCursor>

	if (value>80)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b50      	cmp	r3, #80	; 0x50
 8001388:	dd01      	ble.n	800138e <lcd_drawBar+0x1a>
		value = 80;
 800138a:	2350      	movs	r3, #80	; 0x50
 800138c:	607b      	str	r3, [r7, #4]
	int quotient = value / 5;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a25      	ldr	r2, [pc, #148]	; (8001428 <lcd_drawBar+0xb4>)
 8001392:	fb82 1203 	smull	r1, r2, r2, r3
 8001396:	1052      	asrs	r2, r2, #1
 8001398:	17db      	asrs	r3, r3, #31
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	613b      	str	r3, [r7, #16]
	int modulo = value % 5;
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <lcd_drawBar+0xb4>)
 80013a2:	fb83 1302 	smull	r1, r3, r3, r2
 80013a6:	1059      	asrs	r1, r3, #1
 80013a8:	17d3      	asrs	r3, r2, #31
 80013aa:	1ac9      	subs	r1, r1, r3
 80013ac:	460b      	mov	r3, r1
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	60fb      	str	r3, [r7, #12]
	
	int i = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
	
	while (i<quotient){ //we write the required number of CHAR_5_5
 80013ba:	e007      	b.n	80013cc <lcd_drawBar+0x58>
		bar[i] = CHAR_5_5;
 80013bc:	4a1b      	ldr	r2, [pc, #108]	; (800142c <lcd_drawBar+0xb8>)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	4413      	add	r3, r2
 80013c2:	2205      	movs	r2, #5
 80013c4:	701a      	strb	r2, [r3, #0]
		i++;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
	while (i<quotient){ //we write the required number of CHAR_5_5
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbf3      	blt.n	80013bc <lcd_drawBar+0x48>
	}
	if (i < 16){
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2b0f      	cmp	r3, #15
 80013d8:	dc1b      	bgt.n	8001412 <lcd_drawBar+0x9e>
	if (modulo == 0) bar[i] = ' '; //then we either place a space
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d105      	bne.n	80013ec <lcd_drawBar+0x78>
 80013e0:	4a12      	ldr	r2, [pc, #72]	; (800142c <lcd_drawBar+0xb8>)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	4413      	add	r3, r2
 80013e6:	2220      	movs	r2, #32
 80013e8:	701a      	strb	r2, [r3, #0]
 80013ea:	e006      	b.n	80013fa <lcd_drawBar+0x86>
	else {
		bar[i] = CHAR_1_5 + modulo -1; //or the correct partial block
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	b2d9      	uxtb	r1, r3
 80013f0:	4a0e      	ldr	r2, [pc, #56]	; (800142c <lcd_drawBar+0xb8>)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	460a      	mov	r2, r1
 80013f8:	701a      	strb	r2, [r3, #0]
	}
	i++;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
	}
	while (i<16){ //and we fill the remainder with spaces
 8001400:	e007      	b.n	8001412 <lcd_drawBar+0x9e>
		bar[i] = ' ';
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <lcd_drawBar+0xb8>)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	4413      	add	r3, r2
 8001408:	2220      	movs	r2, #32
 800140a:	701a      	strb	r2, [r3, #0]
		i++;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
	while (i<16){ //and we fill the remainder with spaces
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	ddf4      	ble.n	8001402 <lcd_drawBar+0x8e>
	}
	lcd_print(bar); //finally we write to the LCD
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <lcd_drawBar+0xb8>)
 800141a:	f7ff ff0c 	bl	8001236 <lcd_print>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	66666667 	.word	0x66666667
 800142c:	20000224 	.word	0x20000224

08001430 <lcd_initialize>:

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 8001434:	2032      	movs	r0, #50	; 0x32
 8001436:	f000 fd2b 	bl	8001e90 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2104      	movs	r1, #4
 800143e:	4824      	ldr	r0, [pc, #144]	; (80014d0 <lcd_initialize+0xa0>)
 8001440:	f001 fc3c 	bl	8002cbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2102      	movs	r1, #2
 8001448:	4821      	ldr	r0, [pc, #132]	; (80014d0 <lcd_initialize+0xa0>)
 800144a:	f001 fc37 	bl	8002cbc <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 800144e:	f7ff fddb 	bl	8001008 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 8001452:	2003      	movs	r0, #3
 8001454:	f7ff fe46 	bl	80010e4 <lcd_write4>
	HAL_Delay(5);
 8001458:	2005      	movs	r0, #5
 800145a:	f000 fd19 	bl	8001e90 <HAL_Delay>
	lcd_write4(0x03);
 800145e:	2003      	movs	r0, #3
 8001460:	f7ff fe40 	bl	80010e4 <lcd_write4>
	HAL_Delay(5);
 8001464:	2005      	movs	r0, #5
 8001466:	f000 fd13 	bl	8001e90 <HAL_Delay>
	lcd_write4(0x03);
 800146a:	2003      	movs	r0, #3
 800146c:	f7ff fe3a 	bl	80010e4 <lcd_write4>
	HAL_Delay(5);
 8001470:	2005      	movs	r0, #5
 8001472:	f000 fd0d 	bl	8001e90 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 8001476:	2002      	movs	r0, #2
 8001478:	f7ff fe34 	bl	80010e4 <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 800147c:	2028      	movs	r0, #40	; 0x28
 800147e:	f7ff fe6d 	bl	800115c <lcd_write>
	HAL_Delay(5);
 8001482:	2005      	movs	r0, #5
 8001484:	f000 fd04 	bl	8001e90 <HAL_Delay>
	lcd_write(0x08); //display off;
 8001488:	2008      	movs	r0, #8
 800148a:	f7ff fe67 	bl	800115c <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 800148e:	2001      	movs	r0, #1
 8001490:	f7ff fe64 	bl	800115c <lcd_write>
	HAL_Delay(5);
 8001494:	2005      	movs	r0, #5
 8001496:	f000 fcfb 	bl	8001e90 <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 800149a:	2006      	movs	r0, #6
 800149c:	f7ff fe5e 	bl	800115c <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 80014a0:	2201      	movs	r2, #1
 80014a2:	2110      	movs	r1, #16
 80014a4:	480b      	ldr	r0, [pc, #44]	; (80014d4 <lcd_initialize+0xa4>)
 80014a6:	f001 fc09 	bl	8002cbc <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <lcd_initialize+0xa8>)
 80014ac:	220c      	movs	r2, #12
 80014ae:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <lcd_initialize+0xa8>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe51 	bl	800115c <lcd_write>
	lcd_write(0x02); //go home
 80014ba:	2002      	movs	r0, #2
 80014bc:	f7ff fe4e 	bl	800115c <lcd_write>
	HAL_Delay(2);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 fce5 	bl	8001e90 <HAL_Delay>
	loadCustomChars();
 80014c6:	f7ff ff33 	bl	8001330 <loadCustomChars>

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40020400 	.word	0x40020400
 80014d4:	40020000 	.word	0x40020000
 80014d8:	20000234 	.word	0x20000234

080014dc <lcd_backlight_ON>:

void lcd_backlight_ON(){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2110      	movs	r1, #16
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <lcd_backlight_ON+0x14>)
 80014e6:	f001 fbe9 	bl	8002cbc <HAL_GPIO_WritePin>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40020000 	.word	0x40020000
 80014f4:	00000000 	.word	0x00000000

080014f8 <HAL_ADC_ConvCpltCallback>:
//void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	//HAL_ADC_Start_IT(&hadc1);
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
  {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b098      	sub	sp, #96	; 0x60
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
   if(hadc==&hadc1){
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a25      	ldr	r2, [pc, #148]	; (8001598 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d13e      	bne.n	8001586 <HAL_ADC_ConvCpltCallback+0x8e>
 		int conversion = HAL_ADC_GetValue(&hadc1);
 8001508:	4823      	ldr	r0, [pc, #140]	; (8001598 <HAL_ADC_ConvCpltCallback+0xa0>)
 800150a:	f000 fef7 	bl	80022fc <HAL_ADC_GetValue>
 800150e:	4603      	mov	r3, r0
 8001510:	657b      	str	r3, [r7, #84]	; 0x54
 		float voltage = conversion*3.3/4096.0;
 8001512:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001514:	f7ff f80e 	bl	8000534 <__aeabi_i2d>
 8001518:	a31d      	add	r3, pc, #116	; (adr r3, 8001590 <HAL_ADC_ConvCpltCallback+0x98>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7ff f873 	bl	8000608 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001530:	f7ff f994 	bl	800085c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fb5c 	bl	8000bf8 <__aeabi_d2f>
 8001540:	4603      	mov	r3, r0
 8001542:	653b      	str	r3, [r7, #80]	; 0x50
 		char string[64];
 		int length = snprintf(string, sizeof(string),"Voltage: %.3f", voltage);
 8001544:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001546:	f7ff f807 	bl	8000558 <__aeabi_f2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	f107 000c 	add.w	r0, r7, #12
 8001552:	e9cd 2300 	strd	r2, r3, [sp]
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001558:	2140      	movs	r1, #64	; 0x40
 800155a:	f003 fe25 	bl	80051a8 <sniprintf>
 800155e:	64f8      	str	r0, [r7, #76]	; 0x4c
 		lcd_println(string,0);
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fe80 	bl	800126c <lcd_println>
 		lcd_drawBar(conversion*80/4096);
 800156c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	2b00      	cmp	r3, #0
 8001578:	da01      	bge.n	800157e <HAL_ADC_ConvCpltCallback+0x86>
 800157a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800157e:	131b      	asrs	r3, r3, #12
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fef7 	bl	8001374 <lcd_drawBar>
 		//HAL_TIM_Base_Start_IT(&htim2);
   }
  }
 8001586:	bf00      	nop
 8001588:	3758      	adds	r7, #88	; 0x58
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	66666666 	.word	0x66666666
 8001594:	400a6666 	.word	0x400a6666
 8001598:	20000238 	.word	0x20000238
 800159c:	40b00000 	.word	0x40b00000
 80015a0:	08008e1c 	.word	0x08008e1c

080015a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a8:	f000 fc00 	bl	8001dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ac:	f000 f81a 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b0:	f000 f94e 	bl	8001850 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015b4:	f000 f922 	bl	80017fc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015b8:	f000 f880 	bl	80016bc <MX_ADC1_Init>
  MX_TIM2_Init();
 80015bc:	f000 f8d0 	bl	8001760 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	lcd_initialize();					// LCD initialization, turning it on and clear it
 80015c0:	f7ff ff36 	bl	8001430 <lcd_initialize>
	lcd_backlight_ON();
 80015c4:	f7ff ff8a 	bl	80014dc <lcd_backlight_ON>
	lcd_clear();
 80015c8:	f7ff fdf0 	bl	80011ac <lcd_clear>
	HAL_TIM_Base_Start_IT(&htim2);
 80015cc:	4803      	ldr	r0, [pc, #12]	; (80015dc <main+0x38>)
 80015ce:	f002 f877 	bl	80036c0 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_IT(&hadc1);
 80015d2:	4803      	ldr	r0, [pc, #12]	; (80015e0 <main+0x3c>)
 80015d4:	f000 fcc4 	bl	8001f60 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <main+0x34>
 80015da:	bf00      	nop
 80015dc:	20000280 	.word	0x20000280
 80015e0:	20000238 	.word	0x20000238

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	; 0x50
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	2230      	movs	r2, #48	; 0x30
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 ff50 	bl	8004498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <SystemClock_Config+0xd0>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a28      	ldr	r2, [pc, #160]	; (80016b4 <SystemClock_Config+0xd0>)
 8001612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
 8001618:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <SystemClock_Config+0xd0>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <SystemClock_Config+0xd4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001630:	4a21      	ldr	r2, [pc, #132]	; (80016b8 <SystemClock_Config+0xd4>)
 8001632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <SystemClock_Config+0xd4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001644:	2302      	movs	r3, #2
 8001646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001648:	2301      	movs	r3, #1
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800164c:	2310      	movs	r3, #16
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001650:	2302      	movs	r3, #2
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001654:	2300      	movs	r3, #0
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001658:	2310      	movs	r3, #16
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800165c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001662:	2304      	movs	r3, #4
 8001664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001666:	2307      	movs	r3, #7
 8001668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	4618      	mov	r0, r3
 8001670:	f001 fb3e 	bl	8002cf0 <HAL_RCC_OscConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800167a:	f000 f96f 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167e:	230f      	movs	r3, #15
 8001680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001682:	2302      	movs	r3, #2
 8001684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800168a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2102      	movs	r1, #2
 800169a:	4618      	mov	r0, r3
 800169c:	f001 fda0 	bl	80031e0 <HAL_RCC_ClockConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016a6:	f000 f959 	bl	800195c <Error_Handler>
  }
}
 80016aa:	bf00      	nop
 80016ac:	3750      	adds	r7, #80	; 0x50
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000

080016bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016c2:	463b      	mov	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <MX_ADC1_Init+0x9c>)
 80016d0:	4a22      	ldr	r2, [pc, #136]	; (800175c <MX_ADC1_Init+0xa0>)
 80016d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016d4:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_ADC1_Init+0x9c>)
 80016d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_ADC1_Init+0x9c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_ADC1_Init+0x9c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <MX_ADC1_Init+0x9c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_ADC1_Init+0x9c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_ADC1_Init+0x9c>)
 80016f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_ADC1_Init+0x9c>)
 8001700:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_ADC1_Init+0x9c>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_ADC1_Init+0x9c>)
 800170e:	2201      	movs	r2, #1
 8001710:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_ADC1_Init+0x9c>)
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_ADC1_Init+0x9c>)
 800171c:	2201      	movs	r2, #1
 800171e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <MX_ADC1_Init+0x9c>)
 8001722:	f000 fbd9 	bl	8001ed8 <HAL_ADC_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800172c:	f000 f916 	bl	800195c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001730:	2301      	movs	r3, #1
 8001732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001734:	2301      	movs	r3, #1
 8001736:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001738:	2307      	movs	r3, #7
 800173a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173c:	463b      	mov	r3, r7
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_ADC1_Init+0x9c>)
 8001742:	f000 fdfd 	bl	8002340 <HAL_ADC_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800174c:	f000 f906 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000238 	.word	0x20000238
 800175c:	40012000 	.word	0x40012000

08001760 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001774:	463b      	mov	r3, r7
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_TIM2_Init+0x98>)
 800177e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001782:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_TIM2_Init+0x98>)
 8001786:	f240 3247 	movw	r2, #839	; 0x347
 800178a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_TIM2_Init+0x98>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_TIM2_Init+0x98>)
 8001794:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001798:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_TIM2_Init+0x98>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_TIM2_Init+0x98>)
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a6:	4814      	ldr	r0, [pc, #80]	; (80017f8 <MX_TIM2_Init+0x98>)
 80017a8:	f001 ff3a 	bl	8003620 <HAL_TIM_Base_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017b2:	f000 f8d3 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4619      	mov	r1, r3
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <MX_TIM2_Init+0x98>)
 80017c4:	f002 f8e6 	bl	8003994 <HAL_TIM_ConfigClockSource>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017ce:	f000 f8c5 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017d2:	2320      	movs	r3, #32
 80017d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017da:	463b      	mov	r3, r7
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MX_TIM2_Init+0x98>)
 80017e0:	f002 faec 	bl	8003dbc <HAL_TIMEx_MasterConfigSynchronization>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017ea:	f000 f8b7 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000280 	.word	0x20000280

080017fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <MX_USART2_UART_Init+0x50>)
 8001804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 8001808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800180c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 8001822:	220c      	movs	r2, #12
 8001824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 8001834:	f002 fb44 	bl	8003ec0 <HAL_UART_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800183e:	f000 f88d 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200002c8 	.word	0x200002c8
 800184c:	40004400 	.word	0x40004400

08001850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b38      	ldr	r3, [pc, #224]	; (800194c <MX_GPIO_Init+0xfc>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a37      	ldr	r2, [pc, #220]	; (800194c <MX_GPIO_Init+0xfc>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b35      	ldr	r3, [pc, #212]	; (800194c <MX_GPIO_Init+0xfc>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <MX_GPIO_Init+0xfc>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a30      	ldr	r2, [pc, #192]	; (800194c <MX_GPIO_Init+0xfc>)
 800188c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b2e      	ldr	r3, [pc, #184]	; (800194c <MX_GPIO_Init+0xfc>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b2a      	ldr	r3, [pc, #168]	; (800194c <MX_GPIO_Init+0xfc>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a29      	ldr	r2, [pc, #164]	; (800194c <MX_GPIO_Init+0xfc>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b27      	ldr	r3, [pc, #156]	; (800194c <MX_GPIO_Init+0xfc>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b23      	ldr	r3, [pc, #140]	; (800194c <MX_GPIO_Init+0xfc>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a22      	ldr	r2, [pc, #136]	; (800194c <MX_GPIO_Init+0xfc>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <MX_GPIO_Init+0xfc>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2130      	movs	r1, #48	; 0x30
 80018da:	481d      	ldr	r0, [pc, #116]	; (8001950 <MX_GPIO_Init+0x100>)
 80018dc:	f001 f9ee 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80018e0:	2200      	movs	r2, #0
 80018e2:	f24f 0106 	movw	r1, #61446	; 0xf006
 80018e6:	481b      	ldr	r0, [pc, #108]	; (8001954 <MX_GPIO_Init+0x104>)
 80018e8:	f001 f9e8 	bl	8002cbc <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	4815      	ldr	r0, [pc, #84]	; (8001958 <MX_GPIO_Init+0x108>)
 8001904:	f001 f856 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001908:	2330      	movs	r3, #48	; 0x30
 800190a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	480c      	ldr	r0, [pc, #48]	; (8001950 <MX_GPIO_Init+0x100>)
 8001920:	f001 f848 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001924:	f24f 0306 	movw	r3, #61446	; 0xf006
 8001928:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_GPIO_Init+0x104>)
 800193e:	f001 f839 	bl	80029b4 <HAL_GPIO_Init>

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	; 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001964:	e7fe      	b.n	8001964 <Error_Handler+0x8>
	...

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_MspInit+0x4c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <HAL_MspInit+0x4c>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_MspInit+0x4c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_MspInit+0x4c>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_MspInit+0x4c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019a6:	2007      	movs	r0, #7
 80019a8:	f000 ffc2 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800

080019b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1b      	ldr	r2, [pc, #108]	; (8001a44 <HAL_ADC_MspInit+0x8c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d12f      	bne.n	8001a3a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_ADC_MspInit+0x90>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <HAL_ADC_MspInit+0x90>)
 80019e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_ADC_MspInit+0x90>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_ADC_MspInit+0x90>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_ADC_MspInit+0x90>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_ADC_MspInit+0x90>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a12:	2302      	movs	r3, #2
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a16:	2303      	movs	r3, #3
 8001a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	4809      	ldr	r0, [pc, #36]	; (8001a4c <HAL_ADC_MspInit+0x94>)
 8001a26:	f000 ffc5 	bl	80029b4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2012      	movs	r0, #18
 8001a30:	f000 ff89 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a34:	2012      	movs	r0, #18
 8001a36:	f000 ffa2 	bl	800297e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3728      	adds	r7, #40	; 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40012000 	.word	0x40012000
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020000 	.word	0x40020000

08001a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a60:	d115      	bne.n	8001a8e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_TIM_Base_MspInit+0x48>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <HAL_TIM_Base_MspInit+0x48>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_TIM_Base_MspInit+0x48>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	201c      	movs	r0, #28
 8001a84:	f000 ff5f 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a88:	201c      	movs	r0, #28
 8001a8a:	f000 ff78 	bl	800297e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800

08001a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <HAL_UART_MspInit+0x84>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d12b      	bne.n	8001b16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_UART_MspInit+0x88>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <HAL_UART_MspInit+0x88>)
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_UART_MspInit+0x88>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_UART_MspInit+0x88>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a10      	ldr	r2, [pc, #64]	; (8001b24 <HAL_UART_MspInit+0x88>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_UART_MspInit+0x88>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001af6:	230c      	movs	r3, #12
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b06:	2307      	movs	r3, #7
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <HAL_UART_MspInit+0x8c>)
 8001b12:	f000 ff4f 	bl	80029b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b16:	bf00      	nop
 8001b18:	3728      	adds	r7, #40	; 0x28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40004400 	.word	0x40004400
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020000 	.word	0x40020000

08001b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <NMI_Handler+0x4>

08001b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <HardFault_Handler+0x4>

08001b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <MemManage_Handler+0x4>

08001b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <BusFault_Handler+0x4>

08001b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <UsageFault_Handler+0x4>

08001b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b78:	f000 f96a 	bl	8001e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <ADC_IRQHandler+0x10>)
 8001b86:	f000 faa9 	bl	80020dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000238 	.word	0x20000238

08001b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <TIM2_IRQHandler+0x10>)
 8001b9a:	f001 fdf3 	bl	8003784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000280 	.word	0x20000280

08001ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_kill>:

int _kill(int pid, int sig)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bc2:	f002 fc3f 	bl	8004444 <__errno>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2216      	movs	r2, #22
 8001bca:	601a      	str	r2, [r3, #0]
	return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_exit>:

void _exit (int status)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ffe7 	bl	8001bb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bea:	e7fe      	b.n	8001bea <_exit+0x12>

08001bec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e00a      	b.n	8001c14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bfe:	f3af 8000 	nop.w
 8001c02:	4601      	mov	r1, r0
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	60ba      	str	r2, [r7, #8]
 8001c0a:	b2ca      	uxtb	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dbf0      	blt.n	8001bfe <_read+0x12>
	}

return len;
 8001c1c:	687b      	ldr	r3, [r7, #4]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e009      	b.n	8001c4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	60ba      	str	r2, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbf1      	blt.n	8001c38 <_write+0x12>
	}
	return len;
 8001c54:	687b      	ldr	r3, [r7, #4]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_close>:

int _close(int file)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
	return -1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c86:	605a      	str	r2, [r3, #4]
	return 0;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <_isatty>:

int _isatty(int file)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <_sbrk+0x5c>)
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <_sbrk+0x60>)
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <_sbrk+0x64>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <_sbrk+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d207      	bcs.n	8001d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf8:	f002 fba4 	bl	8004444 <__errno>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	220c      	movs	r2, #12
 8001d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	e009      	b.n	8001d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <_sbrk+0x64>)
 8001d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20018000 	.word	0x20018000
 8001d28:	00000400 	.word	0x00000400
 8001d2c:	2000030c 	.word	0x2000030c
 8001d30:	20000328 	.word	0x20000328

08001d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <SystemInit+0x20>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <SystemInit+0x20>)
 8001d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d5c:	480d      	ldr	r0, [pc, #52]	; (8001d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d5e:	490e      	ldr	r1, [pc, #56]	; (8001d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d74:	4c0b      	ldr	r4, [pc, #44]	; (8001da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d82:	f7ff ffd7 	bl	8001d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d86:	f002 fb63 	bl	8004450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d8a:	f7ff fc0b 	bl	80015a4 <main>
  bx  lr    
 8001d8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001d9c:	080092fc 	.word	0x080092fc
  ldr r2, =_sbss
 8001da0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001da4:	20000324 	.word	0x20000324

08001da8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <DMA1_Stream0_IRQHandler>
	...

08001dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <HAL_Init+0x40>)
 8001db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_Init+0x40>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <HAL_Init+0x40>)
 8001dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_Init+0x40>)
 8001dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 fdab 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f000 f808 	bl	8001df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de0:	f7ff fdc2 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023c00 	.word	0x40023c00

08001df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x54>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x58>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fdc3 	bl	800299a <HAL_SYSTICK_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00e      	b.n	8001e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d80a      	bhi.n	8001e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e24:	2200      	movs	r2, #0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f000 fd8b 	bl	8002946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <HAL_InitTick+0x5c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000028 	.word	0x20000028
 8001e48:	20000030 	.word	0x20000030
 8001e4c:	2000002c 	.word	0x2000002c

08001e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_IncTick+0x20>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_IncTick+0x24>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_IncTick+0x24>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000030 	.word	0x20000030
 8001e74:	20000310 	.word	0x20000310

08001e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_GetTick+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000310 	.word	0x20000310

08001e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff ffee 	bl	8001e78 <HAL_GetTick>
 8001e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea8:	d005      	beq.n	8001eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_Delay+0x44>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eb6:	bf00      	nop
 8001eb8:	f7ff ffde 	bl	8001e78 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d8f7      	bhi.n	8001eb8 <HAL_Delay+0x28>
  {
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000030 	.word	0x20000030

08001ed8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e033      	b.n	8001f56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d109      	bne.n	8001f0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff fd5e 	bl	80019b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d118      	bne.n	8001f48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f1e:	f023 0302 	bic.w	r3, r3, #2
 8001f22:	f043 0202 	orr.w	r2, r3, #2
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fb2a 	bl	8002584 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f023 0303 	bic.w	r3, r3, #3
 8001f3e:	f043 0201 	orr.w	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40
 8001f46:	e001      	b.n	8001f4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_Start_IT+0x1a>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e0a1      	b.n	80020be <HAL_ADC_Start_IT+0x15e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d018      	beq.n	8001fc2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_ADC_Start_IT+0x16c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a4a      	ldr	r2, [pc, #296]	; (80020d0 <HAL_ADC_Start_IT+0x170>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	0c9a      	lsrs	r2, r3, #18
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fb4:	e002      	b.n	8001fbc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f9      	bne.n	8001fb6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d169      	bne.n	80020a4 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d007      	beq.n	8002002 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ffa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800200e:	d106      	bne.n	800201e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	f023 0206 	bic.w	r2, r3, #6
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	645a      	str	r2, [r3, #68]	; 0x44
 800201c:	e002      	b.n	8002024 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800202c:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <HAL_ADC_Start_IT+0x174>)
 800202e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002038:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002048:	f043 0320 	orr.w	r3, r3, #32
 800204c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d129      	bne.n	80020bc <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	e020      	b.n	80020bc <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <HAL_ADC_Start_IT+0x178>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d11b      	bne.n	80020bc <HAL_ADC_Start_IT+0x15c>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d114      	bne.n	80020bc <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	e00b      	b.n	80020bc <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f043 0210 	orr.w	r2, r3, #16
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b4:	f043 0201 	orr.w	r2, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000028 	.word	0x20000028
 80020d0:	431bde83 	.word	0x431bde83
 80020d4:	40012300 	.word	0x40012300
 80020d8:	40012000 	.word	0x40012000

080020dc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d049      	beq.n	80021a6 <HAL_ADC_IRQHandler+0xca>
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d046      	beq.n	80021a6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d12b      	bne.n	8002196 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002142:	2b00      	cmp	r3, #0
 8002144:	d127      	bne.n	8002196 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002150:	2b00      	cmp	r3, #0
 8002152:	d006      	beq.n	8002162 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800215e:	2b00      	cmp	r3, #0
 8002160:	d119      	bne.n	8002196 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0220 	bic.w	r2, r2, #32
 8002170:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d105      	bne.n	8002196 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff f9ae 	bl	80014f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0212 	mvn.w	r2, #18
 80021a4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d057      	beq.n	800226c <HAL_ADC_IRQHandler+0x190>
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d054      	beq.n	800226c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d105      	bne.n	80021da <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d139      	bne.n	800225c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002200:	2b00      	cmp	r3, #0
 8002202:	d12b      	bne.n	800225c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800220e:	2b00      	cmp	r3, #0
 8002210:	d124      	bne.n	800225c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800221c:	2b00      	cmp	r3, #0
 800221e:	d11d      	bne.n	800225c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002224:	2b00      	cmp	r3, #0
 8002226:	d119      	bne.n	800225c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002236:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d105      	bne.n	800225c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f043 0201 	orr.w	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fa8d 	bl	800277c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f06f 020c 	mvn.w	r2, #12
 800226a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d017      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x1d6>
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d014      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10d      	bne.n	80022b2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f837 	bl	8002316 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0201 	mvn.w	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022c0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d015      	beq.n	80022f4 <HAL_ADC_IRQHandler+0x218>
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d012      	beq.n	80022f4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	f043 0202 	orr.w	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f06f 0220 	mvn.w	r2, #32
 80022e2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f820 	bl	800232a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f06f 0220 	mvn.w	r2, #32
 80022f2:	601a      	str	r2, [r3, #0]
  }
}
 80022f4:	bf00      	nop
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x1c>
 8002358:	2302      	movs	r3, #2
 800235a:	e105      	b.n	8002568 <HAL_ADC_ConfigChannel+0x228>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b09      	cmp	r3, #9
 800236a:	d925      	bls.n	80023b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68d9      	ldr	r1, [r3, #12]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	3b1e      	subs	r3, #30
 8002382:	2207      	movs	r2, #7
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43da      	mvns	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	400a      	ands	r2, r1
 8002390:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68d9      	ldr	r1, [r3, #12]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	4603      	mov	r3, r0
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4403      	add	r3, r0
 80023aa:	3b1e      	subs	r3, #30
 80023ac:	409a      	lsls	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	e022      	b.n	80023fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6919      	ldr	r1, [r3, #16]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	2207      	movs	r2, #7
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	400a      	ands	r2, r1
 80023da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6919      	ldr	r1, [r3, #16]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	4618      	mov	r0, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4403      	add	r3, r0
 80023f4:	409a      	lsls	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b06      	cmp	r3, #6
 8002404:	d824      	bhi.n	8002450 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	3b05      	subs	r3, #5
 8002418:	221f      	movs	r2, #31
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	400a      	ands	r2, r1
 8002426:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	3b05      	subs	r3, #5
 8002442:	fa00 f203 	lsl.w	r2, r0, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	635a      	str	r2, [r3, #52]	; 0x34
 800244e:	e04c      	b.n	80024ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d824      	bhi.n	80024a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3b23      	subs	r3, #35	; 0x23
 800246a:	221f      	movs	r2, #31
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43da      	mvns	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	400a      	ands	r2, r1
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	4618      	mov	r0, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	3b23      	subs	r3, #35	; 0x23
 8002494:	fa00 f203 	lsl.w	r2, r0, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
 80024a0:	e023      	b.n	80024ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	3b41      	subs	r3, #65	; 0x41
 80024b4:	221f      	movs	r2, #31
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	400a      	ands	r2, r1
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	3b41      	subs	r3, #65	; 0x41
 80024de:	fa00 f203 	lsl.w	r2, r0, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ea:	4b22      	ldr	r3, [pc, #136]	; (8002574 <HAL_ADC_ConfigChannel+0x234>)
 80024ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a21      	ldr	r2, [pc, #132]	; (8002578 <HAL_ADC_ConfigChannel+0x238>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d109      	bne.n	800250c <HAL_ADC_ConfigChannel+0x1cc>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b12      	cmp	r3, #18
 80024fe:	d105      	bne.n	800250c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a19      	ldr	r2, [pc, #100]	; (8002578 <HAL_ADC_ConfigChannel+0x238>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d123      	bne.n	800255e <HAL_ADC_ConfigChannel+0x21e>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b10      	cmp	r3, #16
 800251c:	d003      	beq.n	8002526 <HAL_ADC_ConfigChannel+0x1e6>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b11      	cmp	r3, #17
 8002524:	d11b      	bne.n	800255e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b10      	cmp	r3, #16
 8002538:	d111      	bne.n	800255e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_ADC_ConfigChannel+0x23c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a10      	ldr	r2, [pc, #64]	; (8002580 <HAL_ADC_ConfigChannel+0x240>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	0c9a      	lsrs	r2, r3, #18
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002550:	e002      	b.n	8002558 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	3b01      	subs	r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f9      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40012300 	.word	0x40012300
 8002578:	40012000 	.word	0x40012000
 800257c:	20000028 	.word	0x20000028
 8002580:	431bde83 	.word	0x431bde83

08002584 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800258c:	4b79      	ldr	r3, [pc, #484]	; (8002774 <ADC_Init+0x1f0>)
 800258e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	021a      	lsls	r2, r3, #8
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6899      	ldr	r1, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	4a58      	ldr	r2, [pc, #352]	; (8002778 <ADC_Init+0x1f4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d022      	beq.n	8002662 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800262a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6899      	ldr	r1, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800264c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	e00f      	b.n	8002682 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002680:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0202 	bic.w	r2, r2, #2
 8002690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6899      	ldr	r1, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	7e1b      	ldrb	r3, [r3, #24]
 800269c:	005a      	lsls	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01b      	beq.n	80026e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6859      	ldr	r1, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	3b01      	subs	r3, #1
 80026dc:	035a      	lsls	r2, r3, #13
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	e007      	b.n	80026f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	3b01      	subs	r3, #1
 8002714:	051a      	lsls	r2, r3, #20
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800272c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800273a:	025a      	lsls	r2, r3, #9
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	029a      	lsls	r2, r3, #10
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40012300 	.word	0x40012300
 8002778:	0f000001 	.word	0x0f000001

0800277c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027ac:	4013      	ands	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027c2:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	60d3      	str	r3, [r2, #12]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <__NVIC_GetPriorityGrouping+0x18>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	f003 0307 	and.w	r3, r3, #7
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	db0b      	blt.n	800281e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	f003 021f 	and.w	r2, r3, #31
 800280c:	4907      	ldr	r1, [pc, #28]	; (800282c <__NVIC_EnableIRQ+0x38>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2001      	movs	r0, #1
 8002816:	fa00 f202 	lsl.w	r2, r0, r2
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000e100 	.word	0xe000e100

08002830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	2b00      	cmp	r3, #0
 8002842:	db0a      	blt.n	800285a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	490c      	ldr	r1, [pc, #48]	; (800287c <__NVIC_SetPriority+0x4c>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	440b      	add	r3, r1
 8002854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002858:	e00a      	b.n	8002870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4908      	ldr	r1, [pc, #32]	; (8002880 <__NVIC_SetPriority+0x50>)
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	3b04      	subs	r3, #4
 8002868:	0112      	lsls	r2, r2, #4
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	440b      	add	r3, r1
 800286e:	761a      	strb	r2, [r3, #24]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000e100 	.word	0xe000e100
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f1c3 0307 	rsb	r3, r3, #7
 800289e:	2b04      	cmp	r3, #4
 80028a0:	bf28      	it	cs
 80028a2:	2304      	movcs	r3, #4
 80028a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d902      	bls.n	80028b4 <NVIC_EncodePriority+0x30>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3b03      	subs	r3, #3
 80028b2:	e000      	b.n	80028b6 <NVIC_EncodePriority+0x32>
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	401a      	ands	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	43d9      	mvns	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	4313      	orrs	r3, r2
         );
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	d301      	bcc.n	8002902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fe:	2301      	movs	r3, #1
 8002900:	e00f      	b.n	8002922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <SysTick_Config+0x40>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290a:	210f      	movs	r1, #15
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	f7ff ff8e 	bl	8002830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SysTick_Config+0x40>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <SysTick_Config+0x40>)
 800291c:	2207      	movs	r2, #7
 800291e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010

08002930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff29 	bl	8002790 <__NVIC_SetPriorityGrouping>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002958:	f7ff ff3e 	bl	80027d8 <__NVIC_GetPriorityGrouping>
 800295c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f7ff ff8e 	bl	8002884 <NVIC_EncodePriority>
 8002968:	4602      	mov	r2, r0
 800296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff5d 	bl	8002830 <__NVIC_SetPriority>
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff31 	bl	80027f4 <__NVIC_EnableIRQ>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ffa2 	bl	80028ec <SysTick_Config>
 80029a8:	4603      	mov	r3, r0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	e159      	b.n	8002c84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	f040 8148 	bne.w	8002c7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d005      	beq.n	8002a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d130      	bne.n	8002a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2203      	movs	r2, #3
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 0201 	and.w	r2, r3, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d017      	beq.n	8002aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d123      	bne.n	8002af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	08da      	lsrs	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3208      	adds	r2, #8
 8002ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	220f      	movs	r2, #15
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	08da      	lsrs	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3208      	adds	r2, #8
 8002af2:	69b9      	ldr	r1, [r7, #24]
 8002af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0203 	and.w	r2, r3, #3
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80a2 	beq.w	8002c7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	4b57      	ldr	r3, [pc, #348]	; (8002c9c <HAL_GPIO_Init+0x2e8>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	4a56      	ldr	r2, [pc, #344]	; (8002c9c <HAL_GPIO_Init+0x2e8>)
 8002b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b48:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4a:	4b54      	ldr	r3, [pc, #336]	; (8002c9c <HAL_GPIO_Init+0x2e8>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b56:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a49      	ldr	r2, [pc, #292]	; (8002ca4 <HAL_GPIO_Init+0x2f0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d019      	beq.n	8002bb6 <HAL_GPIO_Init+0x202>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a48      	ldr	r2, [pc, #288]	; (8002ca8 <HAL_GPIO_Init+0x2f4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_GPIO_Init+0x1fe>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a47      	ldr	r2, [pc, #284]	; (8002cac <HAL_GPIO_Init+0x2f8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00d      	beq.n	8002bae <HAL_GPIO_Init+0x1fa>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a46      	ldr	r2, [pc, #280]	; (8002cb0 <HAL_GPIO_Init+0x2fc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <HAL_GPIO_Init+0x1f6>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a45      	ldr	r2, [pc, #276]	; (8002cb4 <HAL_GPIO_Init+0x300>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_GPIO_Init+0x1f2>
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002ba6:	2307      	movs	r3, #7
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e004      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	f002 0203 	and.w	r2, r2, #3
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc8:	4935      	ldr	r1, [pc, #212]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bfa:	4a2f      	ldr	r2, [pc, #188]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c00:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c24:	4a24      	ldr	r2, [pc, #144]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c78:	4a0f      	ldr	r2, [pc, #60]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	f67f aea2 	bls.w	80029d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40013800 	.word	0x40013800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40020800 	.word	0x40020800
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ccc:	787b      	ldrb	r3, [r7, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	041a      	lsls	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e267      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d075      	beq.n	8002dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0e:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d00c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1a:	4b85      	ldr	r3, [pc, #532]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d112      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b82      	ldr	r3, [pc, #520]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	4b7e      	ldr	r3, [pc, #504]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d05b      	beq.n	8002df8 <HAL_RCC_OscConfig+0x108>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d157      	bne.n	8002df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e242      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d54:	d106      	bne.n	8002d64 <HAL_RCC_OscConfig+0x74>
 8002d56:	4b76      	ldr	r3, [pc, #472]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a75      	ldr	r2, [pc, #468]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e01d      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x98>
 8002d6e:	4b70      	ldr	r3, [pc, #448]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a6f      	ldr	r2, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b6d      	ldr	r3, [pc, #436]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6c      	ldr	r2, [pc, #432]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d88:	4b69      	ldr	r3, [pc, #420]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a68      	ldr	r2, [pc, #416]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4b66      	ldr	r3, [pc, #408]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a65      	ldr	r2, [pc, #404]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7ff f866 	bl	8001e78 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db0:	f7ff f862 	bl	8001e78 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e207      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b5b      	ldr	r3, [pc, #364]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0xc0>
 8002dce:	e014      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7ff f852 	bl	8001e78 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7ff f84e 	bl	8001e78 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1f3      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xe8>
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d063      	beq.n	8002ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e06:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e12:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d11c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b44      	ldr	r3, [pc, #272]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	4b41      	ldr	r3, [pc, #260]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e1c7      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4937      	ldr	r1, [pc, #220]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	e03a      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e60:	4b34      	ldr	r3, [pc, #208]	; (8002f34 <HAL_RCC_OscConfig+0x244>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7ff f807 	bl	8001e78 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7ff f803 	bl	8001e78 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e1a8      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4925      	ldr	r1, [pc, #148]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
 8002ea0:	e015      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x244>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe ffe6 	bl	8001e78 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7fe ffe2 	bl	8001e78 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e187      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d036      	beq.n	8002f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_RCC_OscConfig+0x248>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7fe ffc6 	bl	8001e78 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7fe ffc2 	bl	8001e78 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e167      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x200>
 8002f0e:	e01b      	b.n	8002f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_RCC_OscConfig+0x248>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7fe ffaf 	bl	8001e78 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	e00e      	b.n	8002f3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7fe ffab 	bl	8001e78 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d907      	bls.n	8002f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e150      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
 8002f30:	40023800 	.word	0x40023800
 8002f34:	42470000 	.word	0x42470000
 8002f38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	4b88      	ldr	r3, [pc, #544]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ea      	bne.n	8002f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8097 	beq.w	8003084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5a:	4b81      	ldr	r3, [pc, #516]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10f      	bne.n	8002f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	4b7d      	ldr	r3, [pc, #500]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a7c      	ldr	r2, [pc, #496]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
 8002f76:	4b7a      	ldr	r3, [pc, #488]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b77      	ldr	r3, [pc, #476]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b74      	ldr	r3, [pc, #464]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a73      	ldr	r2, [pc, #460]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe ff6b 	bl	8001e78 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7fe ff67 	bl	8001e78 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e10c      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x2ea>
 8002fcc:	4b64      	ldr	r3, [pc, #400]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a63      	ldr	r2, [pc, #396]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	e01c      	b.n	8003014 <HAL_RCC_OscConfig+0x324>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x30c>
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a5e      	ldr	r2, [pc, #376]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70
 8002fee:	4b5c      	ldr	r3, [pc, #368]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	4a5b      	ldr	r2, [pc, #364]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffa:	e00b      	b.n	8003014 <HAL_RCC_OscConfig+0x324>
 8002ffc:	4b58      	ldr	r3, [pc, #352]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	4a57      	ldr	r2, [pc, #348]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	6713      	str	r3, [r2, #112]	; 0x70
 8003008:	4b55      	ldr	r3, [pc, #340]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a54      	ldr	r2, [pc, #336]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 0304 	bic.w	r3, r3, #4
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d015      	beq.n	8003048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7fe ff2c 	bl	8001e78 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003022:	e00a      	b.n	800303a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fe ff28 	bl	8001e78 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e0cb      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	4b49      	ldr	r3, [pc, #292]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ee      	beq.n	8003024 <HAL_RCC_OscConfig+0x334>
 8003046:	e014      	b.n	8003072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003048:	f7fe ff16 	bl	8001e78 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fe ff12 	bl	8001e78 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0b5      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	4b3e      	ldr	r3, [pc, #248]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1ee      	bne.n	8003050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003078:	4b39      	ldr	r3, [pc, #228]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	4a38      	ldr	r2, [pc, #224]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800307e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003082:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a1 	beq.w	80031d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800308e:	4b34      	ldr	r3, [pc, #208]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b08      	cmp	r3, #8
 8003098:	d05c      	beq.n	8003154 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d141      	bne.n	8003126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fe fee6 	bl	8001e78 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe fee2 	bl	8001e78 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e087      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	019b      	lsls	r3, r3, #6
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	3b01      	subs	r3, #1
 80030e8:	041b      	lsls	r3, r3, #16
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	491b      	ldr	r1, [pc, #108]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe febb 	bl	8001e78 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003106:	f7fe feb7 	bl	8001e78 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e05c      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x416>
 8003124:	e054      	b.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fe fea4 	bl	8001e78 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe fea0 	bl	8001e78 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e045      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x444>
 8003152:	e03d      	b.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d107      	bne.n	800316c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e038      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
 8003160:	40023800 	.word	0x40023800
 8003164:	40007000 	.word	0x40007000
 8003168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_RCC_OscConfig+0x4ec>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d028      	beq.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d121      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d11a      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800319c:	4013      	ands	r3, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d111      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	3b01      	subs	r3, #1
 80031b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800

080031e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0cc      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b68      	ldr	r3, [pc, #416]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d90c      	bls.n	800321c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a58      	ldr	r2, [pc, #352]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d044      	beq.n	8003300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d119      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d003      	beq.n	800329e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	2b03      	cmp	r3, #3
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329e:	4b3f      	ldr	r3, [pc, #252]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ae:	4b3b      	ldr	r3, [pc, #236]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e067      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4934      	ldr	r1, [pc, #208]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d0:	f7fe fdd2 	bl	8001e78 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fe fdce 	bl	8001e78 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e04f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d20c      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490a      	ldr	r1, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fd32 	bl	8001df0 <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023c00 	.word	0x40023c00
 800339c:	40023800 	.word	0x40023800
 80033a0:	08008e2c 	.word	0x08008e2c
 80033a4:	20000028 	.word	0x20000028
 80033a8:	2000002c 	.word	0x2000002c

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b0:	b094      	sub	sp, #80	; 0x50
 80033b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	647b      	str	r3, [r7, #68]	; 0x44
 80033b8:	2300      	movs	r3, #0
 80033ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033bc:	2300      	movs	r3, #0
 80033be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c4:	4b79      	ldr	r3, [pc, #484]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d00d      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x40>
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	f200 80e1 	bhi.w	8003598 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x34>
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033de:	e0db      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4b73      	ldr	r3, [pc, #460]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033e4:	e0db      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e6:	4b73      	ldr	r3, [pc, #460]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80033e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033ea:	e0d8      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ec:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f6:	4b6d      	ldr	r3, [pc, #436]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d063      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003402:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	099b      	lsrs	r3, r3, #6
 8003408:	2200      	movs	r2, #0
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38
 800340c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003414:	633b      	str	r3, [r7, #48]	; 0x30
 8003416:	2300      	movs	r3, #0
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
 800341a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800341e:	4622      	mov	r2, r4
 8003420:	462b      	mov	r3, r5
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	0159      	lsls	r1, r3, #5
 800342c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003430:	0150      	lsls	r0, r2, #5
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4621      	mov	r1, r4
 8003438:	1a51      	subs	r1, r2, r1
 800343a:	6139      	str	r1, [r7, #16]
 800343c:	4629      	mov	r1, r5
 800343e:	eb63 0301 	sbc.w	r3, r3, r1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003450:	4659      	mov	r1, fp
 8003452:	018b      	lsls	r3, r1, #6
 8003454:	4651      	mov	r1, sl
 8003456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800345a:	4651      	mov	r1, sl
 800345c:	018a      	lsls	r2, r1, #6
 800345e:	4651      	mov	r1, sl
 8003460:	ebb2 0801 	subs.w	r8, r2, r1
 8003464:	4659      	mov	r1, fp
 8003466:	eb63 0901 	sbc.w	r9, r3, r1
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800347a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800347e:	4690      	mov	r8, r2
 8003480:	4699      	mov	r9, r3
 8003482:	4623      	mov	r3, r4
 8003484:	eb18 0303 	adds.w	r3, r8, r3
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	462b      	mov	r3, r5
 800348c:	eb49 0303 	adc.w	r3, r9, r3
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800349e:	4629      	mov	r1, r5
 80034a0:	024b      	lsls	r3, r1, #9
 80034a2:	4621      	mov	r1, r4
 80034a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034a8:	4621      	mov	r1, r4
 80034aa:	024a      	lsls	r2, r1, #9
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b2:	2200      	movs	r2, #0
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034bc:	f7fd fbec 	bl	8000c98 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4613      	mov	r3, r2
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c8:	e058      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ca:	4b38      	ldr	r3, [pc, #224]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	2200      	movs	r2, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	4611      	mov	r1, r2
 80034d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
 80034e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034e4:	4642      	mov	r2, r8
 80034e6:	464b      	mov	r3, r9
 80034e8:	f04f 0000 	mov.w	r0, #0
 80034ec:	f04f 0100 	mov.w	r1, #0
 80034f0:	0159      	lsls	r1, r3, #5
 80034f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f6:	0150      	lsls	r0, r2, #5
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4641      	mov	r1, r8
 80034fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003502:	4649      	mov	r1, r9
 8003504:	eb63 0b01 	sbc.w	fp, r3, r1
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003514:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003518:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800351c:	ebb2 040a 	subs.w	r4, r2, sl
 8003520:	eb63 050b 	sbc.w	r5, r3, fp
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	00eb      	lsls	r3, r5, #3
 800352e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003532:	00e2      	lsls	r2, r4, #3
 8003534:	4614      	mov	r4, r2
 8003536:	461d      	mov	r5, r3
 8003538:	4643      	mov	r3, r8
 800353a:	18e3      	adds	r3, r4, r3
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	464b      	mov	r3, r9
 8003540:	eb45 0303 	adc.w	r3, r5, r3
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003552:	4629      	mov	r1, r5
 8003554:	028b      	lsls	r3, r1, #10
 8003556:	4621      	mov	r1, r4
 8003558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800355c:	4621      	mov	r1, r4
 800355e:	028a      	lsls	r2, r1, #10
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003566:	2200      	movs	r2, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	61fa      	str	r2, [r7, #28]
 800356c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003570:	f7fd fb92 	bl	8000c98 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4613      	mov	r3, r2
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	3301      	adds	r3, #1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800358c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800358e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003596:	e002      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800359a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800359c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3750      	adds	r7, #80	; 0x50
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	007a1200 	.word	0x007a1200

080035b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_GetHCLKFreq+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000028 	.word	0x20000028

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0a9b      	lsrs	r3, r3, #10
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	08008e3c 	.word	0x08008e3c

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035fc:	f7ff ffdc 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0b5b      	lsrs	r3, r3, #13
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4903      	ldr	r1, [pc, #12]	; (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	08008e3c 	.word	0x08008e3c

08003620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e041      	b.n	80036b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fe fa02 	bl	8001a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3304      	adds	r3, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4610      	mov	r0, r2
 8003660:	f000 fa92 	bl	8003b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d001      	beq.n	80036d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e044      	b.n	8003762 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1e      	ldr	r2, [pc, #120]	; (8003770 <HAL_TIM_Base_Start_IT+0xb0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d018      	beq.n	800372c <HAL_TIM_Base_Start_IT+0x6c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003702:	d013      	beq.n	800372c <HAL_TIM_Base_Start_IT+0x6c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1a      	ldr	r2, [pc, #104]	; (8003774 <HAL_TIM_Base_Start_IT+0xb4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00e      	beq.n	800372c <HAL_TIM_Base_Start_IT+0x6c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a19      	ldr	r2, [pc, #100]	; (8003778 <HAL_TIM_Base_Start_IT+0xb8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d009      	beq.n	800372c <HAL_TIM_Base_Start_IT+0x6c>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a17      	ldr	r2, [pc, #92]	; (800377c <HAL_TIM_Base_Start_IT+0xbc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_TIM_Base_Start_IT+0x6c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a16      	ldr	r2, [pc, #88]	; (8003780 <HAL_TIM_Base_Start_IT+0xc0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d111      	bne.n	8003750 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b06      	cmp	r3, #6
 800373c:	d010      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	e007      	b.n	8003760 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800
 800377c:	40000c00 	.word	0x40000c00
 8003780:	40014000 	.word	0x40014000

08003784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b02      	cmp	r3, #2
 8003798:	d122      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d11b      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0202 	mvn.w	r2, #2
 80037b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f9bf 	bl	8003b4a <HAL_TIM_IC_CaptureCallback>
 80037cc:	e005      	b.n	80037da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f9b1 	bl	8003b36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f9c2 	bl	8003b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d122      	bne.n	8003834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d11b      	bne.n	8003834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0204 	mvn.w	r2, #4
 8003804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f995 	bl	8003b4a <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f987 	bl	8003b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f998 	bl	8003b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b08      	cmp	r3, #8
 8003840:	d122      	bne.n	8003888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b08      	cmp	r3, #8
 800384e:	d11b      	bne.n	8003888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0208 	mvn.w	r2, #8
 8003858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2204      	movs	r2, #4
 800385e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f96b 	bl	8003b4a <HAL_TIM_IC_CaptureCallback>
 8003874:	e005      	b.n	8003882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f95d 	bl	8003b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f96e 	bl	8003b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b10      	cmp	r3, #16
 8003894:	d122      	bne.n	80038dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d11b      	bne.n	80038dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0210 	mvn.w	r2, #16
 80038ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2208      	movs	r2, #8
 80038b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f941 	bl	8003b4a <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f933 	bl	8003b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f944 	bl	8003b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d10e      	bne.n	8003908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d107      	bne.n	8003908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0201 	mvn.w	r2, #1
 8003900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f90d 	bl	8003b22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003912:	2b80      	cmp	r3, #128	; 0x80
 8003914:	d10e      	bne.n	8003934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003920:	2b80      	cmp	r3, #128	; 0x80
 8003922:	d107      	bne.n	8003934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fabc 	bl	8003eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f909 	bl	8003b72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b20      	cmp	r3, #32
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b20      	cmp	r3, #32
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0220 	mvn.w	r2, #32
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fa86 	bl	8003e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800398c:	bf00      	nop
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_TIM_ConfigClockSource+0x1c>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e0b4      	b.n	8003b1a <HAL_TIM_ConfigClockSource+0x186>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e8:	d03e      	beq.n	8003a68 <HAL_TIM_ConfigClockSource+0xd4>
 80039ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ee:	f200 8087 	bhi.w	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 80039f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f6:	f000 8086 	beq.w	8003b06 <HAL_TIM_ConfigClockSource+0x172>
 80039fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039fe:	d87f      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a00:	2b70      	cmp	r3, #112	; 0x70
 8003a02:	d01a      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0xa6>
 8003a04:	2b70      	cmp	r3, #112	; 0x70
 8003a06:	d87b      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a08:	2b60      	cmp	r3, #96	; 0x60
 8003a0a:	d050      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x11a>
 8003a0c:	2b60      	cmp	r3, #96	; 0x60
 8003a0e:	d877      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a10:	2b50      	cmp	r3, #80	; 0x50
 8003a12:	d03c      	beq.n	8003a8e <HAL_TIM_ConfigClockSource+0xfa>
 8003a14:	2b50      	cmp	r3, #80	; 0x50
 8003a16:	d873      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d058      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x13a>
 8003a1c:	2b40      	cmp	r3, #64	; 0x40
 8003a1e:	d86f      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a20:	2b30      	cmp	r3, #48	; 0x30
 8003a22:	d064      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x15a>
 8003a24:	2b30      	cmp	r3, #48	; 0x30
 8003a26:	d86b      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d060      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x15a>
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d867      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d05c      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x15a>
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d05a      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x15a>
 8003a38:	e062      	b.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6899      	ldr	r1, [r3, #8]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f000 f997 	bl	8003d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	609a      	str	r2, [r3, #8]
      break;
 8003a66:	e04f      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6899      	ldr	r1, [r3, #8]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f000 f980 	bl	8003d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a8a:	609a      	str	r2, [r3, #8]
      break;
 8003a8c:	e03c      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	6859      	ldr	r1, [r3, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f000 f8f4 	bl	8003c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2150      	movs	r1, #80	; 0x50
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 f94d 	bl	8003d46 <TIM_ITRx_SetConfig>
      break;
 8003aac:	e02c      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	461a      	mov	r2, r3
 8003abc:	f000 f913 	bl	8003ce6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2160      	movs	r1, #96	; 0x60
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f93d 	bl	8003d46 <TIM_ITRx_SetConfig>
      break;
 8003acc:	e01c      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f000 f8d4 	bl	8003c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2140      	movs	r1, #64	; 0x40
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f92d 	bl	8003d46 <TIM_ITRx_SetConfig>
      break;
 8003aec:	e00c      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f000 f924 	bl	8003d46 <TIM_ITRx_SetConfig>
      break;
 8003afe:	e003      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      break;
 8003b04:	e000      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a34      	ldr	r2, [pc, #208]	; (8003c6c <TIM_Base_SetConfig+0xe4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00f      	beq.n	8003bc0 <TIM_Base_SetConfig+0x38>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba6:	d00b      	beq.n	8003bc0 <TIM_Base_SetConfig+0x38>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a31      	ldr	r2, [pc, #196]	; (8003c70 <TIM_Base_SetConfig+0xe8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d007      	beq.n	8003bc0 <TIM_Base_SetConfig+0x38>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a30      	ldr	r2, [pc, #192]	; (8003c74 <TIM_Base_SetConfig+0xec>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d003      	beq.n	8003bc0 <TIM_Base_SetConfig+0x38>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a2f      	ldr	r2, [pc, #188]	; (8003c78 <TIM_Base_SetConfig+0xf0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d108      	bne.n	8003bd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a25      	ldr	r2, [pc, #148]	; (8003c6c <TIM_Base_SetConfig+0xe4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d01b      	beq.n	8003c12 <TIM_Base_SetConfig+0x8a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be0:	d017      	beq.n	8003c12 <TIM_Base_SetConfig+0x8a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a22      	ldr	r2, [pc, #136]	; (8003c70 <TIM_Base_SetConfig+0xe8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d013      	beq.n	8003c12 <TIM_Base_SetConfig+0x8a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <TIM_Base_SetConfig+0xec>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00f      	beq.n	8003c12 <TIM_Base_SetConfig+0x8a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <TIM_Base_SetConfig+0xf0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00b      	beq.n	8003c12 <TIM_Base_SetConfig+0x8a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a1f      	ldr	r2, [pc, #124]	; (8003c7c <TIM_Base_SetConfig+0xf4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d007      	beq.n	8003c12 <TIM_Base_SetConfig+0x8a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <TIM_Base_SetConfig+0xf8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d003      	beq.n	8003c12 <TIM_Base_SetConfig+0x8a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <TIM_Base_SetConfig+0xfc>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d108      	bne.n	8003c24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a08      	ldr	r2, [pc, #32]	; (8003c6c <TIM_Base_SetConfig+0xe4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d103      	bne.n	8003c58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	615a      	str	r2, [r3, #20]
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	40000400 	.word	0x40000400
 8003c74:	40000800 	.word	0x40000800
 8003c78:	40000c00 	.word	0x40000c00
 8003c7c:	40014000 	.word	0x40014000
 8003c80:	40014400 	.word	0x40014400
 8003c84:	40014800 	.word	0x40014800

08003c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f023 0201 	bic.w	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f023 030a 	bic.w	r3, r3, #10
 8003cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	621a      	str	r2, [r3, #32]
}
 8003cda:	bf00      	nop
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b087      	sub	sp, #28
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0210 	bic.w	r2, r3, #16
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	031b      	lsls	r3, r3, #12
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f043 0307 	orr.w	r3, r3, #7
 8003d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	609a      	str	r2, [r3, #8]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	021a      	lsls	r2, r3, #8
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	609a      	str	r2, [r3, #8]
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e050      	b.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1c      	ldr	r2, [pc, #112]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d018      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e20:	d013      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00e      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a16      	ldr	r2, [pc, #88]	; (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d009      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d10c      	bne.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40014000 	.word	0x40014000

08003e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e03f      	b.n	8003f52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fd fdd8 	bl	8001a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2224      	movs	r2, #36	; 0x24
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f829 	bl	8003f5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f60:	b0c0      	sub	sp, #256	; 0x100
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	68d9      	ldr	r1, [r3, #12]
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	ea40 0301 	orr.w	r3, r0, r1
 8003f84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fb4:	f021 010c 	bic.w	r1, r1, #12
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fc2:	430b      	orrs	r3, r1
 8003fc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd6:	6999      	ldr	r1, [r3, #24]
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	ea40 0301 	orr.w	r3, r0, r1
 8003fe2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b8f      	ldr	r3, [pc, #572]	; (8004228 <UART_SetConfig+0x2cc>)
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d005      	beq.n	8003ffc <UART_SetConfig+0xa0>
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b8d      	ldr	r3, [pc, #564]	; (800422c <UART_SetConfig+0x2d0>)
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d104      	bne.n	8004006 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ffc:	f7ff fafc 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 8004000:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004004:	e003      	b.n	800400e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004006:	f7ff fae3 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 800400a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004018:	f040 810c 	bne.w	8004234 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800401c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004020:	2200      	movs	r2, #0
 8004022:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004026:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800402a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800402e:	4622      	mov	r2, r4
 8004030:	462b      	mov	r3, r5
 8004032:	1891      	adds	r1, r2, r2
 8004034:	65b9      	str	r1, [r7, #88]	; 0x58
 8004036:	415b      	adcs	r3, r3
 8004038:	65fb      	str	r3, [r7, #92]	; 0x5c
 800403a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800403e:	4621      	mov	r1, r4
 8004040:	eb12 0801 	adds.w	r8, r2, r1
 8004044:	4629      	mov	r1, r5
 8004046:	eb43 0901 	adc.w	r9, r3, r1
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800405a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800405e:	4690      	mov	r8, r2
 8004060:	4699      	mov	r9, r3
 8004062:	4623      	mov	r3, r4
 8004064:	eb18 0303 	adds.w	r3, r8, r3
 8004068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800406c:	462b      	mov	r3, r5
 800406e:	eb49 0303 	adc.w	r3, r9, r3
 8004072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004082:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004086:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800408a:	460b      	mov	r3, r1
 800408c:	18db      	adds	r3, r3, r3
 800408e:	653b      	str	r3, [r7, #80]	; 0x50
 8004090:	4613      	mov	r3, r2
 8004092:	eb42 0303 	adc.w	r3, r2, r3
 8004096:	657b      	str	r3, [r7, #84]	; 0x54
 8004098:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800409c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040a0:	f7fc fdfa 	bl	8000c98 <__aeabi_uldivmod>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4b61      	ldr	r3, [pc, #388]	; (8004230 <UART_SetConfig+0x2d4>)
 80040aa:	fba3 2302 	umull	r2, r3, r3, r2
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	011c      	lsls	r4, r3, #4
 80040b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	1891      	adds	r1, r2, r2
 80040ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80040cc:	415b      	adcs	r3, r3
 80040ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040d4:	4641      	mov	r1, r8
 80040d6:	eb12 0a01 	adds.w	sl, r2, r1
 80040da:	4649      	mov	r1, r9
 80040dc:	eb43 0b01 	adc.w	fp, r3, r1
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040f4:	4692      	mov	sl, r2
 80040f6:	469b      	mov	fp, r3
 80040f8:	4643      	mov	r3, r8
 80040fa:	eb1a 0303 	adds.w	r3, sl, r3
 80040fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004102:	464b      	mov	r3, r9
 8004104:	eb4b 0303 	adc.w	r3, fp, r3
 8004108:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004118:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800411c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004120:	460b      	mov	r3, r1
 8004122:	18db      	adds	r3, r3, r3
 8004124:	643b      	str	r3, [r7, #64]	; 0x40
 8004126:	4613      	mov	r3, r2
 8004128:	eb42 0303 	adc.w	r3, r2, r3
 800412c:	647b      	str	r3, [r7, #68]	; 0x44
 800412e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004132:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004136:	f7fc fdaf 	bl	8000c98 <__aeabi_uldivmod>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4611      	mov	r1, r2
 8004140:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <UART_SetConfig+0x2d4>)
 8004142:	fba3 2301 	umull	r2, r3, r3, r1
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2264      	movs	r2, #100	; 0x64
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	1acb      	subs	r3, r1, r3
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004156:	4b36      	ldr	r3, [pc, #216]	; (8004230 <UART_SetConfig+0x2d4>)
 8004158:	fba3 2302 	umull	r2, r3, r3, r2
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004164:	441c      	add	r4, r3
 8004166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004170:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004174:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004178:	4642      	mov	r2, r8
 800417a:	464b      	mov	r3, r9
 800417c:	1891      	adds	r1, r2, r2
 800417e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004180:	415b      	adcs	r3, r3
 8004182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004184:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004188:	4641      	mov	r1, r8
 800418a:	1851      	adds	r1, r2, r1
 800418c:	6339      	str	r1, [r7, #48]	; 0x30
 800418e:	4649      	mov	r1, r9
 8004190:	414b      	adcs	r3, r1
 8004192:	637b      	str	r3, [r7, #52]	; 0x34
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041a0:	4659      	mov	r1, fp
 80041a2:	00cb      	lsls	r3, r1, #3
 80041a4:	4651      	mov	r1, sl
 80041a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041aa:	4651      	mov	r1, sl
 80041ac:	00ca      	lsls	r2, r1, #3
 80041ae:	4610      	mov	r0, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	4642      	mov	r2, r8
 80041b6:	189b      	adds	r3, r3, r2
 80041b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041bc:	464b      	mov	r3, r9
 80041be:	460a      	mov	r2, r1
 80041c0:	eb42 0303 	adc.w	r3, r2, r3
 80041c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041dc:	460b      	mov	r3, r1
 80041de:	18db      	adds	r3, r3, r3
 80041e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e2:	4613      	mov	r3, r2
 80041e4:	eb42 0303 	adc.w	r3, r2, r3
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041f2:	f7fc fd51 	bl	8000c98 <__aeabi_uldivmod>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <UART_SetConfig+0x2d4>)
 80041fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	2164      	movs	r1, #100	; 0x64
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	3332      	adds	r3, #50	; 0x32
 800420e:	4a08      	ldr	r2, [pc, #32]	; (8004230 <UART_SetConfig+0x2d4>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	f003 0207 	and.w	r2, r3, #7
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4422      	add	r2, r4
 8004222:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004224:	e105      	b.n	8004432 <UART_SetConfig+0x4d6>
 8004226:	bf00      	nop
 8004228:	40011000 	.word	0x40011000
 800422c:	40011400 	.word	0x40011400
 8004230:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004238:	2200      	movs	r2, #0
 800423a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800423e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004242:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004246:	4642      	mov	r2, r8
 8004248:	464b      	mov	r3, r9
 800424a:	1891      	adds	r1, r2, r2
 800424c:	6239      	str	r1, [r7, #32]
 800424e:	415b      	adcs	r3, r3
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
 8004252:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004256:	4641      	mov	r1, r8
 8004258:	1854      	adds	r4, r2, r1
 800425a:	4649      	mov	r1, r9
 800425c:	eb43 0501 	adc.w	r5, r3, r1
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	00eb      	lsls	r3, r5, #3
 800426a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800426e:	00e2      	lsls	r2, r4, #3
 8004270:	4614      	mov	r4, r2
 8004272:	461d      	mov	r5, r3
 8004274:	4643      	mov	r3, r8
 8004276:	18e3      	adds	r3, r4, r3
 8004278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800427c:	464b      	mov	r3, r9
 800427e:	eb45 0303 	adc.w	r3, r5, r3
 8004282:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004292:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042a2:	4629      	mov	r1, r5
 80042a4:	008b      	lsls	r3, r1, #2
 80042a6:	4621      	mov	r1, r4
 80042a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ac:	4621      	mov	r1, r4
 80042ae:	008a      	lsls	r2, r1, #2
 80042b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042b4:	f7fc fcf0 	bl	8000c98 <__aeabi_uldivmod>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4b60      	ldr	r3, [pc, #384]	; (8004440 <UART_SetConfig+0x4e4>)
 80042be:	fba3 2302 	umull	r2, r3, r3, r2
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	011c      	lsls	r4, r3, #4
 80042c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042d8:	4642      	mov	r2, r8
 80042da:	464b      	mov	r3, r9
 80042dc:	1891      	adds	r1, r2, r2
 80042de:	61b9      	str	r1, [r7, #24]
 80042e0:	415b      	adcs	r3, r3
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e8:	4641      	mov	r1, r8
 80042ea:	1851      	adds	r1, r2, r1
 80042ec:	6139      	str	r1, [r7, #16]
 80042ee:	4649      	mov	r1, r9
 80042f0:	414b      	adcs	r3, r1
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004300:	4659      	mov	r1, fp
 8004302:	00cb      	lsls	r3, r1, #3
 8004304:	4651      	mov	r1, sl
 8004306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800430a:	4651      	mov	r1, sl
 800430c:	00ca      	lsls	r2, r1, #3
 800430e:	4610      	mov	r0, r2
 8004310:	4619      	mov	r1, r3
 8004312:	4603      	mov	r3, r0
 8004314:	4642      	mov	r2, r8
 8004316:	189b      	adds	r3, r3, r2
 8004318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800431c:	464b      	mov	r3, r9
 800431e:	460a      	mov	r2, r1
 8004320:	eb42 0303 	adc.w	r3, r2, r3
 8004324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	67bb      	str	r3, [r7, #120]	; 0x78
 8004332:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004340:	4649      	mov	r1, r9
 8004342:	008b      	lsls	r3, r1, #2
 8004344:	4641      	mov	r1, r8
 8004346:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800434a:	4641      	mov	r1, r8
 800434c:	008a      	lsls	r2, r1, #2
 800434e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004352:	f7fc fca1 	bl	8000c98 <__aeabi_uldivmod>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4b39      	ldr	r3, [pc, #228]	; (8004440 <UART_SetConfig+0x4e4>)
 800435c:	fba3 1302 	umull	r1, r3, r3, r2
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	2164      	movs	r1, #100	; 0x64
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	3332      	adds	r3, #50	; 0x32
 800436e:	4a34      	ldr	r2, [pc, #208]	; (8004440 <UART_SetConfig+0x4e4>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800437a:	441c      	add	r4, r3
 800437c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004380:	2200      	movs	r2, #0
 8004382:	673b      	str	r3, [r7, #112]	; 0x70
 8004384:	677a      	str	r2, [r7, #116]	; 0x74
 8004386:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800438a:	4642      	mov	r2, r8
 800438c:	464b      	mov	r3, r9
 800438e:	1891      	adds	r1, r2, r2
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	415b      	adcs	r3, r3
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800439a:	4641      	mov	r1, r8
 800439c:	1851      	adds	r1, r2, r1
 800439e:	6039      	str	r1, [r7, #0]
 80043a0:	4649      	mov	r1, r9
 80043a2:	414b      	adcs	r3, r1
 80043a4:	607b      	str	r3, [r7, #4]
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043b2:	4659      	mov	r1, fp
 80043b4:	00cb      	lsls	r3, r1, #3
 80043b6:	4651      	mov	r1, sl
 80043b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043bc:	4651      	mov	r1, sl
 80043be:	00ca      	lsls	r2, r1, #3
 80043c0:	4610      	mov	r0, r2
 80043c2:	4619      	mov	r1, r3
 80043c4:	4603      	mov	r3, r0
 80043c6:	4642      	mov	r2, r8
 80043c8:	189b      	adds	r3, r3, r2
 80043ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80043cc:	464b      	mov	r3, r9
 80043ce:	460a      	mov	r2, r1
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	663b      	str	r3, [r7, #96]	; 0x60
 80043e0:	667a      	str	r2, [r7, #100]	; 0x64
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043ee:	4649      	mov	r1, r9
 80043f0:	008b      	lsls	r3, r1, #2
 80043f2:	4641      	mov	r1, r8
 80043f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f8:	4641      	mov	r1, r8
 80043fa:	008a      	lsls	r2, r1, #2
 80043fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004400:	f7fc fc4a 	bl	8000c98 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <UART_SetConfig+0x4e4>)
 800440a:	fba3 1302 	umull	r1, r3, r3, r2
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	2164      	movs	r1, #100	; 0x64
 8004412:	fb01 f303 	mul.w	r3, r1, r3
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	3332      	adds	r3, #50	; 0x32
 800441c:	4a08      	ldr	r2, [pc, #32]	; (8004440 <UART_SetConfig+0x4e4>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	f003 020f 	and.w	r2, r3, #15
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4422      	add	r2, r4
 8004430:	609a      	str	r2, [r3, #8]
}
 8004432:	bf00      	nop
 8004434:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004438:	46bd      	mov	sp, r7
 800443a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800443e:	bf00      	nop
 8004440:	51eb851f 	.word	0x51eb851f

08004444 <__errno>:
 8004444:	4b01      	ldr	r3, [pc, #4]	; (800444c <__errno+0x8>)
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20000034 	.word	0x20000034

08004450 <__libc_init_array>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	4d0d      	ldr	r5, [pc, #52]	; (8004488 <__libc_init_array+0x38>)
 8004454:	4c0d      	ldr	r4, [pc, #52]	; (800448c <__libc_init_array+0x3c>)
 8004456:	1b64      	subs	r4, r4, r5
 8004458:	10a4      	asrs	r4, r4, #2
 800445a:	2600      	movs	r6, #0
 800445c:	42a6      	cmp	r6, r4
 800445e:	d109      	bne.n	8004474 <__libc_init_array+0x24>
 8004460:	4d0b      	ldr	r5, [pc, #44]	; (8004490 <__libc_init_array+0x40>)
 8004462:	4c0c      	ldr	r4, [pc, #48]	; (8004494 <__libc_init_array+0x44>)
 8004464:	f004 fcc4 	bl	8008df0 <_init>
 8004468:	1b64      	subs	r4, r4, r5
 800446a:	10a4      	asrs	r4, r4, #2
 800446c:	2600      	movs	r6, #0
 800446e:	42a6      	cmp	r6, r4
 8004470:	d105      	bne.n	800447e <__libc_init_array+0x2e>
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	f855 3b04 	ldr.w	r3, [r5], #4
 8004478:	4798      	blx	r3
 800447a:	3601      	adds	r6, #1
 800447c:	e7ee      	b.n	800445c <__libc_init_array+0xc>
 800447e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004482:	4798      	blx	r3
 8004484:	3601      	adds	r6, #1
 8004486:	e7f2      	b.n	800446e <__libc_init_array+0x1e>
 8004488:	080092f4 	.word	0x080092f4
 800448c:	080092f4 	.word	0x080092f4
 8004490:	080092f4 	.word	0x080092f4
 8004494:	080092f8 	.word	0x080092f8

08004498 <memset>:
 8004498:	4402      	add	r2, r0
 800449a:	4603      	mov	r3, r0
 800449c:	4293      	cmp	r3, r2
 800449e:	d100      	bne.n	80044a2 <memset+0xa>
 80044a0:	4770      	bx	lr
 80044a2:	f803 1b01 	strb.w	r1, [r3], #1
 80044a6:	e7f9      	b.n	800449c <memset+0x4>

080044a8 <__cvt>:
 80044a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044ac:	ec55 4b10 	vmov	r4, r5, d0
 80044b0:	2d00      	cmp	r5, #0
 80044b2:	460e      	mov	r6, r1
 80044b4:	4619      	mov	r1, r3
 80044b6:	462b      	mov	r3, r5
 80044b8:	bfbb      	ittet	lt
 80044ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80044be:	461d      	movlt	r5, r3
 80044c0:	2300      	movge	r3, #0
 80044c2:	232d      	movlt	r3, #45	; 0x2d
 80044c4:	700b      	strb	r3, [r1, #0]
 80044c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044cc:	4691      	mov	r9, r2
 80044ce:	f023 0820 	bic.w	r8, r3, #32
 80044d2:	bfbc      	itt	lt
 80044d4:	4622      	movlt	r2, r4
 80044d6:	4614      	movlt	r4, r2
 80044d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044dc:	d005      	beq.n	80044ea <__cvt+0x42>
 80044de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80044e2:	d100      	bne.n	80044e6 <__cvt+0x3e>
 80044e4:	3601      	adds	r6, #1
 80044e6:	2102      	movs	r1, #2
 80044e8:	e000      	b.n	80044ec <__cvt+0x44>
 80044ea:	2103      	movs	r1, #3
 80044ec:	ab03      	add	r3, sp, #12
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	ab02      	add	r3, sp, #8
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	ec45 4b10 	vmov	d0, r4, r5
 80044f8:	4653      	mov	r3, sl
 80044fa:	4632      	mov	r2, r6
 80044fc:	f001 fde0 	bl	80060c0 <_dtoa_r>
 8004500:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004504:	4607      	mov	r7, r0
 8004506:	d102      	bne.n	800450e <__cvt+0x66>
 8004508:	f019 0f01 	tst.w	r9, #1
 800450c:	d022      	beq.n	8004554 <__cvt+0xac>
 800450e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004512:	eb07 0906 	add.w	r9, r7, r6
 8004516:	d110      	bne.n	800453a <__cvt+0x92>
 8004518:	783b      	ldrb	r3, [r7, #0]
 800451a:	2b30      	cmp	r3, #48	; 0x30
 800451c:	d10a      	bne.n	8004534 <__cvt+0x8c>
 800451e:	2200      	movs	r2, #0
 8004520:	2300      	movs	r3, #0
 8004522:	4620      	mov	r0, r4
 8004524:	4629      	mov	r1, r5
 8004526:	f7fc fad7 	bl	8000ad8 <__aeabi_dcmpeq>
 800452a:	b918      	cbnz	r0, 8004534 <__cvt+0x8c>
 800452c:	f1c6 0601 	rsb	r6, r6, #1
 8004530:	f8ca 6000 	str.w	r6, [sl]
 8004534:	f8da 3000 	ldr.w	r3, [sl]
 8004538:	4499      	add	r9, r3
 800453a:	2200      	movs	r2, #0
 800453c:	2300      	movs	r3, #0
 800453e:	4620      	mov	r0, r4
 8004540:	4629      	mov	r1, r5
 8004542:	f7fc fac9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004546:	b108      	cbz	r0, 800454c <__cvt+0xa4>
 8004548:	f8cd 900c 	str.w	r9, [sp, #12]
 800454c:	2230      	movs	r2, #48	; 0x30
 800454e:	9b03      	ldr	r3, [sp, #12]
 8004550:	454b      	cmp	r3, r9
 8004552:	d307      	bcc.n	8004564 <__cvt+0xbc>
 8004554:	9b03      	ldr	r3, [sp, #12]
 8004556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004558:	1bdb      	subs	r3, r3, r7
 800455a:	4638      	mov	r0, r7
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	b004      	add	sp, #16
 8004560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004564:	1c59      	adds	r1, r3, #1
 8004566:	9103      	str	r1, [sp, #12]
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	e7f0      	b.n	800454e <__cvt+0xa6>

0800456c <__exponent>:
 800456c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800456e:	4603      	mov	r3, r0
 8004570:	2900      	cmp	r1, #0
 8004572:	bfb8      	it	lt
 8004574:	4249      	neglt	r1, r1
 8004576:	f803 2b02 	strb.w	r2, [r3], #2
 800457a:	bfb4      	ite	lt
 800457c:	222d      	movlt	r2, #45	; 0x2d
 800457e:	222b      	movge	r2, #43	; 0x2b
 8004580:	2909      	cmp	r1, #9
 8004582:	7042      	strb	r2, [r0, #1]
 8004584:	dd2a      	ble.n	80045dc <__exponent+0x70>
 8004586:	f10d 0407 	add.w	r4, sp, #7
 800458a:	46a4      	mov	ip, r4
 800458c:	270a      	movs	r7, #10
 800458e:	46a6      	mov	lr, r4
 8004590:	460a      	mov	r2, r1
 8004592:	fb91 f6f7 	sdiv	r6, r1, r7
 8004596:	fb07 1516 	mls	r5, r7, r6, r1
 800459a:	3530      	adds	r5, #48	; 0x30
 800459c:	2a63      	cmp	r2, #99	; 0x63
 800459e:	f104 34ff 	add.w	r4, r4, #4294967295
 80045a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80045a6:	4631      	mov	r1, r6
 80045a8:	dcf1      	bgt.n	800458e <__exponent+0x22>
 80045aa:	3130      	adds	r1, #48	; 0x30
 80045ac:	f1ae 0502 	sub.w	r5, lr, #2
 80045b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80045b4:	1c44      	adds	r4, r0, #1
 80045b6:	4629      	mov	r1, r5
 80045b8:	4561      	cmp	r1, ip
 80045ba:	d30a      	bcc.n	80045d2 <__exponent+0x66>
 80045bc:	f10d 0209 	add.w	r2, sp, #9
 80045c0:	eba2 020e 	sub.w	r2, r2, lr
 80045c4:	4565      	cmp	r5, ip
 80045c6:	bf88      	it	hi
 80045c8:	2200      	movhi	r2, #0
 80045ca:	4413      	add	r3, r2
 80045cc:	1a18      	subs	r0, r3, r0
 80045ce:	b003      	add	sp, #12
 80045d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80045da:	e7ed      	b.n	80045b8 <__exponent+0x4c>
 80045dc:	2330      	movs	r3, #48	; 0x30
 80045de:	3130      	adds	r1, #48	; 0x30
 80045e0:	7083      	strb	r3, [r0, #2]
 80045e2:	70c1      	strb	r1, [r0, #3]
 80045e4:	1d03      	adds	r3, r0, #4
 80045e6:	e7f1      	b.n	80045cc <__exponent+0x60>

080045e8 <_printf_float>:
 80045e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ec:	ed2d 8b02 	vpush	{d8}
 80045f0:	b08d      	sub	sp, #52	; 0x34
 80045f2:	460c      	mov	r4, r1
 80045f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80045f8:	4616      	mov	r6, r2
 80045fa:	461f      	mov	r7, r3
 80045fc:	4605      	mov	r5, r0
 80045fe:	f002 febd 	bl	800737c <_localeconv_r>
 8004602:	f8d0 a000 	ldr.w	sl, [r0]
 8004606:	4650      	mov	r0, sl
 8004608:	f7fb fdea 	bl	80001e0 <strlen>
 800460c:	2300      	movs	r3, #0
 800460e:	930a      	str	r3, [sp, #40]	; 0x28
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	9305      	str	r3, [sp, #20]
 8004614:	f8d8 3000 	ldr.w	r3, [r8]
 8004618:	f894 b018 	ldrb.w	fp, [r4, #24]
 800461c:	3307      	adds	r3, #7
 800461e:	f023 0307 	bic.w	r3, r3, #7
 8004622:	f103 0208 	add.w	r2, r3, #8
 8004626:	f8c8 2000 	str.w	r2, [r8]
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004632:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004636:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800463a:	9307      	str	r3, [sp, #28]
 800463c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004640:	ee08 0a10 	vmov	s16, r0
 8004644:	4b9f      	ldr	r3, [pc, #636]	; (80048c4 <_printf_float+0x2dc>)
 8004646:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800464a:	f04f 32ff 	mov.w	r2, #4294967295
 800464e:	f7fc fa75 	bl	8000b3c <__aeabi_dcmpun>
 8004652:	bb88      	cbnz	r0, 80046b8 <_printf_float+0xd0>
 8004654:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004658:	4b9a      	ldr	r3, [pc, #616]	; (80048c4 <_printf_float+0x2dc>)
 800465a:	f04f 32ff 	mov.w	r2, #4294967295
 800465e:	f7fc fa4f 	bl	8000b00 <__aeabi_dcmple>
 8004662:	bb48      	cbnz	r0, 80046b8 <_printf_float+0xd0>
 8004664:	2200      	movs	r2, #0
 8004666:	2300      	movs	r3, #0
 8004668:	4640      	mov	r0, r8
 800466a:	4649      	mov	r1, r9
 800466c:	f7fc fa3e 	bl	8000aec <__aeabi_dcmplt>
 8004670:	b110      	cbz	r0, 8004678 <_printf_float+0x90>
 8004672:	232d      	movs	r3, #45	; 0x2d
 8004674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004678:	4b93      	ldr	r3, [pc, #588]	; (80048c8 <_printf_float+0x2e0>)
 800467a:	4894      	ldr	r0, [pc, #592]	; (80048cc <_printf_float+0x2e4>)
 800467c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004680:	bf94      	ite	ls
 8004682:	4698      	movls	r8, r3
 8004684:	4680      	movhi	r8, r0
 8004686:	2303      	movs	r3, #3
 8004688:	6123      	str	r3, [r4, #16]
 800468a:	9b05      	ldr	r3, [sp, #20]
 800468c:	f023 0204 	bic.w	r2, r3, #4
 8004690:	6022      	str	r2, [r4, #0]
 8004692:	f04f 0900 	mov.w	r9, #0
 8004696:	9700      	str	r7, [sp, #0]
 8004698:	4633      	mov	r3, r6
 800469a:	aa0b      	add	r2, sp, #44	; 0x2c
 800469c:	4621      	mov	r1, r4
 800469e:	4628      	mov	r0, r5
 80046a0:	f000 f9d8 	bl	8004a54 <_printf_common>
 80046a4:	3001      	adds	r0, #1
 80046a6:	f040 8090 	bne.w	80047ca <_printf_float+0x1e2>
 80046aa:	f04f 30ff 	mov.w	r0, #4294967295
 80046ae:	b00d      	add	sp, #52	; 0x34
 80046b0:	ecbd 8b02 	vpop	{d8}
 80046b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b8:	4642      	mov	r2, r8
 80046ba:	464b      	mov	r3, r9
 80046bc:	4640      	mov	r0, r8
 80046be:	4649      	mov	r1, r9
 80046c0:	f7fc fa3c 	bl	8000b3c <__aeabi_dcmpun>
 80046c4:	b140      	cbz	r0, 80046d8 <_printf_float+0xf0>
 80046c6:	464b      	mov	r3, r9
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bfbc      	itt	lt
 80046cc:	232d      	movlt	r3, #45	; 0x2d
 80046ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046d2:	487f      	ldr	r0, [pc, #508]	; (80048d0 <_printf_float+0x2e8>)
 80046d4:	4b7f      	ldr	r3, [pc, #508]	; (80048d4 <_printf_float+0x2ec>)
 80046d6:	e7d1      	b.n	800467c <_printf_float+0x94>
 80046d8:	6863      	ldr	r3, [r4, #4]
 80046da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80046de:	9206      	str	r2, [sp, #24]
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	d13f      	bne.n	8004764 <_printf_float+0x17c>
 80046e4:	2306      	movs	r3, #6
 80046e6:	6063      	str	r3, [r4, #4]
 80046e8:	9b05      	ldr	r3, [sp, #20]
 80046ea:	6861      	ldr	r1, [r4, #4]
 80046ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80046f0:	2300      	movs	r3, #0
 80046f2:	9303      	str	r3, [sp, #12]
 80046f4:	ab0a      	add	r3, sp, #40	; 0x28
 80046f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80046fa:	ab09      	add	r3, sp, #36	; 0x24
 80046fc:	ec49 8b10 	vmov	d0, r8, r9
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	6022      	str	r2, [r4, #0]
 8004704:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004708:	4628      	mov	r0, r5
 800470a:	f7ff fecd 	bl	80044a8 <__cvt>
 800470e:	9b06      	ldr	r3, [sp, #24]
 8004710:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004712:	2b47      	cmp	r3, #71	; 0x47
 8004714:	4680      	mov	r8, r0
 8004716:	d108      	bne.n	800472a <_printf_float+0x142>
 8004718:	1cc8      	adds	r0, r1, #3
 800471a:	db02      	blt.n	8004722 <_printf_float+0x13a>
 800471c:	6863      	ldr	r3, [r4, #4]
 800471e:	4299      	cmp	r1, r3
 8004720:	dd41      	ble.n	80047a6 <_printf_float+0x1be>
 8004722:	f1ab 0b02 	sub.w	fp, fp, #2
 8004726:	fa5f fb8b 	uxtb.w	fp, fp
 800472a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800472e:	d820      	bhi.n	8004772 <_printf_float+0x18a>
 8004730:	3901      	subs	r1, #1
 8004732:	465a      	mov	r2, fp
 8004734:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004738:	9109      	str	r1, [sp, #36]	; 0x24
 800473a:	f7ff ff17 	bl	800456c <__exponent>
 800473e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004740:	1813      	adds	r3, r2, r0
 8004742:	2a01      	cmp	r2, #1
 8004744:	4681      	mov	r9, r0
 8004746:	6123      	str	r3, [r4, #16]
 8004748:	dc02      	bgt.n	8004750 <_printf_float+0x168>
 800474a:	6822      	ldr	r2, [r4, #0]
 800474c:	07d2      	lsls	r2, r2, #31
 800474e:	d501      	bpl.n	8004754 <_printf_float+0x16c>
 8004750:	3301      	adds	r3, #1
 8004752:	6123      	str	r3, [r4, #16]
 8004754:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004758:	2b00      	cmp	r3, #0
 800475a:	d09c      	beq.n	8004696 <_printf_float+0xae>
 800475c:	232d      	movs	r3, #45	; 0x2d
 800475e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004762:	e798      	b.n	8004696 <_printf_float+0xae>
 8004764:	9a06      	ldr	r2, [sp, #24]
 8004766:	2a47      	cmp	r2, #71	; 0x47
 8004768:	d1be      	bne.n	80046e8 <_printf_float+0x100>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1bc      	bne.n	80046e8 <_printf_float+0x100>
 800476e:	2301      	movs	r3, #1
 8004770:	e7b9      	b.n	80046e6 <_printf_float+0xfe>
 8004772:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004776:	d118      	bne.n	80047aa <_printf_float+0x1c2>
 8004778:	2900      	cmp	r1, #0
 800477a:	6863      	ldr	r3, [r4, #4]
 800477c:	dd0b      	ble.n	8004796 <_printf_float+0x1ae>
 800477e:	6121      	str	r1, [r4, #16]
 8004780:	b913      	cbnz	r3, 8004788 <_printf_float+0x1a0>
 8004782:	6822      	ldr	r2, [r4, #0]
 8004784:	07d0      	lsls	r0, r2, #31
 8004786:	d502      	bpl.n	800478e <_printf_float+0x1a6>
 8004788:	3301      	adds	r3, #1
 800478a:	440b      	add	r3, r1
 800478c:	6123      	str	r3, [r4, #16]
 800478e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004790:	f04f 0900 	mov.w	r9, #0
 8004794:	e7de      	b.n	8004754 <_printf_float+0x16c>
 8004796:	b913      	cbnz	r3, 800479e <_printf_float+0x1b6>
 8004798:	6822      	ldr	r2, [r4, #0]
 800479a:	07d2      	lsls	r2, r2, #31
 800479c:	d501      	bpl.n	80047a2 <_printf_float+0x1ba>
 800479e:	3302      	adds	r3, #2
 80047a0:	e7f4      	b.n	800478c <_printf_float+0x1a4>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e7f2      	b.n	800478c <_printf_float+0x1a4>
 80047a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80047aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ac:	4299      	cmp	r1, r3
 80047ae:	db05      	blt.n	80047bc <_printf_float+0x1d4>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	6121      	str	r1, [r4, #16]
 80047b4:	07d8      	lsls	r0, r3, #31
 80047b6:	d5ea      	bpl.n	800478e <_printf_float+0x1a6>
 80047b8:	1c4b      	adds	r3, r1, #1
 80047ba:	e7e7      	b.n	800478c <_printf_float+0x1a4>
 80047bc:	2900      	cmp	r1, #0
 80047be:	bfd4      	ite	le
 80047c0:	f1c1 0202 	rsble	r2, r1, #2
 80047c4:	2201      	movgt	r2, #1
 80047c6:	4413      	add	r3, r2
 80047c8:	e7e0      	b.n	800478c <_printf_float+0x1a4>
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	055a      	lsls	r2, r3, #21
 80047ce:	d407      	bmi.n	80047e0 <_printf_float+0x1f8>
 80047d0:	6923      	ldr	r3, [r4, #16]
 80047d2:	4642      	mov	r2, r8
 80047d4:	4631      	mov	r1, r6
 80047d6:	4628      	mov	r0, r5
 80047d8:	47b8      	blx	r7
 80047da:	3001      	adds	r0, #1
 80047dc:	d12c      	bne.n	8004838 <_printf_float+0x250>
 80047de:	e764      	b.n	80046aa <_printf_float+0xc2>
 80047e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047e4:	f240 80e0 	bls.w	80049a8 <_printf_float+0x3c0>
 80047e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047ec:	2200      	movs	r2, #0
 80047ee:	2300      	movs	r3, #0
 80047f0:	f7fc f972 	bl	8000ad8 <__aeabi_dcmpeq>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d034      	beq.n	8004862 <_printf_float+0x27a>
 80047f8:	4a37      	ldr	r2, [pc, #220]	; (80048d8 <_printf_float+0x2f0>)
 80047fa:	2301      	movs	r3, #1
 80047fc:	4631      	mov	r1, r6
 80047fe:	4628      	mov	r0, r5
 8004800:	47b8      	blx	r7
 8004802:	3001      	adds	r0, #1
 8004804:	f43f af51 	beq.w	80046aa <_printf_float+0xc2>
 8004808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800480c:	429a      	cmp	r2, r3
 800480e:	db02      	blt.n	8004816 <_printf_float+0x22e>
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	07d8      	lsls	r0, r3, #31
 8004814:	d510      	bpl.n	8004838 <_printf_float+0x250>
 8004816:	ee18 3a10 	vmov	r3, s16
 800481a:	4652      	mov	r2, sl
 800481c:	4631      	mov	r1, r6
 800481e:	4628      	mov	r0, r5
 8004820:	47b8      	blx	r7
 8004822:	3001      	adds	r0, #1
 8004824:	f43f af41 	beq.w	80046aa <_printf_float+0xc2>
 8004828:	f04f 0800 	mov.w	r8, #0
 800482c:	f104 091a 	add.w	r9, r4, #26
 8004830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004832:	3b01      	subs	r3, #1
 8004834:	4543      	cmp	r3, r8
 8004836:	dc09      	bgt.n	800484c <_printf_float+0x264>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	079b      	lsls	r3, r3, #30
 800483c:	f100 8105 	bmi.w	8004a4a <_printf_float+0x462>
 8004840:	68e0      	ldr	r0, [r4, #12]
 8004842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004844:	4298      	cmp	r0, r3
 8004846:	bfb8      	it	lt
 8004848:	4618      	movlt	r0, r3
 800484a:	e730      	b.n	80046ae <_printf_float+0xc6>
 800484c:	2301      	movs	r3, #1
 800484e:	464a      	mov	r2, r9
 8004850:	4631      	mov	r1, r6
 8004852:	4628      	mov	r0, r5
 8004854:	47b8      	blx	r7
 8004856:	3001      	adds	r0, #1
 8004858:	f43f af27 	beq.w	80046aa <_printf_float+0xc2>
 800485c:	f108 0801 	add.w	r8, r8, #1
 8004860:	e7e6      	b.n	8004830 <_printf_float+0x248>
 8004862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004864:	2b00      	cmp	r3, #0
 8004866:	dc39      	bgt.n	80048dc <_printf_float+0x2f4>
 8004868:	4a1b      	ldr	r2, [pc, #108]	; (80048d8 <_printf_float+0x2f0>)
 800486a:	2301      	movs	r3, #1
 800486c:	4631      	mov	r1, r6
 800486e:	4628      	mov	r0, r5
 8004870:	47b8      	blx	r7
 8004872:	3001      	adds	r0, #1
 8004874:	f43f af19 	beq.w	80046aa <_printf_float+0xc2>
 8004878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800487c:	4313      	orrs	r3, r2
 800487e:	d102      	bne.n	8004886 <_printf_float+0x29e>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	07d9      	lsls	r1, r3, #31
 8004884:	d5d8      	bpl.n	8004838 <_printf_float+0x250>
 8004886:	ee18 3a10 	vmov	r3, s16
 800488a:	4652      	mov	r2, sl
 800488c:	4631      	mov	r1, r6
 800488e:	4628      	mov	r0, r5
 8004890:	47b8      	blx	r7
 8004892:	3001      	adds	r0, #1
 8004894:	f43f af09 	beq.w	80046aa <_printf_float+0xc2>
 8004898:	f04f 0900 	mov.w	r9, #0
 800489c:	f104 0a1a 	add.w	sl, r4, #26
 80048a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a2:	425b      	negs	r3, r3
 80048a4:	454b      	cmp	r3, r9
 80048a6:	dc01      	bgt.n	80048ac <_printf_float+0x2c4>
 80048a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048aa:	e792      	b.n	80047d2 <_printf_float+0x1ea>
 80048ac:	2301      	movs	r3, #1
 80048ae:	4652      	mov	r2, sl
 80048b0:	4631      	mov	r1, r6
 80048b2:	4628      	mov	r0, r5
 80048b4:	47b8      	blx	r7
 80048b6:	3001      	adds	r0, #1
 80048b8:	f43f aef7 	beq.w	80046aa <_printf_float+0xc2>
 80048bc:	f109 0901 	add.w	r9, r9, #1
 80048c0:	e7ee      	b.n	80048a0 <_printf_float+0x2b8>
 80048c2:	bf00      	nop
 80048c4:	7fefffff 	.word	0x7fefffff
 80048c8:	08008e48 	.word	0x08008e48
 80048cc:	08008e4c 	.word	0x08008e4c
 80048d0:	08008e54 	.word	0x08008e54
 80048d4:	08008e50 	.word	0x08008e50
 80048d8:	08008e58 	.word	0x08008e58
 80048dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048e0:	429a      	cmp	r2, r3
 80048e2:	bfa8      	it	ge
 80048e4:	461a      	movge	r2, r3
 80048e6:	2a00      	cmp	r2, #0
 80048e8:	4691      	mov	r9, r2
 80048ea:	dc37      	bgt.n	800495c <_printf_float+0x374>
 80048ec:	f04f 0b00 	mov.w	fp, #0
 80048f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048f4:	f104 021a 	add.w	r2, r4, #26
 80048f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048fa:	9305      	str	r3, [sp, #20]
 80048fc:	eba3 0309 	sub.w	r3, r3, r9
 8004900:	455b      	cmp	r3, fp
 8004902:	dc33      	bgt.n	800496c <_printf_float+0x384>
 8004904:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004908:	429a      	cmp	r2, r3
 800490a:	db3b      	blt.n	8004984 <_printf_float+0x39c>
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	07da      	lsls	r2, r3, #31
 8004910:	d438      	bmi.n	8004984 <_printf_float+0x39c>
 8004912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004914:	9a05      	ldr	r2, [sp, #20]
 8004916:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004918:	1a9a      	subs	r2, r3, r2
 800491a:	eba3 0901 	sub.w	r9, r3, r1
 800491e:	4591      	cmp	r9, r2
 8004920:	bfa8      	it	ge
 8004922:	4691      	movge	r9, r2
 8004924:	f1b9 0f00 	cmp.w	r9, #0
 8004928:	dc35      	bgt.n	8004996 <_printf_float+0x3ae>
 800492a:	f04f 0800 	mov.w	r8, #0
 800492e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004932:	f104 0a1a 	add.w	sl, r4, #26
 8004936:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	eba3 0309 	sub.w	r3, r3, r9
 8004940:	4543      	cmp	r3, r8
 8004942:	f77f af79 	ble.w	8004838 <_printf_float+0x250>
 8004946:	2301      	movs	r3, #1
 8004948:	4652      	mov	r2, sl
 800494a:	4631      	mov	r1, r6
 800494c:	4628      	mov	r0, r5
 800494e:	47b8      	blx	r7
 8004950:	3001      	adds	r0, #1
 8004952:	f43f aeaa 	beq.w	80046aa <_printf_float+0xc2>
 8004956:	f108 0801 	add.w	r8, r8, #1
 800495a:	e7ec      	b.n	8004936 <_printf_float+0x34e>
 800495c:	4613      	mov	r3, r2
 800495e:	4631      	mov	r1, r6
 8004960:	4642      	mov	r2, r8
 8004962:	4628      	mov	r0, r5
 8004964:	47b8      	blx	r7
 8004966:	3001      	adds	r0, #1
 8004968:	d1c0      	bne.n	80048ec <_printf_float+0x304>
 800496a:	e69e      	b.n	80046aa <_printf_float+0xc2>
 800496c:	2301      	movs	r3, #1
 800496e:	4631      	mov	r1, r6
 8004970:	4628      	mov	r0, r5
 8004972:	9205      	str	r2, [sp, #20]
 8004974:	47b8      	blx	r7
 8004976:	3001      	adds	r0, #1
 8004978:	f43f ae97 	beq.w	80046aa <_printf_float+0xc2>
 800497c:	9a05      	ldr	r2, [sp, #20]
 800497e:	f10b 0b01 	add.w	fp, fp, #1
 8004982:	e7b9      	b.n	80048f8 <_printf_float+0x310>
 8004984:	ee18 3a10 	vmov	r3, s16
 8004988:	4652      	mov	r2, sl
 800498a:	4631      	mov	r1, r6
 800498c:	4628      	mov	r0, r5
 800498e:	47b8      	blx	r7
 8004990:	3001      	adds	r0, #1
 8004992:	d1be      	bne.n	8004912 <_printf_float+0x32a>
 8004994:	e689      	b.n	80046aa <_printf_float+0xc2>
 8004996:	9a05      	ldr	r2, [sp, #20]
 8004998:	464b      	mov	r3, r9
 800499a:	4442      	add	r2, r8
 800499c:	4631      	mov	r1, r6
 800499e:	4628      	mov	r0, r5
 80049a0:	47b8      	blx	r7
 80049a2:	3001      	adds	r0, #1
 80049a4:	d1c1      	bne.n	800492a <_printf_float+0x342>
 80049a6:	e680      	b.n	80046aa <_printf_float+0xc2>
 80049a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049aa:	2a01      	cmp	r2, #1
 80049ac:	dc01      	bgt.n	80049b2 <_printf_float+0x3ca>
 80049ae:	07db      	lsls	r3, r3, #31
 80049b0:	d538      	bpl.n	8004a24 <_printf_float+0x43c>
 80049b2:	2301      	movs	r3, #1
 80049b4:	4642      	mov	r2, r8
 80049b6:	4631      	mov	r1, r6
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b8      	blx	r7
 80049bc:	3001      	adds	r0, #1
 80049be:	f43f ae74 	beq.w	80046aa <_printf_float+0xc2>
 80049c2:	ee18 3a10 	vmov	r3, s16
 80049c6:	4652      	mov	r2, sl
 80049c8:	4631      	mov	r1, r6
 80049ca:	4628      	mov	r0, r5
 80049cc:	47b8      	blx	r7
 80049ce:	3001      	adds	r0, #1
 80049d0:	f43f ae6b 	beq.w	80046aa <_printf_float+0xc2>
 80049d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049d8:	2200      	movs	r2, #0
 80049da:	2300      	movs	r3, #0
 80049dc:	f7fc f87c 	bl	8000ad8 <__aeabi_dcmpeq>
 80049e0:	b9d8      	cbnz	r0, 8004a1a <_printf_float+0x432>
 80049e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e4:	f108 0201 	add.w	r2, r8, #1
 80049e8:	3b01      	subs	r3, #1
 80049ea:	4631      	mov	r1, r6
 80049ec:	4628      	mov	r0, r5
 80049ee:	47b8      	blx	r7
 80049f0:	3001      	adds	r0, #1
 80049f2:	d10e      	bne.n	8004a12 <_printf_float+0x42a>
 80049f4:	e659      	b.n	80046aa <_printf_float+0xc2>
 80049f6:	2301      	movs	r3, #1
 80049f8:	4652      	mov	r2, sl
 80049fa:	4631      	mov	r1, r6
 80049fc:	4628      	mov	r0, r5
 80049fe:	47b8      	blx	r7
 8004a00:	3001      	adds	r0, #1
 8004a02:	f43f ae52 	beq.w	80046aa <_printf_float+0xc2>
 8004a06:	f108 0801 	add.w	r8, r8, #1
 8004a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	4543      	cmp	r3, r8
 8004a10:	dcf1      	bgt.n	80049f6 <_printf_float+0x40e>
 8004a12:	464b      	mov	r3, r9
 8004a14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a18:	e6dc      	b.n	80047d4 <_printf_float+0x1ec>
 8004a1a:	f04f 0800 	mov.w	r8, #0
 8004a1e:	f104 0a1a 	add.w	sl, r4, #26
 8004a22:	e7f2      	b.n	8004a0a <_printf_float+0x422>
 8004a24:	2301      	movs	r3, #1
 8004a26:	4642      	mov	r2, r8
 8004a28:	e7df      	b.n	80049ea <_printf_float+0x402>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	464a      	mov	r2, r9
 8004a2e:	4631      	mov	r1, r6
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b8      	blx	r7
 8004a34:	3001      	adds	r0, #1
 8004a36:	f43f ae38 	beq.w	80046aa <_printf_float+0xc2>
 8004a3a:	f108 0801 	add.w	r8, r8, #1
 8004a3e:	68e3      	ldr	r3, [r4, #12]
 8004a40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a42:	1a5b      	subs	r3, r3, r1
 8004a44:	4543      	cmp	r3, r8
 8004a46:	dcf0      	bgt.n	8004a2a <_printf_float+0x442>
 8004a48:	e6fa      	b.n	8004840 <_printf_float+0x258>
 8004a4a:	f04f 0800 	mov.w	r8, #0
 8004a4e:	f104 0919 	add.w	r9, r4, #25
 8004a52:	e7f4      	b.n	8004a3e <_printf_float+0x456>

08004a54 <_printf_common>:
 8004a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a58:	4616      	mov	r6, r2
 8004a5a:	4699      	mov	r9, r3
 8004a5c:	688a      	ldr	r2, [r1, #8]
 8004a5e:	690b      	ldr	r3, [r1, #16]
 8004a60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a64:	4293      	cmp	r3, r2
 8004a66:	bfb8      	it	lt
 8004a68:	4613      	movlt	r3, r2
 8004a6a:	6033      	str	r3, [r6, #0]
 8004a6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a70:	4607      	mov	r7, r0
 8004a72:	460c      	mov	r4, r1
 8004a74:	b10a      	cbz	r2, 8004a7a <_printf_common+0x26>
 8004a76:	3301      	adds	r3, #1
 8004a78:	6033      	str	r3, [r6, #0]
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	0699      	lsls	r1, r3, #26
 8004a7e:	bf42      	ittt	mi
 8004a80:	6833      	ldrmi	r3, [r6, #0]
 8004a82:	3302      	addmi	r3, #2
 8004a84:	6033      	strmi	r3, [r6, #0]
 8004a86:	6825      	ldr	r5, [r4, #0]
 8004a88:	f015 0506 	ands.w	r5, r5, #6
 8004a8c:	d106      	bne.n	8004a9c <_printf_common+0x48>
 8004a8e:	f104 0a19 	add.w	sl, r4, #25
 8004a92:	68e3      	ldr	r3, [r4, #12]
 8004a94:	6832      	ldr	r2, [r6, #0]
 8004a96:	1a9b      	subs	r3, r3, r2
 8004a98:	42ab      	cmp	r3, r5
 8004a9a:	dc26      	bgt.n	8004aea <_printf_common+0x96>
 8004a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004aa0:	1e13      	subs	r3, r2, #0
 8004aa2:	6822      	ldr	r2, [r4, #0]
 8004aa4:	bf18      	it	ne
 8004aa6:	2301      	movne	r3, #1
 8004aa8:	0692      	lsls	r2, r2, #26
 8004aaa:	d42b      	bmi.n	8004b04 <_printf_common+0xb0>
 8004aac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	47c0      	blx	r8
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d01e      	beq.n	8004af8 <_printf_common+0xa4>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	68e5      	ldr	r5, [r4, #12]
 8004abe:	6832      	ldr	r2, [r6, #0]
 8004ac0:	f003 0306 	and.w	r3, r3, #6
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	bf08      	it	eq
 8004ac8:	1aad      	subeq	r5, r5, r2
 8004aca:	68a3      	ldr	r3, [r4, #8]
 8004acc:	6922      	ldr	r2, [r4, #16]
 8004ace:	bf0c      	ite	eq
 8004ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ad4:	2500      	movne	r5, #0
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	bfc4      	itt	gt
 8004ada:	1a9b      	subgt	r3, r3, r2
 8004adc:	18ed      	addgt	r5, r5, r3
 8004ade:	2600      	movs	r6, #0
 8004ae0:	341a      	adds	r4, #26
 8004ae2:	42b5      	cmp	r5, r6
 8004ae4:	d11a      	bne.n	8004b1c <_printf_common+0xc8>
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	e008      	b.n	8004afc <_printf_common+0xa8>
 8004aea:	2301      	movs	r3, #1
 8004aec:	4652      	mov	r2, sl
 8004aee:	4649      	mov	r1, r9
 8004af0:	4638      	mov	r0, r7
 8004af2:	47c0      	blx	r8
 8004af4:	3001      	adds	r0, #1
 8004af6:	d103      	bne.n	8004b00 <_printf_common+0xac>
 8004af8:	f04f 30ff 	mov.w	r0, #4294967295
 8004afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b00:	3501      	adds	r5, #1
 8004b02:	e7c6      	b.n	8004a92 <_printf_common+0x3e>
 8004b04:	18e1      	adds	r1, r4, r3
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	2030      	movs	r0, #48	; 0x30
 8004b0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b0e:	4422      	add	r2, r4
 8004b10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b18:	3302      	adds	r3, #2
 8004b1a:	e7c7      	b.n	8004aac <_printf_common+0x58>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	4622      	mov	r2, r4
 8004b20:	4649      	mov	r1, r9
 8004b22:	4638      	mov	r0, r7
 8004b24:	47c0      	blx	r8
 8004b26:	3001      	adds	r0, #1
 8004b28:	d0e6      	beq.n	8004af8 <_printf_common+0xa4>
 8004b2a:	3601      	adds	r6, #1
 8004b2c:	e7d9      	b.n	8004ae2 <_printf_common+0x8e>
	...

08004b30 <_printf_i>:
 8004b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b34:	7e0f      	ldrb	r7, [r1, #24]
 8004b36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b38:	2f78      	cmp	r7, #120	; 0x78
 8004b3a:	4691      	mov	r9, r2
 8004b3c:	4680      	mov	r8, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	469a      	mov	sl, r3
 8004b42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b46:	d807      	bhi.n	8004b58 <_printf_i+0x28>
 8004b48:	2f62      	cmp	r7, #98	; 0x62
 8004b4a:	d80a      	bhi.n	8004b62 <_printf_i+0x32>
 8004b4c:	2f00      	cmp	r7, #0
 8004b4e:	f000 80d8 	beq.w	8004d02 <_printf_i+0x1d2>
 8004b52:	2f58      	cmp	r7, #88	; 0x58
 8004b54:	f000 80a3 	beq.w	8004c9e <_printf_i+0x16e>
 8004b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b60:	e03a      	b.n	8004bd8 <_printf_i+0xa8>
 8004b62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b66:	2b15      	cmp	r3, #21
 8004b68:	d8f6      	bhi.n	8004b58 <_printf_i+0x28>
 8004b6a:	a101      	add	r1, pc, #4	; (adr r1, 8004b70 <_printf_i+0x40>)
 8004b6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b70:	08004bc9 	.word	0x08004bc9
 8004b74:	08004bdd 	.word	0x08004bdd
 8004b78:	08004b59 	.word	0x08004b59
 8004b7c:	08004b59 	.word	0x08004b59
 8004b80:	08004b59 	.word	0x08004b59
 8004b84:	08004b59 	.word	0x08004b59
 8004b88:	08004bdd 	.word	0x08004bdd
 8004b8c:	08004b59 	.word	0x08004b59
 8004b90:	08004b59 	.word	0x08004b59
 8004b94:	08004b59 	.word	0x08004b59
 8004b98:	08004b59 	.word	0x08004b59
 8004b9c:	08004ce9 	.word	0x08004ce9
 8004ba0:	08004c0d 	.word	0x08004c0d
 8004ba4:	08004ccb 	.word	0x08004ccb
 8004ba8:	08004b59 	.word	0x08004b59
 8004bac:	08004b59 	.word	0x08004b59
 8004bb0:	08004d0b 	.word	0x08004d0b
 8004bb4:	08004b59 	.word	0x08004b59
 8004bb8:	08004c0d 	.word	0x08004c0d
 8004bbc:	08004b59 	.word	0x08004b59
 8004bc0:	08004b59 	.word	0x08004b59
 8004bc4:	08004cd3 	.word	0x08004cd3
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	1d1a      	adds	r2, r3, #4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	602a      	str	r2, [r5, #0]
 8004bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0a3      	b.n	8004d24 <_printf_i+0x1f4>
 8004bdc:	6820      	ldr	r0, [r4, #0]
 8004bde:	6829      	ldr	r1, [r5, #0]
 8004be0:	0606      	lsls	r6, r0, #24
 8004be2:	f101 0304 	add.w	r3, r1, #4
 8004be6:	d50a      	bpl.n	8004bfe <_printf_i+0xce>
 8004be8:	680e      	ldr	r6, [r1, #0]
 8004bea:	602b      	str	r3, [r5, #0]
 8004bec:	2e00      	cmp	r6, #0
 8004bee:	da03      	bge.n	8004bf8 <_printf_i+0xc8>
 8004bf0:	232d      	movs	r3, #45	; 0x2d
 8004bf2:	4276      	negs	r6, r6
 8004bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bf8:	485e      	ldr	r0, [pc, #376]	; (8004d74 <_printf_i+0x244>)
 8004bfa:	230a      	movs	r3, #10
 8004bfc:	e019      	b.n	8004c32 <_printf_i+0x102>
 8004bfe:	680e      	ldr	r6, [r1, #0]
 8004c00:	602b      	str	r3, [r5, #0]
 8004c02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c06:	bf18      	it	ne
 8004c08:	b236      	sxthne	r6, r6
 8004c0a:	e7ef      	b.n	8004bec <_printf_i+0xbc>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	6820      	ldr	r0, [r4, #0]
 8004c10:	1d19      	adds	r1, r3, #4
 8004c12:	6029      	str	r1, [r5, #0]
 8004c14:	0601      	lsls	r1, r0, #24
 8004c16:	d501      	bpl.n	8004c1c <_printf_i+0xec>
 8004c18:	681e      	ldr	r6, [r3, #0]
 8004c1a:	e002      	b.n	8004c22 <_printf_i+0xf2>
 8004c1c:	0646      	lsls	r6, r0, #25
 8004c1e:	d5fb      	bpl.n	8004c18 <_printf_i+0xe8>
 8004c20:	881e      	ldrh	r6, [r3, #0]
 8004c22:	4854      	ldr	r0, [pc, #336]	; (8004d74 <_printf_i+0x244>)
 8004c24:	2f6f      	cmp	r7, #111	; 0x6f
 8004c26:	bf0c      	ite	eq
 8004c28:	2308      	moveq	r3, #8
 8004c2a:	230a      	movne	r3, #10
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c32:	6865      	ldr	r5, [r4, #4]
 8004c34:	60a5      	str	r5, [r4, #8]
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	bfa2      	ittt	ge
 8004c3a:	6821      	ldrge	r1, [r4, #0]
 8004c3c:	f021 0104 	bicge.w	r1, r1, #4
 8004c40:	6021      	strge	r1, [r4, #0]
 8004c42:	b90e      	cbnz	r6, 8004c48 <_printf_i+0x118>
 8004c44:	2d00      	cmp	r5, #0
 8004c46:	d04d      	beq.n	8004ce4 <_printf_i+0x1b4>
 8004c48:	4615      	mov	r5, r2
 8004c4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c4e:	fb03 6711 	mls	r7, r3, r1, r6
 8004c52:	5dc7      	ldrb	r7, [r0, r7]
 8004c54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c58:	4637      	mov	r7, r6
 8004c5a:	42bb      	cmp	r3, r7
 8004c5c:	460e      	mov	r6, r1
 8004c5e:	d9f4      	bls.n	8004c4a <_printf_i+0x11a>
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d10b      	bne.n	8004c7c <_printf_i+0x14c>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	07de      	lsls	r6, r3, #31
 8004c68:	d508      	bpl.n	8004c7c <_printf_i+0x14c>
 8004c6a:	6923      	ldr	r3, [r4, #16]
 8004c6c:	6861      	ldr	r1, [r4, #4]
 8004c6e:	4299      	cmp	r1, r3
 8004c70:	bfde      	ittt	le
 8004c72:	2330      	movle	r3, #48	; 0x30
 8004c74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c7c:	1b52      	subs	r2, r2, r5
 8004c7e:	6122      	str	r2, [r4, #16]
 8004c80:	f8cd a000 	str.w	sl, [sp]
 8004c84:	464b      	mov	r3, r9
 8004c86:	aa03      	add	r2, sp, #12
 8004c88:	4621      	mov	r1, r4
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	f7ff fee2 	bl	8004a54 <_printf_common>
 8004c90:	3001      	adds	r0, #1
 8004c92:	d14c      	bne.n	8004d2e <_printf_i+0x1fe>
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295
 8004c98:	b004      	add	sp, #16
 8004c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c9e:	4835      	ldr	r0, [pc, #212]	; (8004d74 <_printf_i+0x244>)
 8004ca0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ca4:	6829      	ldr	r1, [r5, #0]
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cac:	6029      	str	r1, [r5, #0]
 8004cae:	061d      	lsls	r5, r3, #24
 8004cb0:	d514      	bpl.n	8004cdc <_printf_i+0x1ac>
 8004cb2:	07df      	lsls	r7, r3, #31
 8004cb4:	bf44      	itt	mi
 8004cb6:	f043 0320 	orrmi.w	r3, r3, #32
 8004cba:	6023      	strmi	r3, [r4, #0]
 8004cbc:	b91e      	cbnz	r6, 8004cc6 <_printf_i+0x196>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	f023 0320 	bic.w	r3, r3, #32
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	2310      	movs	r3, #16
 8004cc8:	e7b0      	b.n	8004c2c <_printf_i+0xfc>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	f043 0320 	orr.w	r3, r3, #32
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	2378      	movs	r3, #120	; 0x78
 8004cd4:	4828      	ldr	r0, [pc, #160]	; (8004d78 <_printf_i+0x248>)
 8004cd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cda:	e7e3      	b.n	8004ca4 <_printf_i+0x174>
 8004cdc:	0659      	lsls	r1, r3, #25
 8004cde:	bf48      	it	mi
 8004ce0:	b2b6      	uxthmi	r6, r6
 8004ce2:	e7e6      	b.n	8004cb2 <_printf_i+0x182>
 8004ce4:	4615      	mov	r5, r2
 8004ce6:	e7bb      	b.n	8004c60 <_printf_i+0x130>
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	6826      	ldr	r6, [r4, #0]
 8004cec:	6961      	ldr	r1, [r4, #20]
 8004cee:	1d18      	adds	r0, r3, #4
 8004cf0:	6028      	str	r0, [r5, #0]
 8004cf2:	0635      	lsls	r5, r6, #24
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	d501      	bpl.n	8004cfc <_printf_i+0x1cc>
 8004cf8:	6019      	str	r1, [r3, #0]
 8004cfa:	e002      	b.n	8004d02 <_printf_i+0x1d2>
 8004cfc:	0670      	lsls	r0, r6, #25
 8004cfe:	d5fb      	bpl.n	8004cf8 <_printf_i+0x1c8>
 8004d00:	8019      	strh	r1, [r3, #0]
 8004d02:	2300      	movs	r3, #0
 8004d04:	6123      	str	r3, [r4, #16]
 8004d06:	4615      	mov	r5, r2
 8004d08:	e7ba      	b.n	8004c80 <_printf_i+0x150>
 8004d0a:	682b      	ldr	r3, [r5, #0]
 8004d0c:	1d1a      	adds	r2, r3, #4
 8004d0e:	602a      	str	r2, [r5, #0]
 8004d10:	681d      	ldr	r5, [r3, #0]
 8004d12:	6862      	ldr	r2, [r4, #4]
 8004d14:	2100      	movs	r1, #0
 8004d16:	4628      	mov	r0, r5
 8004d18:	f7fb fa6a 	bl	80001f0 <memchr>
 8004d1c:	b108      	cbz	r0, 8004d22 <_printf_i+0x1f2>
 8004d1e:	1b40      	subs	r0, r0, r5
 8004d20:	6060      	str	r0, [r4, #4]
 8004d22:	6863      	ldr	r3, [r4, #4]
 8004d24:	6123      	str	r3, [r4, #16]
 8004d26:	2300      	movs	r3, #0
 8004d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d2c:	e7a8      	b.n	8004c80 <_printf_i+0x150>
 8004d2e:	6923      	ldr	r3, [r4, #16]
 8004d30:	462a      	mov	r2, r5
 8004d32:	4649      	mov	r1, r9
 8004d34:	4640      	mov	r0, r8
 8004d36:	47d0      	blx	sl
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d0ab      	beq.n	8004c94 <_printf_i+0x164>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	079b      	lsls	r3, r3, #30
 8004d40:	d413      	bmi.n	8004d6a <_printf_i+0x23a>
 8004d42:	68e0      	ldr	r0, [r4, #12]
 8004d44:	9b03      	ldr	r3, [sp, #12]
 8004d46:	4298      	cmp	r0, r3
 8004d48:	bfb8      	it	lt
 8004d4a:	4618      	movlt	r0, r3
 8004d4c:	e7a4      	b.n	8004c98 <_printf_i+0x168>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4632      	mov	r2, r6
 8004d52:	4649      	mov	r1, r9
 8004d54:	4640      	mov	r0, r8
 8004d56:	47d0      	blx	sl
 8004d58:	3001      	adds	r0, #1
 8004d5a:	d09b      	beq.n	8004c94 <_printf_i+0x164>
 8004d5c:	3501      	adds	r5, #1
 8004d5e:	68e3      	ldr	r3, [r4, #12]
 8004d60:	9903      	ldr	r1, [sp, #12]
 8004d62:	1a5b      	subs	r3, r3, r1
 8004d64:	42ab      	cmp	r3, r5
 8004d66:	dcf2      	bgt.n	8004d4e <_printf_i+0x21e>
 8004d68:	e7eb      	b.n	8004d42 <_printf_i+0x212>
 8004d6a:	2500      	movs	r5, #0
 8004d6c:	f104 0619 	add.w	r6, r4, #25
 8004d70:	e7f5      	b.n	8004d5e <_printf_i+0x22e>
 8004d72:	bf00      	nop
 8004d74:	08008e5a 	.word	0x08008e5a
 8004d78:	08008e6b 	.word	0x08008e6b

08004d7c <_scanf_float>:
 8004d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d80:	b087      	sub	sp, #28
 8004d82:	4617      	mov	r7, r2
 8004d84:	9303      	str	r3, [sp, #12]
 8004d86:	688b      	ldr	r3, [r1, #8]
 8004d88:	1e5a      	subs	r2, r3, #1
 8004d8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004d8e:	bf83      	ittte	hi
 8004d90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004d94:	195b      	addhi	r3, r3, r5
 8004d96:	9302      	strhi	r3, [sp, #8]
 8004d98:	2300      	movls	r3, #0
 8004d9a:	bf86      	itte	hi
 8004d9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004da0:	608b      	strhi	r3, [r1, #8]
 8004da2:	9302      	strls	r3, [sp, #8]
 8004da4:	680b      	ldr	r3, [r1, #0]
 8004da6:	468b      	mov	fp, r1
 8004da8:	2500      	movs	r5, #0
 8004daa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004dae:	f84b 3b1c 	str.w	r3, [fp], #28
 8004db2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004db6:	4680      	mov	r8, r0
 8004db8:	460c      	mov	r4, r1
 8004dba:	465e      	mov	r6, fp
 8004dbc:	46aa      	mov	sl, r5
 8004dbe:	46a9      	mov	r9, r5
 8004dc0:	9501      	str	r5, [sp, #4]
 8004dc2:	68a2      	ldr	r2, [r4, #8]
 8004dc4:	b152      	cbz	r2, 8004ddc <_scanf_float+0x60>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b4e      	cmp	r3, #78	; 0x4e
 8004dcc:	d864      	bhi.n	8004e98 <_scanf_float+0x11c>
 8004dce:	2b40      	cmp	r3, #64	; 0x40
 8004dd0:	d83c      	bhi.n	8004e4c <_scanf_float+0xd0>
 8004dd2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004dd6:	b2c8      	uxtb	r0, r1
 8004dd8:	280e      	cmp	r0, #14
 8004dda:	d93a      	bls.n	8004e52 <_scanf_float+0xd6>
 8004ddc:	f1b9 0f00 	cmp.w	r9, #0
 8004de0:	d003      	beq.n	8004dea <_scanf_float+0x6e>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dee:	f1ba 0f01 	cmp.w	sl, #1
 8004df2:	f200 8113 	bhi.w	800501c <_scanf_float+0x2a0>
 8004df6:	455e      	cmp	r6, fp
 8004df8:	f200 8105 	bhi.w	8005006 <_scanf_float+0x28a>
 8004dfc:	2501      	movs	r5, #1
 8004dfe:	4628      	mov	r0, r5
 8004e00:	b007      	add	sp, #28
 8004e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e06:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004e0a:	2a0d      	cmp	r2, #13
 8004e0c:	d8e6      	bhi.n	8004ddc <_scanf_float+0x60>
 8004e0e:	a101      	add	r1, pc, #4	; (adr r1, 8004e14 <_scanf_float+0x98>)
 8004e10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004e14:	08004f53 	.word	0x08004f53
 8004e18:	08004ddd 	.word	0x08004ddd
 8004e1c:	08004ddd 	.word	0x08004ddd
 8004e20:	08004ddd 	.word	0x08004ddd
 8004e24:	08004fb3 	.word	0x08004fb3
 8004e28:	08004f8b 	.word	0x08004f8b
 8004e2c:	08004ddd 	.word	0x08004ddd
 8004e30:	08004ddd 	.word	0x08004ddd
 8004e34:	08004f61 	.word	0x08004f61
 8004e38:	08004ddd 	.word	0x08004ddd
 8004e3c:	08004ddd 	.word	0x08004ddd
 8004e40:	08004ddd 	.word	0x08004ddd
 8004e44:	08004ddd 	.word	0x08004ddd
 8004e48:	08004f19 	.word	0x08004f19
 8004e4c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004e50:	e7db      	b.n	8004e0a <_scanf_float+0x8e>
 8004e52:	290e      	cmp	r1, #14
 8004e54:	d8c2      	bhi.n	8004ddc <_scanf_float+0x60>
 8004e56:	a001      	add	r0, pc, #4	; (adr r0, 8004e5c <_scanf_float+0xe0>)
 8004e58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004e5c:	08004f0b 	.word	0x08004f0b
 8004e60:	08004ddd 	.word	0x08004ddd
 8004e64:	08004f0b 	.word	0x08004f0b
 8004e68:	08004f9f 	.word	0x08004f9f
 8004e6c:	08004ddd 	.word	0x08004ddd
 8004e70:	08004eb9 	.word	0x08004eb9
 8004e74:	08004ef5 	.word	0x08004ef5
 8004e78:	08004ef5 	.word	0x08004ef5
 8004e7c:	08004ef5 	.word	0x08004ef5
 8004e80:	08004ef5 	.word	0x08004ef5
 8004e84:	08004ef5 	.word	0x08004ef5
 8004e88:	08004ef5 	.word	0x08004ef5
 8004e8c:	08004ef5 	.word	0x08004ef5
 8004e90:	08004ef5 	.word	0x08004ef5
 8004e94:	08004ef5 	.word	0x08004ef5
 8004e98:	2b6e      	cmp	r3, #110	; 0x6e
 8004e9a:	d809      	bhi.n	8004eb0 <_scanf_float+0x134>
 8004e9c:	2b60      	cmp	r3, #96	; 0x60
 8004e9e:	d8b2      	bhi.n	8004e06 <_scanf_float+0x8a>
 8004ea0:	2b54      	cmp	r3, #84	; 0x54
 8004ea2:	d077      	beq.n	8004f94 <_scanf_float+0x218>
 8004ea4:	2b59      	cmp	r3, #89	; 0x59
 8004ea6:	d199      	bne.n	8004ddc <_scanf_float+0x60>
 8004ea8:	2d07      	cmp	r5, #7
 8004eaa:	d197      	bne.n	8004ddc <_scanf_float+0x60>
 8004eac:	2508      	movs	r5, #8
 8004eae:	e029      	b.n	8004f04 <_scanf_float+0x188>
 8004eb0:	2b74      	cmp	r3, #116	; 0x74
 8004eb2:	d06f      	beq.n	8004f94 <_scanf_float+0x218>
 8004eb4:	2b79      	cmp	r3, #121	; 0x79
 8004eb6:	e7f6      	b.n	8004ea6 <_scanf_float+0x12a>
 8004eb8:	6821      	ldr	r1, [r4, #0]
 8004eba:	05c8      	lsls	r0, r1, #23
 8004ebc:	d51a      	bpl.n	8004ef4 <_scanf_float+0x178>
 8004ebe:	9b02      	ldr	r3, [sp, #8]
 8004ec0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004ec4:	6021      	str	r1, [r4, #0]
 8004ec6:	f109 0901 	add.w	r9, r9, #1
 8004eca:	b11b      	cbz	r3, 8004ed4 <_scanf_float+0x158>
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	3201      	adds	r2, #1
 8004ed0:	9302      	str	r3, [sp, #8]
 8004ed2:	60a2      	str	r2, [r4, #8]
 8004ed4:	68a3      	ldr	r3, [r4, #8]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	60a3      	str	r3, [r4, #8]
 8004eda:	6923      	ldr	r3, [r4, #16]
 8004edc:	3301      	adds	r3, #1
 8004ede:	6123      	str	r3, [r4, #16]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	f340 8084 	ble.w	8004ff4 <_scanf_float+0x278>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	e766      	b.n	8004dc2 <_scanf_float+0x46>
 8004ef4:	eb1a 0f05 	cmn.w	sl, r5
 8004ef8:	f47f af70 	bne.w	8004ddc <_scanf_float+0x60>
 8004efc:	6822      	ldr	r2, [r4, #0]
 8004efe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004f02:	6022      	str	r2, [r4, #0]
 8004f04:	f806 3b01 	strb.w	r3, [r6], #1
 8004f08:	e7e4      	b.n	8004ed4 <_scanf_float+0x158>
 8004f0a:	6822      	ldr	r2, [r4, #0]
 8004f0c:	0610      	lsls	r0, r2, #24
 8004f0e:	f57f af65 	bpl.w	8004ddc <_scanf_float+0x60>
 8004f12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f16:	e7f4      	b.n	8004f02 <_scanf_float+0x186>
 8004f18:	f1ba 0f00 	cmp.w	sl, #0
 8004f1c:	d10e      	bne.n	8004f3c <_scanf_float+0x1c0>
 8004f1e:	f1b9 0f00 	cmp.w	r9, #0
 8004f22:	d10e      	bne.n	8004f42 <_scanf_float+0x1c6>
 8004f24:	6822      	ldr	r2, [r4, #0]
 8004f26:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f2e:	d108      	bne.n	8004f42 <_scanf_float+0x1c6>
 8004f30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f34:	6022      	str	r2, [r4, #0]
 8004f36:	f04f 0a01 	mov.w	sl, #1
 8004f3a:	e7e3      	b.n	8004f04 <_scanf_float+0x188>
 8004f3c:	f1ba 0f02 	cmp.w	sl, #2
 8004f40:	d055      	beq.n	8004fee <_scanf_float+0x272>
 8004f42:	2d01      	cmp	r5, #1
 8004f44:	d002      	beq.n	8004f4c <_scanf_float+0x1d0>
 8004f46:	2d04      	cmp	r5, #4
 8004f48:	f47f af48 	bne.w	8004ddc <_scanf_float+0x60>
 8004f4c:	3501      	adds	r5, #1
 8004f4e:	b2ed      	uxtb	r5, r5
 8004f50:	e7d8      	b.n	8004f04 <_scanf_float+0x188>
 8004f52:	f1ba 0f01 	cmp.w	sl, #1
 8004f56:	f47f af41 	bne.w	8004ddc <_scanf_float+0x60>
 8004f5a:	f04f 0a02 	mov.w	sl, #2
 8004f5e:	e7d1      	b.n	8004f04 <_scanf_float+0x188>
 8004f60:	b97d      	cbnz	r5, 8004f82 <_scanf_float+0x206>
 8004f62:	f1b9 0f00 	cmp.w	r9, #0
 8004f66:	f47f af3c 	bne.w	8004de2 <_scanf_float+0x66>
 8004f6a:	6822      	ldr	r2, [r4, #0]
 8004f6c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f70:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f74:	f47f af39 	bne.w	8004dea <_scanf_float+0x6e>
 8004f78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f7c:	6022      	str	r2, [r4, #0]
 8004f7e:	2501      	movs	r5, #1
 8004f80:	e7c0      	b.n	8004f04 <_scanf_float+0x188>
 8004f82:	2d03      	cmp	r5, #3
 8004f84:	d0e2      	beq.n	8004f4c <_scanf_float+0x1d0>
 8004f86:	2d05      	cmp	r5, #5
 8004f88:	e7de      	b.n	8004f48 <_scanf_float+0x1cc>
 8004f8a:	2d02      	cmp	r5, #2
 8004f8c:	f47f af26 	bne.w	8004ddc <_scanf_float+0x60>
 8004f90:	2503      	movs	r5, #3
 8004f92:	e7b7      	b.n	8004f04 <_scanf_float+0x188>
 8004f94:	2d06      	cmp	r5, #6
 8004f96:	f47f af21 	bne.w	8004ddc <_scanf_float+0x60>
 8004f9a:	2507      	movs	r5, #7
 8004f9c:	e7b2      	b.n	8004f04 <_scanf_float+0x188>
 8004f9e:	6822      	ldr	r2, [r4, #0]
 8004fa0:	0591      	lsls	r1, r2, #22
 8004fa2:	f57f af1b 	bpl.w	8004ddc <_scanf_float+0x60>
 8004fa6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004faa:	6022      	str	r2, [r4, #0]
 8004fac:	f8cd 9004 	str.w	r9, [sp, #4]
 8004fb0:	e7a8      	b.n	8004f04 <_scanf_float+0x188>
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004fb8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004fbc:	d006      	beq.n	8004fcc <_scanf_float+0x250>
 8004fbe:	0550      	lsls	r0, r2, #21
 8004fc0:	f57f af0c 	bpl.w	8004ddc <_scanf_float+0x60>
 8004fc4:	f1b9 0f00 	cmp.w	r9, #0
 8004fc8:	f43f af0f 	beq.w	8004dea <_scanf_float+0x6e>
 8004fcc:	0591      	lsls	r1, r2, #22
 8004fce:	bf58      	it	pl
 8004fd0:	9901      	ldrpl	r1, [sp, #4]
 8004fd2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004fd6:	bf58      	it	pl
 8004fd8:	eba9 0101 	subpl.w	r1, r9, r1
 8004fdc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004fe0:	bf58      	it	pl
 8004fe2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004fe6:	6022      	str	r2, [r4, #0]
 8004fe8:	f04f 0900 	mov.w	r9, #0
 8004fec:	e78a      	b.n	8004f04 <_scanf_float+0x188>
 8004fee:	f04f 0a03 	mov.w	sl, #3
 8004ff2:	e787      	b.n	8004f04 <_scanf_float+0x188>
 8004ff4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	4798      	blx	r3
 8004ffe:	2800      	cmp	r0, #0
 8005000:	f43f aedf 	beq.w	8004dc2 <_scanf_float+0x46>
 8005004:	e6ea      	b.n	8004ddc <_scanf_float+0x60>
 8005006:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800500a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800500e:	463a      	mov	r2, r7
 8005010:	4640      	mov	r0, r8
 8005012:	4798      	blx	r3
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	3b01      	subs	r3, #1
 8005018:	6123      	str	r3, [r4, #16]
 800501a:	e6ec      	b.n	8004df6 <_scanf_float+0x7a>
 800501c:	1e6b      	subs	r3, r5, #1
 800501e:	2b06      	cmp	r3, #6
 8005020:	d825      	bhi.n	800506e <_scanf_float+0x2f2>
 8005022:	2d02      	cmp	r5, #2
 8005024:	d836      	bhi.n	8005094 <_scanf_float+0x318>
 8005026:	455e      	cmp	r6, fp
 8005028:	f67f aee8 	bls.w	8004dfc <_scanf_float+0x80>
 800502c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005030:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005034:	463a      	mov	r2, r7
 8005036:	4640      	mov	r0, r8
 8005038:	4798      	blx	r3
 800503a:	6923      	ldr	r3, [r4, #16]
 800503c:	3b01      	subs	r3, #1
 800503e:	6123      	str	r3, [r4, #16]
 8005040:	e7f1      	b.n	8005026 <_scanf_float+0x2aa>
 8005042:	9802      	ldr	r0, [sp, #8]
 8005044:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005048:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800504c:	9002      	str	r0, [sp, #8]
 800504e:	463a      	mov	r2, r7
 8005050:	4640      	mov	r0, r8
 8005052:	4798      	blx	r3
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	3b01      	subs	r3, #1
 8005058:	6123      	str	r3, [r4, #16]
 800505a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800505e:	fa5f fa8a 	uxtb.w	sl, sl
 8005062:	f1ba 0f02 	cmp.w	sl, #2
 8005066:	d1ec      	bne.n	8005042 <_scanf_float+0x2c6>
 8005068:	3d03      	subs	r5, #3
 800506a:	b2ed      	uxtb	r5, r5
 800506c:	1b76      	subs	r6, r6, r5
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	05da      	lsls	r2, r3, #23
 8005072:	d52f      	bpl.n	80050d4 <_scanf_float+0x358>
 8005074:	055b      	lsls	r3, r3, #21
 8005076:	d510      	bpl.n	800509a <_scanf_float+0x31e>
 8005078:	455e      	cmp	r6, fp
 800507a:	f67f aebf 	bls.w	8004dfc <_scanf_float+0x80>
 800507e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005082:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005086:	463a      	mov	r2, r7
 8005088:	4640      	mov	r0, r8
 800508a:	4798      	blx	r3
 800508c:	6923      	ldr	r3, [r4, #16]
 800508e:	3b01      	subs	r3, #1
 8005090:	6123      	str	r3, [r4, #16]
 8005092:	e7f1      	b.n	8005078 <_scanf_float+0x2fc>
 8005094:	46aa      	mov	sl, r5
 8005096:	9602      	str	r6, [sp, #8]
 8005098:	e7df      	b.n	800505a <_scanf_float+0x2de>
 800509a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	2965      	cmp	r1, #101	; 0x65
 80050a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80050a6:	f106 35ff 	add.w	r5, r6, #4294967295
 80050aa:	6123      	str	r3, [r4, #16]
 80050ac:	d00c      	beq.n	80050c8 <_scanf_float+0x34c>
 80050ae:	2945      	cmp	r1, #69	; 0x45
 80050b0:	d00a      	beq.n	80050c8 <_scanf_float+0x34c>
 80050b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050b6:	463a      	mov	r2, r7
 80050b8:	4640      	mov	r0, r8
 80050ba:	4798      	blx	r3
 80050bc:	6923      	ldr	r3, [r4, #16]
 80050be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	1eb5      	subs	r5, r6, #2
 80050c6:	6123      	str	r3, [r4, #16]
 80050c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050cc:	463a      	mov	r2, r7
 80050ce:	4640      	mov	r0, r8
 80050d0:	4798      	blx	r3
 80050d2:	462e      	mov	r6, r5
 80050d4:	6825      	ldr	r5, [r4, #0]
 80050d6:	f015 0510 	ands.w	r5, r5, #16
 80050da:	d159      	bne.n	8005190 <_scanf_float+0x414>
 80050dc:	7035      	strb	r5, [r6, #0]
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e8:	d11b      	bne.n	8005122 <_scanf_float+0x3a6>
 80050ea:	9b01      	ldr	r3, [sp, #4]
 80050ec:	454b      	cmp	r3, r9
 80050ee:	eba3 0209 	sub.w	r2, r3, r9
 80050f2:	d123      	bne.n	800513c <_scanf_float+0x3c0>
 80050f4:	2200      	movs	r2, #0
 80050f6:	4659      	mov	r1, fp
 80050f8:	4640      	mov	r0, r8
 80050fa:	f000 fecb 	bl	8005e94 <_strtod_r>
 80050fe:	6822      	ldr	r2, [r4, #0]
 8005100:	9b03      	ldr	r3, [sp, #12]
 8005102:	f012 0f02 	tst.w	r2, #2
 8005106:	ec57 6b10 	vmov	r6, r7, d0
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	d021      	beq.n	8005152 <_scanf_float+0x3d6>
 800510e:	9903      	ldr	r1, [sp, #12]
 8005110:	1d1a      	adds	r2, r3, #4
 8005112:	600a      	str	r2, [r1, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	e9c3 6700 	strd	r6, r7, [r3]
 800511a:	68e3      	ldr	r3, [r4, #12]
 800511c:	3301      	adds	r3, #1
 800511e:	60e3      	str	r3, [r4, #12]
 8005120:	e66d      	b.n	8004dfe <_scanf_float+0x82>
 8005122:	9b04      	ldr	r3, [sp, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0e5      	beq.n	80050f4 <_scanf_float+0x378>
 8005128:	9905      	ldr	r1, [sp, #20]
 800512a:	230a      	movs	r3, #10
 800512c:	462a      	mov	r2, r5
 800512e:	3101      	adds	r1, #1
 8005130:	4640      	mov	r0, r8
 8005132:	f000 ff37 	bl	8005fa4 <_strtol_r>
 8005136:	9b04      	ldr	r3, [sp, #16]
 8005138:	9e05      	ldr	r6, [sp, #20]
 800513a:	1ac2      	subs	r2, r0, r3
 800513c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005140:	429e      	cmp	r6, r3
 8005142:	bf28      	it	cs
 8005144:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005148:	4912      	ldr	r1, [pc, #72]	; (8005194 <_scanf_float+0x418>)
 800514a:	4630      	mov	r0, r6
 800514c:	f000 f860 	bl	8005210 <siprintf>
 8005150:	e7d0      	b.n	80050f4 <_scanf_float+0x378>
 8005152:	9903      	ldr	r1, [sp, #12]
 8005154:	f012 0f04 	tst.w	r2, #4
 8005158:	f103 0204 	add.w	r2, r3, #4
 800515c:	600a      	str	r2, [r1, #0]
 800515e:	d1d9      	bne.n	8005114 <_scanf_float+0x398>
 8005160:	f8d3 8000 	ldr.w	r8, [r3]
 8005164:	ee10 2a10 	vmov	r2, s0
 8005168:	ee10 0a10 	vmov	r0, s0
 800516c:	463b      	mov	r3, r7
 800516e:	4639      	mov	r1, r7
 8005170:	f7fb fce4 	bl	8000b3c <__aeabi_dcmpun>
 8005174:	b128      	cbz	r0, 8005182 <_scanf_float+0x406>
 8005176:	4808      	ldr	r0, [pc, #32]	; (8005198 <_scanf_float+0x41c>)
 8005178:	f000 f810 	bl	800519c <nanf>
 800517c:	ed88 0a00 	vstr	s0, [r8]
 8005180:	e7cb      	b.n	800511a <_scanf_float+0x39e>
 8005182:	4630      	mov	r0, r6
 8005184:	4639      	mov	r1, r7
 8005186:	f7fb fd37 	bl	8000bf8 <__aeabi_d2f>
 800518a:	f8c8 0000 	str.w	r0, [r8]
 800518e:	e7c4      	b.n	800511a <_scanf_float+0x39e>
 8005190:	2500      	movs	r5, #0
 8005192:	e634      	b.n	8004dfe <_scanf_float+0x82>
 8005194:	08008e7c 	.word	0x08008e7c
 8005198:	08009288 	.word	0x08009288

0800519c <nanf>:
 800519c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80051a4 <nanf+0x8>
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	7fc00000 	.word	0x7fc00000

080051a8 <sniprintf>:
 80051a8:	b40c      	push	{r2, r3}
 80051aa:	b530      	push	{r4, r5, lr}
 80051ac:	4b17      	ldr	r3, [pc, #92]	; (800520c <sniprintf+0x64>)
 80051ae:	1e0c      	subs	r4, r1, #0
 80051b0:	681d      	ldr	r5, [r3, #0]
 80051b2:	b09d      	sub	sp, #116	; 0x74
 80051b4:	da08      	bge.n	80051c8 <sniprintf+0x20>
 80051b6:	238b      	movs	r3, #139	; 0x8b
 80051b8:	602b      	str	r3, [r5, #0]
 80051ba:	f04f 30ff 	mov.w	r0, #4294967295
 80051be:	b01d      	add	sp, #116	; 0x74
 80051c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051c4:	b002      	add	sp, #8
 80051c6:	4770      	bx	lr
 80051c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80051cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80051d0:	bf14      	ite	ne
 80051d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80051d6:	4623      	moveq	r3, r4
 80051d8:	9304      	str	r3, [sp, #16]
 80051da:	9307      	str	r3, [sp, #28]
 80051dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051e0:	9002      	str	r0, [sp, #8]
 80051e2:	9006      	str	r0, [sp, #24]
 80051e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80051e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051ea:	ab21      	add	r3, sp, #132	; 0x84
 80051ec:	a902      	add	r1, sp, #8
 80051ee:	4628      	mov	r0, r5
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	f002 ff03 	bl	8007ffc <_svfiprintf_r>
 80051f6:	1c43      	adds	r3, r0, #1
 80051f8:	bfbc      	itt	lt
 80051fa:	238b      	movlt	r3, #139	; 0x8b
 80051fc:	602b      	strlt	r3, [r5, #0]
 80051fe:	2c00      	cmp	r4, #0
 8005200:	d0dd      	beq.n	80051be <sniprintf+0x16>
 8005202:	9b02      	ldr	r3, [sp, #8]
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	e7d9      	b.n	80051be <sniprintf+0x16>
 800520a:	bf00      	nop
 800520c:	20000034 	.word	0x20000034

08005210 <siprintf>:
 8005210:	b40e      	push	{r1, r2, r3}
 8005212:	b500      	push	{lr}
 8005214:	b09c      	sub	sp, #112	; 0x70
 8005216:	ab1d      	add	r3, sp, #116	; 0x74
 8005218:	9002      	str	r0, [sp, #8]
 800521a:	9006      	str	r0, [sp, #24]
 800521c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005220:	4809      	ldr	r0, [pc, #36]	; (8005248 <siprintf+0x38>)
 8005222:	9107      	str	r1, [sp, #28]
 8005224:	9104      	str	r1, [sp, #16]
 8005226:	4909      	ldr	r1, [pc, #36]	; (800524c <siprintf+0x3c>)
 8005228:	f853 2b04 	ldr.w	r2, [r3], #4
 800522c:	9105      	str	r1, [sp, #20]
 800522e:	6800      	ldr	r0, [r0, #0]
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	a902      	add	r1, sp, #8
 8005234:	f002 fee2 	bl	8007ffc <_svfiprintf_r>
 8005238:	9b02      	ldr	r3, [sp, #8]
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	b01c      	add	sp, #112	; 0x70
 8005240:	f85d eb04 	ldr.w	lr, [sp], #4
 8005244:	b003      	add	sp, #12
 8005246:	4770      	bx	lr
 8005248:	20000034 	.word	0x20000034
 800524c:	ffff0208 	.word	0xffff0208

08005250 <sulp>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	4604      	mov	r4, r0
 8005254:	460d      	mov	r5, r1
 8005256:	ec45 4b10 	vmov	d0, r4, r5
 800525a:	4616      	mov	r6, r2
 800525c:	f002 fc2c 	bl	8007ab8 <__ulp>
 8005260:	ec51 0b10 	vmov	r0, r1, d0
 8005264:	b17e      	cbz	r6, 8005286 <sulp+0x36>
 8005266:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800526a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800526e:	2b00      	cmp	r3, #0
 8005270:	dd09      	ble.n	8005286 <sulp+0x36>
 8005272:	051b      	lsls	r3, r3, #20
 8005274:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005278:	2400      	movs	r4, #0
 800527a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800527e:	4622      	mov	r2, r4
 8005280:	462b      	mov	r3, r5
 8005282:	f7fb f9c1 	bl	8000608 <__aeabi_dmul>
 8005286:	bd70      	pop	{r4, r5, r6, pc}

08005288 <_strtod_l>:
 8005288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528c:	ed2d 8b02 	vpush	{d8}
 8005290:	b09d      	sub	sp, #116	; 0x74
 8005292:	461f      	mov	r7, r3
 8005294:	2300      	movs	r3, #0
 8005296:	9318      	str	r3, [sp, #96]	; 0x60
 8005298:	4ba2      	ldr	r3, [pc, #648]	; (8005524 <_strtod_l+0x29c>)
 800529a:	9213      	str	r2, [sp, #76]	; 0x4c
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	9305      	str	r3, [sp, #20]
 80052a0:	4604      	mov	r4, r0
 80052a2:	4618      	mov	r0, r3
 80052a4:	4688      	mov	r8, r1
 80052a6:	f7fa ff9b 	bl	80001e0 <strlen>
 80052aa:	f04f 0a00 	mov.w	sl, #0
 80052ae:	4605      	mov	r5, r0
 80052b0:	f04f 0b00 	mov.w	fp, #0
 80052b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80052b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052ba:	781a      	ldrb	r2, [r3, #0]
 80052bc:	2a2b      	cmp	r2, #43	; 0x2b
 80052be:	d04e      	beq.n	800535e <_strtod_l+0xd6>
 80052c0:	d83b      	bhi.n	800533a <_strtod_l+0xb2>
 80052c2:	2a0d      	cmp	r2, #13
 80052c4:	d834      	bhi.n	8005330 <_strtod_l+0xa8>
 80052c6:	2a08      	cmp	r2, #8
 80052c8:	d834      	bhi.n	8005334 <_strtod_l+0xac>
 80052ca:	2a00      	cmp	r2, #0
 80052cc:	d03e      	beq.n	800534c <_strtod_l+0xc4>
 80052ce:	2300      	movs	r3, #0
 80052d0:	930a      	str	r3, [sp, #40]	; 0x28
 80052d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80052d4:	7833      	ldrb	r3, [r6, #0]
 80052d6:	2b30      	cmp	r3, #48	; 0x30
 80052d8:	f040 80b0 	bne.w	800543c <_strtod_l+0x1b4>
 80052dc:	7873      	ldrb	r3, [r6, #1]
 80052de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80052e2:	2b58      	cmp	r3, #88	; 0x58
 80052e4:	d168      	bne.n	80053b8 <_strtod_l+0x130>
 80052e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	ab18      	add	r3, sp, #96	; 0x60
 80052ec:	9702      	str	r7, [sp, #8]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	4a8d      	ldr	r2, [pc, #564]	; (8005528 <_strtod_l+0x2a0>)
 80052f2:	ab19      	add	r3, sp, #100	; 0x64
 80052f4:	a917      	add	r1, sp, #92	; 0x5c
 80052f6:	4620      	mov	r0, r4
 80052f8:	f001 fd38 	bl	8006d6c <__gethex>
 80052fc:	f010 0707 	ands.w	r7, r0, #7
 8005300:	4605      	mov	r5, r0
 8005302:	d005      	beq.n	8005310 <_strtod_l+0x88>
 8005304:	2f06      	cmp	r7, #6
 8005306:	d12c      	bne.n	8005362 <_strtod_l+0xda>
 8005308:	3601      	adds	r6, #1
 800530a:	2300      	movs	r3, #0
 800530c:	9617      	str	r6, [sp, #92]	; 0x5c
 800530e:	930a      	str	r3, [sp, #40]	; 0x28
 8005310:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005312:	2b00      	cmp	r3, #0
 8005314:	f040 8590 	bne.w	8005e38 <_strtod_l+0xbb0>
 8005318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800531a:	b1eb      	cbz	r3, 8005358 <_strtod_l+0xd0>
 800531c:	4652      	mov	r2, sl
 800531e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005322:	ec43 2b10 	vmov	d0, r2, r3
 8005326:	b01d      	add	sp, #116	; 0x74
 8005328:	ecbd 8b02 	vpop	{d8}
 800532c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005330:	2a20      	cmp	r2, #32
 8005332:	d1cc      	bne.n	80052ce <_strtod_l+0x46>
 8005334:	3301      	adds	r3, #1
 8005336:	9317      	str	r3, [sp, #92]	; 0x5c
 8005338:	e7be      	b.n	80052b8 <_strtod_l+0x30>
 800533a:	2a2d      	cmp	r2, #45	; 0x2d
 800533c:	d1c7      	bne.n	80052ce <_strtod_l+0x46>
 800533e:	2201      	movs	r2, #1
 8005340:	920a      	str	r2, [sp, #40]	; 0x28
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	9217      	str	r2, [sp, #92]	; 0x5c
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1c2      	bne.n	80052d2 <_strtod_l+0x4a>
 800534c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800534e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005352:	2b00      	cmp	r3, #0
 8005354:	f040 856e 	bne.w	8005e34 <_strtod_l+0xbac>
 8005358:	4652      	mov	r2, sl
 800535a:	465b      	mov	r3, fp
 800535c:	e7e1      	b.n	8005322 <_strtod_l+0x9a>
 800535e:	2200      	movs	r2, #0
 8005360:	e7ee      	b.n	8005340 <_strtod_l+0xb8>
 8005362:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005364:	b13a      	cbz	r2, 8005376 <_strtod_l+0xee>
 8005366:	2135      	movs	r1, #53	; 0x35
 8005368:	a81a      	add	r0, sp, #104	; 0x68
 800536a:	f002 fcb0 	bl	8007cce <__copybits>
 800536e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005370:	4620      	mov	r0, r4
 8005372:	f002 f86f 	bl	8007454 <_Bfree>
 8005376:	3f01      	subs	r7, #1
 8005378:	2f04      	cmp	r7, #4
 800537a:	d806      	bhi.n	800538a <_strtod_l+0x102>
 800537c:	e8df f007 	tbb	[pc, r7]
 8005380:	1714030a 	.word	0x1714030a
 8005384:	0a          	.byte	0x0a
 8005385:	00          	.byte	0x00
 8005386:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800538a:	0728      	lsls	r0, r5, #28
 800538c:	d5c0      	bpl.n	8005310 <_strtod_l+0x88>
 800538e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005392:	e7bd      	b.n	8005310 <_strtod_l+0x88>
 8005394:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005398:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800539a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800539e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80053a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80053a6:	e7f0      	b.n	800538a <_strtod_l+0x102>
 80053a8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800552c <_strtod_l+0x2a4>
 80053ac:	e7ed      	b.n	800538a <_strtod_l+0x102>
 80053ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80053b2:	f04f 3aff 	mov.w	sl, #4294967295
 80053b6:	e7e8      	b.n	800538a <_strtod_l+0x102>
 80053b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80053be:	785b      	ldrb	r3, [r3, #1]
 80053c0:	2b30      	cmp	r3, #48	; 0x30
 80053c2:	d0f9      	beq.n	80053b8 <_strtod_l+0x130>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0a3      	beq.n	8005310 <_strtod_l+0x88>
 80053c8:	2301      	movs	r3, #1
 80053ca:	f04f 0900 	mov.w	r9, #0
 80053ce:	9304      	str	r3, [sp, #16]
 80053d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053d2:	9308      	str	r3, [sp, #32]
 80053d4:	f8cd 901c 	str.w	r9, [sp, #28]
 80053d8:	464f      	mov	r7, r9
 80053da:	220a      	movs	r2, #10
 80053dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80053de:	7806      	ldrb	r6, [r0, #0]
 80053e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80053e4:	b2d9      	uxtb	r1, r3
 80053e6:	2909      	cmp	r1, #9
 80053e8:	d92a      	bls.n	8005440 <_strtod_l+0x1b8>
 80053ea:	9905      	ldr	r1, [sp, #20]
 80053ec:	462a      	mov	r2, r5
 80053ee:	f002 ff1f 	bl	8008230 <strncmp>
 80053f2:	b398      	cbz	r0, 800545c <_strtod_l+0x1d4>
 80053f4:	2000      	movs	r0, #0
 80053f6:	4632      	mov	r2, r6
 80053f8:	463d      	mov	r5, r7
 80053fa:	9005      	str	r0, [sp, #20]
 80053fc:	4603      	mov	r3, r0
 80053fe:	2a65      	cmp	r2, #101	; 0x65
 8005400:	d001      	beq.n	8005406 <_strtod_l+0x17e>
 8005402:	2a45      	cmp	r2, #69	; 0x45
 8005404:	d118      	bne.n	8005438 <_strtod_l+0x1b0>
 8005406:	b91d      	cbnz	r5, 8005410 <_strtod_l+0x188>
 8005408:	9a04      	ldr	r2, [sp, #16]
 800540a:	4302      	orrs	r2, r0
 800540c:	d09e      	beq.n	800534c <_strtod_l+0xc4>
 800540e:	2500      	movs	r5, #0
 8005410:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005414:	f108 0201 	add.w	r2, r8, #1
 8005418:	9217      	str	r2, [sp, #92]	; 0x5c
 800541a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800541e:	2a2b      	cmp	r2, #43	; 0x2b
 8005420:	d075      	beq.n	800550e <_strtod_l+0x286>
 8005422:	2a2d      	cmp	r2, #45	; 0x2d
 8005424:	d07b      	beq.n	800551e <_strtod_l+0x296>
 8005426:	f04f 0c00 	mov.w	ip, #0
 800542a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800542e:	2909      	cmp	r1, #9
 8005430:	f240 8082 	bls.w	8005538 <_strtod_l+0x2b0>
 8005434:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005438:	2600      	movs	r6, #0
 800543a:	e09d      	b.n	8005578 <_strtod_l+0x2f0>
 800543c:	2300      	movs	r3, #0
 800543e:	e7c4      	b.n	80053ca <_strtod_l+0x142>
 8005440:	2f08      	cmp	r7, #8
 8005442:	bfd8      	it	le
 8005444:	9907      	ldrle	r1, [sp, #28]
 8005446:	f100 0001 	add.w	r0, r0, #1
 800544a:	bfda      	itte	le
 800544c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005450:	9307      	strle	r3, [sp, #28]
 8005452:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005456:	3701      	adds	r7, #1
 8005458:	9017      	str	r0, [sp, #92]	; 0x5c
 800545a:	e7bf      	b.n	80053dc <_strtod_l+0x154>
 800545c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800545e:	195a      	adds	r2, r3, r5
 8005460:	9217      	str	r2, [sp, #92]	; 0x5c
 8005462:	5d5a      	ldrb	r2, [r3, r5]
 8005464:	2f00      	cmp	r7, #0
 8005466:	d037      	beq.n	80054d8 <_strtod_l+0x250>
 8005468:	9005      	str	r0, [sp, #20]
 800546a:	463d      	mov	r5, r7
 800546c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005470:	2b09      	cmp	r3, #9
 8005472:	d912      	bls.n	800549a <_strtod_l+0x212>
 8005474:	2301      	movs	r3, #1
 8005476:	e7c2      	b.n	80053fe <_strtod_l+0x176>
 8005478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	9217      	str	r2, [sp, #92]	; 0x5c
 800547e:	785a      	ldrb	r2, [r3, #1]
 8005480:	3001      	adds	r0, #1
 8005482:	2a30      	cmp	r2, #48	; 0x30
 8005484:	d0f8      	beq.n	8005478 <_strtod_l+0x1f0>
 8005486:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800548a:	2b08      	cmp	r3, #8
 800548c:	f200 84d9 	bhi.w	8005e42 <_strtod_l+0xbba>
 8005490:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005492:	9005      	str	r0, [sp, #20]
 8005494:	2000      	movs	r0, #0
 8005496:	9308      	str	r3, [sp, #32]
 8005498:	4605      	mov	r5, r0
 800549a:	3a30      	subs	r2, #48	; 0x30
 800549c:	f100 0301 	add.w	r3, r0, #1
 80054a0:	d014      	beq.n	80054cc <_strtod_l+0x244>
 80054a2:	9905      	ldr	r1, [sp, #20]
 80054a4:	4419      	add	r1, r3
 80054a6:	9105      	str	r1, [sp, #20]
 80054a8:	462b      	mov	r3, r5
 80054aa:	eb00 0e05 	add.w	lr, r0, r5
 80054ae:	210a      	movs	r1, #10
 80054b0:	4573      	cmp	r3, lr
 80054b2:	d113      	bne.n	80054dc <_strtod_l+0x254>
 80054b4:	182b      	adds	r3, r5, r0
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	f105 0501 	add.w	r5, r5, #1
 80054bc:	4405      	add	r5, r0
 80054be:	dc1c      	bgt.n	80054fa <_strtod_l+0x272>
 80054c0:	9907      	ldr	r1, [sp, #28]
 80054c2:	230a      	movs	r3, #10
 80054c4:	fb03 2301 	mla	r3, r3, r1, r2
 80054c8:	9307      	str	r3, [sp, #28]
 80054ca:	2300      	movs	r3, #0
 80054cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80054ce:	1c51      	adds	r1, r2, #1
 80054d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80054d2:	7852      	ldrb	r2, [r2, #1]
 80054d4:	4618      	mov	r0, r3
 80054d6:	e7c9      	b.n	800546c <_strtod_l+0x1e4>
 80054d8:	4638      	mov	r0, r7
 80054da:	e7d2      	b.n	8005482 <_strtod_l+0x1fa>
 80054dc:	2b08      	cmp	r3, #8
 80054de:	dc04      	bgt.n	80054ea <_strtod_l+0x262>
 80054e0:	9e07      	ldr	r6, [sp, #28]
 80054e2:	434e      	muls	r6, r1
 80054e4:	9607      	str	r6, [sp, #28]
 80054e6:	3301      	adds	r3, #1
 80054e8:	e7e2      	b.n	80054b0 <_strtod_l+0x228>
 80054ea:	f103 0c01 	add.w	ip, r3, #1
 80054ee:	f1bc 0f10 	cmp.w	ip, #16
 80054f2:	bfd8      	it	le
 80054f4:	fb01 f909 	mulle.w	r9, r1, r9
 80054f8:	e7f5      	b.n	80054e6 <_strtod_l+0x25e>
 80054fa:	2d10      	cmp	r5, #16
 80054fc:	bfdc      	itt	le
 80054fe:	230a      	movle	r3, #10
 8005500:	fb03 2909 	mlale	r9, r3, r9, r2
 8005504:	e7e1      	b.n	80054ca <_strtod_l+0x242>
 8005506:	2300      	movs	r3, #0
 8005508:	9305      	str	r3, [sp, #20]
 800550a:	2301      	movs	r3, #1
 800550c:	e77c      	b.n	8005408 <_strtod_l+0x180>
 800550e:	f04f 0c00 	mov.w	ip, #0
 8005512:	f108 0202 	add.w	r2, r8, #2
 8005516:	9217      	str	r2, [sp, #92]	; 0x5c
 8005518:	f898 2002 	ldrb.w	r2, [r8, #2]
 800551c:	e785      	b.n	800542a <_strtod_l+0x1a2>
 800551e:	f04f 0c01 	mov.w	ip, #1
 8005522:	e7f6      	b.n	8005512 <_strtod_l+0x28a>
 8005524:	080090d0 	.word	0x080090d0
 8005528:	08008e84 	.word	0x08008e84
 800552c:	7ff00000 	.word	0x7ff00000
 8005530:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005532:	1c51      	adds	r1, r2, #1
 8005534:	9117      	str	r1, [sp, #92]	; 0x5c
 8005536:	7852      	ldrb	r2, [r2, #1]
 8005538:	2a30      	cmp	r2, #48	; 0x30
 800553a:	d0f9      	beq.n	8005530 <_strtod_l+0x2a8>
 800553c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005540:	2908      	cmp	r1, #8
 8005542:	f63f af79 	bhi.w	8005438 <_strtod_l+0x1b0>
 8005546:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800554a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800554c:	9206      	str	r2, [sp, #24]
 800554e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005550:	1c51      	adds	r1, r2, #1
 8005552:	9117      	str	r1, [sp, #92]	; 0x5c
 8005554:	7852      	ldrb	r2, [r2, #1]
 8005556:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800555a:	2e09      	cmp	r6, #9
 800555c:	d937      	bls.n	80055ce <_strtod_l+0x346>
 800555e:	9e06      	ldr	r6, [sp, #24]
 8005560:	1b89      	subs	r1, r1, r6
 8005562:	2908      	cmp	r1, #8
 8005564:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005568:	dc02      	bgt.n	8005570 <_strtod_l+0x2e8>
 800556a:	4576      	cmp	r6, lr
 800556c:	bfa8      	it	ge
 800556e:	4676      	movge	r6, lr
 8005570:	f1bc 0f00 	cmp.w	ip, #0
 8005574:	d000      	beq.n	8005578 <_strtod_l+0x2f0>
 8005576:	4276      	negs	r6, r6
 8005578:	2d00      	cmp	r5, #0
 800557a:	d14d      	bne.n	8005618 <_strtod_l+0x390>
 800557c:	9904      	ldr	r1, [sp, #16]
 800557e:	4301      	orrs	r1, r0
 8005580:	f47f aec6 	bne.w	8005310 <_strtod_l+0x88>
 8005584:	2b00      	cmp	r3, #0
 8005586:	f47f aee1 	bne.w	800534c <_strtod_l+0xc4>
 800558a:	2a69      	cmp	r2, #105	; 0x69
 800558c:	d027      	beq.n	80055de <_strtod_l+0x356>
 800558e:	dc24      	bgt.n	80055da <_strtod_l+0x352>
 8005590:	2a49      	cmp	r2, #73	; 0x49
 8005592:	d024      	beq.n	80055de <_strtod_l+0x356>
 8005594:	2a4e      	cmp	r2, #78	; 0x4e
 8005596:	f47f aed9 	bne.w	800534c <_strtod_l+0xc4>
 800559a:	499f      	ldr	r1, [pc, #636]	; (8005818 <_strtod_l+0x590>)
 800559c:	a817      	add	r0, sp, #92	; 0x5c
 800559e:	f001 fe3d 	bl	800721c <__match>
 80055a2:	2800      	cmp	r0, #0
 80055a4:	f43f aed2 	beq.w	800534c <_strtod_l+0xc4>
 80055a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b28      	cmp	r3, #40	; 0x28
 80055ae:	d12d      	bne.n	800560c <_strtod_l+0x384>
 80055b0:	499a      	ldr	r1, [pc, #616]	; (800581c <_strtod_l+0x594>)
 80055b2:	aa1a      	add	r2, sp, #104	; 0x68
 80055b4:	a817      	add	r0, sp, #92	; 0x5c
 80055b6:	f001 fe45 	bl	8007244 <__hexnan>
 80055ba:	2805      	cmp	r0, #5
 80055bc:	d126      	bne.n	800560c <_strtod_l+0x384>
 80055be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80055c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80055c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80055cc:	e6a0      	b.n	8005310 <_strtod_l+0x88>
 80055ce:	210a      	movs	r1, #10
 80055d0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80055d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80055d8:	e7b9      	b.n	800554e <_strtod_l+0x2c6>
 80055da:	2a6e      	cmp	r2, #110	; 0x6e
 80055dc:	e7db      	b.n	8005596 <_strtod_l+0x30e>
 80055de:	4990      	ldr	r1, [pc, #576]	; (8005820 <_strtod_l+0x598>)
 80055e0:	a817      	add	r0, sp, #92	; 0x5c
 80055e2:	f001 fe1b 	bl	800721c <__match>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	f43f aeb0 	beq.w	800534c <_strtod_l+0xc4>
 80055ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055ee:	498d      	ldr	r1, [pc, #564]	; (8005824 <_strtod_l+0x59c>)
 80055f0:	3b01      	subs	r3, #1
 80055f2:	a817      	add	r0, sp, #92	; 0x5c
 80055f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80055f6:	f001 fe11 	bl	800721c <__match>
 80055fa:	b910      	cbnz	r0, 8005602 <_strtod_l+0x37a>
 80055fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055fe:	3301      	adds	r3, #1
 8005600:	9317      	str	r3, [sp, #92]	; 0x5c
 8005602:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005834 <_strtod_l+0x5ac>
 8005606:	f04f 0a00 	mov.w	sl, #0
 800560a:	e681      	b.n	8005310 <_strtod_l+0x88>
 800560c:	4886      	ldr	r0, [pc, #536]	; (8005828 <_strtod_l+0x5a0>)
 800560e:	f002 fdf7 	bl	8008200 <nan>
 8005612:	ec5b ab10 	vmov	sl, fp, d0
 8005616:	e67b      	b.n	8005310 <_strtod_l+0x88>
 8005618:	9b05      	ldr	r3, [sp, #20]
 800561a:	9807      	ldr	r0, [sp, #28]
 800561c:	1af3      	subs	r3, r6, r3
 800561e:	2f00      	cmp	r7, #0
 8005620:	bf08      	it	eq
 8005622:	462f      	moveq	r7, r5
 8005624:	2d10      	cmp	r5, #16
 8005626:	9306      	str	r3, [sp, #24]
 8005628:	46a8      	mov	r8, r5
 800562a:	bfa8      	it	ge
 800562c:	f04f 0810 	movge.w	r8, #16
 8005630:	f7fa ff70 	bl	8000514 <__aeabi_ui2d>
 8005634:	2d09      	cmp	r5, #9
 8005636:	4682      	mov	sl, r0
 8005638:	468b      	mov	fp, r1
 800563a:	dd13      	ble.n	8005664 <_strtod_l+0x3dc>
 800563c:	4b7b      	ldr	r3, [pc, #492]	; (800582c <_strtod_l+0x5a4>)
 800563e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005642:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005646:	f7fa ffdf 	bl	8000608 <__aeabi_dmul>
 800564a:	4682      	mov	sl, r0
 800564c:	4648      	mov	r0, r9
 800564e:	468b      	mov	fp, r1
 8005650:	f7fa ff60 	bl	8000514 <__aeabi_ui2d>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4650      	mov	r0, sl
 800565a:	4659      	mov	r1, fp
 800565c:	f7fa fe1e 	bl	800029c <__adddf3>
 8005660:	4682      	mov	sl, r0
 8005662:	468b      	mov	fp, r1
 8005664:	2d0f      	cmp	r5, #15
 8005666:	dc38      	bgt.n	80056da <_strtod_l+0x452>
 8005668:	9b06      	ldr	r3, [sp, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	f43f ae50 	beq.w	8005310 <_strtod_l+0x88>
 8005670:	dd24      	ble.n	80056bc <_strtod_l+0x434>
 8005672:	2b16      	cmp	r3, #22
 8005674:	dc0b      	bgt.n	800568e <_strtod_l+0x406>
 8005676:	496d      	ldr	r1, [pc, #436]	; (800582c <_strtod_l+0x5a4>)
 8005678:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800567c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005680:	4652      	mov	r2, sl
 8005682:	465b      	mov	r3, fp
 8005684:	f7fa ffc0 	bl	8000608 <__aeabi_dmul>
 8005688:	4682      	mov	sl, r0
 800568a:	468b      	mov	fp, r1
 800568c:	e640      	b.n	8005310 <_strtod_l+0x88>
 800568e:	9a06      	ldr	r2, [sp, #24]
 8005690:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005694:	4293      	cmp	r3, r2
 8005696:	db20      	blt.n	80056da <_strtod_l+0x452>
 8005698:	4c64      	ldr	r4, [pc, #400]	; (800582c <_strtod_l+0x5a4>)
 800569a:	f1c5 050f 	rsb	r5, r5, #15
 800569e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80056a2:	4652      	mov	r2, sl
 80056a4:	465b      	mov	r3, fp
 80056a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056aa:	f7fa ffad 	bl	8000608 <__aeabi_dmul>
 80056ae:	9b06      	ldr	r3, [sp, #24]
 80056b0:	1b5d      	subs	r5, r3, r5
 80056b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80056b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80056ba:	e7e3      	b.n	8005684 <_strtod_l+0x3fc>
 80056bc:	9b06      	ldr	r3, [sp, #24]
 80056be:	3316      	adds	r3, #22
 80056c0:	db0b      	blt.n	80056da <_strtod_l+0x452>
 80056c2:	9b05      	ldr	r3, [sp, #20]
 80056c4:	1b9e      	subs	r6, r3, r6
 80056c6:	4b59      	ldr	r3, [pc, #356]	; (800582c <_strtod_l+0x5a4>)
 80056c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80056cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056d0:	4650      	mov	r0, sl
 80056d2:	4659      	mov	r1, fp
 80056d4:	f7fb f8c2 	bl	800085c <__aeabi_ddiv>
 80056d8:	e7d6      	b.n	8005688 <_strtod_l+0x400>
 80056da:	9b06      	ldr	r3, [sp, #24]
 80056dc:	eba5 0808 	sub.w	r8, r5, r8
 80056e0:	4498      	add	r8, r3
 80056e2:	f1b8 0f00 	cmp.w	r8, #0
 80056e6:	dd74      	ble.n	80057d2 <_strtod_l+0x54a>
 80056e8:	f018 030f 	ands.w	r3, r8, #15
 80056ec:	d00a      	beq.n	8005704 <_strtod_l+0x47c>
 80056ee:	494f      	ldr	r1, [pc, #316]	; (800582c <_strtod_l+0x5a4>)
 80056f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80056f4:	4652      	mov	r2, sl
 80056f6:	465b      	mov	r3, fp
 80056f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056fc:	f7fa ff84 	bl	8000608 <__aeabi_dmul>
 8005700:	4682      	mov	sl, r0
 8005702:	468b      	mov	fp, r1
 8005704:	f038 080f 	bics.w	r8, r8, #15
 8005708:	d04f      	beq.n	80057aa <_strtod_l+0x522>
 800570a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800570e:	dd22      	ble.n	8005756 <_strtod_l+0x4ce>
 8005710:	2500      	movs	r5, #0
 8005712:	462e      	mov	r6, r5
 8005714:	9507      	str	r5, [sp, #28]
 8005716:	9505      	str	r5, [sp, #20]
 8005718:	2322      	movs	r3, #34	; 0x22
 800571a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005834 <_strtod_l+0x5ac>
 800571e:	6023      	str	r3, [r4, #0]
 8005720:	f04f 0a00 	mov.w	sl, #0
 8005724:	9b07      	ldr	r3, [sp, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f43f adf2 	beq.w	8005310 <_strtod_l+0x88>
 800572c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800572e:	4620      	mov	r0, r4
 8005730:	f001 fe90 	bl	8007454 <_Bfree>
 8005734:	9905      	ldr	r1, [sp, #20]
 8005736:	4620      	mov	r0, r4
 8005738:	f001 fe8c 	bl	8007454 <_Bfree>
 800573c:	4631      	mov	r1, r6
 800573e:	4620      	mov	r0, r4
 8005740:	f001 fe88 	bl	8007454 <_Bfree>
 8005744:	9907      	ldr	r1, [sp, #28]
 8005746:	4620      	mov	r0, r4
 8005748:	f001 fe84 	bl	8007454 <_Bfree>
 800574c:	4629      	mov	r1, r5
 800574e:	4620      	mov	r0, r4
 8005750:	f001 fe80 	bl	8007454 <_Bfree>
 8005754:	e5dc      	b.n	8005310 <_strtod_l+0x88>
 8005756:	4b36      	ldr	r3, [pc, #216]	; (8005830 <_strtod_l+0x5a8>)
 8005758:	9304      	str	r3, [sp, #16]
 800575a:	2300      	movs	r3, #0
 800575c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005760:	4650      	mov	r0, sl
 8005762:	4659      	mov	r1, fp
 8005764:	4699      	mov	r9, r3
 8005766:	f1b8 0f01 	cmp.w	r8, #1
 800576a:	dc21      	bgt.n	80057b0 <_strtod_l+0x528>
 800576c:	b10b      	cbz	r3, 8005772 <_strtod_l+0x4ea>
 800576e:	4682      	mov	sl, r0
 8005770:	468b      	mov	fp, r1
 8005772:	4b2f      	ldr	r3, [pc, #188]	; (8005830 <_strtod_l+0x5a8>)
 8005774:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005778:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800577c:	4652      	mov	r2, sl
 800577e:	465b      	mov	r3, fp
 8005780:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005784:	f7fa ff40 	bl	8000608 <__aeabi_dmul>
 8005788:	4b2a      	ldr	r3, [pc, #168]	; (8005834 <_strtod_l+0x5ac>)
 800578a:	460a      	mov	r2, r1
 800578c:	400b      	ands	r3, r1
 800578e:	492a      	ldr	r1, [pc, #168]	; (8005838 <_strtod_l+0x5b0>)
 8005790:	428b      	cmp	r3, r1
 8005792:	4682      	mov	sl, r0
 8005794:	d8bc      	bhi.n	8005710 <_strtod_l+0x488>
 8005796:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800579a:	428b      	cmp	r3, r1
 800579c:	bf86      	itte	hi
 800579e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800583c <_strtod_l+0x5b4>
 80057a2:	f04f 3aff 	movhi.w	sl, #4294967295
 80057a6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80057aa:	2300      	movs	r3, #0
 80057ac:	9304      	str	r3, [sp, #16]
 80057ae:	e084      	b.n	80058ba <_strtod_l+0x632>
 80057b0:	f018 0f01 	tst.w	r8, #1
 80057b4:	d005      	beq.n	80057c2 <_strtod_l+0x53a>
 80057b6:	9b04      	ldr	r3, [sp, #16]
 80057b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057bc:	f7fa ff24 	bl	8000608 <__aeabi_dmul>
 80057c0:	2301      	movs	r3, #1
 80057c2:	9a04      	ldr	r2, [sp, #16]
 80057c4:	3208      	adds	r2, #8
 80057c6:	f109 0901 	add.w	r9, r9, #1
 80057ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80057ce:	9204      	str	r2, [sp, #16]
 80057d0:	e7c9      	b.n	8005766 <_strtod_l+0x4de>
 80057d2:	d0ea      	beq.n	80057aa <_strtod_l+0x522>
 80057d4:	f1c8 0800 	rsb	r8, r8, #0
 80057d8:	f018 020f 	ands.w	r2, r8, #15
 80057dc:	d00a      	beq.n	80057f4 <_strtod_l+0x56c>
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <_strtod_l+0x5a4>)
 80057e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057e4:	4650      	mov	r0, sl
 80057e6:	4659      	mov	r1, fp
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	f7fb f836 	bl	800085c <__aeabi_ddiv>
 80057f0:	4682      	mov	sl, r0
 80057f2:	468b      	mov	fp, r1
 80057f4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80057f8:	d0d7      	beq.n	80057aa <_strtod_l+0x522>
 80057fa:	f1b8 0f1f 	cmp.w	r8, #31
 80057fe:	dd1f      	ble.n	8005840 <_strtod_l+0x5b8>
 8005800:	2500      	movs	r5, #0
 8005802:	462e      	mov	r6, r5
 8005804:	9507      	str	r5, [sp, #28]
 8005806:	9505      	str	r5, [sp, #20]
 8005808:	2322      	movs	r3, #34	; 0x22
 800580a:	f04f 0a00 	mov.w	sl, #0
 800580e:	f04f 0b00 	mov.w	fp, #0
 8005812:	6023      	str	r3, [r4, #0]
 8005814:	e786      	b.n	8005724 <_strtod_l+0x49c>
 8005816:	bf00      	nop
 8005818:	08008e55 	.word	0x08008e55
 800581c:	08008e98 	.word	0x08008e98
 8005820:	08008e4d 	.word	0x08008e4d
 8005824:	08008fdc 	.word	0x08008fdc
 8005828:	08009288 	.word	0x08009288
 800582c:	08009168 	.word	0x08009168
 8005830:	08009140 	.word	0x08009140
 8005834:	7ff00000 	.word	0x7ff00000
 8005838:	7ca00000 	.word	0x7ca00000
 800583c:	7fefffff 	.word	0x7fefffff
 8005840:	f018 0310 	ands.w	r3, r8, #16
 8005844:	bf18      	it	ne
 8005846:	236a      	movne	r3, #106	; 0x6a
 8005848:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005bf8 <_strtod_l+0x970>
 800584c:	9304      	str	r3, [sp, #16]
 800584e:	4650      	mov	r0, sl
 8005850:	4659      	mov	r1, fp
 8005852:	2300      	movs	r3, #0
 8005854:	f018 0f01 	tst.w	r8, #1
 8005858:	d004      	beq.n	8005864 <_strtod_l+0x5dc>
 800585a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800585e:	f7fa fed3 	bl	8000608 <__aeabi_dmul>
 8005862:	2301      	movs	r3, #1
 8005864:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005868:	f109 0908 	add.w	r9, r9, #8
 800586c:	d1f2      	bne.n	8005854 <_strtod_l+0x5cc>
 800586e:	b10b      	cbz	r3, 8005874 <_strtod_l+0x5ec>
 8005870:	4682      	mov	sl, r0
 8005872:	468b      	mov	fp, r1
 8005874:	9b04      	ldr	r3, [sp, #16]
 8005876:	b1c3      	cbz	r3, 80058aa <_strtod_l+0x622>
 8005878:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800587c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005880:	2b00      	cmp	r3, #0
 8005882:	4659      	mov	r1, fp
 8005884:	dd11      	ble.n	80058aa <_strtod_l+0x622>
 8005886:	2b1f      	cmp	r3, #31
 8005888:	f340 8124 	ble.w	8005ad4 <_strtod_l+0x84c>
 800588c:	2b34      	cmp	r3, #52	; 0x34
 800588e:	bfde      	ittt	le
 8005890:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005894:	f04f 33ff 	movle.w	r3, #4294967295
 8005898:	fa03 f202 	lslle.w	r2, r3, r2
 800589c:	f04f 0a00 	mov.w	sl, #0
 80058a0:	bfcc      	ite	gt
 80058a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80058a6:	ea02 0b01 	andle.w	fp, r2, r1
 80058aa:	2200      	movs	r2, #0
 80058ac:	2300      	movs	r3, #0
 80058ae:	4650      	mov	r0, sl
 80058b0:	4659      	mov	r1, fp
 80058b2:	f7fb f911 	bl	8000ad8 <__aeabi_dcmpeq>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d1a2      	bne.n	8005800 <_strtod_l+0x578>
 80058ba:	9b07      	ldr	r3, [sp, #28]
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	9908      	ldr	r1, [sp, #32]
 80058c0:	462b      	mov	r3, r5
 80058c2:	463a      	mov	r2, r7
 80058c4:	4620      	mov	r0, r4
 80058c6:	f001 fe2d 	bl	8007524 <__s2b>
 80058ca:	9007      	str	r0, [sp, #28]
 80058cc:	2800      	cmp	r0, #0
 80058ce:	f43f af1f 	beq.w	8005710 <_strtod_l+0x488>
 80058d2:	9b05      	ldr	r3, [sp, #20]
 80058d4:	1b9e      	subs	r6, r3, r6
 80058d6:	9b06      	ldr	r3, [sp, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bfb4      	ite	lt
 80058dc:	4633      	movlt	r3, r6
 80058de:	2300      	movge	r3, #0
 80058e0:	930c      	str	r3, [sp, #48]	; 0x30
 80058e2:	9b06      	ldr	r3, [sp, #24]
 80058e4:	2500      	movs	r5, #0
 80058e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80058ea:	9312      	str	r3, [sp, #72]	; 0x48
 80058ec:	462e      	mov	r6, r5
 80058ee:	9b07      	ldr	r3, [sp, #28]
 80058f0:	4620      	mov	r0, r4
 80058f2:	6859      	ldr	r1, [r3, #4]
 80058f4:	f001 fd6e 	bl	80073d4 <_Balloc>
 80058f8:	9005      	str	r0, [sp, #20]
 80058fa:	2800      	cmp	r0, #0
 80058fc:	f43f af0c 	beq.w	8005718 <_strtod_l+0x490>
 8005900:	9b07      	ldr	r3, [sp, #28]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	3202      	adds	r2, #2
 8005906:	f103 010c 	add.w	r1, r3, #12
 800590a:	0092      	lsls	r2, r2, #2
 800590c:	300c      	adds	r0, #12
 800590e:	f001 fd53 	bl	80073b8 <memcpy>
 8005912:	ec4b ab10 	vmov	d0, sl, fp
 8005916:	aa1a      	add	r2, sp, #104	; 0x68
 8005918:	a919      	add	r1, sp, #100	; 0x64
 800591a:	4620      	mov	r0, r4
 800591c:	f002 f948 	bl	8007bb0 <__d2b>
 8005920:	ec4b ab18 	vmov	d8, sl, fp
 8005924:	9018      	str	r0, [sp, #96]	; 0x60
 8005926:	2800      	cmp	r0, #0
 8005928:	f43f aef6 	beq.w	8005718 <_strtod_l+0x490>
 800592c:	2101      	movs	r1, #1
 800592e:	4620      	mov	r0, r4
 8005930:	f001 fe92 	bl	8007658 <__i2b>
 8005934:	4606      	mov	r6, r0
 8005936:	2800      	cmp	r0, #0
 8005938:	f43f aeee 	beq.w	8005718 <_strtod_l+0x490>
 800593c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800593e:	9904      	ldr	r1, [sp, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	bfab      	itete	ge
 8005944:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005946:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005948:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800594a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800594e:	bfac      	ite	ge
 8005950:	eb03 0902 	addge.w	r9, r3, r2
 8005954:	1ad7      	sublt	r7, r2, r3
 8005956:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005958:	eba3 0801 	sub.w	r8, r3, r1
 800595c:	4490      	add	r8, r2
 800595e:	4ba1      	ldr	r3, [pc, #644]	; (8005be4 <_strtod_l+0x95c>)
 8005960:	f108 38ff 	add.w	r8, r8, #4294967295
 8005964:	4598      	cmp	r8, r3
 8005966:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800596a:	f280 80c7 	bge.w	8005afc <_strtod_l+0x874>
 800596e:	eba3 0308 	sub.w	r3, r3, r8
 8005972:	2b1f      	cmp	r3, #31
 8005974:	eba2 0203 	sub.w	r2, r2, r3
 8005978:	f04f 0101 	mov.w	r1, #1
 800597c:	f300 80b1 	bgt.w	8005ae2 <_strtod_l+0x85a>
 8005980:	fa01 f303 	lsl.w	r3, r1, r3
 8005984:	930d      	str	r3, [sp, #52]	; 0x34
 8005986:	2300      	movs	r3, #0
 8005988:	9308      	str	r3, [sp, #32]
 800598a:	eb09 0802 	add.w	r8, r9, r2
 800598e:	9b04      	ldr	r3, [sp, #16]
 8005990:	45c1      	cmp	r9, r8
 8005992:	4417      	add	r7, r2
 8005994:	441f      	add	r7, r3
 8005996:	464b      	mov	r3, r9
 8005998:	bfa8      	it	ge
 800599a:	4643      	movge	r3, r8
 800599c:	42bb      	cmp	r3, r7
 800599e:	bfa8      	it	ge
 80059a0:	463b      	movge	r3, r7
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	bfc2      	ittt	gt
 80059a6:	eba8 0803 	subgt.w	r8, r8, r3
 80059aa:	1aff      	subgt	r7, r7, r3
 80059ac:	eba9 0903 	subgt.w	r9, r9, r3
 80059b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	dd17      	ble.n	80059e6 <_strtod_l+0x75e>
 80059b6:	4631      	mov	r1, r6
 80059b8:	461a      	mov	r2, r3
 80059ba:	4620      	mov	r0, r4
 80059bc:	f001 ff0c 	bl	80077d8 <__pow5mult>
 80059c0:	4606      	mov	r6, r0
 80059c2:	2800      	cmp	r0, #0
 80059c4:	f43f aea8 	beq.w	8005718 <_strtod_l+0x490>
 80059c8:	4601      	mov	r1, r0
 80059ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80059cc:	4620      	mov	r0, r4
 80059ce:	f001 fe59 	bl	8007684 <__multiply>
 80059d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f43f ae9f 	beq.w	8005718 <_strtod_l+0x490>
 80059da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80059dc:	4620      	mov	r0, r4
 80059de:	f001 fd39 	bl	8007454 <_Bfree>
 80059e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059e4:	9318      	str	r3, [sp, #96]	; 0x60
 80059e6:	f1b8 0f00 	cmp.w	r8, #0
 80059ea:	f300 808c 	bgt.w	8005b06 <_strtod_l+0x87e>
 80059ee:	9b06      	ldr	r3, [sp, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	dd08      	ble.n	8005a06 <_strtod_l+0x77e>
 80059f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059f6:	9905      	ldr	r1, [sp, #20]
 80059f8:	4620      	mov	r0, r4
 80059fa:	f001 feed 	bl	80077d8 <__pow5mult>
 80059fe:	9005      	str	r0, [sp, #20]
 8005a00:	2800      	cmp	r0, #0
 8005a02:	f43f ae89 	beq.w	8005718 <_strtod_l+0x490>
 8005a06:	2f00      	cmp	r7, #0
 8005a08:	dd08      	ble.n	8005a1c <_strtod_l+0x794>
 8005a0a:	9905      	ldr	r1, [sp, #20]
 8005a0c:	463a      	mov	r2, r7
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f001 ff3c 	bl	800788c <__lshift>
 8005a14:	9005      	str	r0, [sp, #20]
 8005a16:	2800      	cmp	r0, #0
 8005a18:	f43f ae7e 	beq.w	8005718 <_strtod_l+0x490>
 8005a1c:	f1b9 0f00 	cmp.w	r9, #0
 8005a20:	dd08      	ble.n	8005a34 <_strtod_l+0x7ac>
 8005a22:	4631      	mov	r1, r6
 8005a24:	464a      	mov	r2, r9
 8005a26:	4620      	mov	r0, r4
 8005a28:	f001 ff30 	bl	800788c <__lshift>
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f43f ae72 	beq.w	8005718 <_strtod_l+0x490>
 8005a34:	9a05      	ldr	r2, [sp, #20]
 8005a36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f001 ffb3 	bl	80079a4 <__mdiff>
 8005a3e:	4605      	mov	r5, r0
 8005a40:	2800      	cmp	r0, #0
 8005a42:	f43f ae69 	beq.w	8005718 <_strtod_l+0x490>
 8005a46:	68c3      	ldr	r3, [r0, #12]
 8005a48:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60c3      	str	r3, [r0, #12]
 8005a4e:	4631      	mov	r1, r6
 8005a50:	f001 ff8c 	bl	800796c <__mcmp>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	da60      	bge.n	8005b1a <_strtod_l+0x892>
 8005a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a5a:	ea53 030a 	orrs.w	r3, r3, sl
 8005a5e:	f040 8082 	bne.w	8005b66 <_strtod_l+0x8de>
 8005a62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d17d      	bne.n	8005b66 <_strtod_l+0x8de>
 8005a6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005a6e:	0d1b      	lsrs	r3, r3, #20
 8005a70:	051b      	lsls	r3, r3, #20
 8005a72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005a76:	d976      	bls.n	8005b66 <_strtod_l+0x8de>
 8005a78:	696b      	ldr	r3, [r5, #20]
 8005a7a:	b913      	cbnz	r3, 8005a82 <_strtod_l+0x7fa>
 8005a7c:	692b      	ldr	r3, [r5, #16]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	dd71      	ble.n	8005b66 <_strtod_l+0x8de>
 8005a82:	4629      	mov	r1, r5
 8005a84:	2201      	movs	r2, #1
 8005a86:	4620      	mov	r0, r4
 8005a88:	f001 ff00 	bl	800788c <__lshift>
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	4605      	mov	r5, r0
 8005a90:	f001 ff6c 	bl	800796c <__mcmp>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	dd66      	ble.n	8005b66 <_strtod_l+0x8de>
 8005a98:	9904      	ldr	r1, [sp, #16]
 8005a9a:	4a53      	ldr	r2, [pc, #332]	; (8005be8 <_strtod_l+0x960>)
 8005a9c:	465b      	mov	r3, fp
 8005a9e:	2900      	cmp	r1, #0
 8005aa0:	f000 8081 	beq.w	8005ba6 <_strtod_l+0x91e>
 8005aa4:	ea02 010b 	and.w	r1, r2, fp
 8005aa8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005aac:	dc7b      	bgt.n	8005ba6 <_strtod_l+0x91e>
 8005aae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005ab2:	f77f aea9 	ble.w	8005808 <_strtod_l+0x580>
 8005ab6:	4b4d      	ldr	r3, [pc, #308]	; (8005bec <_strtod_l+0x964>)
 8005ab8:	4650      	mov	r0, sl
 8005aba:	4659      	mov	r1, fp
 8005abc:	2200      	movs	r2, #0
 8005abe:	f7fa fda3 	bl	8000608 <__aeabi_dmul>
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4303      	orrs	r3, r0
 8005ac6:	bf08      	it	eq
 8005ac8:	2322      	moveq	r3, #34	; 0x22
 8005aca:	4682      	mov	sl, r0
 8005acc:	468b      	mov	fp, r1
 8005ace:	bf08      	it	eq
 8005ad0:	6023      	streq	r3, [r4, #0]
 8005ad2:	e62b      	b.n	800572c <_strtod_l+0x4a4>
 8005ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	ea03 0a0a 	and.w	sl, r3, sl
 8005ae0:	e6e3      	b.n	80058aa <_strtod_l+0x622>
 8005ae2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005ae6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005aea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005aee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005af2:	fa01 f308 	lsl.w	r3, r1, r8
 8005af6:	9308      	str	r3, [sp, #32]
 8005af8:	910d      	str	r1, [sp, #52]	; 0x34
 8005afa:	e746      	b.n	800598a <_strtod_l+0x702>
 8005afc:	2300      	movs	r3, #0
 8005afe:	9308      	str	r3, [sp, #32]
 8005b00:	2301      	movs	r3, #1
 8005b02:	930d      	str	r3, [sp, #52]	; 0x34
 8005b04:	e741      	b.n	800598a <_strtod_l+0x702>
 8005b06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005b08:	4642      	mov	r2, r8
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f001 febe 	bl	800788c <__lshift>
 8005b10:	9018      	str	r0, [sp, #96]	; 0x60
 8005b12:	2800      	cmp	r0, #0
 8005b14:	f47f af6b 	bne.w	80059ee <_strtod_l+0x766>
 8005b18:	e5fe      	b.n	8005718 <_strtod_l+0x490>
 8005b1a:	465f      	mov	r7, fp
 8005b1c:	d16e      	bne.n	8005bfc <_strtod_l+0x974>
 8005b1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b24:	b342      	cbz	r2, 8005b78 <_strtod_l+0x8f0>
 8005b26:	4a32      	ldr	r2, [pc, #200]	; (8005bf0 <_strtod_l+0x968>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d128      	bne.n	8005b7e <_strtod_l+0x8f6>
 8005b2c:	9b04      	ldr	r3, [sp, #16]
 8005b2e:	4651      	mov	r1, sl
 8005b30:	b1eb      	cbz	r3, 8005b6e <_strtod_l+0x8e6>
 8005b32:	4b2d      	ldr	r3, [pc, #180]	; (8005be8 <_strtod_l+0x960>)
 8005b34:	403b      	ands	r3, r7
 8005b36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3e:	d819      	bhi.n	8005b74 <_strtod_l+0x8ec>
 8005b40:	0d1b      	lsrs	r3, r3, #20
 8005b42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	4299      	cmp	r1, r3
 8005b4c:	d117      	bne.n	8005b7e <_strtod_l+0x8f6>
 8005b4e:	4b29      	ldr	r3, [pc, #164]	; (8005bf4 <_strtod_l+0x96c>)
 8005b50:	429f      	cmp	r7, r3
 8005b52:	d102      	bne.n	8005b5a <_strtod_l+0x8d2>
 8005b54:	3101      	adds	r1, #1
 8005b56:	f43f addf 	beq.w	8005718 <_strtod_l+0x490>
 8005b5a:	4b23      	ldr	r3, [pc, #140]	; (8005be8 <_strtod_l+0x960>)
 8005b5c:	403b      	ands	r3, r7
 8005b5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005b62:	f04f 0a00 	mov.w	sl, #0
 8005b66:	9b04      	ldr	r3, [sp, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1a4      	bne.n	8005ab6 <_strtod_l+0x82e>
 8005b6c:	e5de      	b.n	800572c <_strtod_l+0x4a4>
 8005b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b72:	e7ea      	b.n	8005b4a <_strtod_l+0x8c2>
 8005b74:	4613      	mov	r3, r2
 8005b76:	e7e8      	b.n	8005b4a <_strtod_l+0x8c2>
 8005b78:	ea53 030a 	orrs.w	r3, r3, sl
 8005b7c:	d08c      	beq.n	8005a98 <_strtod_l+0x810>
 8005b7e:	9b08      	ldr	r3, [sp, #32]
 8005b80:	b1db      	cbz	r3, 8005bba <_strtod_l+0x932>
 8005b82:	423b      	tst	r3, r7
 8005b84:	d0ef      	beq.n	8005b66 <_strtod_l+0x8de>
 8005b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b88:	9a04      	ldr	r2, [sp, #16]
 8005b8a:	4650      	mov	r0, sl
 8005b8c:	4659      	mov	r1, fp
 8005b8e:	b1c3      	cbz	r3, 8005bc2 <_strtod_l+0x93a>
 8005b90:	f7ff fb5e 	bl	8005250 <sulp>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	ec51 0b18 	vmov	r0, r1, d8
 8005b9c:	f7fa fb7e 	bl	800029c <__adddf3>
 8005ba0:	4682      	mov	sl, r0
 8005ba2:	468b      	mov	fp, r1
 8005ba4:	e7df      	b.n	8005b66 <_strtod_l+0x8de>
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005bac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005bb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005bb4:	f04f 3aff 	mov.w	sl, #4294967295
 8005bb8:	e7d5      	b.n	8005b66 <_strtod_l+0x8de>
 8005bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bbc:	ea13 0f0a 	tst.w	r3, sl
 8005bc0:	e7e0      	b.n	8005b84 <_strtod_l+0x8fc>
 8005bc2:	f7ff fb45 	bl	8005250 <sulp>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	ec51 0b18 	vmov	r0, r1, d8
 8005bce:	f7fa fb63 	bl	8000298 <__aeabi_dsub>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	4682      	mov	sl, r0
 8005bd8:	468b      	mov	fp, r1
 8005bda:	f7fa ff7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d0c1      	beq.n	8005b66 <_strtod_l+0x8de>
 8005be2:	e611      	b.n	8005808 <_strtod_l+0x580>
 8005be4:	fffffc02 	.word	0xfffffc02
 8005be8:	7ff00000 	.word	0x7ff00000
 8005bec:	39500000 	.word	0x39500000
 8005bf0:	000fffff 	.word	0x000fffff
 8005bf4:	7fefffff 	.word	0x7fefffff
 8005bf8:	08008eb0 	.word	0x08008eb0
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f002 f832 	bl	8007c68 <__ratio>
 8005c04:	ec59 8b10 	vmov	r8, r9, d0
 8005c08:	ee10 0a10 	vmov	r0, s0
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c12:	4649      	mov	r1, r9
 8005c14:	f7fa ff74 	bl	8000b00 <__aeabi_dcmple>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d07a      	beq.n	8005d12 <_strtod_l+0xa8a>
 8005c1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d04a      	beq.n	8005cb8 <_strtod_l+0xa30>
 8005c22:	4b95      	ldr	r3, [pc, #596]	; (8005e78 <_strtod_l+0xbf0>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005c2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005e78 <_strtod_l+0xbf0>
 8005c2e:	f04f 0800 	mov.w	r8, #0
 8005c32:	4b92      	ldr	r3, [pc, #584]	; (8005e7c <_strtod_l+0xbf4>)
 8005c34:	403b      	ands	r3, r7
 8005c36:	930d      	str	r3, [sp, #52]	; 0x34
 8005c38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c3a:	4b91      	ldr	r3, [pc, #580]	; (8005e80 <_strtod_l+0xbf8>)
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	f040 80b0 	bne.w	8005da2 <_strtod_l+0xb1a>
 8005c42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c46:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005c4a:	ec4b ab10 	vmov	d0, sl, fp
 8005c4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005c52:	f001 ff31 	bl	8007ab8 <__ulp>
 8005c56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c5a:	ec53 2b10 	vmov	r2, r3, d0
 8005c5e:	f7fa fcd3 	bl	8000608 <__aeabi_dmul>
 8005c62:	4652      	mov	r2, sl
 8005c64:	465b      	mov	r3, fp
 8005c66:	f7fa fb19 	bl	800029c <__adddf3>
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4983      	ldr	r1, [pc, #524]	; (8005e7c <_strtod_l+0xbf4>)
 8005c6e:	4a85      	ldr	r2, [pc, #532]	; (8005e84 <_strtod_l+0xbfc>)
 8005c70:	4019      	ands	r1, r3
 8005c72:	4291      	cmp	r1, r2
 8005c74:	4682      	mov	sl, r0
 8005c76:	d960      	bls.n	8005d3a <_strtod_l+0xab2>
 8005c78:	ee18 3a90 	vmov	r3, s17
 8005c7c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d104      	bne.n	8005c8e <_strtod_l+0xa06>
 8005c84:	ee18 3a10 	vmov	r3, s16
 8005c88:	3301      	adds	r3, #1
 8005c8a:	f43f ad45 	beq.w	8005718 <_strtod_l+0x490>
 8005c8e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005e90 <_strtod_l+0xc08>
 8005c92:	f04f 3aff 	mov.w	sl, #4294967295
 8005c96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f001 fbdb 	bl	8007454 <_Bfree>
 8005c9e:	9905      	ldr	r1, [sp, #20]
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f001 fbd7 	bl	8007454 <_Bfree>
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f001 fbd3 	bl	8007454 <_Bfree>
 8005cae:	4629      	mov	r1, r5
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f001 fbcf 	bl	8007454 <_Bfree>
 8005cb6:	e61a      	b.n	80058ee <_strtod_l+0x666>
 8005cb8:	f1ba 0f00 	cmp.w	sl, #0
 8005cbc:	d11b      	bne.n	8005cf6 <_strtod_l+0xa6e>
 8005cbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005cc2:	b9f3      	cbnz	r3, 8005d02 <_strtod_l+0xa7a>
 8005cc4:	4b6c      	ldr	r3, [pc, #432]	; (8005e78 <_strtod_l+0xbf0>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	4640      	mov	r0, r8
 8005cca:	4649      	mov	r1, r9
 8005ccc:	f7fa ff0e 	bl	8000aec <__aeabi_dcmplt>
 8005cd0:	b9d0      	cbnz	r0, 8005d08 <_strtod_l+0xa80>
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	4b6c      	ldr	r3, [pc, #432]	; (8005e88 <_strtod_l+0xc00>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f7fa fc95 	bl	8000608 <__aeabi_dmul>
 8005cde:	4680      	mov	r8, r0
 8005ce0:	4689      	mov	r9, r1
 8005ce2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005ce6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005cea:	9315      	str	r3, [sp, #84]	; 0x54
 8005cec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005cf0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005cf4:	e79d      	b.n	8005c32 <_strtod_l+0x9aa>
 8005cf6:	f1ba 0f01 	cmp.w	sl, #1
 8005cfa:	d102      	bne.n	8005d02 <_strtod_l+0xa7a>
 8005cfc:	2f00      	cmp	r7, #0
 8005cfe:	f43f ad83 	beq.w	8005808 <_strtod_l+0x580>
 8005d02:	4b62      	ldr	r3, [pc, #392]	; (8005e8c <_strtod_l+0xc04>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	e78e      	b.n	8005c26 <_strtod_l+0x99e>
 8005d08:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005e88 <_strtod_l+0xc00>
 8005d0c:	f04f 0800 	mov.w	r8, #0
 8005d10:	e7e7      	b.n	8005ce2 <_strtod_l+0xa5a>
 8005d12:	4b5d      	ldr	r3, [pc, #372]	; (8005e88 <_strtod_l+0xc00>)
 8005d14:	4640      	mov	r0, r8
 8005d16:	4649      	mov	r1, r9
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f7fa fc75 	bl	8000608 <__aeabi_dmul>
 8005d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d20:	4680      	mov	r8, r0
 8005d22:	4689      	mov	r9, r1
 8005d24:	b933      	cbnz	r3, 8005d34 <_strtod_l+0xaac>
 8005d26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d2a:	900e      	str	r0, [sp, #56]	; 0x38
 8005d2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005d32:	e7dd      	b.n	8005cf0 <_strtod_l+0xa68>
 8005d34:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005d38:	e7f9      	b.n	8005d2e <_strtod_l+0xaa6>
 8005d3a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005d3e:	9b04      	ldr	r3, [sp, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1a8      	bne.n	8005c96 <_strtod_l+0xa0e>
 8005d44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d4a:	0d1b      	lsrs	r3, r3, #20
 8005d4c:	051b      	lsls	r3, r3, #20
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d1a1      	bne.n	8005c96 <_strtod_l+0xa0e>
 8005d52:	4640      	mov	r0, r8
 8005d54:	4649      	mov	r1, r9
 8005d56:	f7fa ffb7 	bl	8000cc8 <__aeabi_d2lz>
 8005d5a:	f7fa fc27 	bl	80005ac <__aeabi_l2d>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	4640      	mov	r0, r8
 8005d64:	4649      	mov	r1, r9
 8005d66:	f7fa fa97 	bl	8000298 <__aeabi_dsub>
 8005d6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d70:	ea43 030a 	orr.w	r3, r3, sl
 8005d74:	4313      	orrs	r3, r2
 8005d76:	4680      	mov	r8, r0
 8005d78:	4689      	mov	r9, r1
 8005d7a:	d055      	beq.n	8005e28 <_strtod_l+0xba0>
 8005d7c:	a336      	add	r3, pc, #216	; (adr r3, 8005e58 <_strtod_l+0xbd0>)
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	f7fa feb3 	bl	8000aec <__aeabi_dcmplt>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	f47f acd0 	bne.w	800572c <_strtod_l+0x4a4>
 8005d8c:	a334      	add	r3, pc, #208	; (adr r3, 8005e60 <_strtod_l+0xbd8>)
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	4640      	mov	r0, r8
 8005d94:	4649      	mov	r1, r9
 8005d96:	f7fa fec7 	bl	8000b28 <__aeabi_dcmpgt>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	f43f af7b 	beq.w	8005c96 <_strtod_l+0xa0e>
 8005da0:	e4c4      	b.n	800572c <_strtod_l+0x4a4>
 8005da2:	9b04      	ldr	r3, [sp, #16]
 8005da4:	b333      	cbz	r3, 8005df4 <_strtod_l+0xb6c>
 8005da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005da8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005dac:	d822      	bhi.n	8005df4 <_strtod_l+0xb6c>
 8005dae:	a32e      	add	r3, pc, #184	; (adr r3, 8005e68 <_strtod_l+0xbe0>)
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	4640      	mov	r0, r8
 8005db6:	4649      	mov	r1, r9
 8005db8:	f7fa fea2 	bl	8000b00 <__aeabi_dcmple>
 8005dbc:	b1a0      	cbz	r0, 8005de8 <_strtod_l+0xb60>
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	4640      	mov	r0, r8
 8005dc2:	f7fa fef9 	bl	8000bb8 <__aeabi_d2uiz>
 8005dc6:	2801      	cmp	r0, #1
 8005dc8:	bf38      	it	cc
 8005dca:	2001      	movcc	r0, #1
 8005dcc:	f7fa fba2 	bl	8000514 <__aeabi_ui2d>
 8005dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dd2:	4680      	mov	r8, r0
 8005dd4:	4689      	mov	r9, r1
 8005dd6:	bb23      	cbnz	r3, 8005e22 <_strtod_l+0xb9a>
 8005dd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ddc:	9010      	str	r0, [sp, #64]	; 0x40
 8005dde:	9311      	str	r3, [sp, #68]	; 0x44
 8005de0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005de4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005dec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005df0:	1a9b      	subs	r3, r3, r2
 8005df2:	9309      	str	r3, [sp, #36]	; 0x24
 8005df4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005df8:	eeb0 0a48 	vmov.f32	s0, s16
 8005dfc:	eef0 0a68 	vmov.f32	s1, s17
 8005e00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005e04:	f001 fe58 	bl	8007ab8 <__ulp>
 8005e08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e0c:	ec53 2b10 	vmov	r2, r3, d0
 8005e10:	f7fa fbfa 	bl	8000608 <__aeabi_dmul>
 8005e14:	ec53 2b18 	vmov	r2, r3, d8
 8005e18:	f7fa fa40 	bl	800029c <__adddf3>
 8005e1c:	4682      	mov	sl, r0
 8005e1e:	468b      	mov	fp, r1
 8005e20:	e78d      	b.n	8005d3e <_strtod_l+0xab6>
 8005e22:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005e26:	e7db      	b.n	8005de0 <_strtod_l+0xb58>
 8005e28:	a311      	add	r3, pc, #68	; (adr r3, 8005e70 <_strtod_l+0xbe8>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f7fa fe5d 	bl	8000aec <__aeabi_dcmplt>
 8005e32:	e7b2      	b.n	8005d9a <_strtod_l+0xb12>
 8005e34:	2300      	movs	r3, #0
 8005e36:	930a      	str	r3, [sp, #40]	; 0x28
 8005e38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	f7ff ba6b 	b.w	8005318 <_strtod_l+0x90>
 8005e42:	2a65      	cmp	r2, #101	; 0x65
 8005e44:	f43f ab5f 	beq.w	8005506 <_strtod_l+0x27e>
 8005e48:	2a45      	cmp	r2, #69	; 0x45
 8005e4a:	f43f ab5c 	beq.w	8005506 <_strtod_l+0x27e>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f7ff bb94 	b.w	800557c <_strtod_l+0x2f4>
 8005e54:	f3af 8000 	nop.w
 8005e58:	94a03595 	.word	0x94a03595
 8005e5c:	3fdfffff 	.word	0x3fdfffff
 8005e60:	35afe535 	.word	0x35afe535
 8005e64:	3fe00000 	.word	0x3fe00000
 8005e68:	ffc00000 	.word	0xffc00000
 8005e6c:	41dfffff 	.word	0x41dfffff
 8005e70:	94a03595 	.word	0x94a03595
 8005e74:	3fcfffff 	.word	0x3fcfffff
 8005e78:	3ff00000 	.word	0x3ff00000
 8005e7c:	7ff00000 	.word	0x7ff00000
 8005e80:	7fe00000 	.word	0x7fe00000
 8005e84:	7c9fffff 	.word	0x7c9fffff
 8005e88:	3fe00000 	.word	0x3fe00000
 8005e8c:	bff00000 	.word	0xbff00000
 8005e90:	7fefffff 	.word	0x7fefffff

08005e94 <_strtod_r>:
 8005e94:	4b01      	ldr	r3, [pc, #4]	; (8005e9c <_strtod_r+0x8>)
 8005e96:	f7ff b9f7 	b.w	8005288 <_strtod_l>
 8005e9a:	bf00      	nop
 8005e9c:	2000009c 	.word	0x2000009c

08005ea0 <_strtol_l.constprop.0>:
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea6:	d001      	beq.n	8005eac <_strtol_l.constprop.0+0xc>
 8005ea8:	2b24      	cmp	r3, #36	; 0x24
 8005eaa:	d906      	bls.n	8005eba <_strtol_l.constprop.0+0x1a>
 8005eac:	f7fe faca 	bl	8004444 <__errno>
 8005eb0:	2316      	movs	r3, #22
 8005eb2:	6003      	str	r3, [r0, #0]
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005fa0 <_strtol_l.constprop.0+0x100>
 8005ebe:	460d      	mov	r5, r1
 8005ec0:	462e      	mov	r6, r5
 8005ec2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ec6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005eca:	f017 0708 	ands.w	r7, r7, #8
 8005ece:	d1f7      	bne.n	8005ec0 <_strtol_l.constprop.0+0x20>
 8005ed0:	2c2d      	cmp	r4, #45	; 0x2d
 8005ed2:	d132      	bne.n	8005f3a <_strtol_l.constprop.0+0x9a>
 8005ed4:	782c      	ldrb	r4, [r5, #0]
 8005ed6:	2701      	movs	r7, #1
 8005ed8:	1cb5      	adds	r5, r6, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d05b      	beq.n	8005f96 <_strtol_l.constprop.0+0xf6>
 8005ede:	2b10      	cmp	r3, #16
 8005ee0:	d109      	bne.n	8005ef6 <_strtol_l.constprop.0+0x56>
 8005ee2:	2c30      	cmp	r4, #48	; 0x30
 8005ee4:	d107      	bne.n	8005ef6 <_strtol_l.constprop.0+0x56>
 8005ee6:	782c      	ldrb	r4, [r5, #0]
 8005ee8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005eec:	2c58      	cmp	r4, #88	; 0x58
 8005eee:	d14d      	bne.n	8005f8c <_strtol_l.constprop.0+0xec>
 8005ef0:	786c      	ldrb	r4, [r5, #1]
 8005ef2:	2310      	movs	r3, #16
 8005ef4:	3502      	adds	r5, #2
 8005ef6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005efa:	f108 38ff 	add.w	r8, r8, #4294967295
 8005efe:	f04f 0c00 	mov.w	ip, #0
 8005f02:	fbb8 f9f3 	udiv	r9, r8, r3
 8005f06:	4666      	mov	r6, ip
 8005f08:	fb03 8a19 	mls	sl, r3, r9, r8
 8005f0c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005f10:	f1be 0f09 	cmp.w	lr, #9
 8005f14:	d816      	bhi.n	8005f44 <_strtol_l.constprop.0+0xa4>
 8005f16:	4674      	mov	r4, lr
 8005f18:	42a3      	cmp	r3, r4
 8005f1a:	dd24      	ble.n	8005f66 <_strtol_l.constprop.0+0xc6>
 8005f1c:	f1bc 0f00 	cmp.w	ip, #0
 8005f20:	db1e      	blt.n	8005f60 <_strtol_l.constprop.0+0xc0>
 8005f22:	45b1      	cmp	r9, r6
 8005f24:	d31c      	bcc.n	8005f60 <_strtol_l.constprop.0+0xc0>
 8005f26:	d101      	bne.n	8005f2c <_strtol_l.constprop.0+0x8c>
 8005f28:	45a2      	cmp	sl, r4
 8005f2a:	db19      	blt.n	8005f60 <_strtol_l.constprop.0+0xc0>
 8005f2c:	fb06 4603 	mla	r6, r6, r3, r4
 8005f30:	f04f 0c01 	mov.w	ip, #1
 8005f34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f38:	e7e8      	b.n	8005f0c <_strtol_l.constprop.0+0x6c>
 8005f3a:	2c2b      	cmp	r4, #43	; 0x2b
 8005f3c:	bf04      	itt	eq
 8005f3e:	782c      	ldrbeq	r4, [r5, #0]
 8005f40:	1cb5      	addeq	r5, r6, #2
 8005f42:	e7ca      	b.n	8005eda <_strtol_l.constprop.0+0x3a>
 8005f44:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005f48:	f1be 0f19 	cmp.w	lr, #25
 8005f4c:	d801      	bhi.n	8005f52 <_strtol_l.constprop.0+0xb2>
 8005f4e:	3c37      	subs	r4, #55	; 0x37
 8005f50:	e7e2      	b.n	8005f18 <_strtol_l.constprop.0+0x78>
 8005f52:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005f56:	f1be 0f19 	cmp.w	lr, #25
 8005f5a:	d804      	bhi.n	8005f66 <_strtol_l.constprop.0+0xc6>
 8005f5c:	3c57      	subs	r4, #87	; 0x57
 8005f5e:	e7db      	b.n	8005f18 <_strtol_l.constprop.0+0x78>
 8005f60:	f04f 3cff 	mov.w	ip, #4294967295
 8005f64:	e7e6      	b.n	8005f34 <_strtol_l.constprop.0+0x94>
 8005f66:	f1bc 0f00 	cmp.w	ip, #0
 8005f6a:	da05      	bge.n	8005f78 <_strtol_l.constprop.0+0xd8>
 8005f6c:	2322      	movs	r3, #34	; 0x22
 8005f6e:	6003      	str	r3, [r0, #0]
 8005f70:	4646      	mov	r6, r8
 8005f72:	b942      	cbnz	r2, 8005f86 <_strtol_l.constprop.0+0xe6>
 8005f74:	4630      	mov	r0, r6
 8005f76:	e79e      	b.n	8005eb6 <_strtol_l.constprop.0+0x16>
 8005f78:	b107      	cbz	r7, 8005f7c <_strtol_l.constprop.0+0xdc>
 8005f7a:	4276      	negs	r6, r6
 8005f7c:	2a00      	cmp	r2, #0
 8005f7e:	d0f9      	beq.n	8005f74 <_strtol_l.constprop.0+0xd4>
 8005f80:	f1bc 0f00 	cmp.w	ip, #0
 8005f84:	d000      	beq.n	8005f88 <_strtol_l.constprop.0+0xe8>
 8005f86:	1e69      	subs	r1, r5, #1
 8005f88:	6011      	str	r1, [r2, #0]
 8005f8a:	e7f3      	b.n	8005f74 <_strtol_l.constprop.0+0xd4>
 8005f8c:	2430      	movs	r4, #48	; 0x30
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1b1      	bne.n	8005ef6 <_strtol_l.constprop.0+0x56>
 8005f92:	2308      	movs	r3, #8
 8005f94:	e7af      	b.n	8005ef6 <_strtol_l.constprop.0+0x56>
 8005f96:	2c30      	cmp	r4, #48	; 0x30
 8005f98:	d0a5      	beq.n	8005ee6 <_strtol_l.constprop.0+0x46>
 8005f9a:	230a      	movs	r3, #10
 8005f9c:	e7ab      	b.n	8005ef6 <_strtol_l.constprop.0+0x56>
 8005f9e:	bf00      	nop
 8005fa0:	08008ed9 	.word	0x08008ed9

08005fa4 <_strtol_r>:
 8005fa4:	f7ff bf7c 	b.w	8005ea0 <_strtol_l.constprop.0>

08005fa8 <quorem>:
 8005fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	6903      	ldr	r3, [r0, #16]
 8005fae:	690c      	ldr	r4, [r1, #16]
 8005fb0:	42a3      	cmp	r3, r4
 8005fb2:	4607      	mov	r7, r0
 8005fb4:	f2c0 8081 	blt.w	80060ba <quorem+0x112>
 8005fb8:	3c01      	subs	r4, #1
 8005fba:	f101 0814 	add.w	r8, r1, #20
 8005fbe:	f100 0514 	add.w	r5, r0, #20
 8005fc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fc6:	9301      	str	r3, [sp, #4]
 8005fc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005fd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fdc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fe0:	d331      	bcc.n	8006046 <quorem+0x9e>
 8005fe2:	f04f 0e00 	mov.w	lr, #0
 8005fe6:	4640      	mov	r0, r8
 8005fe8:	46ac      	mov	ip, r5
 8005fea:	46f2      	mov	sl, lr
 8005fec:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ff0:	b293      	uxth	r3, r2
 8005ff2:	fb06 e303 	mla	r3, r6, r3, lr
 8005ff6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	ebaa 0303 	sub.w	r3, sl, r3
 8006000:	f8dc a000 	ldr.w	sl, [ip]
 8006004:	0c12      	lsrs	r2, r2, #16
 8006006:	fa13 f38a 	uxtah	r3, r3, sl
 800600a:	fb06 e202 	mla	r2, r6, r2, lr
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	9b00      	ldr	r3, [sp, #0]
 8006012:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006016:	b292      	uxth	r2, r2
 8006018:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800601c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006020:	f8bd 3000 	ldrh.w	r3, [sp]
 8006024:	4581      	cmp	r9, r0
 8006026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800602a:	f84c 3b04 	str.w	r3, [ip], #4
 800602e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006032:	d2db      	bcs.n	8005fec <quorem+0x44>
 8006034:	f855 300b 	ldr.w	r3, [r5, fp]
 8006038:	b92b      	cbnz	r3, 8006046 <quorem+0x9e>
 800603a:	9b01      	ldr	r3, [sp, #4]
 800603c:	3b04      	subs	r3, #4
 800603e:	429d      	cmp	r5, r3
 8006040:	461a      	mov	r2, r3
 8006042:	d32e      	bcc.n	80060a2 <quorem+0xfa>
 8006044:	613c      	str	r4, [r7, #16]
 8006046:	4638      	mov	r0, r7
 8006048:	f001 fc90 	bl	800796c <__mcmp>
 800604c:	2800      	cmp	r0, #0
 800604e:	db24      	blt.n	800609a <quorem+0xf2>
 8006050:	3601      	adds	r6, #1
 8006052:	4628      	mov	r0, r5
 8006054:	f04f 0c00 	mov.w	ip, #0
 8006058:	f858 2b04 	ldr.w	r2, [r8], #4
 800605c:	f8d0 e000 	ldr.w	lr, [r0]
 8006060:	b293      	uxth	r3, r2
 8006062:	ebac 0303 	sub.w	r3, ip, r3
 8006066:	0c12      	lsrs	r2, r2, #16
 8006068:	fa13 f38e 	uxtah	r3, r3, lr
 800606c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006074:	b29b      	uxth	r3, r3
 8006076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800607a:	45c1      	cmp	r9, r8
 800607c:	f840 3b04 	str.w	r3, [r0], #4
 8006080:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006084:	d2e8      	bcs.n	8006058 <quorem+0xb0>
 8006086:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800608a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800608e:	b922      	cbnz	r2, 800609a <quorem+0xf2>
 8006090:	3b04      	subs	r3, #4
 8006092:	429d      	cmp	r5, r3
 8006094:	461a      	mov	r2, r3
 8006096:	d30a      	bcc.n	80060ae <quorem+0x106>
 8006098:	613c      	str	r4, [r7, #16]
 800609a:	4630      	mov	r0, r6
 800609c:	b003      	add	sp, #12
 800609e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a2:	6812      	ldr	r2, [r2, #0]
 80060a4:	3b04      	subs	r3, #4
 80060a6:	2a00      	cmp	r2, #0
 80060a8:	d1cc      	bne.n	8006044 <quorem+0x9c>
 80060aa:	3c01      	subs	r4, #1
 80060ac:	e7c7      	b.n	800603e <quorem+0x96>
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	3b04      	subs	r3, #4
 80060b2:	2a00      	cmp	r2, #0
 80060b4:	d1f0      	bne.n	8006098 <quorem+0xf0>
 80060b6:	3c01      	subs	r4, #1
 80060b8:	e7eb      	b.n	8006092 <quorem+0xea>
 80060ba:	2000      	movs	r0, #0
 80060bc:	e7ee      	b.n	800609c <quorem+0xf4>
	...

080060c0 <_dtoa_r>:
 80060c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c4:	ed2d 8b04 	vpush	{d8-d9}
 80060c8:	ec57 6b10 	vmov	r6, r7, d0
 80060cc:	b093      	sub	sp, #76	; 0x4c
 80060ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80060d4:	9106      	str	r1, [sp, #24]
 80060d6:	ee10 aa10 	vmov	sl, s0
 80060da:	4604      	mov	r4, r0
 80060dc:	9209      	str	r2, [sp, #36]	; 0x24
 80060de:	930c      	str	r3, [sp, #48]	; 0x30
 80060e0:	46bb      	mov	fp, r7
 80060e2:	b975      	cbnz	r5, 8006102 <_dtoa_r+0x42>
 80060e4:	2010      	movs	r0, #16
 80060e6:	f001 f94d 	bl	8007384 <malloc>
 80060ea:	4602      	mov	r2, r0
 80060ec:	6260      	str	r0, [r4, #36]	; 0x24
 80060ee:	b920      	cbnz	r0, 80060fa <_dtoa_r+0x3a>
 80060f0:	4ba7      	ldr	r3, [pc, #668]	; (8006390 <_dtoa_r+0x2d0>)
 80060f2:	21ea      	movs	r1, #234	; 0xea
 80060f4:	48a7      	ldr	r0, [pc, #668]	; (8006394 <_dtoa_r+0x2d4>)
 80060f6:	f002 f8bd 	bl	8008274 <__assert_func>
 80060fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80060fe:	6005      	str	r5, [r0, #0]
 8006100:	60c5      	str	r5, [r0, #12]
 8006102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006104:	6819      	ldr	r1, [r3, #0]
 8006106:	b151      	cbz	r1, 800611e <_dtoa_r+0x5e>
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	604a      	str	r2, [r1, #4]
 800610c:	2301      	movs	r3, #1
 800610e:	4093      	lsls	r3, r2
 8006110:	608b      	str	r3, [r1, #8]
 8006112:	4620      	mov	r0, r4
 8006114:	f001 f99e 	bl	8007454 <_Bfree>
 8006118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	1e3b      	subs	r3, r7, #0
 8006120:	bfaa      	itet	ge
 8006122:	2300      	movge	r3, #0
 8006124:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006128:	f8c8 3000 	strge.w	r3, [r8]
 800612c:	4b9a      	ldr	r3, [pc, #616]	; (8006398 <_dtoa_r+0x2d8>)
 800612e:	bfbc      	itt	lt
 8006130:	2201      	movlt	r2, #1
 8006132:	f8c8 2000 	strlt.w	r2, [r8]
 8006136:	ea33 030b 	bics.w	r3, r3, fp
 800613a:	d11b      	bne.n	8006174 <_dtoa_r+0xb4>
 800613c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800613e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006148:	4333      	orrs	r3, r6
 800614a:	f000 8592 	beq.w	8006c72 <_dtoa_r+0xbb2>
 800614e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006150:	b963      	cbnz	r3, 800616c <_dtoa_r+0xac>
 8006152:	4b92      	ldr	r3, [pc, #584]	; (800639c <_dtoa_r+0x2dc>)
 8006154:	e022      	b.n	800619c <_dtoa_r+0xdc>
 8006156:	4b92      	ldr	r3, [pc, #584]	; (80063a0 <_dtoa_r+0x2e0>)
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	3308      	adds	r3, #8
 800615c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	9801      	ldr	r0, [sp, #4]
 8006162:	b013      	add	sp, #76	; 0x4c
 8006164:	ecbd 8b04 	vpop	{d8-d9}
 8006168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616c:	4b8b      	ldr	r3, [pc, #556]	; (800639c <_dtoa_r+0x2dc>)
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	3303      	adds	r3, #3
 8006172:	e7f3      	b.n	800615c <_dtoa_r+0x9c>
 8006174:	2200      	movs	r2, #0
 8006176:	2300      	movs	r3, #0
 8006178:	4650      	mov	r0, sl
 800617a:	4659      	mov	r1, fp
 800617c:	f7fa fcac 	bl	8000ad8 <__aeabi_dcmpeq>
 8006180:	ec4b ab19 	vmov	d9, sl, fp
 8006184:	4680      	mov	r8, r0
 8006186:	b158      	cbz	r0, 80061a0 <_dtoa_r+0xe0>
 8006188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800618a:	2301      	movs	r3, #1
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 856b 	beq.w	8006c6c <_dtoa_r+0xbac>
 8006196:	4883      	ldr	r0, [pc, #524]	; (80063a4 <_dtoa_r+0x2e4>)
 8006198:	6018      	str	r0, [r3, #0]
 800619a:	1e43      	subs	r3, r0, #1
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	e7df      	b.n	8006160 <_dtoa_r+0xa0>
 80061a0:	ec4b ab10 	vmov	d0, sl, fp
 80061a4:	aa10      	add	r2, sp, #64	; 0x40
 80061a6:	a911      	add	r1, sp, #68	; 0x44
 80061a8:	4620      	mov	r0, r4
 80061aa:	f001 fd01 	bl	8007bb0 <__d2b>
 80061ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80061b2:	ee08 0a10 	vmov	s16, r0
 80061b6:	2d00      	cmp	r5, #0
 80061b8:	f000 8084 	beq.w	80062c4 <_dtoa_r+0x204>
 80061bc:	ee19 3a90 	vmov	r3, s19
 80061c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80061c8:	4656      	mov	r6, sl
 80061ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80061ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80061d6:	4b74      	ldr	r3, [pc, #464]	; (80063a8 <_dtoa_r+0x2e8>)
 80061d8:	2200      	movs	r2, #0
 80061da:	4630      	mov	r0, r6
 80061dc:	4639      	mov	r1, r7
 80061de:	f7fa f85b 	bl	8000298 <__aeabi_dsub>
 80061e2:	a365      	add	r3, pc, #404	; (adr r3, 8006378 <_dtoa_r+0x2b8>)
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	f7fa fa0e 	bl	8000608 <__aeabi_dmul>
 80061ec:	a364      	add	r3, pc, #400	; (adr r3, 8006380 <_dtoa_r+0x2c0>)
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f7fa f853 	bl	800029c <__adddf3>
 80061f6:	4606      	mov	r6, r0
 80061f8:	4628      	mov	r0, r5
 80061fa:	460f      	mov	r7, r1
 80061fc:	f7fa f99a 	bl	8000534 <__aeabi_i2d>
 8006200:	a361      	add	r3, pc, #388	; (adr r3, 8006388 <_dtoa_r+0x2c8>)
 8006202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006206:	f7fa f9ff 	bl	8000608 <__aeabi_dmul>
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	4630      	mov	r0, r6
 8006210:	4639      	mov	r1, r7
 8006212:	f7fa f843 	bl	800029c <__adddf3>
 8006216:	4606      	mov	r6, r0
 8006218:	460f      	mov	r7, r1
 800621a:	f7fa fca5 	bl	8000b68 <__aeabi_d2iz>
 800621e:	2200      	movs	r2, #0
 8006220:	9000      	str	r0, [sp, #0]
 8006222:	2300      	movs	r3, #0
 8006224:	4630      	mov	r0, r6
 8006226:	4639      	mov	r1, r7
 8006228:	f7fa fc60 	bl	8000aec <__aeabi_dcmplt>
 800622c:	b150      	cbz	r0, 8006244 <_dtoa_r+0x184>
 800622e:	9800      	ldr	r0, [sp, #0]
 8006230:	f7fa f980 	bl	8000534 <__aeabi_i2d>
 8006234:	4632      	mov	r2, r6
 8006236:	463b      	mov	r3, r7
 8006238:	f7fa fc4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800623c:	b910      	cbnz	r0, 8006244 <_dtoa_r+0x184>
 800623e:	9b00      	ldr	r3, [sp, #0]
 8006240:	3b01      	subs	r3, #1
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	9b00      	ldr	r3, [sp, #0]
 8006246:	2b16      	cmp	r3, #22
 8006248:	d85a      	bhi.n	8006300 <_dtoa_r+0x240>
 800624a:	9a00      	ldr	r2, [sp, #0]
 800624c:	4b57      	ldr	r3, [pc, #348]	; (80063ac <_dtoa_r+0x2ec>)
 800624e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	ec51 0b19 	vmov	r0, r1, d9
 800625a:	f7fa fc47 	bl	8000aec <__aeabi_dcmplt>
 800625e:	2800      	cmp	r0, #0
 8006260:	d050      	beq.n	8006304 <_dtoa_r+0x244>
 8006262:	9b00      	ldr	r3, [sp, #0]
 8006264:	3b01      	subs	r3, #1
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	2300      	movs	r3, #0
 800626a:	930b      	str	r3, [sp, #44]	; 0x2c
 800626c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800626e:	1b5d      	subs	r5, r3, r5
 8006270:	1e6b      	subs	r3, r5, #1
 8006272:	9305      	str	r3, [sp, #20]
 8006274:	bf45      	ittet	mi
 8006276:	f1c5 0301 	rsbmi	r3, r5, #1
 800627a:	9304      	strmi	r3, [sp, #16]
 800627c:	2300      	movpl	r3, #0
 800627e:	2300      	movmi	r3, #0
 8006280:	bf4c      	ite	mi
 8006282:	9305      	strmi	r3, [sp, #20]
 8006284:	9304      	strpl	r3, [sp, #16]
 8006286:	9b00      	ldr	r3, [sp, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	db3d      	blt.n	8006308 <_dtoa_r+0x248>
 800628c:	9b05      	ldr	r3, [sp, #20]
 800628e:	9a00      	ldr	r2, [sp, #0]
 8006290:	920a      	str	r2, [sp, #40]	; 0x28
 8006292:	4413      	add	r3, r2
 8006294:	9305      	str	r3, [sp, #20]
 8006296:	2300      	movs	r3, #0
 8006298:	9307      	str	r3, [sp, #28]
 800629a:	9b06      	ldr	r3, [sp, #24]
 800629c:	2b09      	cmp	r3, #9
 800629e:	f200 8089 	bhi.w	80063b4 <_dtoa_r+0x2f4>
 80062a2:	2b05      	cmp	r3, #5
 80062a4:	bfc4      	itt	gt
 80062a6:	3b04      	subgt	r3, #4
 80062a8:	9306      	strgt	r3, [sp, #24]
 80062aa:	9b06      	ldr	r3, [sp, #24]
 80062ac:	f1a3 0302 	sub.w	r3, r3, #2
 80062b0:	bfcc      	ite	gt
 80062b2:	2500      	movgt	r5, #0
 80062b4:	2501      	movle	r5, #1
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	f200 8087 	bhi.w	80063ca <_dtoa_r+0x30a>
 80062bc:	e8df f003 	tbb	[pc, r3]
 80062c0:	59383a2d 	.word	0x59383a2d
 80062c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80062c8:	441d      	add	r5, r3
 80062ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	bfc1      	itttt	gt
 80062d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80062d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80062da:	fa0b f303 	lslgt.w	r3, fp, r3
 80062de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80062e2:	bfda      	itte	le
 80062e4:	f1c3 0320 	rsble	r3, r3, #32
 80062e8:	fa06 f003 	lslle.w	r0, r6, r3
 80062ec:	4318      	orrgt	r0, r3
 80062ee:	f7fa f911 	bl	8000514 <__aeabi_ui2d>
 80062f2:	2301      	movs	r3, #1
 80062f4:	4606      	mov	r6, r0
 80062f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80062fa:	3d01      	subs	r5, #1
 80062fc:	930e      	str	r3, [sp, #56]	; 0x38
 80062fe:	e76a      	b.n	80061d6 <_dtoa_r+0x116>
 8006300:	2301      	movs	r3, #1
 8006302:	e7b2      	b.n	800626a <_dtoa_r+0x1aa>
 8006304:	900b      	str	r0, [sp, #44]	; 0x2c
 8006306:	e7b1      	b.n	800626c <_dtoa_r+0x1ac>
 8006308:	9b04      	ldr	r3, [sp, #16]
 800630a:	9a00      	ldr	r2, [sp, #0]
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	9304      	str	r3, [sp, #16]
 8006310:	4253      	negs	r3, r2
 8006312:	9307      	str	r3, [sp, #28]
 8006314:	2300      	movs	r3, #0
 8006316:	930a      	str	r3, [sp, #40]	; 0x28
 8006318:	e7bf      	b.n	800629a <_dtoa_r+0x1da>
 800631a:	2300      	movs	r3, #0
 800631c:	9308      	str	r3, [sp, #32]
 800631e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	dc55      	bgt.n	80063d0 <_dtoa_r+0x310>
 8006324:	2301      	movs	r3, #1
 8006326:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800632a:	461a      	mov	r2, r3
 800632c:	9209      	str	r2, [sp, #36]	; 0x24
 800632e:	e00c      	b.n	800634a <_dtoa_r+0x28a>
 8006330:	2301      	movs	r3, #1
 8006332:	e7f3      	b.n	800631c <_dtoa_r+0x25c>
 8006334:	2300      	movs	r3, #0
 8006336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006338:	9308      	str	r3, [sp, #32]
 800633a:	9b00      	ldr	r3, [sp, #0]
 800633c:	4413      	add	r3, r2
 800633e:	9302      	str	r3, [sp, #8]
 8006340:	3301      	adds	r3, #1
 8006342:	2b01      	cmp	r3, #1
 8006344:	9303      	str	r3, [sp, #12]
 8006346:	bfb8      	it	lt
 8006348:	2301      	movlt	r3, #1
 800634a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800634c:	2200      	movs	r2, #0
 800634e:	6042      	str	r2, [r0, #4]
 8006350:	2204      	movs	r2, #4
 8006352:	f102 0614 	add.w	r6, r2, #20
 8006356:	429e      	cmp	r6, r3
 8006358:	6841      	ldr	r1, [r0, #4]
 800635a:	d93d      	bls.n	80063d8 <_dtoa_r+0x318>
 800635c:	4620      	mov	r0, r4
 800635e:	f001 f839 	bl	80073d4 <_Balloc>
 8006362:	9001      	str	r0, [sp, #4]
 8006364:	2800      	cmp	r0, #0
 8006366:	d13b      	bne.n	80063e0 <_dtoa_r+0x320>
 8006368:	4b11      	ldr	r3, [pc, #68]	; (80063b0 <_dtoa_r+0x2f0>)
 800636a:	4602      	mov	r2, r0
 800636c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006370:	e6c0      	b.n	80060f4 <_dtoa_r+0x34>
 8006372:	2301      	movs	r3, #1
 8006374:	e7df      	b.n	8006336 <_dtoa_r+0x276>
 8006376:	bf00      	nop
 8006378:	636f4361 	.word	0x636f4361
 800637c:	3fd287a7 	.word	0x3fd287a7
 8006380:	8b60c8b3 	.word	0x8b60c8b3
 8006384:	3fc68a28 	.word	0x3fc68a28
 8006388:	509f79fb 	.word	0x509f79fb
 800638c:	3fd34413 	.word	0x3fd34413
 8006390:	08008fe6 	.word	0x08008fe6
 8006394:	08008ffd 	.word	0x08008ffd
 8006398:	7ff00000 	.word	0x7ff00000
 800639c:	08008fe2 	.word	0x08008fe2
 80063a0:	08008fd9 	.word	0x08008fd9
 80063a4:	08008e59 	.word	0x08008e59
 80063a8:	3ff80000 	.word	0x3ff80000
 80063ac:	08009168 	.word	0x08009168
 80063b0:	08009058 	.word	0x08009058
 80063b4:	2501      	movs	r5, #1
 80063b6:	2300      	movs	r3, #0
 80063b8:	9306      	str	r3, [sp, #24]
 80063ba:	9508      	str	r5, [sp, #32]
 80063bc:	f04f 33ff 	mov.w	r3, #4294967295
 80063c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063c4:	2200      	movs	r2, #0
 80063c6:	2312      	movs	r3, #18
 80063c8:	e7b0      	b.n	800632c <_dtoa_r+0x26c>
 80063ca:	2301      	movs	r3, #1
 80063cc:	9308      	str	r3, [sp, #32]
 80063ce:	e7f5      	b.n	80063bc <_dtoa_r+0x2fc>
 80063d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063d6:	e7b8      	b.n	800634a <_dtoa_r+0x28a>
 80063d8:	3101      	adds	r1, #1
 80063da:	6041      	str	r1, [r0, #4]
 80063dc:	0052      	lsls	r2, r2, #1
 80063de:	e7b8      	b.n	8006352 <_dtoa_r+0x292>
 80063e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063e2:	9a01      	ldr	r2, [sp, #4]
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	9b03      	ldr	r3, [sp, #12]
 80063e8:	2b0e      	cmp	r3, #14
 80063ea:	f200 809d 	bhi.w	8006528 <_dtoa_r+0x468>
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	f000 809a 	beq.w	8006528 <_dtoa_r+0x468>
 80063f4:	9b00      	ldr	r3, [sp, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	dd32      	ble.n	8006460 <_dtoa_r+0x3a0>
 80063fa:	4ab7      	ldr	r2, [pc, #732]	; (80066d8 <_dtoa_r+0x618>)
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006404:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006408:	9b00      	ldr	r3, [sp, #0]
 800640a:	05d8      	lsls	r0, r3, #23
 800640c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006410:	d516      	bpl.n	8006440 <_dtoa_r+0x380>
 8006412:	4bb2      	ldr	r3, [pc, #712]	; (80066dc <_dtoa_r+0x61c>)
 8006414:	ec51 0b19 	vmov	r0, r1, d9
 8006418:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800641c:	f7fa fa1e 	bl	800085c <__aeabi_ddiv>
 8006420:	f007 070f 	and.w	r7, r7, #15
 8006424:	4682      	mov	sl, r0
 8006426:	468b      	mov	fp, r1
 8006428:	2503      	movs	r5, #3
 800642a:	4eac      	ldr	r6, [pc, #688]	; (80066dc <_dtoa_r+0x61c>)
 800642c:	b957      	cbnz	r7, 8006444 <_dtoa_r+0x384>
 800642e:	4642      	mov	r2, r8
 8006430:	464b      	mov	r3, r9
 8006432:	4650      	mov	r0, sl
 8006434:	4659      	mov	r1, fp
 8006436:	f7fa fa11 	bl	800085c <__aeabi_ddiv>
 800643a:	4682      	mov	sl, r0
 800643c:	468b      	mov	fp, r1
 800643e:	e028      	b.n	8006492 <_dtoa_r+0x3d2>
 8006440:	2502      	movs	r5, #2
 8006442:	e7f2      	b.n	800642a <_dtoa_r+0x36a>
 8006444:	07f9      	lsls	r1, r7, #31
 8006446:	d508      	bpl.n	800645a <_dtoa_r+0x39a>
 8006448:	4640      	mov	r0, r8
 800644a:	4649      	mov	r1, r9
 800644c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006450:	f7fa f8da 	bl	8000608 <__aeabi_dmul>
 8006454:	3501      	adds	r5, #1
 8006456:	4680      	mov	r8, r0
 8006458:	4689      	mov	r9, r1
 800645a:	107f      	asrs	r7, r7, #1
 800645c:	3608      	adds	r6, #8
 800645e:	e7e5      	b.n	800642c <_dtoa_r+0x36c>
 8006460:	f000 809b 	beq.w	800659a <_dtoa_r+0x4da>
 8006464:	9b00      	ldr	r3, [sp, #0]
 8006466:	4f9d      	ldr	r7, [pc, #628]	; (80066dc <_dtoa_r+0x61c>)
 8006468:	425e      	negs	r6, r3
 800646a:	4b9b      	ldr	r3, [pc, #620]	; (80066d8 <_dtoa_r+0x618>)
 800646c:	f006 020f 	and.w	r2, r6, #15
 8006470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	ec51 0b19 	vmov	r0, r1, d9
 800647c:	f7fa f8c4 	bl	8000608 <__aeabi_dmul>
 8006480:	1136      	asrs	r6, r6, #4
 8006482:	4682      	mov	sl, r0
 8006484:	468b      	mov	fp, r1
 8006486:	2300      	movs	r3, #0
 8006488:	2502      	movs	r5, #2
 800648a:	2e00      	cmp	r6, #0
 800648c:	d17a      	bne.n	8006584 <_dtoa_r+0x4c4>
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1d3      	bne.n	800643a <_dtoa_r+0x37a>
 8006492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 8082 	beq.w	800659e <_dtoa_r+0x4de>
 800649a:	4b91      	ldr	r3, [pc, #580]	; (80066e0 <_dtoa_r+0x620>)
 800649c:	2200      	movs	r2, #0
 800649e:	4650      	mov	r0, sl
 80064a0:	4659      	mov	r1, fp
 80064a2:	f7fa fb23 	bl	8000aec <__aeabi_dcmplt>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d079      	beq.n	800659e <_dtoa_r+0x4de>
 80064aa:	9b03      	ldr	r3, [sp, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d076      	beq.n	800659e <_dtoa_r+0x4de>
 80064b0:	9b02      	ldr	r3, [sp, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	dd36      	ble.n	8006524 <_dtoa_r+0x464>
 80064b6:	9b00      	ldr	r3, [sp, #0]
 80064b8:	4650      	mov	r0, sl
 80064ba:	4659      	mov	r1, fp
 80064bc:	1e5f      	subs	r7, r3, #1
 80064be:	2200      	movs	r2, #0
 80064c0:	4b88      	ldr	r3, [pc, #544]	; (80066e4 <_dtoa_r+0x624>)
 80064c2:	f7fa f8a1 	bl	8000608 <__aeabi_dmul>
 80064c6:	9e02      	ldr	r6, [sp, #8]
 80064c8:	4682      	mov	sl, r0
 80064ca:	468b      	mov	fp, r1
 80064cc:	3501      	adds	r5, #1
 80064ce:	4628      	mov	r0, r5
 80064d0:	f7fa f830 	bl	8000534 <__aeabi_i2d>
 80064d4:	4652      	mov	r2, sl
 80064d6:	465b      	mov	r3, fp
 80064d8:	f7fa f896 	bl	8000608 <__aeabi_dmul>
 80064dc:	4b82      	ldr	r3, [pc, #520]	; (80066e8 <_dtoa_r+0x628>)
 80064de:	2200      	movs	r2, #0
 80064e0:	f7f9 fedc 	bl	800029c <__adddf3>
 80064e4:	46d0      	mov	r8, sl
 80064e6:	46d9      	mov	r9, fp
 80064e8:	4682      	mov	sl, r0
 80064ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80064ee:	2e00      	cmp	r6, #0
 80064f0:	d158      	bne.n	80065a4 <_dtoa_r+0x4e4>
 80064f2:	4b7e      	ldr	r3, [pc, #504]	; (80066ec <_dtoa_r+0x62c>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	4640      	mov	r0, r8
 80064f8:	4649      	mov	r1, r9
 80064fa:	f7f9 fecd 	bl	8000298 <__aeabi_dsub>
 80064fe:	4652      	mov	r2, sl
 8006500:	465b      	mov	r3, fp
 8006502:	4680      	mov	r8, r0
 8006504:	4689      	mov	r9, r1
 8006506:	f7fa fb0f 	bl	8000b28 <__aeabi_dcmpgt>
 800650a:	2800      	cmp	r0, #0
 800650c:	f040 8295 	bne.w	8006a3a <_dtoa_r+0x97a>
 8006510:	4652      	mov	r2, sl
 8006512:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006516:	4640      	mov	r0, r8
 8006518:	4649      	mov	r1, r9
 800651a:	f7fa fae7 	bl	8000aec <__aeabi_dcmplt>
 800651e:	2800      	cmp	r0, #0
 8006520:	f040 8289 	bne.w	8006a36 <_dtoa_r+0x976>
 8006524:	ec5b ab19 	vmov	sl, fp, d9
 8006528:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800652a:	2b00      	cmp	r3, #0
 800652c:	f2c0 8148 	blt.w	80067c0 <_dtoa_r+0x700>
 8006530:	9a00      	ldr	r2, [sp, #0]
 8006532:	2a0e      	cmp	r2, #14
 8006534:	f300 8144 	bgt.w	80067c0 <_dtoa_r+0x700>
 8006538:	4b67      	ldr	r3, [pc, #412]	; (80066d8 <_dtoa_r+0x618>)
 800653a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800653e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	f280 80d5 	bge.w	80066f4 <_dtoa_r+0x634>
 800654a:	9b03      	ldr	r3, [sp, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	f300 80d1 	bgt.w	80066f4 <_dtoa_r+0x634>
 8006552:	f040 826f 	bne.w	8006a34 <_dtoa_r+0x974>
 8006556:	4b65      	ldr	r3, [pc, #404]	; (80066ec <_dtoa_r+0x62c>)
 8006558:	2200      	movs	r2, #0
 800655a:	4640      	mov	r0, r8
 800655c:	4649      	mov	r1, r9
 800655e:	f7fa f853 	bl	8000608 <__aeabi_dmul>
 8006562:	4652      	mov	r2, sl
 8006564:	465b      	mov	r3, fp
 8006566:	f7fa fad5 	bl	8000b14 <__aeabi_dcmpge>
 800656a:	9e03      	ldr	r6, [sp, #12]
 800656c:	4637      	mov	r7, r6
 800656e:	2800      	cmp	r0, #0
 8006570:	f040 8245 	bne.w	80069fe <_dtoa_r+0x93e>
 8006574:	9d01      	ldr	r5, [sp, #4]
 8006576:	2331      	movs	r3, #49	; 0x31
 8006578:	f805 3b01 	strb.w	r3, [r5], #1
 800657c:	9b00      	ldr	r3, [sp, #0]
 800657e:	3301      	adds	r3, #1
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	e240      	b.n	8006a06 <_dtoa_r+0x946>
 8006584:	07f2      	lsls	r2, r6, #31
 8006586:	d505      	bpl.n	8006594 <_dtoa_r+0x4d4>
 8006588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800658c:	f7fa f83c 	bl	8000608 <__aeabi_dmul>
 8006590:	3501      	adds	r5, #1
 8006592:	2301      	movs	r3, #1
 8006594:	1076      	asrs	r6, r6, #1
 8006596:	3708      	adds	r7, #8
 8006598:	e777      	b.n	800648a <_dtoa_r+0x3ca>
 800659a:	2502      	movs	r5, #2
 800659c:	e779      	b.n	8006492 <_dtoa_r+0x3d2>
 800659e:	9f00      	ldr	r7, [sp, #0]
 80065a0:	9e03      	ldr	r6, [sp, #12]
 80065a2:	e794      	b.n	80064ce <_dtoa_r+0x40e>
 80065a4:	9901      	ldr	r1, [sp, #4]
 80065a6:	4b4c      	ldr	r3, [pc, #304]	; (80066d8 <_dtoa_r+0x618>)
 80065a8:	4431      	add	r1, r6
 80065aa:	910d      	str	r1, [sp, #52]	; 0x34
 80065ac:	9908      	ldr	r1, [sp, #32]
 80065ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80065b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065b6:	2900      	cmp	r1, #0
 80065b8:	d043      	beq.n	8006642 <_dtoa_r+0x582>
 80065ba:	494d      	ldr	r1, [pc, #308]	; (80066f0 <_dtoa_r+0x630>)
 80065bc:	2000      	movs	r0, #0
 80065be:	f7fa f94d 	bl	800085c <__aeabi_ddiv>
 80065c2:	4652      	mov	r2, sl
 80065c4:	465b      	mov	r3, fp
 80065c6:	f7f9 fe67 	bl	8000298 <__aeabi_dsub>
 80065ca:	9d01      	ldr	r5, [sp, #4]
 80065cc:	4682      	mov	sl, r0
 80065ce:	468b      	mov	fp, r1
 80065d0:	4649      	mov	r1, r9
 80065d2:	4640      	mov	r0, r8
 80065d4:	f7fa fac8 	bl	8000b68 <__aeabi_d2iz>
 80065d8:	4606      	mov	r6, r0
 80065da:	f7f9 ffab 	bl	8000534 <__aeabi_i2d>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4640      	mov	r0, r8
 80065e4:	4649      	mov	r1, r9
 80065e6:	f7f9 fe57 	bl	8000298 <__aeabi_dsub>
 80065ea:	3630      	adds	r6, #48	; 0x30
 80065ec:	f805 6b01 	strb.w	r6, [r5], #1
 80065f0:	4652      	mov	r2, sl
 80065f2:	465b      	mov	r3, fp
 80065f4:	4680      	mov	r8, r0
 80065f6:	4689      	mov	r9, r1
 80065f8:	f7fa fa78 	bl	8000aec <__aeabi_dcmplt>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d163      	bne.n	80066c8 <_dtoa_r+0x608>
 8006600:	4642      	mov	r2, r8
 8006602:	464b      	mov	r3, r9
 8006604:	4936      	ldr	r1, [pc, #216]	; (80066e0 <_dtoa_r+0x620>)
 8006606:	2000      	movs	r0, #0
 8006608:	f7f9 fe46 	bl	8000298 <__aeabi_dsub>
 800660c:	4652      	mov	r2, sl
 800660e:	465b      	mov	r3, fp
 8006610:	f7fa fa6c 	bl	8000aec <__aeabi_dcmplt>
 8006614:	2800      	cmp	r0, #0
 8006616:	f040 80b5 	bne.w	8006784 <_dtoa_r+0x6c4>
 800661a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800661c:	429d      	cmp	r5, r3
 800661e:	d081      	beq.n	8006524 <_dtoa_r+0x464>
 8006620:	4b30      	ldr	r3, [pc, #192]	; (80066e4 <_dtoa_r+0x624>)
 8006622:	2200      	movs	r2, #0
 8006624:	4650      	mov	r0, sl
 8006626:	4659      	mov	r1, fp
 8006628:	f7f9 ffee 	bl	8000608 <__aeabi_dmul>
 800662c:	4b2d      	ldr	r3, [pc, #180]	; (80066e4 <_dtoa_r+0x624>)
 800662e:	4682      	mov	sl, r0
 8006630:	468b      	mov	fp, r1
 8006632:	4640      	mov	r0, r8
 8006634:	4649      	mov	r1, r9
 8006636:	2200      	movs	r2, #0
 8006638:	f7f9 ffe6 	bl	8000608 <__aeabi_dmul>
 800663c:	4680      	mov	r8, r0
 800663e:	4689      	mov	r9, r1
 8006640:	e7c6      	b.n	80065d0 <_dtoa_r+0x510>
 8006642:	4650      	mov	r0, sl
 8006644:	4659      	mov	r1, fp
 8006646:	f7f9 ffdf 	bl	8000608 <__aeabi_dmul>
 800664a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800664c:	9d01      	ldr	r5, [sp, #4]
 800664e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006650:	4682      	mov	sl, r0
 8006652:	468b      	mov	fp, r1
 8006654:	4649      	mov	r1, r9
 8006656:	4640      	mov	r0, r8
 8006658:	f7fa fa86 	bl	8000b68 <__aeabi_d2iz>
 800665c:	4606      	mov	r6, r0
 800665e:	f7f9 ff69 	bl	8000534 <__aeabi_i2d>
 8006662:	3630      	adds	r6, #48	; 0x30
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4640      	mov	r0, r8
 800666a:	4649      	mov	r1, r9
 800666c:	f7f9 fe14 	bl	8000298 <__aeabi_dsub>
 8006670:	f805 6b01 	strb.w	r6, [r5], #1
 8006674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006676:	429d      	cmp	r5, r3
 8006678:	4680      	mov	r8, r0
 800667a:	4689      	mov	r9, r1
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	d124      	bne.n	80066cc <_dtoa_r+0x60c>
 8006682:	4b1b      	ldr	r3, [pc, #108]	; (80066f0 <_dtoa_r+0x630>)
 8006684:	4650      	mov	r0, sl
 8006686:	4659      	mov	r1, fp
 8006688:	f7f9 fe08 	bl	800029c <__adddf3>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	4640      	mov	r0, r8
 8006692:	4649      	mov	r1, r9
 8006694:	f7fa fa48 	bl	8000b28 <__aeabi_dcmpgt>
 8006698:	2800      	cmp	r0, #0
 800669a:	d173      	bne.n	8006784 <_dtoa_r+0x6c4>
 800669c:	4652      	mov	r2, sl
 800669e:	465b      	mov	r3, fp
 80066a0:	4913      	ldr	r1, [pc, #76]	; (80066f0 <_dtoa_r+0x630>)
 80066a2:	2000      	movs	r0, #0
 80066a4:	f7f9 fdf8 	bl	8000298 <__aeabi_dsub>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4640      	mov	r0, r8
 80066ae:	4649      	mov	r1, r9
 80066b0:	f7fa fa1c 	bl	8000aec <__aeabi_dcmplt>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	f43f af35 	beq.w	8006524 <_dtoa_r+0x464>
 80066ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80066bc:	1e6b      	subs	r3, r5, #1
 80066be:	930f      	str	r3, [sp, #60]	; 0x3c
 80066c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066c4:	2b30      	cmp	r3, #48	; 0x30
 80066c6:	d0f8      	beq.n	80066ba <_dtoa_r+0x5fa>
 80066c8:	9700      	str	r7, [sp, #0]
 80066ca:	e049      	b.n	8006760 <_dtoa_r+0x6a0>
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <_dtoa_r+0x624>)
 80066ce:	f7f9 ff9b 	bl	8000608 <__aeabi_dmul>
 80066d2:	4680      	mov	r8, r0
 80066d4:	4689      	mov	r9, r1
 80066d6:	e7bd      	b.n	8006654 <_dtoa_r+0x594>
 80066d8:	08009168 	.word	0x08009168
 80066dc:	08009140 	.word	0x08009140
 80066e0:	3ff00000 	.word	0x3ff00000
 80066e4:	40240000 	.word	0x40240000
 80066e8:	401c0000 	.word	0x401c0000
 80066ec:	40140000 	.word	0x40140000
 80066f0:	3fe00000 	.word	0x3fe00000
 80066f4:	9d01      	ldr	r5, [sp, #4]
 80066f6:	4656      	mov	r6, sl
 80066f8:	465f      	mov	r7, fp
 80066fa:	4642      	mov	r2, r8
 80066fc:	464b      	mov	r3, r9
 80066fe:	4630      	mov	r0, r6
 8006700:	4639      	mov	r1, r7
 8006702:	f7fa f8ab 	bl	800085c <__aeabi_ddiv>
 8006706:	f7fa fa2f 	bl	8000b68 <__aeabi_d2iz>
 800670a:	4682      	mov	sl, r0
 800670c:	f7f9 ff12 	bl	8000534 <__aeabi_i2d>
 8006710:	4642      	mov	r2, r8
 8006712:	464b      	mov	r3, r9
 8006714:	f7f9 ff78 	bl	8000608 <__aeabi_dmul>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4630      	mov	r0, r6
 800671e:	4639      	mov	r1, r7
 8006720:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006724:	f7f9 fdb8 	bl	8000298 <__aeabi_dsub>
 8006728:	f805 6b01 	strb.w	r6, [r5], #1
 800672c:	9e01      	ldr	r6, [sp, #4]
 800672e:	9f03      	ldr	r7, [sp, #12]
 8006730:	1bae      	subs	r6, r5, r6
 8006732:	42b7      	cmp	r7, r6
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	d135      	bne.n	80067a6 <_dtoa_r+0x6e6>
 800673a:	f7f9 fdaf 	bl	800029c <__adddf3>
 800673e:	4642      	mov	r2, r8
 8006740:	464b      	mov	r3, r9
 8006742:	4606      	mov	r6, r0
 8006744:	460f      	mov	r7, r1
 8006746:	f7fa f9ef 	bl	8000b28 <__aeabi_dcmpgt>
 800674a:	b9d0      	cbnz	r0, 8006782 <_dtoa_r+0x6c2>
 800674c:	4642      	mov	r2, r8
 800674e:	464b      	mov	r3, r9
 8006750:	4630      	mov	r0, r6
 8006752:	4639      	mov	r1, r7
 8006754:	f7fa f9c0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006758:	b110      	cbz	r0, 8006760 <_dtoa_r+0x6a0>
 800675a:	f01a 0f01 	tst.w	sl, #1
 800675e:	d110      	bne.n	8006782 <_dtoa_r+0x6c2>
 8006760:	4620      	mov	r0, r4
 8006762:	ee18 1a10 	vmov	r1, s16
 8006766:	f000 fe75 	bl	8007454 <_Bfree>
 800676a:	2300      	movs	r3, #0
 800676c:	9800      	ldr	r0, [sp, #0]
 800676e:	702b      	strb	r3, [r5, #0]
 8006770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006772:	3001      	adds	r0, #1
 8006774:	6018      	str	r0, [r3, #0]
 8006776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006778:	2b00      	cmp	r3, #0
 800677a:	f43f acf1 	beq.w	8006160 <_dtoa_r+0xa0>
 800677e:	601d      	str	r5, [r3, #0]
 8006780:	e4ee      	b.n	8006160 <_dtoa_r+0xa0>
 8006782:	9f00      	ldr	r7, [sp, #0]
 8006784:	462b      	mov	r3, r5
 8006786:	461d      	mov	r5, r3
 8006788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800678c:	2a39      	cmp	r2, #57	; 0x39
 800678e:	d106      	bne.n	800679e <_dtoa_r+0x6de>
 8006790:	9a01      	ldr	r2, [sp, #4]
 8006792:	429a      	cmp	r2, r3
 8006794:	d1f7      	bne.n	8006786 <_dtoa_r+0x6c6>
 8006796:	9901      	ldr	r1, [sp, #4]
 8006798:	2230      	movs	r2, #48	; 0x30
 800679a:	3701      	adds	r7, #1
 800679c:	700a      	strb	r2, [r1, #0]
 800679e:	781a      	ldrb	r2, [r3, #0]
 80067a0:	3201      	adds	r2, #1
 80067a2:	701a      	strb	r2, [r3, #0]
 80067a4:	e790      	b.n	80066c8 <_dtoa_r+0x608>
 80067a6:	4ba6      	ldr	r3, [pc, #664]	; (8006a40 <_dtoa_r+0x980>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	f7f9 ff2d 	bl	8000608 <__aeabi_dmul>
 80067ae:	2200      	movs	r2, #0
 80067b0:	2300      	movs	r3, #0
 80067b2:	4606      	mov	r6, r0
 80067b4:	460f      	mov	r7, r1
 80067b6:	f7fa f98f 	bl	8000ad8 <__aeabi_dcmpeq>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d09d      	beq.n	80066fa <_dtoa_r+0x63a>
 80067be:	e7cf      	b.n	8006760 <_dtoa_r+0x6a0>
 80067c0:	9a08      	ldr	r2, [sp, #32]
 80067c2:	2a00      	cmp	r2, #0
 80067c4:	f000 80d7 	beq.w	8006976 <_dtoa_r+0x8b6>
 80067c8:	9a06      	ldr	r2, [sp, #24]
 80067ca:	2a01      	cmp	r2, #1
 80067cc:	f300 80ba 	bgt.w	8006944 <_dtoa_r+0x884>
 80067d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067d2:	2a00      	cmp	r2, #0
 80067d4:	f000 80b2 	beq.w	800693c <_dtoa_r+0x87c>
 80067d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067dc:	9e07      	ldr	r6, [sp, #28]
 80067de:	9d04      	ldr	r5, [sp, #16]
 80067e0:	9a04      	ldr	r2, [sp, #16]
 80067e2:	441a      	add	r2, r3
 80067e4:	9204      	str	r2, [sp, #16]
 80067e6:	9a05      	ldr	r2, [sp, #20]
 80067e8:	2101      	movs	r1, #1
 80067ea:	441a      	add	r2, r3
 80067ec:	4620      	mov	r0, r4
 80067ee:	9205      	str	r2, [sp, #20]
 80067f0:	f000 ff32 	bl	8007658 <__i2b>
 80067f4:	4607      	mov	r7, r0
 80067f6:	2d00      	cmp	r5, #0
 80067f8:	dd0c      	ble.n	8006814 <_dtoa_r+0x754>
 80067fa:	9b05      	ldr	r3, [sp, #20]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	dd09      	ble.n	8006814 <_dtoa_r+0x754>
 8006800:	42ab      	cmp	r3, r5
 8006802:	9a04      	ldr	r2, [sp, #16]
 8006804:	bfa8      	it	ge
 8006806:	462b      	movge	r3, r5
 8006808:	1ad2      	subs	r2, r2, r3
 800680a:	9204      	str	r2, [sp, #16]
 800680c:	9a05      	ldr	r2, [sp, #20]
 800680e:	1aed      	subs	r5, r5, r3
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	9305      	str	r3, [sp, #20]
 8006814:	9b07      	ldr	r3, [sp, #28]
 8006816:	b31b      	cbz	r3, 8006860 <_dtoa_r+0x7a0>
 8006818:	9b08      	ldr	r3, [sp, #32]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80af 	beq.w	800697e <_dtoa_r+0x8be>
 8006820:	2e00      	cmp	r6, #0
 8006822:	dd13      	ble.n	800684c <_dtoa_r+0x78c>
 8006824:	4639      	mov	r1, r7
 8006826:	4632      	mov	r2, r6
 8006828:	4620      	mov	r0, r4
 800682a:	f000 ffd5 	bl	80077d8 <__pow5mult>
 800682e:	ee18 2a10 	vmov	r2, s16
 8006832:	4601      	mov	r1, r0
 8006834:	4607      	mov	r7, r0
 8006836:	4620      	mov	r0, r4
 8006838:	f000 ff24 	bl	8007684 <__multiply>
 800683c:	ee18 1a10 	vmov	r1, s16
 8006840:	4680      	mov	r8, r0
 8006842:	4620      	mov	r0, r4
 8006844:	f000 fe06 	bl	8007454 <_Bfree>
 8006848:	ee08 8a10 	vmov	s16, r8
 800684c:	9b07      	ldr	r3, [sp, #28]
 800684e:	1b9a      	subs	r2, r3, r6
 8006850:	d006      	beq.n	8006860 <_dtoa_r+0x7a0>
 8006852:	ee18 1a10 	vmov	r1, s16
 8006856:	4620      	mov	r0, r4
 8006858:	f000 ffbe 	bl	80077d8 <__pow5mult>
 800685c:	ee08 0a10 	vmov	s16, r0
 8006860:	2101      	movs	r1, #1
 8006862:	4620      	mov	r0, r4
 8006864:	f000 fef8 	bl	8007658 <__i2b>
 8006868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800686a:	2b00      	cmp	r3, #0
 800686c:	4606      	mov	r6, r0
 800686e:	f340 8088 	ble.w	8006982 <_dtoa_r+0x8c2>
 8006872:	461a      	mov	r2, r3
 8006874:	4601      	mov	r1, r0
 8006876:	4620      	mov	r0, r4
 8006878:	f000 ffae 	bl	80077d8 <__pow5mult>
 800687c:	9b06      	ldr	r3, [sp, #24]
 800687e:	2b01      	cmp	r3, #1
 8006880:	4606      	mov	r6, r0
 8006882:	f340 8081 	ble.w	8006988 <_dtoa_r+0x8c8>
 8006886:	f04f 0800 	mov.w	r8, #0
 800688a:	6933      	ldr	r3, [r6, #16]
 800688c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006890:	6918      	ldr	r0, [r3, #16]
 8006892:	f000 fe91 	bl	80075b8 <__hi0bits>
 8006896:	f1c0 0020 	rsb	r0, r0, #32
 800689a:	9b05      	ldr	r3, [sp, #20]
 800689c:	4418      	add	r0, r3
 800689e:	f010 001f 	ands.w	r0, r0, #31
 80068a2:	f000 8092 	beq.w	80069ca <_dtoa_r+0x90a>
 80068a6:	f1c0 0320 	rsb	r3, r0, #32
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	f340 808a 	ble.w	80069c4 <_dtoa_r+0x904>
 80068b0:	f1c0 001c 	rsb	r0, r0, #28
 80068b4:	9b04      	ldr	r3, [sp, #16]
 80068b6:	4403      	add	r3, r0
 80068b8:	9304      	str	r3, [sp, #16]
 80068ba:	9b05      	ldr	r3, [sp, #20]
 80068bc:	4403      	add	r3, r0
 80068be:	4405      	add	r5, r0
 80068c0:	9305      	str	r3, [sp, #20]
 80068c2:	9b04      	ldr	r3, [sp, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	dd07      	ble.n	80068d8 <_dtoa_r+0x818>
 80068c8:	ee18 1a10 	vmov	r1, s16
 80068cc:	461a      	mov	r2, r3
 80068ce:	4620      	mov	r0, r4
 80068d0:	f000 ffdc 	bl	800788c <__lshift>
 80068d4:	ee08 0a10 	vmov	s16, r0
 80068d8:	9b05      	ldr	r3, [sp, #20]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	dd05      	ble.n	80068ea <_dtoa_r+0x82a>
 80068de:	4631      	mov	r1, r6
 80068e0:	461a      	mov	r2, r3
 80068e2:	4620      	mov	r0, r4
 80068e4:	f000 ffd2 	bl	800788c <__lshift>
 80068e8:	4606      	mov	r6, r0
 80068ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d06e      	beq.n	80069ce <_dtoa_r+0x90e>
 80068f0:	ee18 0a10 	vmov	r0, s16
 80068f4:	4631      	mov	r1, r6
 80068f6:	f001 f839 	bl	800796c <__mcmp>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	da67      	bge.n	80069ce <_dtoa_r+0x90e>
 80068fe:	9b00      	ldr	r3, [sp, #0]
 8006900:	3b01      	subs	r3, #1
 8006902:	ee18 1a10 	vmov	r1, s16
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	220a      	movs	r2, #10
 800690a:	2300      	movs	r3, #0
 800690c:	4620      	mov	r0, r4
 800690e:	f000 fdc3 	bl	8007498 <__multadd>
 8006912:	9b08      	ldr	r3, [sp, #32]
 8006914:	ee08 0a10 	vmov	s16, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 81b1 	beq.w	8006c80 <_dtoa_r+0xbc0>
 800691e:	2300      	movs	r3, #0
 8006920:	4639      	mov	r1, r7
 8006922:	220a      	movs	r2, #10
 8006924:	4620      	mov	r0, r4
 8006926:	f000 fdb7 	bl	8007498 <__multadd>
 800692a:	9b02      	ldr	r3, [sp, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	4607      	mov	r7, r0
 8006930:	f300 808e 	bgt.w	8006a50 <_dtoa_r+0x990>
 8006934:	9b06      	ldr	r3, [sp, #24]
 8006936:	2b02      	cmp	r3, #2
 8006938:	dc51      	bgt.n	80069de <_dtoa_r+0x91e>
 800693a:	e089      	b.n	8006a50 <_dtoa_r+0x990>
 800693c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800693e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006942:	e74b      	b.n	80067dc <_dtoa_r+0x71c>
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	1e5e      	subs	r6, r3, #1
 8006948:	9b07      	ldr	r3, [sp, #28]
 800694a:	42b3      	cmp	r3, r6
 800694c:	bfbf      	itttt	lt
 800694e:	9b07      	ldrlt	r3, [sp, #28]
 8006950:	9607      	strlt	r6, [sp, #28]
 8006952:	1af2      	sublt	r2, r6, r3
 8006954:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006956:	bfb6      	itet	lt
 8006958:	189b      	addlt	r3, r3, r2
 800695a:	1b9e      	subge	r6, r3, r6
 800695c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800695e:	9b03      	ldr	r3, [sp, #12]
 8006960:	bfb8      	it	lt
 8006962:	2600      	movlt	r6, #0
 8006964:	2b00      	cmp	r3, #0
 8006966:	bfb7      	itett	lt
 8006968:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800696c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006970:	1a9d      	sublt	r5, r3, r2
 8006972:	2300      	movlt	r3, #0
 8006974:	e734      	b.n	80067e0 <_dtoa_r+0x720>
 8006976:	9e07      	ldr	r6, [sp, #28]
 8006978:	9d04      	ldr	r5, [sp, #16]
 800697a:	9f08      	ldr	r7, [sp, #32]
 800697c:	e73b      	b.n	80067f6 <_dtoa_r+0x736>
 800697e:	9a07      	ldr	r2, [sp, #28]
 8006980:	e767      	b.n	8006852 <_dtoa_r+0x792>
 8006982:	9b06      	ldr	r3, [sp, #24]
 8006984:	2b01      	cmp	r3, #1
 8006986:	dc18      	bgt.n	80069ba <_dtoa_r+0x8fa>
 8006988:	f1ba 0f00 	cmp.w	sl, #0
 800698c:	d115      	bne.n	80069ba <_dtoa_r+0x8fa>
 800698e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006992:	b993      	cbnz	r3, 80069ba <_dtoa_r+0x8fa>
 8006994:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006998:	0d1b      	lsrs	r3, r3, #20
 800699a:	051b      	lsls	r3, r3, #20
 800699c:	b183      	cbz	r3, 80069c0 <_dtoa_r+0x900>
 800699e:	9b04      	ldr	r3, [sp, #16]
 80069a0:	3301      	adds	r3, #1
 80069a2:	9304      	str	r3, [sp, #16]
 80069a4:	9b05      	ldr	r3, [sp, #20]
 80069a6:	3301      	adds	r3, #1
 80069a8:	9305      	str	r3, [sp, #20]
 80069aa:	f04f 0801 	mov.w	r8, #1
 80069ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f47f af6a 	bne.w	800688a <_dtoa_r+0x7ca>
 80069b6:	2001      	movs	r0, #1
 80069b8:	e76f      	b.n	800689a <_dtoa_r+0x7da>
 80069ba:	f04f 0800 	mov.w	r8, #0
 80069be:	e7f6      	b.n	80069ae <_dtoa_r+0x8ee>
 80069c0:	4698      	mov	r8, r3
 80069c2:	e7f4      	b.n	80069ae <_dtoa_r+0x8ee>
 80069c4:	f43f af7d 	beq.w	80068c2 <_dtoa_r+0x802>
 80069c8:	4618      	mov	r0, r3
 80069ca:	301c      	adds	r0, #28
 80069cc:	e772      	b.n	80068b4 <_dtoa_r+0x7f4>
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	dc37      	bgt.n	8006a44 <_dtoa_r+0x984>
 80069d4:	9b06      	ldr	r3, [sp, #24]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	dd34      	ble.n	8006a44 <_dtoa_r+0x984>
 80069da:	9b03      	ldr	r3, [sp, #12]
 80069dc:	9302      	str	r3, [sp, #8]
 80069de:	9b02      	ldr	r3, [sp, #8]
 80069e0:	b96b      	cbnz	r3, 80069fe <_dtoa_r+0x93e>
 80069e2:	4631      	mov	r1, r6
 80069e4:	2205      	movs	r2, #5
 80069e6:	4620      	mov	r0, r4
 80069e8:	f000 fd56 	bl	8007498 <__multadd>
 80069ec:	4601      	mov	r1, r0
 80069ee:	4606      	mov	r6, r0
 80069f0:	ee18 0a10 	vmov	r0, s16
 80069f4:	f000 ffba 	bl	800796c <__mcmp>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	f73f adbb 	bgt.w	8006574 <_dtoa_r+0x4b4>
 80069fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a00:	9d01      	ldr	r5, [sp, #4]
 8006a02:	43db      	mvns	r3, r3
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	f04f 0800 	mov.w	r8, #0
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 fd21 	bl	8007454 <_Bfree>
 8006a12:	2f00      	cmp	r7, #0
 8006a14:	f43f aea4 	beq.w	8006760 <_dtoa_r+0x6a0>
 8006a18:	f1b8 0f00 	cmp.w	r8, #0
 8006a1c:	d005      	beq.n	8006a2a <_dtoa_r+0x96a>
 8006a1e:	45b8      	cmp	r8, r7
 8006a20:	d003      	beq.n	8006a2a <_dtoa_r+0x96a>
 8006a22:	4641      	mov	r1, r8
 8006a24:	4620      	mov	r0, r4
 8006a26:	f000 fd15 	bl	8007454 <_Bfree>
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f000 fd11 	bl	8007454 <_Bfree>
 8006a32:	e695      	b.n	8006760 <_dtoa_r+0x6a0>
 8006a34:	2600      	movs	r6, #0
 8006a36:	4637      	mov	r7, r6
 8006a38:	e7e1      	b.n	80069fe <_dtoa_r+0x93e>
 8006a3a:	9700      	str	r7, [sp, #0]
 8006a3c:	4637      	mov	r7, r6
 8006a3e:	e599      	b.n	8006574 <_dtoa_r+0x4b4>
 8006a40:	40240000 	.word	0x40240000
 8006a44:	9b08      	ldr	r3, [sp, #32]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 80ca 	beq.w	8006be0 <_dtoa_r+0xb20>
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	9302      	str	r3, [sp, #8]
 8006a50:	2d00      	cmp	r5, #0
 8006a52:	dd05      	ble.n	8006a60 <_dtoa_r+0x9a0>
 8006a54:	4639      	mov	r1, r7
 8006a56:	462a      	mov	r2, r5
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f000 ff17 	bl	800788c <__lshift>
 8006a5e:	4607      	mov	r7, r0
 8006a60:	f1b8 0f00 	cmp.w	r8, #0
 8006a64:	d05b      	beq.n	8006b1e <_dtoa_r+0xa5e>
 8006a66:	6879      	ldr	r1, [r7, #4]
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 fcb3 	bl	80073d4 <_Balloc>
 8006a6e:	4605      	mov	r5, r0
 8006a70:	b928      	cbnz	r0, 8006a7e <_dtoa_r+0x9be>
 8006a72:	4b87      	ldr	r3, [pc, #540]	; (8006c90 <_dtoa_r+0xbd0>)
 8006a74:	4602      	mov	r2, r0
 8006a76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a7a:	f7ff bb3b 	b.w	80060f4 <_dtoa_r+0x34>
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	3202      	adds	r2, #2
 8006a82:	0092      	lsls	r2, r2, #2
 8006a84:	f107 010c 	add.w	r1, r7, #12
 8006a88:	300c      	adds	r0, #12
 8006a8a:	f000 fc95 	bl	80073b8 <memcpy>
 8006a8e:	2201      	movs	r2, #1
 8006a90:	4629      	mov	r1, r5
 8006a92:	4620      	mov	r0, r4
 8006a94:	f000 fefa 	bl	800788c <__lshift>
 8006a98:	9b01      	ldr	r3, [sp, #4]
 8006a9a:	f103 0901 	add.w	r9, r3, #1
 8006a9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	9305      	str	r3, [sp, #20]
 8006aa6:	f00a 0301 	and.w	r3, sl, #1
 8006aaa:	46b8      	mov	r8, r7
 8006aac:	9304      	str	r3, [sp, #16]
 8006aae:	4607      	mov	r7, r0
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	ee18 0a10 	vmov	r0, s16
 8006ab6:	f7ff fa77 	bl	8005fa8 <quorem>
 8006aba:	4641      	mov	r1, r8
 8006abc:	9002      	str	r0, [sp, #8]
 8006abe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006ac2:	ee18 0a10 	vmov	r0, s16
 8006ac6:	f000 ff51 	bl	800796c <__mcmp>
 8006aca:	463a      	mov	r2, r7
 8006acc:	9003      	str	r0, [sp, #12]
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 ff67 	bl	80079a4 <__mdiff>
 8006ad6:	68c2      	ldr	r2, [r0, #12]
 8006ad8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006adc:	4605      	mov	r5, r0
 8006ade:	bb02      	cbnz	r2, 8006b22 <_dtoa_r+0xa62>
 8006ae0:	4601      	mov	r1, r0
 8006ae2:	ee18 0a10 	vmov	r0, s16
 8006ae6:	f000 ff41 	bl	800796c <__mcmp>
 8006aea:	4602      	mov	r2, r0
 8006aec:	4629      	mov	r1, r5
 8006aee:	4620      	mov	r0, r4
 8006af0:	9207      	str	r2, [sp, #28]
 8006af2:	f000 fcaf 	bl	8007454 <_Bfree>
 8006af6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006afa:	ea43 0102 	orr.w	r1, r3, r2
 8006afe:	9b04      	ldr	r3, [sp, #16]
 8006b00:	430b      	orrs	r3, r1
 8006b02:	464d      	mov	r5, r9
 8006b04:	d10f      	bne.n	8006b26 <_dtoa_r+0xa66>
 8006b06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b0a:	d02a      	beq.n	8006b62 <_dtoa_r+0xaa2>
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	dd02      	ble.n	8006b18 <_dtoa_r+0xa58>
 8006b12:	9b02      	ldr	r3, [sp, #8]
 8006b14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006b18:	f88b a000 	strb.w	sl, [fp]
 8006b1c:	e775      	b.n	8006a0a <_dtoa_r+0x94a>
 8006b1e:	4638      	mov	r0, r7
 8006b20:	e7ba      	b.n	8006a98 <_dtoa_r+0x9d8>
 8006b22:	2201      	movs	r2, #1
 8006b24:	e7e2      	b.n	8006aec <_dtoa_r+0xa2c>
 8006b26:	9b03      	ldr	r3, [sp, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	db04      	blt.n	8006b36 <_dtoa_r+0xa76>
 8006b2c:	9906      	ldr	r1, [sp, #24]
 8006b2e:	430b      	orrs	r3, r1
 8006b30:	9904      	ldr	r1, [sp, #16]
 8006b32:	430b      	orrs	r3, r1
 8006b34:	d122      	bne.n	8006b7c <_dtoa_r+0xabc>
 8006b36:	2a00      	cmp	r2, #0
 8006b38:	ddee      	ble.n	8006b18 <_dtoa_r+0xa58>
 8006b3a:	ee18 1a10 	vmov	r1, s16
 8006b3e:	2201      	movs	r2, #1
 8006b40:	4620      	mov	r0, r4
 8006b42:	f000 fea3 	bl	800788c <__lshift>
 8006b46:	4631      	mov	r1, r6
 8006b48:	ee08 0a10 	vmov	s16, r0
 8006b4c:	f000 ff0e 	bl	800796c <__mcmp>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	dc03      	bgt.n	8006b5c <_dtoa_r+0xa9c>
 8006b54:	d1e0      	bne.n	8006b18 <_dtoa_r+0xa58>
 8006b56:	f01a 0f01 	tst.w	sl, #1
 8006b5a:	d0dd      	beq.n	8006b18 <_dtoa_r+0xa58>
 8006b5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b60:	d1d7      	bne.n	8006b12 <_dtoa_r+0xa52>
 8006b62:	2339      	movs	r3, #57	; 0x39
 8006b64:	f88b 3000 	strb.w	r3, [fp]
 8006b68:	462b      	mov	r3, r5
 8006b6a:	461d      	mov	r5, r3
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b72:	2a39      	cmp	r2, #57	; 0x39
 8006b74:	d071      	beq.n	8006c5a <_dtoa_r+0xb9a>
 8006b76:	3201      	adds	r2, #1
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	e746      	b.n	8006a0a <_dtoa_r+0x94a>
 8006b7c:	2a00      	cmp	r2, #0
 8006b7e:	dd07      	ble.n	8006b90 <_dtoa_r+0xad0>
 8006b80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b84:	d0ed      	beq.n	8006b62 <_dtoa_r+0xaa2>
 8006b86:	f10a 0301 	add.w	r3, sl, #1
 8006b8a:	f88b 3000 	strb.w	r3, [fp]
 8006b8e:	e73c      	b.n	8006a0a <_dtoa_r+0x94a>
 8006b90:	9b05      	ldr	r3, [sp, #20]
 8006b92:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006b96:	4599      	cmp	r9, r3
 8006b98:	d047      	beq.n	8006c2a <_dtoa_r+0xb6a>
 8006b9a:	ee18 1a10 	vmov	r1, s16
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	220a      	movs	r2, #10
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 fc78 	bl	8007498 <__multadd>
 8006ba8:	45b8      	cmp	r8, r7
 8006baa:	ee08 0a10 	vmov	s16, r0
 8006bae:	f04f 0300 	mov.w	r3, #0
 8006bb2:	f04f 020a 	mov.w	r2, #10
 8006bb6:	4641      	mov	r1, r8
 8006bb8:	4620      	mov	r0, r4
 8006bba:	d106      	bne.n	8006bca <_dtoa_r+0xb0a>
 8006bbc:	f000 fc6c 	bl	8007498 <__multadd>
 8006bc0:	4680      	mov	r8, r0
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	f109 0901 	add.w	r9, r9, #1
 8006bc8:	e772      	b.n	8006ab0 <_dtoa_r+0x9f0>
 8006bca:	f000 fc65 	bl	8007498 <__multadd>
 8006bce:	4639      	mov	r1, r7
 8006bd0:	4680      	mov	r8, r0
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	220a      	movs	r2, #10
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f000 fc5e 	bl	8007498 <__multadd>
 8006bdc:	4607      	mov	r7, r0
 8006bde:	e7f1      	b.n	8006bc4 <_dtoa_r+0xb04>
 8006be0:	9b03      	ldr	r3, [sp, #12]
 8006be2:	9302      	str	r3, [sp, #8]
 8006be4:	9d01      	ldr	r5, [sp, #4]
 8006be6:	ee18 0a10 	vmov	r0, s16
 8006bea:	4631      	mov	r1, r6
 8006bec:	f7ff f9dc 	bl	8005fa8 <quorem>
 8006bf0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006bf4:	9b01      	ldr	r3, [sp, #4]
 8006bf6:	f805 ab01 	strb.w	sl, [r5], #1
 8006bfa:	1aea      	subs	r2, r5, r3
 8006bfc:	9b02      	ldr	r3, [sp, #8]
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	dd09      	ble.n	8006c16 <_dtoa_r+0xb56>
 8006c02:	ee18 1a10 	vmov	r1, s16
 8006c06:	2300      	movs	r3, #0
 8006c08:	220a      	movs	r2, #10
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f000 fc44 	bl	8007498 <__multadd>
 8006c10:	ee08 0a10 	vmov	s16, r0
 8006c14:	e7e7      	b.n	8006be6 <_dtoa_r+0xb26>
 8006c16:	9b02      	ldr	r3, [sp, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bfc8      	it	gt
 8006c1c:	461d      	movgt	r5, r3
 8006c1e:	9b01      	ldr	r3, [sp, #4]
 8006c20:	bfd8      	it	le
 8006c22:	2501      	movle	r5, #1
 8006c24:	441d      	add	r5, r3
 8006c26:	f04f 0800 	mov.w	r8, #0
 8006c2a:	ee18 1a10 	vmov	r1, s16
 8006c2e:	2201      	movs	r2, #1
 8006c30:	4620      	mov	r0, r4
 8006c32:	f000 fe2b 	bl	800788c <__lshift>
 8006c36:	4631      	mov	r1, r6
 8006c38:	ee08 0a10 	vmov	s16, r0
 8006c3c:	f000 fe96 	bl	800796c <__mcmp>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	dc91      	bgt.n	8006b68 <_dtoa_r+0xaa8>
 8006c44:	d102      	bne.n	8006c4c <_dtoa_r+0xb8c>
 8006c46:	f01a 0f01 	tst.w	sl, #1
 8006c4a:	d18d      	bne.n	8006b68 <_dtoa_r+0xaa8>
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	461d      	mov	r5, r3
 8006c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c54:	2a30      	cmp	r2, #48	; 0x30
 8006c56:	d0fa      	beq.n	8006c4e <_dtoa_r+0xb8e>
 8006c58:	e6d7      	b.n	8006a0a <_dtoa_r+0x94a>
 8006c5a:	9a01      	ldr	r2, [sp, #4]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d184      	bne.n	8006b6a <_dtoa_r+0xaaa>
 8006c60:	9b00      	ldr	r3, [sp, #0]
 8006c62:	3301      	adds	r3, #1
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	2331      	movs	r3, #49	; 0x31
 8006c68:	7013      	strb	r3, [r2, #0]
 8006c6a:	e6ce      	b.n	8006a0a <_dtoa_r+0x94a>
 8006c6c:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <_dtoa_r+0xbd4>)
 8006c6e:	f7ff ba95 	b.w	800619c <_dtoa_r+0xdc>
 8006c72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f47f aa6e 	bne.w	8006156 <_dtoa_r+0x96>
 8006c7a:	4b07      	ldr	r3, [pc, #28]	; (8006c98 <_dtoa_r+0xbd8>)
 8006c7c:	f7ff ba8e 	b.w	800619c <_dtoa_r+0xdc>
 8006c80:	9b02      	ldr	r3, [sp, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	dcae      	bgt.n	8006be4 <_dtoa_r+0xb24>
 8006c86:	9b06      	ldr	r3, [sp, #24]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	f73f aea8 	bgt.w	80069de <_dtoa_r+0x91e>
 8006c8e:	e7a9      	b.n	8006be4 <_dtoa_r+0xb24>
 8006c90:	08009058 	.word	0x08009058
 8006c94:	08008e58 	.word	0x08008e58
 8006c98:	08008fd9 	.word	0x08008fd9

08006c9c <rshift>:
 8006c9c:	6903      	ldr	r3, [r0, #16]
 8006c9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006ca2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ca6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006caa:	f100 0414 	add.w	r4, r0, #20
 8006cae:	dd45      	ble.n	8006d3c <rshift+0xa0>
 8006cb0:	f011 011f 	ands.w	r1, r1, #31
 8006cb4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006cb8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006cbc:	d10c      	bne.n	8006cd8 <rshift+0x3c>
 8006cbe:	f100 0710 	add.w	r7, r0, #16
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	42b1      	cmp	r1, r6
 8006cc6:	d334      	bcc.n	8006d32 <rshift+0x96>
 8006cc8:	1a9b      	subs	r3, r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	1eea      	subs	r2, r5, #3
 8006cce:	4296      	cmp	r6, r2
 8006cd0:	bf38      	it	cc
 8006cd2:	2300      	movcc	r3, #0
 8006cd4:	4423      	add	r3, r4
 8006cd6:	e015      	b.n	8006d04 <rshift+0x68>
 8006cd8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006cdc:	f1c1 0820 	rsb	r8, r1, #32
 8006ce0:	40cf      	lsrs	r7, r1
 8006ce2:	f105 0e04 	add.w	lr, r5, #4
 8006ce6:	46a1      	mov	r9, r4
 8006ce8:	4576      	cmp	r6, lr
 8006cea:	46f4      	mov	ip, lr
 8006cec:	d815      	bhi.n	8006d1a <rshift+0x7e>
 8006cee:	1a9a      	subs	r2, r3, r2
 8006cf0:	0092      	lsls	r2, r2, #2
 8006cf2:	3a04      	subs	r2, #4
 8006cf4:	3501      	adds	r5, #1
 8006cf6:	42ae      	cmp	r6, r5
 8006cf8:	bf38      	it	cc
 8006cfa:	2200      	movcc	r2, #0
 8006cfc:	18a3      	adds	r3, r4, r2
 8006cfe:	50a7      	str	r7, [r4, r2]
 8006d00:	b107      	cbz	r7, 8006d04 <rshift+0x68>
 8006d02:	3304      	adds	r3, #4
 8006d04:	1b1a      	subs	r2, r3, r4
 8006d06:	42a3      	cmp	r3, r4
 8006d08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006d0c:	bf08      	it	eq
 8006d0e:	2300      	moveq	r3, #0
 8006d10:	6102      	str	r2, [r0, #16]
 8006d12:	bf08      	it	eq
 8006d14:	6143      	streq	r3, [r0, #20]
 8006d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d1a:	f8dc c000 	ldr.w	ip, [ip]
 8006d1e:	fa0c fc08 	lsl.w	ip, ip, r8
 8006d22:	ea4c 0707 	orr.w	r7, ip, r7
 8006d26:	f849 7b04 	str.w	r7, [r9], #4
 8006d2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d2e:	40cf      	lsrs	r7, r1
 8006d30:	e7da      	b.n	8006ce8 <rshift+0x4c>
 8006d32:	f851 cb04 	ldr.w	ip, [r1], #4
 8006d36:	f847 cf04 	str.w	ip, [r7, #4]!
 8006d3a:	e7c3      	b.n	8006cc4 <rshift+0x28>
 8006d3c:	4623      	mov	r3, r4
 8006d3e:	e7e1      	b.n	8006d04 <rshift+0x68>

08006d40 <__hexdig_fun>:
 8006d40:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006d44:	2b09      	cmp	r3, #9
 8006d46:	d802      	bhi.n	8006d4e <__hexdig_fun+0xe>
 8006d48:	3820      	subs	r0, #32
 8006d4a:	b2c0      	uxtb	r0, r0
 8006d4c:	4770      	bx	lr
 8006d4e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006d52:	2b05      	cmp	r3, #5
 8006d54:	d801      	bhi.n	8006d5a <__hexdig_fun+0x1a>
 8006d56:	3847      	subs	r0, #71	; 0x47
 8006d58:	e7f7      	b.n	8006d4a <__hexdig_fun+0xa>
 8006d5a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006d5e:	2b05      	cmp	r3, #5
 8006d60:	d801      	bhi.n	8006d66 <__hexdig_fun+0x26>
 8006d62:	3827      	subs	r0, #39	; 0x27
 8006d64:	e7f1      	b.n	8006d4a <__hexdig_fun+0xa>
 8006d66:	2000      	movs	r0, #0
 8006d68:	4770      	bx	lr
	...

08006d6c <__gethex>:
 8006d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d70:	ed2d 8b02 	vpush	{d8}
 8006d74:	b089      	sub	sp, #36	; 0x24
 8006d76:	ee08 0a10 	vmov	s16, r0
 8006d7a:	9304      	str	r3, [sp, #16]
 8006d7c:	4bb4      	ldr	r3, [pc, #720]	; (8007050 <__gethex+0x2e4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	4618      	mov	r0, r3
 8006d84:	468b      	mov	fp, r1
 8006d86:	4690      	mov	r8, r2
 8006d88:	f7f9 fa2a 	bl	80001e0 <strlen>
 8006d8c:	9b01      	ldr	r3, [sp, #4]
 8006d8e:	f8db 2000 	ldr.w	r2, [fp]
 8006d92:	4403      	add	r3, r0
 8006d94:	4682      	mov	sl, r0
 8006d96:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006d9a:	9305      	str	r3, [sp, #20]
 8006d9c:	1c93      	adds	r3, r2, #2
 8006d9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006da2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006da6:	32fe      	adds	r2, #254	; 0xfe
 8006da8:	18d1      	adds	r1, r2, r3
 8006daa:	461f      	mov	r7, r3
 8006dac:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006db0:	9100      	str	r1, [sp, #0]
 8006db2:	2830      	cmp	r0, #48	; 0x30
 8006db4:	d0f8      	beq.n	8006da8 <__gethex+0x3c>
 8006db6:	f7ff ffc3 	bl	8006d40 <__hexdig_fun>
 8006dba:	4604      	mov	r4, r0
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d13a      	bne.n	8006e36 <__gethex+0xca>
 8006dc0:	9901      	ldr	r1, [sp, #4]
 8006dc2:	4652      	mov	r2, sl
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	f001 fa33 	bl	8008230 <strncmp>
 8006dca:	4605      	mov	r5, r0
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d168      	bne.n	8006ea2 <__gethex+0x136>
 8006dd0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006dd4:	eb07 060a 	add.w	r6, r7, sl
 8006dd8:	f7ff ffb2 	bl	8006d40 <__hexdig_fun>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d062      	beq.n	8006ea6 <__gethex+0x13a>
 8006de0:	4633      	mov	r3, r6
 8006de2:	7818      	ldrb	r0, [r3, #0]
 8006de4:	2830      	cmp	r0, #48	; 0x30
 8006de6:	461f      	mov	r7, r3
 8006de8:	f103 0301 	add.w	r3, r3, #1
 8006dec:	d0f9      	beq.n	8006de2 <__gethex+0x76>
 8006dee:	f7ff ffa7 	bl	8006d40 <__hexdig_fun>
 8006df2:	2301      	movs	r3, #1
 8006df4:	fab0 f480 	clz	r4, r0
 8006df8:	0964      	lsrs	r4, r4, #5
 8006dfa:	4635      	mov	r5, r6
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	463a      	mov	r2, r7
 8006e00:	4616      	mov	r6, r2
 8006e02:	3201      	adds	r2, #1
 8006e04:	7830      	ldrb	r0, [r6, #0]
 8006e06:	f7ff ff9b 	bl	8006d40 <__hexdig_fun>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d1f8      	bne.n	8006e00 <__gethex+0x94>
 8006e0e:	9901      	ldr	r1, [sp, #4]
 8006e10:	4652      	mov	r2, sl
 8006e12:	4630      	mov	r0, r6
 8006e14:	f001 fa0c 	bl	8008230 <strncmp>
 8006e18:	b980      	cbnz	r0, 8006e3c <__gethex+0xd0>
 8006e1a:	b94d      	cbnz	r5, 8006e30 <__gethex+0xc4>
 8006e1c:	eb06 050a 	add.w	r5, r6, sl
 8006e20:	462a      	mov	r2, r5
 8006e22:	4616      	mov	r6, r2
 8006e24:	3201      	adds	r2, #1
 8006e26:	7830      	ldrb	r0, [r6, #0]
 8006e28:	f7ff ff8a 	bl	8006d40 <__hexdig_fun>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d1f8      	bne.n	8006e22 <__gethex+0xb6>
 8006e30:	1bad      	subs	r5, r5, r6
 8006e32:	00ad      	lsls	r5, r5, #2
 8006e34:	e004      	b.n	8006e40 <__gethex+0xd4>
 8006e36:	2400      	movs	r4, #0
 8006e38:	4625      	mov	r5, r4
 8006e3a:	e7e0      	b.n	8006dfe <__gethex+0x92>
 8006e3c:	2d00      	cmp	r5, #0
 8006e3e:	d1f7      	bne.n	8006e30 <__gethex+0xc4>
 8006e40:	7833      	ldrb	r3, [r6, #0]
 8006e42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e46:	2b50      	cmp	r3, #80	; 0x50
 8006e48:	d13b      	bne.n	8006ec2 <__gethex+0x156>
 8006e4a:	7873      	ldrb	r3, [r6, #1]
 8006e4c:	2b2b      	cmp	r3, #43	; 0x2b
 8006e4e:	d02c      	beq.n	8006eaa <__gethex+0x13e>
 8006e50:	2b2d      	cmp	r3, #45	; 0x2d
 8006e52:	d02e      	beq.n	8006eb2 <__gethex+0x146>
 8006e54:	1c71      	adds	r1, r6, #1
 8006e56:	f04f 0900 	mov.w	r9, #0
 8006e5a:	7808      	ldrb	r0, [r1, #0]
 8006e5c:	f7ff ff70 	bl	8006d40 <__hexdig_fun>
 8006e60:	1e43      	subs	r3, r0, #1
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b18      	cmp	r3, #24
 8006e66:	d82c      	bhi.n	8006ec2 <__gethex+0x156>
 8006e68:	f1a0 0210 	sub.w	r2, r0, #16
 8006e6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006e70:	f7ff ff66 	bl	8006d40 <__hexdig_fun>
 8006e74:	1e43      	subs	r3, r0, #1
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b18      	cmp	r3, #24
 8006e7a:	d91d      	bls.n	8006eb8 <__gethex+0x14c>
 8006e7c:	f1b9 0f00 	cmp.w	r9, #0
 8006e80:	d000      	beq.n	8006e84 <__gethex+0x118>
 8006e82:	4252      	negs	r2, r2
 8006e84:	4415      	add	r5, r2
 8006e86:	f8cb 1000 	str.w	r1, [fp]
 8006e8a:	b1e4      	cbz	r4, 8006ec6 <__gethex+0x15a>
 8006e8c:	9b00      	ldr	r3, [sp, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	bf14      	ite	ne
 8006e92:	2700      	movne	r7, #0
 8006e94:	2706      	moveq	r7, #6
 8006e96:	4638      	mov	r0, r7
 8006e98:	b009      	add	sp, #36	; 0x24
 8006e9a:	ecbd 8b02 	vpop	{d8}
 8006e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea2:	463e      	mov	r6, r7
 8006ea4:	4625      	mov	r5, r4
 8006ea6:	2401      	movs	r4, #1
 8006ea8:	e7ca      	b.n	8006e40 <__gethex+0xd4>
 8006eaa:	f04f 0900 	mov.w	r9, #0
 8006eae:	1cb1      	adds	r1, r6, #2
 8006eb0:	e7d3      	b.n	8006e5a <__gethex+0xee>
 8006eb2:	f04f 0901 	mov.w	r9, #1
 8006eb6:	e7fa      	b.n	8006eae <__gethex+0x142>
 8006eb8:	230a      	movs	r3, #10
 8006eba:	fb03 0202 	mla	r2, r3, r2, r0
 8006ebe:	3a10      	subs	r2, #16
 8006ec0:	e7d4      	b.n	8006e6c <__gethex+0x100>
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	e7df      	b.n	8006e86 <__gethex+0x11a>
 8006ec6:	1bf3      	subs	r3, r6, r7
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	4621      	mov	r1, r4
 8006ecc:	2b07      	cmp	r3, #7
 8006ece:	dc0b      	bgt.n	8006ee8 <__gethex+0x17c>
 8006ed0:	ee18 0a10 	vmov	r0, s16
 8006ed4:	f000 fa7e 	bl	80073d4 <_Balloc>
 8006ed8:	4604      	mov	r4, r0
 8006eda:	b940      	cbnz	r0, 8006eee <__gethex+0x182>
 8006edc:	4b5d      	ldr	r3, [pc, #372]	; (8007054 <__gethex+0x2e8>)
 8006ede:	4602      	mov	r2, r0
 8006ee0:	21de      	movs	r1, #222	; 0xde
 8006ee2:	485d      	ldr	r0, [pc, #372]	; (8007058 <__gethex+0x2ec>)
 8006ee4:	f001 f9c6 	bl	8008274 <__assert_func>
 8006ee8:	3101      	adds	r1, #1
 8006eea:	105b      	asrs	r3, r3, #1
 8006eec:	e7ee      	b.n	8006ecc <__gethex+0x160>
 8006eee:	f100 0914 	add.w	r9, r0, #20
 8006ef2:	f04f 0b00 	mov.w	fp, #0
 8006ef6:	f1ca 0301 	rsb	r3, sl, #1
 8006efa:	f8cd 9008 	str.w	r9, [sp, #8]
 8006efe:	f8cd b000 	str.w	fp, [sp]
 8006f02:	9306      	str	r3, [sp, #24]
 8006f04:	42b7      	cmp	r7, r6
 8006f06:	d340      	bcc.n	8006f8a <__gethex+0x21e>
 8006f08:	9802      	ldr	r0, [sp, #8]
 8006f0a:	9b00      	ldr	r3, [sp, #0]
 8006f0c:	f840 3b04 	str.w	r3, [r0], #4
 8006f10:	eba0 0009 	sub.w	r0, r0, r9
 8006f14:	1080      	asrs	r0, r0, #2
 8006f16:	0146      	lsls	r6, r0, #5
 8006f18:	6120      	str	r0, [r4, #16]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fb4c 	bl	80075b8 <__hi0bits>
 8006f20:	1a30      	subs	r0, r6, r0
 8006f22:	f8d8 6000 	ldr.w	r6, [r8]
 8006f26:	42b0      	cmp	r0, r6
 8006f28:	dd63      	ble.n	8006ff2 <__gethex+0x286>
 8006f2a:	1b87      	subs	r7, r0, r6
 8006f2c:	4639      	mov	r1, r7
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f000 fef0 	bl	8007d14 <__any_on>
 8006f34:	4682      	mov	sl, r0
 8006f36:	b1a8      	cbz	r0, 8006f64 <__gethex+0x1f8>
 8006f38:	1e7b      	subs	r3, r7, #1
 8006f3a:	1159      	asrs	r1, r3, #5
 8006f3c:	f003 021f 	and.w	r2, r3, #31
 8006f40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006f44:	f04f 0a01 	mov.w	sl, #1
 8006f48:	fa0a f202 	lsl.w	r2, sl, r2
 8006f4c:	420a      	tst	r2, r1
 8006f4e:	d009      	beq.n	8006f64 <__gethex+0x1f8>
 8006f50:	4553      	cmp	r3, sl
 8006f52:	dd05      	ble.n	8006f60 <__gethex+0x1f4>
 8006f54:	1eb9      	subs	r1, r7, #2
 8006f56:	4620      	mov	r0, r4
 8006f58:	f000 fedc 	bl	8007d14 <__any_on>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d145      	bne.n	8006fec <__gethex+0x280>
 8006f60:	f04f 0a02 	mov.w	sl, #2
 8006f64:	4639      	mov	r1, r7
 8006f66:	4620      	mov	r0, r4
 8006f68:	f7ff fe98 	bl	8006c9c <rshift>
 8006f6c:	443d      	add	r5, r7
 8006f6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f72:	42ab      	cmp	r3, r5
 8006f74:	da4c      	bge.n	8007010 <__gethex+0x2a4>
 8006f76:	ee18 0a10 	vmov	r0, s16
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	f000 fa6a 	bl	8007454 <_Bfree>
 8006f80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f82:	2300      	movs	r3, #0
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	27a3      	movs	r7, #163	; 0xa3
 8006f88:	e785      	b.n	8006e96 <__gethex+0x12a>
 8006f8a:	1e73      	subs	r3, r6, #1
 8006f8c:	9a05      	ldr	r2, [sp, #20]
 8006f8e:	9303      	str	r3, [sp, #12]
 8006f90:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d019      	beq.n	8006fcc <__gethex+0x260>
 8006f98:	f1bb 0f20 	cmp.w	fp, #32
 8006f9c:	d107      	bne.n	8006fae <__gethex+0x242>
 8006f9e:	9b02      	ldr	r3, [sp, #8]
 8006fa0:	9a00      	ldr	r2, [sp, #0]
 8006fa2:	f843 2b04 	str.w	r2, [r3], #4
 8006fa6:	9302      	str	r3, [sp, #8]
 8006fa8:	2300      	movs	r3, #0
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	469b      	mov	fp, r3
 8006fae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006fb2:	f7ff fec5 	bl	8006d40 <__hexdig_fun>
 8006fb6:	9b00      	ldr	r3, [sp, #0]
 8006fb8:	f000 000f 	and.w	r0, r0, #15
 8006fbc:	fa00 f00b 	lsl.w	r0, r0, fp
 8006fc0:	4303      	orrs	r3, r0
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	f10b 0b04 	add.w	fp, fp, #4
 8006fc8:	9b03      	ldr	r3, [sp, #12]
 8006fca:	e00d      	b.n	8006fe8 <__gethex+0x27c>
 8006fcc:	9b03      	ldr	r3, [sp, #12]
 8006fce:	9a06      	ldr	r2, [sp, #24]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	42bb      	cmp	r3, r7
 8006fd4:	d3e0      	bcc.n	8006f98 <__gethex+0x22c>
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	9901      	ldr	r1, [sp, #4]
 8006fda:	9307      	str	r3, [sp, #28]
 8006fdc:	4652      	mov	r2, sl
 8006fde:	f001 f927 	bl	8008230 <strncmp>
 8006fe2:	9b07      	ldr	r3, [sp, #28]
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d1d7      	bne.n	8006f98 <__gethex+0x22c>
 8006fe8:	461e      	mov	r6, r3
 8006fea:	e78b      	b.n	8006f04 <__gethex+0x198>
 8006fec:	f04f 0a03 	mov.w	sl, #3
 8006ff0:	e7b8      	b.n	8006f64 <__gethex+0x1f8>
 8006ff2:	da0a      	bge.n	800700a <__gethex+0x29e>
 8006ff4:	1a37      	subs	r7, r6, r0
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	ee18 0a10 	vmov	r0, s16
 8006ffc:	463a      	mov	r2, r7
 8006ffe:	f000 fc45 	bl	800788c <__lshift>
 8007002:	1bed      	subs	r5, r5, r7
 8007004:	4604      	mov	r4, r0
 8007006:	f100 0914 	add.w	r9, r0, #20
 800700a:	f04f 0a00 	mov.w	sl, #0
 800700e:	e7ae      	b.n	8006f6e <__gethex+0x202>
 8007010:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007014:	42a8      	cmp	r0, r5
 8007016:	dd72      	ble.n	80070fe <__gethex+0x392>
 8007018:	1b45      	subs	r5, r0, r5
 800701a:	42ae      	cmp	r6, r5
 800701c:	dc36      	bgt.n	800708c <__gethex+0x320>
 800701e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007022:	2b02      	cmp	r3, #2
 8007024:	d02a      	beq.n	800707c <__gethex+0x310>
 8007026:	2b03      	cmp	r3, #3
 8007028:	d02c      	beq.n	8007084 <__gethex+0x318>
 800702a:	2b01      	cmp	r3, #1
 800702c:	d11c      	bne.n	8007068 <__gethex+0x2fc>
 800702e:	42ae      	cmp	r6, r5
 8007030:	d11a      	bne.n	8007068 <__gethex+0x2fc>
 8007032:	2e01      	cmp	r6, #1
 8007034:	d112      	bne.n	800705c <__gethex+0x2f0>
 8007036:	9a04      	ldr	r2, [sp, #16]
 8007038:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	2301      	movs	r3, #1
 8007040:	6123      	str	r3, [r4, #16]
 8007042:	f8c9 3000 	str.w	r3, [r9]
 8007046:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007048:	2762      	movs	r7, #98	; 0x62
 800704a:	601c      	str	r4, [r3, #0]
 800704c:	e723      	b.n	8006e96 <__gethex+0x12a>
 800704e:	bf00      	nop
 8007050:	080090d0 	.word	0x080090d0
 8007054:	08009058 	.word	0x08009058
 8007058:	08009069 	.word	0x08009069
 800705c:	1e71      	subs	r1, r6, #1
 800705e:	4620      	mov	r0, r4
 8007060:	f000 fe58 	bl	8007d14 <__any_on>
 8007064:	2800      	cmp	r0, #0
 8007066:	d1e6      	bne.n	8007036 <__gethex+0x2ca>
 8007068:	ee18 0a10 	vmov	r0, s16
 800706c:	4621      	mov	r1, r4
 800706e:	f000 f9f1 	bl	8007454 <_Bfree>
 8007072:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007074:	2300      	movs	r3, #0
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	2750      	movs	r7, #80	; 0x50
 800707a:	e70c      	b.n	8006e96 <__gethex+0x12a>
 800707c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f2      	bne.n	8007068 <__gethex+0x2fc>
 8007082:	e7d8      	b.n	8007036 <__gethex+0x2ca>
 8007084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1d5      	bne.n	8007036 <__gethex+0x2ca>
 800708a:	e7ed      	b.n	8007068 <__gethex+0x2fc>
 800708c:	1e6f      	subs	r7, r5, #1
 800708e:	f1ba 0f00 	cmp.w	sl, #0
 8007092:	d131      	bne.n	80070f8 <__gethex+0x38c>
 8007094:	b127      	cbz	r7, 80070a0 <__gethex+0x334>
 8007096:	4639      	mov	r1, r7
 8007098:	4620      	mov	r0, r4
 800709a:	f000 fe3b 	bl	8007d14 <__any_on>
 800709e:	4682      	mov	sl, r0
 80070a0:	117b      	asrs	r3, r7, #5
 80070a2:	2101      	movs	r1, #1
 80070a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80070a8:	f007 071f 	and.w	r7, r7, #31
 80070ac:	fa01 f707 	lsl.w	r7, r1, r7
 80070b0:	421f      	tst	r7, r3
 80070b2:	4629      	mov	r1, r5
 80070b4:	4620      	mov	r0, r4
 80070b6:	bf18      	it	ne
 80070b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80070bc:	1b76      	subs	r6, r6, r5
 80070be:	f7ff fded 	bl	8006c9c <rshift>
 80070c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80070c6:	2702      	movs	r7, #2
 80070c8:	f1ba 0f00 	cmp.w	sl, #0
 80070cc:	d048      	beq.n	8007160 <__gethex+0x3f4>
 80070ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d015      	beq.n	8007102 <__gethex+0x396>
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d017      	beq.n	800710a <__gethex+0x39e>
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d109      	bne.n	80070f2 <__gethex+0x386>
 80070de:	f01a 0f02 	tst.w	sl, #2
 80070e2:	d006      	beq.n	80070f2 <__gethex+0x386>
 80070e4:	f8d9 0000 	ldr.w	r0, [r9]
 80070e8:	ea4a 0a00 	orr.w	sl, sl, r0
 80070ec:	f01a 0f01 	tst.w	sl, #1
 80070f0:	d10e      	bne.n	8007110 <__gethex+0x3a4>
 80070f2:	f047 0710 	orr.w	r7, r7, #16
 80070f6:	e033      	b.n	8007160 <__gethex+0x3f4>
 80070f8:	f04f 0a01 	mov.w	sl, #1
 80070fc:	e7d0      	b.n	80070a0 <__gethex+0x334>
 80070fe:	2701      	movs	r7, #1
 8007100:	e7e2      	b.n	80070c8 <__gethex+0x35c>
 8007102:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007104:	f1c3 0301 	rsb	r3, r3, #1
 8007108:	9315      	str	r3, [sp, #84]	; 0x54
 800710a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0f0      	beq.n	80070f2 <__gethex+0x386>
 8007110:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007114:	f104 0314 	add.w	r3, r4, #20
 8007118:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800711c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007120:	f04f 0c00 	mov.w	ip, #0
 8007124:	4618      	mov	r0, r3
 8007126:	f853 2b04 	ldr.w	r2, [r3], #4
 800712a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800712e:	d01c      	beq.n	800716a <__gethex+0x3fe>
 8007130:	3201      	adds	r2, #1
 8007132:	6002      	str	r2, [r0, #0]
 8007134:	2f02      	cmp	r7, #2
 8007136:	f104 0314 	add.w	r3, r4, #20
 800713a:	d13f      	bne.n	80071bc <__gethex+0x450>
 800713c:	f8d8 2000 	ldr.w	r2, [r8]
 8007140:	3a01      	subs	r2, #1
 8007142:	42b2      	cmp	r2, r6
 8007144:	d10a      	bne.n	800715c <__gethex+0x3f0>
 8007146:	1171      	asrs	r1, r6, #5
 8007148:	2201      	movs	r2, #1
 800714a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800714e:	f006 061f 	and.w	r6, r6, #31
 8007152:	fa02 f606 	lsl.w	r6, r2, r6
 8007156:	421e      	tst	r6, r3
 8007158:	bf18      	it	ne
 800715a:	4617      	movne	r7, r2
 800715c:	f047 0720 	orr.w	r7, r7, #32
 8007160:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007162:	601c      	str	r4, [r3, #0]
 8007164:	9b04      	ldr	r3, [sp, #16]
 8007166:	601d      	str	r5, [r3, #0]
 8007168:	e695      	b.n	8006e96 <__gethex+0x12a>
 800716a:	4299      	cmp	r1, r3
 800716c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007170:	d8d8      	bhi.n	8007124 <__gethex+0x3b8>
 8007172:	68a3      	ldr	r3, [r4, #8]
 8007174:	459b      	cmp	fp, r3
 8007176:	db19      	blt.n	80071ac <__gethex+0x440>
 8007178:	6861      	ldr	r1, [r4, #4]
 800717a:	ee18 0a10 	vmov	r0, s16
 800717e:	3101      	adds	r1, #1
 8007180:	f000 f928 	bl	80073d4 <_Balloc>
 8007184:	4681      	mov	r9, r0
 8007186:	b918      	cbnz	r0, 8007190 <__gethex+0x424>
 8007188:	4b1a      	ldr	r3, [pc, #104]	; (80071f4 <__gethex+0x488>)
 800718a:	4602      	mov	r2, r0
 800718c:	2184      	movs	r1, #132	; 0x84
 800718e:	e6a8      	b.n	8006ee2 <__gethex+0x176>
 8007190:	6922      	ldr	r2, [r4, #16]
 8007192:	3202      	adds	r2, #2
 8007194:	f104 010c 	add.w	r1, r4, #12
 8007198:	0092      	lsls	r2, r2, #2
 800719a:	300c      	adds	r0, #12
 800719c:	f000 f90c 	bl	80073b8 <memcpy>
 80071a0:	4621      	mov	r1, r4
 80071a2:	ee18 0a10 	vmov	r0, s16
 80071a6:	f000 f955 	bl	8007454 <_Bfree>
 80071aa:	464c      	mov	r4, r9
 80071ac:	6923      	ldr	r3, [r4, #16]
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071b4:	6122      	str	r2, [r4, #16]
 80071b6:	2201      	movs	r2, #1
 80071b8:	615a      	str	r2, [r3, #20]
 80071ba:	e7bb      	b.n	8007134 <__gethex+0x3c8>
 80071bc:	6922      	ldr	r2, [r4, #16]
 80071be:	455a      	cmp	r2, fp
 80071c0:	dd0b      	ble.n	80071da <__gethex+0x46e>
 80071c2:	2101      	movs	r1, #1
 80071c4:	4620      	mov	r0, r4
 80071c6:	f7ff fd69 	bl	8006c9c <rshift>
 80071ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80071ce:	3501      	adds	r5, #1
 80071d0:	42ab      	cmp	r3, r5
 80071d2:	f6ff aed0 	blt.w	8006f76 <__gethex+0x20a>
 80071d6:	2701      	movs	r7, #1
 80071d8:	e7c0      	b.n	800715c <__gethex+0x3f0>
 80071da:	f016 061f 	ands.w	r6, r6, #31
 80071de:	d0fa      	beq.n	80071d6 <__gethex+0x46a>
 80071e0:	4453      	add	r3, sl
 80071e2:	f1c6 0620 	rsb	r6, r6, #32
 80071e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80071ea:	f000 f9e5 	bl	80075b8 <__hi0bits>
 80071ee:	42b0      	cmp	r0, r6
 80071f0:	dbe7      	blt.n	80071c2 <__gethex+0x456>
 80071f2:	e7f0      	b.n	80071d6 <__gethex+0x46a>
 80071f4:	08009058 	.word	0x08009058

080071f8 <L_shift>:
 80071f8:	f1c2 0208 	rsb	r2, r2, #8
 80071fc:	0092      	lsls	r2, r2, #2
 80071fe:	b570      	push	{r4, r5, r6, lr}
 8007200:	f1c2 0620 	rsb	r6, r2, #32
 8007204:	6843      	ldr	r3, [r0, #4]
 8007206:	6804      	ldr	r4, [r0, #0]
 8007208:	fa03 f506 	lsl.w	r5, r3, r6
 800720c:	432c      	orrs	r4, r5
 800720e:	40d3      	lsrs	r3, r2
 8007210:	6004      	str	r4, [r0, #0]
 8007212:	f840 3f04 	str.w	r3, [r0, #4]!
 8007216:	4288      	cmp	r0, r1
 8007218:	d3f4      	bcc.n	8007204 <L_shift+0xc>
 800721a:	bd70      	pop	{r4, r5, r6, pc}

0800721c <__match>:
 800721c:	b530      	push	{r4, r5, lr}
 800721e:	6803      	ldr	r3, [r0, #0]
 8007220:	3301      	adds	r3, #1
 8007222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007226:	b914      	cbnz	r4, 800722e <__match+0x12>
 8007228:	6003      	str	r3, [r0, #0]
 800722a:	2001      	movs	r0, #1
 800722c:	bd30      	pop	{r4, r5, pc}
 800722e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007232:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007236:	2d19      	cmp	r5, #25
 8007238:	bf98      	it	ls
 800723a:	3220      	addls	r2, #32
 800723c:	42a2      	cmp	r2, r4
 800723e:	d0f0      	beq.n	8007222 <__match+0x6>
 8007240:	2000      	movs	r0, #0
 8007242:	e7f3      	b.n	800722c <__match+0x10>

08007244 <__hexnan>:
 8007244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007248:	680b      	ldr	r3, [r1, #0]
 800724a:	115e      	asrs	r6, r3, #5
 800724c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007250:	f013 031f 	ands.w	r3, r3, #31
 8007254:	b087      	sub	sp, #28
 8007256:	bf18      	it	ne
 8007258:	3604      	addne	r6, #4
 800725a:	2500      	movs	r5, #0
 800725c:	1f37      	subs	r7, r6, #4
 800725e:	4690      	mov	r8, r2
 8007260:	6802      	ldr	r2, [r0, #0]
 8007262:	9301      	str	r3, [sp, #4]
 8007264:	4682      	mov	sl, r0
 8007266:	f846 5c04 	str.w	r5, [r6, #-4]
 800726a:	46b9      	mov	r9, r7
 800726c:	463c      	mov	r4, r7
 800726e:	9502      	str	r5, [sp, #8]
 8007270:	46ab      	mov	fp, r5
 8007272:	7851      	ldrb	r1, [r2, #1]
 8007274:	1c53      	adds	r3, r2, #1
 8007276:	9303      	str	r3, [sp, #12]
 8007278:	b341      	cbz	r1, 80072cc <__hexnan+0x88>
 800727a:	4608      	mov	r0, r1
 800727c:	9205      	str	r2, [sp, #20]
 800727e:	9104      	str	r1, [sp, #16]
 8007280:	f7ff fd5e 	bl	8006d40 <__hexdig_fun>
 8007284:	2800      	cmp	r0, #0
 8007286:	d14f      	bne.n	8007328 <__hexnan+0xe4>
 8007288:	9904      	ldr	r1, [sp, #16]
 800728a:	9a05      	ldr	r2, [sp, #20]
 800728c:	2920      	cmp	r1, #32
 800728e:	d818      	bhi.n	80072c2 <__hexnan+0x7e>
 8007290:	9b02      	ldr	r3, [sp, #8]
 8007292:	459b      	cmp	fp, r3
 8007294:	dd13      	ble.n	80072be <__hexnan+0x7a>
 8007296:	454c      	cmp	r4, r9
 8007298:	d206      	bcs.n	80072a8 <__hexnan+0x64>
 800729a:	2d07      	cmp	r5, #7
 800729c:	dc04      	bgt.n	80072a8 <__hexnan+0x64>
 800729e:	462a      	mov	r2, r5
 80072a0:	4649      	mov	r1, r9
 80072a2:	4620      	mov	r0, r4
 80072a4:	f7ff ffa8 	bl	80071f8 <L_shift>
 80072a8:	4544      	cmp	r4, r8
 80072aa:	d950      	bls.n	800734e <__hexnan+0x10a>
 80072ac:	2300      	movs	r3, #0
 80072ae:	f1a4 0904 	sub.w	r9, r4, #4
 80072b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80072b6:	f8cd b008 	str.w	fp, [sp, #8]
 80072ba:	464c      	mov	r4, r9
 80072bc:	461d      	mov	r5, r3
 80072be:	9a03      	ldr	r2, [sp, #12]
 80072c0:	e7d7      	b.n	8007272 <__hexnan+0x2e>
 80072c2:	2929      	cmp	r1, #41	; 0x29
 80072c4:	d156      	bne.n	8007374 <__hexnan+0x130>
 80072c6:	3202      	adds	r2, #2
 80072c8:	f8ca 2000 	str.w	r2, [sl]
 80072cc:	f1bb 0f00 	cmp.w	fp, #0
 80072d0:	d050      	beq.n	8007374 <__hexnan+0x130>
 80072d2:	454c      	cmp	r4, r9
 80072d4:	d206      	bcs.n	80072e4 <__hexnan+0xa0>
 80072d6:	2d07      	cmp	r5, #7
 80072d8:	dc04      	bgt.n	80072e4 <__hexnan+0xa0>
 80072da:	462a      	mov	r2, r5
 80072dc:	4649      	mov	r1, r9
 80072de:	4620      	mov	r0, r4
 80072e0:	f7ff ff8a 	bl	80071f8 <L_shift>
 80072e4:	4544      	cmp	r4, r8
 80072e6:	d934      	bls.n	8007352 <__hexnan+0x10e>
 80072e8:	f1a8 0204 	sub.w	r2, r8, #4
 80072ec:	4623      	mov	r3, r4
 80072ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80072f2:	f842 1f04 	str.w	r1, [r2, #4]!
 80072f6:	429f      	cmp	r7, r3
 80072f8:	d2f9      	bcs.n	80072ee <__hexnan+0xaa>
 80072fa:	1b3b      	subs	r3, r7, r4
 80072fc:	f023 0303 	bic.w	r3, r3, #3
 8007300:	3304      	adds	r3, #4
 8007302:	3401      	adds	r4, #1
 8007304:	3e03      	subs	r6, #3
 8007306:	42b4      	cmp	r4, r6
 8007308:	bf88      	it	hi
 800730a:	2304      	movhi	r3, #4
 800730c:	4443      	add	r3, r8
 800730e:	2200      	movs	r2, #0
 8007310:	f843 2b04 	str.w	r2, [r3], #4
 8007314:	429f      	cmp	r7, r3
 8007316:	d2fb      	bcs.n	8007310 <__hexnan+0xcc>
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	b91b      	cbnz	r3, 8007324 <__hexnan+0xe0>
 800731c:	4547      	cmp	r7, r8
 800731e:	d127      	bne.n	8007370 <__hexnan+0x12c>
 8007320:	2301      	movs	r3, #1
 8007322:	603b      	str	r3, [r7, #0]
 8007324:	2005      	movs	r0, #5
 8007326:	e026      	b.n	8007376 <__hexnan+0x132>
 8007328:	3501      	adds	r5, #1
 800732a:	2d08      	cmp	r5, #8
 800732c:	f10b 0b01 	add.w	fp, fp, #1
 8007330:	dd06      	ble.n	8007340 <__hexnan+0xfc>
 8007332:	4544      	cmp	r4, r8
 8007334:	d9c3      	bls.n	80072be <__hexnan+0x7a>
 8007336:	2300      	movs	r3, #0
 8007338:	f844 3c04 	str.w	r3, [r4, #-4]
 800733c:	2501      	movs	r5, #1
 800733e:	3c04      	subs	r4, #4
 8007340:	6822      	ldr	r2, [r4, #0]
 8007342:	f000 000f 	and.w	r0, r0, #15
 8007346:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800734a:	6022      	str	r2, [r4, #0]
 800734c:	e7b7      	b.n	80072be <__hexnan+0x7a>
 800734e:	2508      	movs	r5, #8
 8007350:	e7b5      	b.n	80072be <__hexnan+0x7a>
 8007352:	9b01      	ldr	r3, [sp, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0df      	beq.n	8007318 <__hexnan+0xd4>
 8007358:	f04f 32ff 	mov.w	r2, #4294967295
 800735c:	f1c3 0320 	rsb	r3, r3, #32
 8007360:	fa22 f303 	lsr.w	r3, r2, r3
 8007364:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007368:	401a      	ands	r2, r3
 800736a:	f846 2c04 	str.w	r2, [r6, #-4]
 800736e:	e7d3      	b.n	8007318 <__hexnan+0xd4>
 8007370:	3f04      	subs	r7, #4
 8007372:	e7d1      	b.n	8007318 <__hexnan+0xd4>
 8007374:	2004      	movs	r0, #4
 8007376:	b007      	add	sp, #28
 8007378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800737c <_localeconv_r>:
 800737c:	4800      	ldr	r0, [pc, #0]	; (8007380 <_localeconv_r+0x4>)
 800737e:	4770      	bx	lr
 8007380:	2000018c 	.word	0x2000018c

08007384 <malloc>:
 8007384:	4b02      	ldr	r3, [pc, #8]	; (8007390 <malloc+0xc>)
 8007386:	4601      	mov	r1, r0
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	f000 bd67 	b.w	8007e5c <_malloc_r>
 800738e:	bf00      	nop
 8007390:	20000034 	.word	0x20000034

08007394 <__ascii_mbtowc>:
 8007394:	b082      	sub	sp, #8
 8007396:	b901      	cbnz	r1, 800739a <__ascii_mbtowc+0x6>
 8007398:	a901      	add	r1, sp, #4
 800739a:	b142      	cbz	r2, 80073ae <__ascii_mbtowc+0x1a>
 800739c:	b14b      	cbz	r3, 80073b2 <__ascii_mbtowc+0x1e>
 800739e:	7813      	ldrb	r3, [r2, #0]
 80073a0:	600b      	str	r3, [r1, #0]
 80073a2:	7812      	ldrb	r2, [r2, #0]
 80073a4:	1e10      	subs	r0, r2, #0
 80073a6:	bf18      	it	ne
 80073a8:	2001      	movne	r0, #1
 80073aa:	b002      	add	sp, #8
 80073ac:	4770      	bx	lr
 80073ae:	4610      	mov	r0, r2
 80073b0:	e7fb      	b.n	80073aa <__ascii_mbtowc+0x16>
 80073b2:	f06f 0001 	mvn.w	r0, #1
 80073b6:	e7f8      	b.n	80073aa <__ascii_mbtowc+0x16>

080073b8 <memcpy>:
 80073b8:	440a      	add	r2, r1
 80073ba:	4291      	cmp	r1, r2
 80073bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80073c0:	d100      	bne.n	80073c4 <memcpy+0xc>
 80073c2:	4770      	bx	lr
 80073c4:	b510      	push	{r4, lr}
 80073c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073ce:	4291      	cmp	r1, r2
 80073d0:	d1f9      	bne.n	80073c6 <memcpy+0xe>
 80073d2:	bd10      	pop	{r4, pc}

080073d4 <_Balloc>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073d8:	4604      	mov	r4, r0
 80073da:	460d      	mov	r5, r1
 80073dc:	b976      	cbnz	r6, 80073fc <_Balloc+0x28>
 80073de:	2010      	movs	r0, #16
 80073e0:	f7ff ffd0 	bl	8007384 <malloc>
 80073e4:	4602      	mov	r2, r0
 80073e6:	6260      	str	r0, [r4, #36]	; 0x24
 80073e8:	b920      	cbnz	r0, 80073f4 <_Balloc+0x20>
 80073ea:	4b18      	ldr	r3, [pc, #96]	; (800744c <_Balloc+0x78>)
 80073ec:	4818      	ldr	r0, [pc, #96]	; (8007450 <_Balloc+0x7c>)
 80073ee:	2166      	movs	r1, #102	; 0x66
 80073f0:	f000 ff40 	bl	8008274 <__assert_func>
 80073f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073f8:	6006      	str	r6, [r0, #0]
 80073fa:	60c6      	str	r6, [r0, #12]
 80073fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80073fe:	68f3      	ldr	r3, [r6, #12]
 8007400:	b183      	cbz	r3, 8007424 <_Balloc+0x50>
 8007402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800740a:	b9b8      	cbnz	r0, 800743c <_Balloc+0x68>
 800740c:	2101      	movs	r1, #1
 800740e:	fa01 f605 	lsl.w	r6, r1, r5
 8007412:	1d72      	adds	r2, r6, #5
 8007414:	0092      	lsls	r2, r2, #2
 8007416:	4620      	mov	r0, r4
 8007418:	f000 fc9d 	bl	8007d56 <_calloc_r>
 800741c:	b160      	cbz	r0, 8007438 <_Balloc+0x64>
 800741e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007422:	e00e      	b.n	8007442 <_Balloc+0x6e>
 8007424:	2221      	movs	r2, #33	; 0x21
 8007426:	2104      	movs	r1, #4
 8007428:	4620      	mov	r0, r4
 800742a:	f000 fc94 	bl	8007d56 <_calloc_r>
 800742e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007430:	60f0      	str	r0, [r6, #12]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e4      	bne.n	8007402 <_Balloc+0x2e>
 8007438:	2000      	movs	r0, #0
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	6802      	ldr	r2, [r0, #0]
 800743e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007442:	2300      	movs	r3, #0
 8007444:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007448:	e7f7      	b.n	800743a <_Balloc+0x66>
 800744a:	bf00      	nop
 800744c:	08008fe6 	.word	0x08008fe6
 8007450:	080090e4 	.word	0x080090e4

08007454 <_Bfree>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007458:	4605      	mov	r5, r0
 800745a:	460c      	mov	r4, r1
 800745c:	b976      	cbnz	r6, 800747c <_Bfree+0x28>
 800745e:	2010      	movs	r0, #16
 8007460:	f7ff ff90 	bl	8007384 <malloc>
 8007464:	4602      	mov	r2, r0
 8007466:	6268      	str	r0, [r5, #36]	; 0x24
 8007468:	b920      	cbnz	r0, 8007474 <_Bfree+0x20>
 800746a:	4b09      	ldr	r3, [pc, #36]	; (8007490 <_Bfree+0x3c>)
 800746c:	4809      	ldr	r0, [pc, #36]	; (8007494 <_Bfree+0x40>)
 800746e:	218a      	movs	r1, #138	; 0x8a
 8007470:	f000 ff00 	bl	8008274 <__assert_func>
 8007474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007478:	6006      	str	r6, [r0, #0]
 800747a:	60c6      	str	r6, [r0, #12]
 800747c:	b13c      	cbz	r4, 800748e <_Bfree+0x3a>
 800747e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007480:	6862      	ldr	r2, [r4, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007488:	6021      	str	r1, [r4, #0]
 800748a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	08008fe6 	.word	0x08008fe6
 8007494:	080090e4 	.word	0x080090e4

08007498 <__multadd>:
 8007498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749c:	690d      	ldr	r5, [r1, #16]
 800749e:	4607      	mov	r7, r0
 80074a0:	460c      	mov	r4, r1
 80074a2:	461e      	mov	r6, r3
 80074a4:	f101 0c14 	add.w	ip, r1, #20
 80074a8:	2000      	movs	r0, #0
 80074aa:	f8dc 3000 	ldr.w	r3, [ip]
 80074ae:	b299      	uxth	r1, r3
 80074b0:	fb02 6101 	mla	r1, r2, r1, r6
 80074b4:	0c1e      	lsrs	r6, r3, #16
 80074b6:	0c0b      	lsrs	r3, r1, #16
 80074b8:	fb02 3306 	mla	r3, r2, r6, r3
 80074bc:	b289      	uxth	r1, r1
 80074be:	3001      	adds	r0, #1
 80074c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074c4:	4285      	cmp	r5, r0
 80074c6:	f84c 1b04 	str.w	r1, [ip], #4
 80074ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074ce:	dcec      	bgt.n	80074aa <__multadd+0x12>
 80074d0:	b30e      	cbz	r6, 8007516 <__multadd+0x7e>
 80074d2:	68a3      	ldr	r3, [r4, #8]
 80074d4:	42ab      	cmp	r3, r5
 80074d6:	dc19      	bgt.n	800750c <__multadd+0x74>
 80074d8:	6861      	ldr	r1, [r4, #4]
 80074da:	4638      	mov	r0, r7
 80074dc:	3101      	adds	r1, #1
 80074de:	f7ff ff79 	bl	80073d4 <_Balloc>
 80074e2:	4680      	mov	r8, r0
 80074e4:	b928      	cbnz	r0, 80074f2 <__multadd+0x5a>
 80074e6:	4602      	mov	r2, r0
 80074e8:	4b0c      	ldr	r3, [pc, #48]	; (800751c <__multadd+0x84>)
 80074ea:	480d      	ldr	r0, [pc, #52]	; (8007520 <__multadd+0x88>)
 80074ec:	21b5      	movs	r1, #181	; 0xb5
 80074ee:	f000 fec1 	bl	8008274 <__assert_func>
 80074f2:	6922      	ldr	r2, [r4, #16]
 80074f4:	3202      	adds	r2, #2
 80074f6:	f104 010c 	add.w	r1, r4, #12
 80074fa:	0092      	lsls	r2, r2, #2
 80074fc:	300c      	adds	r0, #12
 80074fe:	f7ff ff5b 	bl	80073b8 <memcpy>
 8007502:	4621      	mov	r1, r4
 8007504:	4638      	mov	r0, r7
 8007506:	f7ff ffa5 	bl	8007454 <_Bfree>
 800750a:	4644      	mov	r4, r8
 800750c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007510:	3501      	adds	r5, #1
 8007512:	615e      	str	r6, [r3, #20]
 8007514:	6125      	str	r5, [r4, #16]
 8007516:	4620      	mov	r0, r4
 8007518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800751c:	08009058 	.word	0x08009058
 8007520:	080090e4 	.word	0x080090e4

08007524 <__s2b>:
 8007524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007528:	460c      	mov	r4, r1
 800752a:	4615      	mov	r5, r2
 800752c:	461f      	mov	r7, r3
 800752e:	2209      	movs	r2, #9
 8007530:	3308      	adds	r3, #8
 8007532:	4606      	mov	r6, r0
 8007534:	fb93 f3f2 	sdiv	r3, r3, r2
 8007538:	2100      	movs	r1, #0
 800753a:	2201      	movs	r2, #1
 800753c:	429a      	cmp	r2, r3
 800753e:	db09      	blt.n	8007554 <__s2b+0x30>
 8007540:	4630      	mov	r0, r6
 8007542:	f7ff ff47 	bl	80073d4 <_Balloc>
 8007546:	b940      	cbnz	r0, 800755a <__s2b+0x36>
 8007548:	4602      	mov	r2, r0
 800754a:	4b19      	ldr	r3, [pc, #100]	; (80075b0 <__s2b+0x8c>)
 800754c:	4819      	ldr	r0, [pc, #100]	; (80075b4 <__s2b+0x90>)
 800754e:	21ce      	movs	r1, #206	; 0xce
 8007550:	f000 fe90 	bl	8008274 <__assert_func>
 8007554:	0052      	lsls	r2, r2, #1
 8007556:	3101      	adds	r1, #1
 8007558:	e7f0      	b.n	800753c <__s2b+0x18>
 800755a:	9b08      	ldr	r3, [sp, #32]
 800755c:	6143      	str	r3, [r0, #20]
 800755e:	2d09      	cmp	r5, #9
 8007560:	f04f 0301 	mov.w	r3, #1
 8007564:	6103      	str	r3, [r0, #16]
 8007566:	dd16      	ble.n	8007596 <__s2b+0x72>
 8007568:	f104 0909 	add.w	r9, r4, #9
 800756c:	46c8      	mov	r8, r9
 800756e:	442c      	add	r4, r5
 8007570:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007574:	4601      	mov	r1, r0
 8007576:	3b30      	subs	r3, #48	; 0x30
 8007578:	220a      	movs	r2, #10
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff ff8c 	bl	8007498 <__multadd>
 8007580:	45a0      	cmp	r8, r4
 8007582:	d1f5      	bne.n	8007570 <__s2b+0x4c>
 8007584:	f1a5 0408 	sub.w	r4, r5, #8
 8007588:	444c      	add	r4, r9
 800758a:	1b2d      	subs	r5, r5, r4
 800758c:	1963      	adds	r3, r4, r5
 800758e:	42bb      	cmp	r3, r7
 8007590:	db04      	blt.n	800759c <__s2b+0x78>
 8007592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007596:	340a      	adds	r4, #10
 8007598:	2509      	movs	r5, #9
 800759a:	e7f6      	b.n	800758a <__s2b+0x66>
 800759c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80075a0:	4601      	mov	r1, r0
 80075a2:	3b30      	subs	r3, #48	; 0x30
 80075a4:	220a      	movs	r2, #10
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7ff ff76 	bl	8007498 <__multadd>
 80075ac:	e7ee      	b.n	800758c <__s2b+0x68>
 80075ae:	bf00      	nop
 80075b0:	08009058 	.word	0x08009058
 80075b4:	080090e4 	.word	0x080090e4

080075b8 <__hi0bits>:
 80075b8:	0c03      	lsrs	r3, r0, #16
 80075ba:	041b      	lsls	r3, r3, #16
 80075bc:	b9d3      	cbnz	r3, 80075f4 <__hi0bits+0x3c>
 80075be:	0400      	lsls	r0, r0, #16
 80075c0:	2310      	movs	r3, #16
 80075c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80075c6:	bf04      	itt	eq
 80075c8:	0200      	lsleq	r0, r0, #8
 80075ca:	3308      	addeq	r3, #8
 80075cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80075d0:	bf04      	itt	eq
 80075d2:	0100      	lsleq	r0, r0, #4
 80075d4:	3304      	addeq	r3, #4
 80075d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80075da:	bf04      	itt	eq
 80075dc:	0080      	lsleq	r0, r0, #2
 80075de:	3302      	addeq	r3, #2
 80075e0:	2800      	cmp	r0, #0
 80075e2:	db05      	blt.n	80075f0 <__hi0bits+0x38>
 80075e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80075e8:	f103 0301 	add.w	r3, r3, #1
 80075ec:	bf08      	it	eq
 80075ee:	2320      	moveq	r3, #32
 80075f0:	4618      	mov	r0, r3
 80075f2:	4770      	bx	lr
 80075f4:	2300      	movs	r3, #0
 80075f6:	e7e4      	b.n	80075c2 <__hi0bits+0xa>

080075f8 <__lo0bits>:
 80075f8:	6803      	ldr	r3, [r0, #0]
 80075fa:	f013 0207 	ands.w	r2, r3, #7
 80075fe:	4601      	mov	r1, r0
 8007600:	d00b      	beq.n	800761a <__lo0bits+0x22>
 8007602:	07da      	lsls	r2, r3, #31
 8007604:	d423      	bmi.n	800764e <__lo0bits+0x56>
 8007606:	0798      	lsls	r0, r3, #30
 8007608:	bf49      	itett	mi
 800760a:	085b      	lsrmi	r3, r3, #1
 800760c:	089b      	lsrpl	r3, r3, #2
 800760e:	2001      	movmi	r0, #1
 8007610:	600b      	strmi	r3, [r1, #0]
 8007612:	bf5c      	itt	pl
 8007614:	600b      	strpl	r3, [r1, #0]
 8007616:	2002      	movpl	r0, #2
 8007618:	4770      	bx	lr
 800761a:	b298      	uxth	r0, r3
 800761c:	b9a8      	cbnz	r0, 800764a <__lo0bits+0x52>
 800761e:	0c1b      	lsrs	r3, r3, #16
 8007620:	2010      	movs	r0, #16
 8007622:	b2da      	uxtb	r2, r3
 8007624:	b90a      	cbnz	r2, 800762a <__lo0bits+0x32>
 8007626:	3008      	adds	r0, #8
 8007628:	0a1b      	lsrs	r3, r3, #8
 800762a:	071a      	lsls	r2, r3, #28
 800762c:	bf04      	itt	eq
 800762e:	091b      	lsreq	r3, r3, #4
 8007630:	3004      	addeq	r0, #4
 8007632:	079a      	lsls	r2, r3, #30
 8007634:	bf04      	itt	eq
 8007636:	089b      	lsreq	r3, r3, #2
 8007638:	3002      	addeq	r0, #2
 800763a:	07da      	lsls	r2, r3, #31
 800763c:	d403      	bmi.n	8007646 <__lo0bits+0x4e>
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	f100 0001 	add.w	r0, r0, #1
 8007644:	d005      	beq.n	8007652 <__lo0bits+0x5a>
 8007646:	600b      	str	r3, [r1, #0]
 8007648:	4770      	bx	lr
 800764a:	4610      	mov	r0, r2
 800764c:	e7e9      	b.n	8007622 <__lo0bits+0x2a>
 800764e:	2000      	movs	r0, #0
 8007650:	4770      	bx	lr
 8007652:	2020      	movs	r0, #32
 8007654:	4770      	bx	lr
	...

08007658 <__i2b>:
 8007658:	b510      	push	{r4, lr}
 800765a:	460c      	mov	r4, r1
 800765c:	2101      	movs	r1, #1
 800765e:	f7ff feb9 	bl	80073d4 <_Balloc>
 8007662:	4602      	mov	r2, r0
 8007664:	b928      	cbnz	r0, 8007672 <__i2b+0x1a>
 8007666:	4b05      	ldr	r3, [pc, #20]	; (800767c <__i2b+0x24>)
 8007668:	4805      	ldr	r0, [pc, #20]	; (8007680 <__i2b+0x28>)
 800766a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800766e:	f000 fe01 	bl	8008274 <__assert_func>
 8007672:	2301      	movs	r3, #1
 8007674:	6144      	str	r4, [r0, #20]
 8007676:	6103      	str	r3, [r0, #16]
 8007678:	bd10      	pop	{r4, pc}
 800767a:	bf00      	nop
 800767c:	08009058 	.word	0x08009058
 8007680:	080090e4 	.word	0x080090e4

08007684 <__multiply>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	4691      	mov	r9, r2
 800768a:	690a      	ldr	r2, [r1, #16]
 800768c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007690:	429a      	cmp	r2, r3
 8007692:	bfb8      	it	lt
 8007694:	460b      	movlt	r3, r1
 8007696:	460c      	mov	r4, r1
 8007698:	bfbc      	itt	lt
 800769a:	464c      	movlt	r4, r9
 800769c:	4699      	movlt	r9, r3
 800769e:	6927      	ldr	r7, [r4, #16]
 80076a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076a4:	68a3      	ldr	r3, [r4, #8]
 80076a6:	6861      	ldr	r1, [r4, #4]
 80076a8:	eb07 060a 	add.w	r6, r7, sl
 80076ac:	42b3      	cmp	r3, r6
 80076ae:	b085      	sub	sp, #20
 80076b0:	bfb8      	it	lt
 80076b2:	3101      	addlt	r1, #1
 80076b4:	f7ff fe8e 	bl	80073d4 <_Balloc>
 80076b8:	b930      	cbnz	r0, 80076c8 <__multiply+0x44>
 80076ba:	4602      	mov	r2, r0
 80076bc:	4b44      	ldr	r3, [pc, #272]	; (80077d0 <__multiply+0x14c>)
 80076be:	4845      	ldr	r0, [pc, #276]	; (80077d4 <__multiply+0x150>)
 80076c0:	f240 115d 	movw	r1, #349	; 0x15d
 80076c4:	f000 fdd6 	bl	8008274 <__assert_func>
 80076c8:	f100 0514 	add.w	r5, r0, #20
 80076cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076d0:	462b      	mov	r3, r5
 80076d2:	2200      	movs	r2, #0
 80076d4:	4543      	cmp	r3, r8
 80076d6:	d321      	bcc.n	800771c <__multiply+0x98>
 80076d8:	f104 0314 	add.w	r3, r4, #20
 80076dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80076e0:	f109 0314 	add.w	r3, r9, #20
 80076e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80076e8:	9202      	str	r2, [sp, #8]
 80076ea:	1b3a      	subs	r2, r7, r4
 80076ec:	3a15      	subs	r2, #21
 80076ee:	f022 0203 	bic.w	r2, r2, #3
 80076f2:	3204      	adds	r2, #4
 80076f4:	f104 0115 	add.w	r1, r4, #21
 80076f8:	428f      	cmp	r7, r1
 80076fa:	bf38      	it	cc
 80076fc:	2204      	movcc	r2, #4
 80076fe:	9201      	str	r2, [sp, #4]
 8007700:	9a02      	ldr	r2, [sp, #8]
 8007702:	9303      	str	r3, [sp, #12]
 8007704:	429a      	cmp	r2, r3
 8007706:	d80c      	bhi.n	8007722 <__multiply+0x9e>
 8007708:	2e00      	cmp	r6, #0
 800770a:	dd03      	ble.n	8007714 <__multiply+0x90>
 800770c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007710:	2b00      	cmp	r3, #0
 8007712:	d05a      	beq.n	80077ca <__multiply+0x146>
 8007714:	6106      	str	r6, [r0, #16]
 8007716:	b005      	add	sp, #20
 8007718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771c:	f843 2b04 	str.w	r2, [r3], #4
 8007720:	e7d8      	b.n	80076d4 <__multiply+0x50>
 8007722:	f8b3 a000 	ldrh.w	sl, [r3]
 8007726:	f1ba 0f00 	cmp.w	sl, #0
 800772a:	d024      	beq.n	8007776 <__multiply+0xf2>
 800772c:	f104 0e14 	add.w	lr, r4, #20
 8007730:	46a9      	mov	r9, r5
 8007732:	f04f 0c00 	mov.w	ip, #0
 8007736:	f85e 2b04 	ldr.w	r2, [lr], #4
 800773a:	f8d9 1000 	ldr.w	r1, [r9]
 800773e:	fa1f fb82 	uxth.w	fp, r2
 8007742:	b289      	uxth	r1, r1
 8007744:	fb0a 110b 	mla	r1, sl, fp, r1
 8007748:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800774c:	f8d9 2000 	ldr.w	r2, [r9]
 8007750:	4461      	add	r1, ip
 8007752:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007756:	fb0a c20b 	mla	r2, sl, fp, ip
 800775a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800775e:	b289      	uxth	r1, r1
 8007760:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007764:	4577      	cmp	r7, lr
 8007766:	f849 1b04 	str.w	r1, [r9], #4
 800776a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800776e:	d8e2      	bhi.n	8007736 <__multiply+0xb2>
 8007770:	9a01      	ldr	r2, [sp, #4]
 8007772:	f845 c002 	str.w	ip, [r5, r2]
 8007776:	9a03      	ldr	r2, [sp, #12]
 8007778:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800777c:	3304      	adds	r3, #4
 800777e:	f1b9 0f00 	cmp.w	r9, #0
 8007782:	d020      	beq.n	80077c6 <__multiply+0x142>
 8007784:	6829      	ldr	r1, [r5, #0]
 8007786:	f104 0c14 	add.w	ip, r4, #20
 800778a:	46ae      	mov	lr, r5
 800778c:	f04f 0a00 	mov.w	sl, #0
 8007790:	f8bc b000 	ldrh.w	fp, [ip]
 8007794:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007798:	fb09 220b 	mla	r2, r9, fp, r2
 800779c:	4492      	add	sl, r2
 800779e:	b289      	uxth	r1, r1
 80077a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80077a4:	f84e 1b04 	str.w	r1, [lr], #4
 80077a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077ac:	f8be 1000 	ldrh.w	r1, [lr]
 80077b0:	0c12      	lsrs	r2, r2, #16
 80077b2:	fb09 1102 	mla	r1, r9, r2, r1
 80077b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80077ba:	4567      	cmp	r7, ip
 80077bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077c0:	d8e6      	bhi.n	8007790 <__multiply+0x10c>
 80077c2:	9a01      	ldr	r2, [sp, #4]
 80077c4:	50a9      	str	r1, [r5, r2]
 80077c6:	3504      	adds	r5, #4
 80077c8:	e79a      	b.n	8007700 <__multiply+0x7c>
 80077ca:	3e01      	subs	r6, #1
 80077cc:	e79c      	b.n	8007708 <__multiply+0x84>
 80077ce:	bf00      	nop
 80077d0:	08009058 	.word	0x08009058
 80077d4:	080090e4 	.word	0x080090e4

080077d8 <__pow5mult>:
 80077d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077dc:	4615      	mov	r5, r2
 80077de:	f012 0203 	ands.w	r2, r2, #3
 80077e2:	4606      	mov	r6, r0
 80077e4:	460f      	mov	r7, r1
 80077e6:	d007      	beq.n	80077f8 <__pow5mult+0x20>
 80077e8:	4c25      	ldr	r4, [pc, #148]	; (8007880 <__pow5mult+0xa8>)
 80077ea:	3a01      	subs	r2, #1
 80077ec:	2300      	movs	r3, #0
 80077ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077f2:	f7ff fe51 	bl	8007498 <__multadd>
 80077f6:	4607      	mov	r7, r0
 80077f8:	10ad      	asrs	r5, r5, #2
 80077fa:	d03d      	beq.n	8007878 <__pow5mult+0xa0>
 80077fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80077fe:	b97c      	cbnz	r4, 8007820 <__pow5mult+0x48>
 8007800:	2010      	movs	r0, #16
 8007802:	f7ff fdbf 	bl	8007384 <malloc>
 8007806:	4602      	mov	r2, r0
 8007808:	6270      	str	r0, [r6, #36]	; 0x24
 800780a:	b928      	cbnz	r0, 8007818 <__pow5mult+0x40>
 800780c:	4b1d      	ldr	r3, [pc, #116]	; (8007884 <__pow5mult+0xac>)
 800780e:	481e      	ldr	r0, [pc, #120]	; (8007888 <__pow5mult+0xb0>)
 8007810:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007814:	f000 fd2e 	bl	8008274 <__assert_func>
 8007818:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800781c:	6004      	str	r4, [r0, #0]
 800781e:	60c4      	str	r4, [r0, #12]
 8007820:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007824:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007828:	b94c      	cbnz	r4, 800783e <__pow5mult+0x66>
 800782a:	f240 2171 	movw	r1, #625	; 0x271
 800782e:	4630      	mov	r0, r6
 8007830:	f7ff ff12 	bl	8007658 <__i2b>
 8007834:	2300      	movs	r3, #0
 8007836:	f8c8 0008 	str.w	r0, [r8, #8]
 800783a:	4604      	mov	r4, r0
 800783c:	6003      	str	r3, [r0, #0]
 800783e:	f04f 0900 	mov.w	r9, #0
 8007842:	07eb      	lsls	r3, r5, #31
 8007844:	d50a      	bpl.n	800785c <__pow5mult+0x84>
 8007846:	4639      	mov	r1, r7
 8007848:	4622      	mov	r2, r4
 800784a:	4630      	mov	r0, r6
 800784c:	f7ff ff1a 	bl	8007684 <__multiply>
 8007850:	4639      	mov	r1, r7
 8007852:	4680      	mov	r8, r0
 8007854:	4630      	mov	r0, r6
 8007856:	f7ff fdfd 	bl	8007454 <_Bfree>
 800785a:	4647      	mov	r7, r8
 800785c:	106d      	asrs	r5, r5, #1
 800785e:	d00b      	beq.n	8007878 <__pow5mult+0xa0>
 8007860:	6820      	ldr	r0, [r4, #0]
 8007862:	b938      	cbnz	r0, 8007874 <__pow5mult+0x9c>
 8007864:	4622      	mov	r2, r4
 8007866:	4621      	mov	r1, r4
 8007868:	4630      	mov	r0, r6
 800786a:	f7ff ff0b 	bl	8007684 <__multiply>
 800786e:	6020      	str	r0, [r4, #0]
 8007870:	f8c0 9000 	str.w	r9, [r0]
 8007874:	4604      	mov	r4, r0
 8007876:	e7e4      	b.n	8007842 <__pow5mult+0x6a>
 8007878:	4638      	mov	r0, r7
 800787a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800787e:	bf00      	nop
 8007880:	08009230 	.word	0x08009230
 8007884:	08008fe6 	.word	0x08008fe6
 8007888:	080090e4 	.word	0x080090e4

0800788c <__lshift>:
 800788c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007890:	460c      	mov	r4, r1
 8007892:	6849      	ldr	r1, [r1, #4]
 8007894:	6923      	ldr	r3, [r4, #16]
 8007896:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800789a:	68a3      	ldr	r3, [r4, #8]
 800789c:	4607      	mov	r7, r0
 800789e:	4691      	mov	r9, r2
 80078a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078a4:	f108 0601 	add.w	r6, r8, #1
 80078a8:	42b3      	cmp	r3, r6
 80078aa:	db0b      	blt.n	80078c4 <__lshift+0x38>
 80078ac:	4638      	mov	r0, r7
 80078ae:	f7ff fd91 	bl	80073d4 <_Balloc>
 80078b2:	4605      	mov	r5, r0
 80078b4:	b948      	cbnz	r0, 80078ca <__lshift+0x3e>
 80078b6:	4602      	mov	r2, r0
 80078b8:	4b2a      	ldr	r3, [pc, #168]	; (8007964 <__lshift+0xd8>)
 80078ba:	482b      	ldr	r0, [pc, #172]	; (8007968 <__lshift+0xdc>)
 80078bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80078c0:	f000 fcd8 	bl	8008274 <__assert_func>
 80078c4:	3101      	adds	r1, #1
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	e7ee      	b.n	80078a8 <__lshift+0x1c>
 80078ca:	2300      	movs	r3, #0
 80078cc:	f100 0114 	add.w	r1, r0, #20
 80078d0:	f100 0210 	add.w	r2, r0, #16
 80078d4:	4618      	mov	r0, r3
 80078d6:	4553      	cmp	r3, sl
 80078d8:	db37      	blt.n	800794a <__lshift+0xbe>
 80078da:	6920      	ldr	r0, [r4, #16]
 80078dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078e0:	f104 0314 	add.w	r3, r4, #20
 80078e4:	f019 091f 	ands.w	r9, r9, #31
 80078e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80078f0:	d02f      	beq.n	8007952 <__lshift+0xc6>
 80078f2:	f1c9 0e20 	rsb	lr, r9, #32
 80078f6:	468a      	mov	sl, r1
 80078f8:	f04f 0c00 	mov.w	ip, #0
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	fa02 f209 	lsl.w	r2, r2, r9
 8007902:	ea42 020c 	orr.w	r2, r2, ip
 8007906:	f84a 2b04 	str.w	r2, [sl], #4
 800790a:	f853 2b04 	ldr.w	r2, [r3], #4
 800790e:	4298      	cmp	r0, r3
 8007910:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007914:	d8f2      	bhi.n	80078fc <__lshift+0x70>
 8007916:	1b03      	subs	r3, r0, r4
 8007918:	3b15      	subs	r3, #21
 800791a:	f023 0303 	bic.w	r3, r3, #3
 800791e:	3304      	adds	r3, #4
 8007920:	f104 0215 	add.w	r2, r4, #21
 8007924:	4290      	cmp	r0, r2
 8007926:	bf38      	it	cc
 8007928:	2304      	movcc	r3, #4
 800792a:	f841 c003 	str.w	ip, [r1, r3]
 800792e:	f1bc 0f00 	cmp.w	ip, #0
 8007932:	d001      	beq.n	8007938 <__lshift+0xac>
 8007934:	f108 0602 	add.w	r6, r8, #2
 8007938:	3e01      	subs	r6, #1
 800793a:	4638      	mov	r0, r7
 800793c:	612e      	str	r6, [r5, #16]
 800793e:	4621      	mov	r1, r4
 8007940:	f7ff fd88 	bl	8007454 <_Bfree>
 8007944:	4628      	mov	r0, r5
 8007946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800794a:	f842 0f04 	str.w	r0, [r2, #4]!
 800794e:	3301      	adds	r3, #1
 8007950:	e7c1      	b.n	80078d6 <__lshift+0x4a>
 8007952:	3904      	subs	r1, #4
 8007954:	f853 2b04 	ldr.w	r2, [r3], #4
 8007958:	f841 2f04 	str.w	r2, [r1, #4]!
 800795c:	4298      	cmp	r0, r3
 800795e:	d8f9      	bhi.n	8007954 <__lshift+0xc8>
 8007960:	e7ea      	b.n	8007938 <__lshift+0xac>
 8007962:	bf00      	nop
 8007964:	08009058 	.word	0x08009058
 8007968:	080090e4 	.word	0x080090e4

0800796c <__mcmp>:
 800796c:	b530      	push	{r4, r5, lr}
 800796e:	6902      	ldr	r2, [r0, #16]
 8007970:	690c      	ldr	r4, [r1, #16]
 8007972:	1b12      	subs	r2, r2, r4
 8007974:	d10e      	bne.n	8007994 <__mcmp+0x28>
 8007976:	f100 0314 	add.w	r3, r0, #20
 800797a:	3114      	adds	r1, #20
 800797c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007980:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007984:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007988:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800798c:	42a5      	cmp	r5, r4
 800798e:	d003      	beq.n	8007998 <__mcmp+0x2c>
 8007990:	d305      	bcc.n	800799e <__mcmp+0x32>
 8007992:	2201      	movs	r2, #1
 8007994:	4610      	mov	r0, r2
 8007996:	bd30      	pop	{r4, r5, pc}
 8007998:	4283      	cmp	r3, r0
 800799a:	d3f3      	bcc.n	8007984 <__mcmp+0x18>
 800799c:	e7fa      	b.n	8007994 <__mcmp+0x28>
 800799e:	f04f 32ff 	mov.w	r2, #4294967295
 80079a2:	e7f7      	b.n	8007994 <__mcmp+0x28>

080079a4 <__mdiff>:
 80079a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a8:	460c      	mov	r4, r1
 80079aa:	4606      	mov	r6, r0
 80079ac:	4611      	mov	r1, r2
 80079ae:	4620      	mov	r0, r4
 80079b0:	4690      	mov	r8, r2
 80079b2:	f7ff ffdb 	bl	800796c <__mcmp>
 80079b6:	1e05      	subs	r5, r0, #0
 80079b8:	d110      	bne.n	80079dc <__mdiff+0x38>
 80079ba:	4629      	mov	r1, r5
 80079bc:	4630      	mov	r0, r6
 80079be:	f7ff fd09 	bl	80073d4 <_Balloc>
 80079c2:	b930      	cbnz	r0, 80079d2 <__mdiff+0x2e>
 80079c4:	4b3a      	ldr	r3, [pc, #232]	; (8007ab0 <__mdiff+0x10c>)
 80079c6:	4602      	mov	r2, r0
 80079c8:	f240 2132 	movw	r1, #562	; 0x232
 80079cc:	4839      	ldr	r0, [pc, #228]	; (8007ab4 <__mdiff+0x110>)
 80079ce:	f000 fc51 	bl	8008274 <__assert_func>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079dc:	bfa4      	itt	ge
 80079de:	4643      	movge	r3, r8
 80079e0:	46a0      	movge	r8, r4
 80079e2:	4630      	mov	r0, r6
 80079e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80079e8:	bfa6      	itte	ge
 80079ea:	461c      	movge	r4, r3
 80079ec:	2500      	movge	r5, #0
 80079ee:	2501      	movlt	r5, #1
 80079f0:	f7ff fcf0 	bl	80073d4 <_Balloc>
 80079f4:	b920      	cbnz	r0, 8007a00 <__mdiff+0x5c>
 80079f6:	4b2e      	ldr	r3, [pc, #184]	; (8007ab0 <__mdiff+0x10c>)
 80079f8:	4602      	mov	r2, r0
 80079fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80079fe:	e7e5      	b.n	80079cc <__mdiff+0x28>
 8007a00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a04:	6926      	ldr	r6, [r4, #16]
 8007a06:	60c5      	str	r5, [r0, #12]
 8007a08:	f104 0914 	add.w	r9, r4, #20
 8007a0c:	f108 0514 	add.w	r5, r8, #20
 8007a10:	f100 0e14 	add.w	lr, r0, #20
 8007a14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a1c:	f108 0210 	add.w	r2, r8, #16
 8007a20:	46f2      	mov	sl, lr
 8007a22:	2100      	movs	r1, #0
 8007a24:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a2c:	fa1f f883 	uxth.w	r8, r3
 8007a30:	fa11 f18b 	uxtah	r1, r1, fp
 8007a34:	0c1b      	lsrs	r3, r3, #16
 8007a36:	eba1 0808 	sub.w	r8, r1, r8
 8007a3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a42:	fa1f f888 	uxth.w	r8, r8
 8007a46:	1419      	asrs	r1, r3, #16
 8007a48:	454e      	cmp	r6, r9
 8007a4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a4e:	f84a 3b04 	str.w	r3, [sl], #4
 8007a52:	d8e7      	bhi.n	8007a24 <__mdiff+0x80>
 8007a54:	1b33      	subs	r3, r6, r4
 8007a56:	3b15      	subs	r3, #21
 8007a58:	f023 0303 	bic.w	r3, r3, #3
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	3415      	adds	r4, #21
 8007a60:	42a6      	cmp	r6, r4
 8007a62:	bf38      	it	cc
 8007a64:	2304      	movcc	r3, #4
 8007a66:	441d      	add	r5, r3
 8007a68:	4473      	add	r3, lr
 8007a6a:	469e      	mov	lr, r3
 8007a6c:	462e      	mov	r6, r5
 8007a6e:	4566      	cmp	r6, ip
 8007a70:	d30e      	bcc.n	8007a90 <__mdiff+0xec>
 8007a72:	f10c 0203 	add.w	r2, ip, #3
 8007a76:	1b52      	subs	r2, r2, r5
 8007a78:	f022 0203 	bic.w	r2, r2, #3
 8007a7c:	3d03      	subs	r5, #3
 8007a7e:	45ac      	cmp	ip, r5
 8007a80:	bf38      	it	cc
 8007a82:	2200      	movcc	r2, #0
 8007a84:	441a      	add	r2, r3
 8007a86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007a8a:	b17b      	cbz	r3, 8007aac <__mdiff+0x108>
 8007a8c:	6107      	str	r7, [r0, #16]
 8007a8e:	e7a3      	b.n	80079d8 <__mdiff+0x34>
 8007a90:	f856 8b04 	ldr.w	r8, [r6], #4
 8007a94:	fa11 f288 	uxtah	r2, r1, r8
 8007a98:	1414      	asrs	r4, r2, #16
 8007a9a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a9e:	b292      	uxth	r2, r2
 8007aa0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007aa4:	f84e 2b04 	str.w	r2, [lr], #4
 8007aa8:	1421      	asrs	r1, r4, #16
 8007aaa:	e7e0      	b.n	8007a6e <__mdiff+0xca>
 8007aac:	3f01      	subs	r7, #1
 8007aae:	e7ea      	b.n	8007a86 <__mdiff+0xe2>
 8007ab0:	08009058 	.word	0x08009058
 8007ab4:	080090e4 	.word	0x080090e4

08007ab8 <__ulp>:
 8007ab8:	b082      	sub	sp, #8
 8007aba:	ed8d 0b00 	vstr	d0, [sp]
 8007abe:	9b01      	ldr	r3, [sp, #4]
 8007ac0:	4912      	ldr	r1, [pc, #72]	; (8007b0c <__ulp+0x54>)
 8007ac2:	4019      	ands	r1, r3
 8007ac4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007ac8:	2900      	cmp	r1, #0
 8007aca:	dd05      	ble.n	8007ad8 <__ulp+0x20>
 8007acc:	2200      	movs	r2, #0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	ec43 2b10 	vmov	d0, r2, r3
 8007ad4:	b002      	add	sp, #8
 8007ad6:	4770      	bx	lr
 8007ad8:	4249      	negs	r1, r1
 8007ada:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007ade:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007ae2:	f04f 0200 	mov.w	r2, #0
 8007ae6:	f04f 0300 	mov.w	r3, #0
 8007aea:	da04      	bge.n	8007af6 <__ulp+0x3e>
 8007aec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007af0:	fa41 f300 	asr.w	r3, r1, r0
 8007af4:	e7ec      	b.n	8007ad0 <__ulp+0x18>
 8007af6:	f1a0 0114 	sub.w	r1, r0, #20
 8007afa:	291e      	cmp	r1, #30
 8007afc:	bfda      	itte	le
 8007afe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007b02:	fa20 f101 	lsrle.w	r1, r0, r1
 8007b06:	2101      	movgt	r1, #1
 8007b08:	460a      	mov	r2, r1
 8007b0a:	e7e1      	b.n	8007ad0 <__ulp+0x18>
 8007b0c:	7ff00000 	.word	0x7ff00000

08007b10 <__b2d>:
 8007b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b12:	6905      	ldr	r5, [r0, #16]
 8007b14:	f100 0714 	add.w	r7, r0, #20
 8007b18:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007b1c:	1f2e      	subs	r6, r5, #4
 8007b1e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007b22:	4620      	mov	r0, r4
 8007b24:	f7ff fd48 	bl	80075b8 <__hi0bits>
 8007b28:	f1c0 0320 	rsb	r3, r0, #32
 8007b2c:	280a      	cmp	r0, #10
 8007b2e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007bac <__b2d+0x9c>
 8007b32:	600b      	str	r3, [r1, #0]
 8007b34:	dc14      	bgt.n	8007b60 <__b2d+0x50>
 8007b36:	f1c0 0e0b 	rsb	lr, r0, #11
 8007b3a:	fa24 f10e 	lsr.w	r1, r4, lr
 8007b3e:	42b7      	cmp	r7, r6
 8007b40:	ea41 030c 	orr.w	r3, r1, ip
 8007b44:	bf34      	ite	cc
 8007b46:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007b4a:	2100      	movcs	r1, #0
 8007b4c:	3015      	adds	r0, #21
 8007b4e:	fa04 f000 	lsl.w	r0, r4, r0
 8007b52:	fa21 f10e 	lsr.w	r1, r1, lr
 8007b56:	ea40 0201 	orr.w	r2, r0, r1
 8007b5a:	ec43 2b10 	vmov	d0, r2, r3
 8007b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b60:	42b7      	cmp	r7, r6
 8007b62:	bf3a      	itte	cc
 8007b64:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007b68:	f1a5 0608 	subcc.w	r6, r5, #8
 8007b6c:	2100      	movcs	r1, #0
 8007b6e:	380b      	subs	r0, #11
 8007b70:	d017      	beq.n	8007ba2 <__b2d+0x92>
 8007b72:	f1c0 0c20 	rsb	ip, r0, #32
 8007b76:	fa04 f500 	lsl.w	r5, r4, r0
 8007b7a:	42be      	cmp	r6, r7
 8007b7c:	fa21 f40c 	lsr.w	r4, r1, ip
 8007b80:	ea45 0504 	orr.w	r5, r5, r4
 8007b84:	bf8c      	ite	hi
 8007b86:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007b8a:	2400      	movls	r4, #0
 8007b8c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007b90:	fa01 f000 	lsl.w	r0, r1, r0
 8007b94:	fa24 f40c 	lsr.w	r4, r4, ip
 8007b98:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007b9c:	ea40 0204 	orr.w	r2, r0, r4
 8007ba0:	e7db      	b.n	8007b5a <__b2d+0x4a>
 8007ba2:	ea44 030c 	orr.w	r3, r4, ip
 8007ba6:	460a      	mov	r2, r1
 8007ba8:	e7d7      	b.n	8007b5a <__b2d+0x4a>
 8007baa:	bf00      	nop
 8007bac:	3ff00000 	.word	0x3ff00000

08007bb0 <__d2b>:
 8007bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bb4:	4689      	mov	r9, r1
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	ec57 6b10 	vmov	r6, r7, d0
 8007bbc:	4690      	mov	r8, r2
 8007bbe:	f7ff fc09 	bl	80073d4 <_Balloc>
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	b930      	cbnz	r0, 8007bd4 <__d2b+0x24>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	4b25      	ldr	r3, [pc, #148]	; (8007c60 <__d2b+0xb0>)
 8007bca:	4826      	ldr	r0, [pc, #152]	; (8007c64 <__d2b+0xb4>)
 8007bcc:	f240 310a 	movw	r1, #778	; 0x30a
 8007bd0:	f000 fb50 	bl	8008274 <__assert_func>
 8007bd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007bd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bdc:	bb35      	cbnz	r5, 8007c2c <__d2b+0x7c>
 8007bde:	2e00      	cmp	r6, #0
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	d028      	beq.n	8007c36 <__d2b+0x86>
 8007be4:	4668      	mov	r0, sp
 8007be6:	9600      	str	r6, [sp, #0]
 8007be8:	f7ff fd06 	bl	80075f8 <__lo0bits>
 8007bec:	9900      	ldr	r1, [sp, #0]
 8007bee:	b300      	cbz	r0, 8007c32 <__d2b+0x82>
 8007bf0:	9a01      	ldr	r2, [sp, #4]
 8007bf2:	f1c0 0320 	rsb	r3, r0, #32
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	40c2      	lsrs	r2, r0
 8007bfe:	6163      	str	r3, [r4, #20]
 8007c00:	9201      	str	r2, [sp, #4]
 8007c02:	9b01      	ldr	r3, [sp, #4]
 8007c04:	61a3      	str	r3, [r4, #24]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	bf14      	ite	ne
 8007c0a:	2202      	movne	r2, #2
 8007c0c:	2201      	moveq	r2, #1
 8007c0e:	6122      	str	r2, [r4, #16]
 8007c10:	b1d5      	cbz	r5, 8007c48 <__d2b+0x98>
 8007c12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c16:	4405      	add	r5, r0
 8007c18:	f8c9 5000 	str.w	r5, [r9]
 8007c1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c20:	f8c8 0000 	str.w	r0, [r8]
 8007c24:	4620      	mov	r0, r4
 8007c26:	b003      	add	sp, #12
 8007c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c30:	e7d5      	b.n	8007bde <__d2b+0x2e>
 8007c32:	6161      	str	r1, [r4, #20]
 8007c34:	e7e5      	b.n	8007c02 <__d2b+0x52>
 8007c36:	a801      	add	r0, sp, #4
 8007c38:	f7ff fcde 	bl	80075f8 <__lo0bits>
 8007c3c:	9b01      	ldr	r3, [sp, #4]
 8007c3e:	6163      	str	r3, [r4, #20]
 8007c40:	2201      	movs	r2, #1
 8007c42:	6122      	str	r2, [r4, #16]
 8007c44:	3020      	adds	r0, #32
 8007c46:	e7e3      	b.n	8007c10 <__d2b+0x60>
 8007c48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c50:	f8c9 0000 	str.w	r0, [r9]
 8007c54:	6918      	ldr	r0, [r3, #16]
 8007c56:	f7ff fcaf 	bl	80075b8 <__hi0bits>
 8007c5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c5e:	e7df      	b.n	8007c20 <__d2b+0x70>
 8007c60:	08009058 	.word	0x08009058
 8007c64:	080090e4 	.word	0x080090e4

08007c68 <__ratio>:
 8007c68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	4688      	mov	r8, r1
 8007c6e:	4669      	mov	r1, sp
 8007c70:	4681      	mov	r9, r0
 8007c72:	f7ff ff4d 	bl	8007b10 <__b2d>
 8007c76:	a901      	add	r1, sp, #4
 8007c78:	4640      	mov	r0, r8
 8007c7a:	ec55 4b10 	vmov	r4, r5, d0
 8007c7e:	f7ff ff47 	bl	8007b10 <__b2d>
 8007c82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c86:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007c8a:	eba3 0c02 	sub.w	ip, r3, r2
 8007c8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007c98:	ec51 0b10 	vmov	r0, r1, d0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bfd6      	itet	le
 8007ca0:	460a      	movle	r2, r1
 8007ca2:	462a      	movgt	r2, r5
 8007ca4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ca8:	468b      	mov	fp, r1
 8007caa:	462f      	mov	r7, r5
 8007cac:	bfd4      	ite	le
 8007cae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007cb2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	ee10 2a10 	vmov	r2, s0
 8007cbc:	465b      	mov	r3, fp
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	f7f8 fdcc 	bl	800085c <__aeabi_ddiv>
 8007cc4:	ec41 0b10 	vmov	d0, r0, r1
 8007cc8:	b003      	add	sp, #12
 8007cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007cce <__copybits>:
 8007cce:	3901      	subs	r1, #1
 8007cd0:	b570      	push	{r4, r5, r6, lr}
 8007cd2:	1149      	asrs	r1, r1, #5
 8007cd4:	6914      	ldr	r4, [r2, #16]
 8007cd6:	3101      	adds	r1, #1
 8007cd8:	f102 0314 	add.w	r3, r2, #20
 8007cdc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ce0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ce4:	1f05      	subs	r5, r0, #4
 8007ce6:	42a3      	cmp	r3, r4
 8007ce8:	d30c      	bcc.n	8007d04 <__copybits+0x36>
 8007cea:	1aa3      	subs	r3, r4, r2
 8007cec:	3b11      	subs	r3, #17
 8007cee:	f023 0303 	bic.w	r3, r3, #3
 8007cf2:	3211      	adds	r2, #17
 8007cf4:	42a2      	cmp	r2, r4
 8007cf6:	bf88      	it	hi
 8007cf8:	2300      	movhi	r3, #0
 8007cfa:	4418      	add	r0, r3
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	4288      	cmp	r0, r1
 8007d00:	d305      	bcc.n	8007d0e <__copybits+0x40>
 8007d02:	bd70      	pop	{r4, r5, r6, pc}
 8007d04:	f853 6b04 	ldr.w	r6, [r3], #4
 8007d08:	f845 6f04 	str.w	r6, [r5, #4]!
 8007d0c:	e7eb      	b.n	8007ce6 <__copybits+0x18>
 8007d0e:	f840 3b04 	str.w	r3, [r0], #4
 8007d12:	e7f4      	b.n	8007cfe <__copybits+0x30>

08007d14 <__any_on>:
 8007d14:	f100 0214 	add.w	r2, r0, #20
 8007d18:	6900      	ldr	r0, [r0, #16]
 8007d1a:	114b      	asrs	r3, r1, #5
 8007d1c:	4298      	cmp	r0, r3
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	db11      	blt.n	8007d46 <__any_on+0x32>
 8007d22:	dd0a      	ble.n	8007d3a <__any_on+0x26>
 8007d24:	f011 011f 	ands.w	r1, r1, #31
 8007d28:	d007      	beq.n	8007d3a <__any_on+0x26>
 8007d2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d2e:	fa24 f001 	lsr.w	r0, r4, r1
 8007d32:	fa00 f101 	lsl.w	r1, r0, r1
 8007d36:	428c      	cmp	r4, r1
 8007d38:	d10b      	bne.n	8007d52 <__any_on+0x3e>
 8007d3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d803      	bhi.n	8007d4a <__any_on+0x36>
 8007d42:	2000      	movs	r0, #0
 8007d44:	bd10      	pop	{r4, pc}
 8007d46:	4603      	mov	r3, r0
 8007d48:	e7f7      	b.n	8007d3a <__any_on+0x26>
 8007d4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d4e:	2900      	cmp	r1, #0
 8007d50:	d0f5      	beq.n	8007d3e <__any_on+0x2a>
 8007d52:	2001      	movs	r0, #1
 8007d54:	e7f6      	b.n	8007d44 <__any_on+0x30>

08007d56 <_calloc_r>:
 8007d56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d58:	fba1 2402 	umull	r2, r4, r1, r2
 8007d5c:	b94c      	cbnz	r4, 8007d72 <_calloc_r+0x1c>
 8007d5e:	4611      	mov	r1, r2
 8007d60:	9201      	str	r2, [sp, #4]
 8007d62:	f000 f87b 	bl	8007e5c <_malloc_r>
 8007d66:	9a01      	ldr	r2, [sp, #4]
 8007d68:	4605      	mov	r5, r0
 8007d6a:	b930      	cbnz	r0, 8007d7a <_calloc_r+0x24>
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	b003      	add	sp, #12
 8007d70:	bd30      	pop	{r4, r5, pc}
 8007d72:	220c      	movs	r2, #12
 8007d74:	6002      	str	r2, [r0, #0]
 8007d76:	2500      	movs	r5, #0
 8007d78:	e7f8      	b.n	8007d6c <_calloc_r+0x16>
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	f7fc fb8c 	bl	8004498 <memset>
 8007d80:	e7f4      	b.n	8007d6c <_calloc_r+0x16>
	...

08007d84 <_free_r>:
 8007d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d86:	2900      	cmp	r1, #0
 8007d88:	d044      	beq.n	8007e14 <_free_r+0x90>
 8007d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d8e:	9001      	str	r0, [sp, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f1a1 0404 	sub.w	r4, r1, #4
 8007d96:	bfb8      	it	lt
 8007d98:	18e4      	addlt	r4, r4, r3
 8007d9a:	f000 fab5 	bl	8008308 <__malloc_lock>
 8007d9e:	4a1e      	ldr	r2, [pc, #120]	; (8007e18 <_free_r+0x94>)
 8007da0:	9801      	ldr	r0, [sp, #4]
 8007da2:	6813      	ldr	r3, [r2, #0]
 8007da4:	b933      	cbnz	r3, 8007db4 <_free_r+0x30>
 8007da6:	6063      	str	r3, [r4, #4]
 8007da8:	6014      	str	r4, [r2, #0]
 8007daa:	b003      	add	sp, #12
 8007dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007db0:	f000 bab0 	b.w	8008314 <__malloc_unlock>
 8007db4:	42a3      	cmp	r3, r4
 8007db6:	d908      	bls.n	8007dca <_free_r+0x46>
 8007db8:	6825      	ldr	r5, [r4, #0]
 8007dba:	1961      	adds	r1, r4, r5
 8007dbc:	428b      	cmp	r3, r1
 8007dbe:	bf01      	itttt	eq
 8007dc0:	6819      	ldreq	r1, [r3, #0]
 8007dc2:	685b      	ldreq	r3, [r3, #4]
 8007dc4:	1949      	addeq	r1, r1, r5
 8007dc6:	6021      	streq	r1, [r4, #0]
 8007dc8:	e7ed      	b.n	8007da6 <_free_r+0x22>
 8007dca:	461a      	mov	r2, r3
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	b10b      	cbz	r3, 8007dd4 <_free_r+0x50>
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	d9fa      	bls.n	8007dca <_free_r+0x46>
 8007dd4:	6811      	ldr	r1, [r2, #0]
 8007dd6:	1855      	adds	r5, r2, r1
 8007dd8:	42a5      	cmp	r5, r4
 8007dda:	d10b      	bne.n	8007df4 <_free_r+0x70>
 8007ddc:	6824      	ldr	r4, [r4, #0]
 8007dde:	4421      	add	r1, r4
 8007de0:	1854      	adds	r4, r2, r1
 8007de2:	42a3      	cmp	r3, r4
 8007de4:	6011      	str	r1, [r2, #0]
 8007de6:	d1e0      	bne.n	8007daa <_free_r+0x26>
 8007de8:	681c      	ldr	r4, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	6053      	str	r3, [r2, #4]
 8007dee:	4421      	add	r1, r4
 8007df0:	6011      	str	r1, [r2, #0]
 8007df2:	e7da      	b.n	8007daa <_free_r+0x26>
 8007df4:	d902      	bls.n	8007dfc <_free_r+0x78>
 8007df6:	230c      	movs	r3, #12
 8007df8:	6003      	str	r3, [r0, #0]
 8007dfa:	e7d6      	b.n	8007daa <_free_r+0x26>
 8007dfc:	6825      	ldr	r5, [r4, #0]
 8007dfe:	1961      	adds	r1, r4, r5
 8007e00:	428b      	cmp	r3, r1
 8007e02:	bf04      	itt	eq
 8007e04:	6819      	ldreq	r1, [r3, #0]
 8007e06:	685b      	ldreq	r3, [r3, #4]
 8007e08:	6063      	str	r3, [r4, #4]
 8007e0a:	bf04      	itt	eq
 8007e0c:	1949      	addeq	r1, r1, r5
 8007e0e:	6021      	streq	r1, [r4, #0]
 8007e10:	6054      	str	r4, [r2, #4]
 8007e12:	e7ca      	b.n	8007daa <_free_r+0x26>
 8007e14:	b003      	add	sp, #12
 8007e16:	bd30      	pop	{r4, r5, pc}
 8007e18:	20000314 	.word	0x20000314

08007e1c <sbrk_aligned>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	4e0e      	ldr	r6, [pc, #56]	; (8007e58 <sbrk_aligned+0x3c>)
 8007e20:	460c      	mov	r4, r1
 8007e22:	6831      	ldr	r1, [r6, #0]
 8007e24:	4605      	mov	r5, r0
 8007e26:	b911      	cbnz	r1, 8007e2e <sbrk_aligned+0x12>
 8007e28:	f000 f9f2 	bl	8008210 <_sbrk_r>
 8007e2c:	6030      	str	r0, [r6, #0]
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4628      	mov	r0, r5
 8007e32:	f000 f9ed 	bl	8008210 <_sbrk_r>
 8007e36:	1c43      	adds	r3, r0, #1
 8007e38:	d00a      	beq.n	8007e50 <sbrk_aligned+0x34>
 8007e3a:	1cc4      	adds	r4, r0, #3
 8007e3c:	f024 0403 	bic.w	r4, r4, #3
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d007      	beq.n	8007e54 <sbrk_aligned+0x38>
 8007e44:	1a21      	subs	r1, r4, r0
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 f9e2 	bl	8008210 <_sbrk_r>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d101      	bne.n	8007e54 <sbrk_aligned+0x38>
 8007e50:	f04f 34ff 	mov.w	r4, #4294967295
 8007e54:	4620      	mov	r0, r4
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
 8007e58:	20000318 	.word	0x20000318

08007e5c <_malloc_r>:
 8007e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e60:	1ccd      	adds	r5, r1, #3
 8007e62:	f025 0503 	bic.w	r5, r5, #3
 8007e66:	3508      	adds	r5, #8
 8007e68:	2d0c      	cmp	r5, #12
 8007e6a:	bf38      	it	cc
 8007e6c:	250c      	movcc	r5, #12
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	4607      	mov	r7, r0
 8007e72:	db01      	blt.n	8007e78 <_malloc_r+0x1c>
 8007e74:	42a9      	cmp	r1, r5
 8007e76:	d905      	bls.n	8007e84 <_malloc_r+0x28>
 8007e78:	230c      	movs	r3, #12
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	2600      	movs	r6, #0
 8007e7e:	4630      	mov	r0, r6
 8007e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e84:	4e2e      	ldr	r6, [pc, #184]	; (8007f40 <_malloc_r+0xe4>)
 8007e86:	f000 fa3f 	bl	8008308 <__malloc_lock>
 8007e8a:	6833      	ldr	r3, [r6, #0]
 8007e8c:	461c      	mov	r4, r3
 8007e8e:	bb34      	cbnz	r4, 8007ede <_malloc_r+0x82>
 8007e90:	4629      	mov	r1, r5
 8007e92:	4638      	mov	r0, r7
 8007e94:	f7ff ffc2 	bl	8007e1c <sbrk_aligned>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	d14d      	bne.n	8007f3a <_malloc_r+0xde>
 8007e9e:	6834      	ldr	r4, [r6, #0]
 8007ea0:	4626      	mov	r6, r4
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	d140      	bne.n	8007f28 <_malloc_r+0xcc>
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4638      	mov	r0, r7
 8007eac:	eb04 0803 	add.w	r8, r4, r3
 8007eb0:	f000 f9ae 	bl	8008210 <_sbrk_r>
 8007eb4:	4580      	cmp	r8, r0
 8007eb6:	d13a      	bne.n	8007f2e <_malloc_r+0xd2>
 8007eb8:	6821      	ldr	r1, [r4, #0]
 8007eba:	3503      	adds	r5, #3
 8007ebc:	1a6d      	subs	r5, r5, r1
 8007ebe:	f025 0503 	bic.w	r5, r5, #3
 8007ec2:	3508      	adds	r5, #8
 8007ec4:	2d0c      	cmp	r5, #12
 8007ec6:	bf38      	it	cc
 8007ec8:	250c      	movcc	r5, #12
 8007eca:	4629      	mov	r1, r5
 8007ecc:	4638      	mov	r0, r7
 8007ece:	f7ff ffa5 	bl	8007e1c <sbrk_aligned>
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	d02b      	beq.n	8007f2e <_malloc_r+0xd2>
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	442b      	add	r3, r5
 8007eda:	6023      	str	r3, [r4, #0]
 8007edc:	e00e      	b.n	8007efc <_malloc_r+0xa0>
 8007ede:	6822      	ldr	r2, [r4, #0]
 8007ee0:	1b52      	subs	r2, r2, r5
 8007ee2:	d41e      	bmi.n	8007f22 <_malloc_r+0xc6>
 8007ee4:	2a0b      	cmp	r2, #11
 8007ee6:	d916      	bls.n	8007f16 <_malloc_r+0xba>
 8007ee8:	1961      	adds	r1, r4, r5
 8007eea:	42a3      	cmp	r3, r4
 8007eec:	6025      	str	r5, [r4, #0]
 8007eee:	bf18      	it	ne
 8007ef0:	6059      	strne	r1, [r3, #4]
 8007ef2:	6863      	ldr	r3, [r4, #4]
 8007ef4:	bf08      	it	eq
 8007ef6:	6031      	streq	r1, [r6, #0]
 8007ef8:	5162      	str	r2, [r4, r5]
 8007efa:	604b      	str	r3, [r1, #4]
 8007efc:	4638      	mov	r0, r7
 8007efe:	f104 060b 	add.w	r6, r4, #11
 8007f02:	f000 fa07 	bl	8008314 <__malloc_unlock>
 8007f06:	f026 0607 	bic.w	r6, r6, #7
 8007f0a:	1d23      	adds	r3, r4, #4
 8007f0c:	1af2      	subs	r2, r6, r3
 8007f0e:	d0b6      	beq.n	8007e7e <_malloc_r+0x22>
 8007f10:	1b9b      	subs	r3, r3, r6
 8007f12:	50a3      	str	r3, [r4, r2]
 8007f14:	e7b3      	b.n	8007e7e <_malloc_r+0x22>
 8007f16:	6862      	ldr	r2, [r4, #4]
 8007f18:	42a3      	cmp	r3, r4
 8007f1a:	bf0c      	ite	eq
 8007f1c:	6032      	streq	r2, [r6, #0]
 8007f1e:	605a      	strne	r2, [r3, #4]
 8007f20:	e7ec      	b.n	8007efc <_malloc_r+0xa0>
 8007f22:	4623      	mov	r3, r4
 8007f24:	6864      	ldr	r4, [r4, #4]
 8007f26:	e7b2      	b.n	8007e8e <_malloc_r+0x32>
 8007f28:	4634      	mov	r4, r6
 8007f2a:	6876      	ldr	r6, [r6, #4]
 8007f2c:	e7b9      	b.n	8007ea2 <_malloc_r+0x46>
 8007f2e:	230c      	movs	r3, #12
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	4638      	mov	r0, r7
 8007f34:	f000 f9ee 	bl	8008314 <__malloc_unlock>
 8007f38:	e7a1      	b.n	8007e7e <_malloc_r+0x22>
 8007f3a:	6025      	str	r5, [r4, #0]
 8007f3c:	e7de      	b.n	8007efc <_malloc_r+0xa0>
 8007f3e:	bf00      	nop
 8007f40:	20000314 	.word	0x20000314

08007f44 <__ssputs_r>:
 8007f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f48:	688e      	ldr	r6, [r1, #8]
 8007f4a:	429e      	cmp	r6, r3
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	4690      	mov	r8, r2
 8007f52:	461f      	mov	r7, r3
 8007f54:	d838      	bhi.n	8007fc8 <__ssputs_r+0x84>
 8007f56:	898a      	ldrh	r2, [r1, #12]
 8007f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f5c:	d032      	beq.n	8007fc4 <__ssputs_r+0x80>
 8007f5e:	6825      	ldr	r5, [r4, #0]
 8007f60:	6909      	ldr	r1, [r1, #16]
 8007f62:	eba5 0901 	sub.w	r9, r5, r1
 8007f66:	6965      	ldr	r5, [r4, #20]
 8007f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f70:	3301      	adds	r3, #1
 8007f72:	444b      	add	r3, r9
 8007f74:	106d      	asrs	r5, r5, #1
 8007f76:	429d      	cmp	r5, r3
 8007f78:	bf38      	it	cc
 8007f7a:	461d      	movcc	r5, r3
 8007f7c:	0553      	lsls	r3, r2, #21
 8007f7e:	d531      	bpl.n	8007fe4 <__ssputs_r+0xa0>
 8007f80:	4629      	mov	r1, r5
 8007f82:	f7ff ff6b 	bl	8007e5c <_malloc_r>
 8007f86:	4606      	mov	r6, r0
 8007f88:	b950      	cbnz	r0, 8007fa0 <__ssputs_r+0x5c>
 8007f8a:	230c      	movs	r3, #12
 8007f8c:	f8ca 3000 	str.w	r3, [sl]
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f96:	81a3      	strh	r3, [r4, #12]
 8007f98:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa0:	6921      	ldr	r1, [r4, #16]
 8007fa2:	464a      	mov	r2, r9
 8007fa4:	f7ff fa08 	bl	80073b8 <memcpy>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb2:	81a3      	strh	r3, [r4, #12]
 8007fb4:	6126      	str	r6, [r4, #16]
 8007fb6:	6165      	str	r5, [r4, #20]
 8007fb8:	444e      	add	r6, r9
 8007fba:	eba5 0509 	sub.w	r5, r5, r9
 8007fbe:	6026      	str	r6, [r4, #0]
 8007fc0:	60a5      	str	r5, [r4, #8]
 8007fc2:	463e      	mov	r6, r7
 8007fc4:	42be      	cmp	r6, r7
 8007fc6:	d900      	bls.n	8007fca <__ssputs_r+0x86>
 8007fc8:	463e      	mov	r6, r7
 8007fca:	6820      	ldr	r0, [r4, #0]
 8007fcc:	4632      	mov	r2, r6
 8007fce:	4641      	mov	r1, r8
 8007fd0:	f000 f980 	bl	80082d4 <memmove>
 8007fd4:	68a3      	ldr	r3, [r4, #8]
 8007fd6:	1b9b      	subs	r3, r3, r6
 8007fd8:	60a3      	str	r3, [r4, #8]
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	4433      	add	r3, r6
 8007fde:	6023      	str	r3, [r4, #0]
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	e7db      	b.n	8007f9c <__ssputs_r+0x58>
 8007fe4:	462a      	mov	r2, r5
 8007fe6:	f000 f99b 	bl	8008320 <_realloc_r>
 8007fea:	4606      	mov	r6, r0
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d1e1      	bne.n	8007fb4 <__ssputs_r+0x70>
 8007ff0:	6921      	ldr	r1, [r4, #16]
 8007ff2:	4650      	mov	r0, sl
 8007ff4:	f7ff fec6 	bl	8007d84 <_free_r>
 8007ff8:	e7c7      	b.n	8007f8a <__ssputs_r+0x46>
	...

08007ffc <_svfiprintf_r>:
 8007ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008000:	4698      	mov	r8, r3
 8008002:	898b      	ldrh	r3, [r1, #12]
 8008004:	061b      	lsls	r3, r3, #24
 8008006:	b09d      	sub	sp, #116	; 0x74
 8008008:	4607      	mov	r7, r0
 800800a:	460d      	mov	r5, r1
 800800c:	4614      	mov	r4, r2
 800800e:	d50e      	bpl.n	800802e <_svfiprintf_r+0x32>
 8008010:	690b      	ldr	r3, [r1, #16]
 8008012:	b963      	cbnz	r3, 800802e <_svfiprintf_r+0x32>
 8008014:	2140      	movs	r1, #64	; 0x40
 8008016:	f7ff ff21 	bl	8007e5c <_malloc_r>
 800801a:	6028      	str	r0, [r5, #0]
 800801c:	6128      	str	r0, [r5, #16]
 800801e:	b920      	cbnz	r0, 800802a <_svfiprintf_r+0x2e>
 8008020:	230c      	movs	r3, #12
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	f04f 30ff 	mov.w	r0, #4294967295
 8008028:	e0d1      	b.n	80081ce <_svfiprintf_r+0x1d2>
 800802a:	2340      	movs	r3, #64	; 0x40
 800802c:	616b      	str	r3, [r5, #20]
 800802e:	2300      	movs	r3, #0
 8008030:	9309      	str	r3, [sp, #36]	; 0x24
 8008032:	2320      	movs	r3, #32
 8008034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008038:	f8cd 800c 	str.w	r8, [sp, #12]
 800803c:	2330      	movs	r3, #48	; 0x30
 800803e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80081e8 <_svfiprintf_r+0x1ec>
 8008042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008046:	f04f 0901 	mov.w	r9, #1
 800804a:	4623      	mov	r3, r4
 800804c:	469a      	mov	sl, r3
 800804e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008052:	b10a      	cbz	r2, 8008058 <_svfiprintf_r+0x5c>
 8008054:	2a25      	cmp	r2, #37	; 0x25
 8008056:	d1f9      	bne.n	800804c <_svfiprintf_r+0x50>
 8008058:	ebba 0b04 	subs.w	fp, sl, r4
 800805c:	d00b      	beq.n	8008076 <_svfiprintf_r+0x7a>
 800805e:	465b      	mov	r3, fp
 8008060:	4622      	mov	r2, r4
 8008062:	4629      	mov	r1, r5
 8008064:	4638      	mov	r0, r7
 8008066:	f7ff ff6d 	bl	8007f44 <__ssputs_r>
 800806a:	3001      	adds	r0, #1
 800806c:	f000 80aa 	beq.w	80081c4 <_svfiprintf_r+0x1c8>
 8008070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008072:	445a      	add	r2, fp
 8008074:	9209      	str	r2, [sp, #36]	; 0x24
 8008076:	f89a 3000 	ldrb.w	r3, [sl]
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 80a2 	beq.w	80081c4 <_svfiprintf_r+0x1c8>
 8008080:	2300      	movs	r3, #0
 8008082:	f04f 32ff 	mov.w	r2, #4294967295
 8008086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800808a:	f10a 0a01 	add.w	sl, sl, #1
 800808e:	9304      	str	r3, [sp, #16]
 8008090:	9307      	str	r3, [sp, #28]
 8008092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008096:	931a      	str	r3, [sp, #104]	; 0x68
 8008098:	4654      	mov	r4, sl
 800809a:	2205      	movs	r2, #5
 800809c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a0:	4851      	ldr	r0, [pc, #324]	; (80081e8 <_svfiprintf_r+0x1ec>)
 80080a2:	f7f8 f8a5 	bl	80001f0 <memchr>
 80080a6:	9a04      	ldr	r2, [sp, #16]
 80080a8:	b9d8      	cbnz	r0, 80080e2 <_svfiprintf_r+0xe6>
 80080aa:	06d0      	lsls	r0, r2, #27
 80080ac:	bf44      	itt	mi
 80080ae:	2320      	movmi	r3, #32
 80080b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080b4:	0711      	lsls	r1, r2, #28
 80080b6:	bf44      	itt	mi
 80080b8:	232b      	movmi	r3, #43	; 0x2b
 80080ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080be:	f89a 3000 	ldrb.w	r3, [sl]
 80080c2:	2b2a      	cmp	r3, #42	; 0x2a
 80080c4:	d015      	beq.n	80080f2 <_svfiprintf_r+0xf6>
 80080c6:	9a07      	ldr	r2, [sp, #28]
 80080c8:	4654      	mov	r4, sl
 80080ca:	2000      	movs	r0, #0
 80080cc:	f04f 0c0a 	mov.w	ip, #10
 80080d0:	4621      	mov	r1, r4
 80080d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080d6:	3b30      	subs	r3, #48	; 0x30
 80080d8:	2b09      	cmp	r3, #9
 80080da:	d94e      	bls.n	800817a <_svfiprintf_r+0x17e>
 80080dc:	b1b0      	cbz	r0, 800810c <_svfiprintf_r+0x110>
 80080de:	9207      	str	r2, [sp, #28]
 80080e0:	e014      	b.n	800810c <_svfiprintf_r+0x110>
 80080e2:	eba0 0308 	sub.w	r3, r0, r8
 80080e6:	fa09 f303 	lsl.w	r3, r9, r3
 80080ea:	4313      	orrs	r3, r2
 80080ec:	9304      	str	r3, [sp, #16]
 80080ee:	46a2      	mov	sl, r4
 80080f0:	e7d2      	b.n	8008098 <_svfiprintf_r+0x9c>
 80080f2:	9b03      	ldr	r3, [sp, #12]
 80080f4:	1d19      	adds	r1, r3, #4
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	9103      	str	r1, [sp, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bfbb      	ittet	lt
 80080fe:	425b      	neglt	r3, r3
 8008100:	f042 0202 	orrlt.w	r2, r2, #2
 8008104:	9307      	strge	r3, [sp, #28]
 8008106:	9307      	strlt	r3, [sp, #28]
 8008108:	bfb8      	it	lt
 800810a:	9204      	strlt	r2, [sp, #16]
 800810c:	7823      	ldrb	r3, [r4, #0]
 800810e:	2b2e      	cmp	r3, #46	; 0x2e
 8008110:	d10c      	bne.n	800812c <_svfiprintf_r+0x130>
 8008112:	7863      	ldrb	r3, [r4, #1]
 8008114:	2b2a      	cmp	r3, #42	; 0x2a
 8008116:	d135      	bne.n	8008184 <_svfiprintf_r+0x188>
 8008118:	9b03      	ldr	r3, [sp, #12]
 800811a:	1d1a      	adds	r2, r3, #4
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	9203      	str	r2, [sp, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	bfb8      	it	lt
 8008124:	f04f 33ff 	movlt.w	r3, #4294967295
 8008128:	3402      	adds	r4, #2
 800812a:	9305      	str	r3, [sp, #20]
 800812c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081f8 <_svfiprintf_r+0x1fc>
 8008130:	7821      	ldrb	r1, [r4, #0]
 8008132:	2203      	movs	r2, #3
 8008134:	4650      	mov	r0, sl
 8008136:	f7f8 f85b 	bl	80001f0 <memchr>
 800813a:	b140      	cbz	r0, 800814e <_svfiprintf_r+0x152>
 800813c:	2340      	movs	r3, #64	; 0x40
 800813e:	eba0 000a 	sub.w	r0, r0, sl
 8008142:	fa03 f000 	lsl.w	r0, r3, r0
 8008146:	9b04      	ldr	r3, [sp, #16]
 8008148:	4303      	orrs	r3, r0
 800814a:	3401      	adds	r4, #1
 800814c:	9304      	str	r3, [sp, #16]
 800814e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008152:	4826      	ldr	r0, [pc, #152]	; (80081ec <_svfiprintf_r+0x1f0>)
 8008154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008158:	2206      	movs	r2, #6
 800815a:	f7f8 f849 	bl	80001f0 <memchr>
 800815e:	2800      	cmp	r0, #0
 8008160:	d038      	beq.n	80081d4 <_svfiprintf_r+0x1d8>
 8008162:	4b23      	ldr	r3, [pc, #140]	; (80081f0 <_svfiprintf_r+0x1f4>)
 8008164:	bb1b      	cbnz	r3, 80081ae <_svfiprintf_r+0x1b2>
 8008166:	9b03      	ldr	r3, [sp, #12]
 8008168:	3307      	adds	r3, #7
 800816a:	f023 0307 	bic.w	r3, r3, #7
 800816e:	3308      	adds	r3, #8
 8008170:	9303      	str	r3, [sp, #12]
 8008172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008174:	4433      	add	r3, r6
 8008176:	9309      	str	r3, [sp, #36]	; 0x24
 8008178:	e767      	b.n	800804a <_svfiprintf_r+0x4e>
 800817a:	fb0c 3202 	mla	r2, ip, r2, r3
 800817e:	460c      	mov	r4, r1
 8008180:	2001      	movs	r0, #1
 8008182:	e7a5      	b.n	80080d0 <_svfiprintf_r+0xd4>
 8008184:	2300      	movs	r3, #0
 8008186:	3401      	adds	r4, #1
 8008188:	9305      	str	r3, [sp, #20]
 800818a:	4619      	mov	r1, r3
 800818c:	f04f 0c0a 	mov.w	ip, #10
 8008190:	4620      	mov	r0, r4
 8008192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008196:	3a30      	subs	r2, #48	; 0x30
 8008198:	2a09      	cmp	r2, #9
 800819a:	d903      	bls.n	80081a4 <_svfiprintf_r+0x1a8>
 800819c:	2b00      	cmp	r3, #0
 800819e:	d0c5      	beq.n	800812c <_svfiprintf_r+0x130>
 80081a0:	9105      	str	r1, [sp, #20]
 80081a2:	e7c3      	b.n	800812c <_svfiprintf_r+0x130>
 80081a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80081a8:	4604      	mov	r4, r0
 80081aa:	2301      	movs	r3, #1
 80081ac:	e7f0      	b.n	8008190 <_svfiprintf_r+0x194>
 80081ae:	ab03      	add	r3, sp, #12
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	462a      	mov	r2, r5
 80081b4:	4b0f      	ldr	r3, [pc, #60]	; (80081f4 <_svfiprintf_r+0x1f8>)
 80081b6:	a904      	add	r1, sp, #16
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7fc fa15 	bl	80045e8 <_printf_float>
 80081be:	1c42      	adds	r2, r0, #1
 80081c0:	4606      	mov	r6, r0
 80081c2:	d1d6      	bne.n	8008172 <_svfiprintf_r+0x176>
 80081c4:	89ab      	ldrh	r3, [r5, #12]
 80081c6:	065b      	lsls	r3, r3, #25
 80081c8:	f53f af2c 	bmi.w	8008024 <_svfiprintf_r+0x28>
 80081cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ce:	b01d      	add	sp, #116	; 0x74
 80081d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d4:	ab03      	add	r3, sp, #12
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	462a      	mov	r2, r5
 80081da:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <_svfiprintf_r+0x1f8>)
 80081dc:	a904      	add	r1, sp, #16
 80081de:	4638      	mov	r0, r7
 80081e0:	f7fc fca6 	bl	8004b30 <_printf_i>
 80081e4:	e7eb      	b.n	80081be <_svfiprintf_r+0x1c2>
 80081e6:	bf00      	nop
 80081e8:	0800923c 	.word	0x0800923c
 80081ec:	08009246 	.word	0x08009246
 80081f0:	080045e9 	.word	0x080045e9
 80081f4:	08007f45 	.word	0x08007f45
 80081f8:	08009242 	.word	0x08009242
 80081fc:	00000000 	.word	0x00000000

08008200 <nan>:
 8008200:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008208 <nan+0x8>
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	00000000 	.word	0x00000000
 800820c:	7ff80000 	.word	0x7ff80000

08008210 <_sbrk_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4d06      	ldr	r5, [pc, #24]	; (800822c <_sbrk_r+0x1c>)
 8008214:	2300      	movs	r3, #0
 8008216:	4604      	mov	r4, r0
 8008218:	4608      	mov	r0, r1
 800821a:	602b      	str	r3, [r5, #0]
 800821c:	f7f9 fd54 	bl	8001cc8 <_sbrk>
 8008220:	1c43      	adds	r3, r0, #1
 8008222:	d102      	bne.n	800822a <_sbrk_r+0x1a>
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	b103      	cbz	r3, 800822a <_sbrk_r+0x1a>
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	bd38      	pop	{r3, r4, r5, pc}
 800822c:	2000031c 	.word	0x2000031c

08008230 <strncmp>:
 8008230:	b510      	push	{r4, lr}
 8008232:	b17a      	cbz	r2, 8008254 <strncmp+0x24>
 8008234:	4603      	mov	r3, r0
 8008236:	3901      	subs	r1, #1
 8008238:	1884      	adds	r4, r0, r2
 800823a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800823e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008242:	4290      	cmp	r0, r2
 8008244:	d101      	bne.n	800824a <strncmp+0x1a>
 8008246:	42a3      	cmp	r3, r4
 8008248:	d101      	bne.n	800824e <strncmp+0x1e>
 800824a:	1a80      	subs	r0, r0, r2
 800824c:	bd10      	pop	{r4, pc}
 800824e:	2800      	cmp	r0, #0
 8008250:	d1f3      	bne.n	800823a <strncmp+0xa>
 8008252:	e7fa      	b.n	800824a <strncmp+0x1a>
 8008254:	4610      	mov	r0, r2
 8008256:	e7f9      	b.n	800824c <strncmp+0x1c>

08008258 <__ascii_wctomb>:
 8008258:	b149      	cbz	r1, 800826e <__ascii_wctomb+0x16>
 800825a:	2aff      	cmp	r2, #255	; 0xff
 800825c:	bf85      	ittet	hi
 800825e:	238a      	movhi	r3, #138	; 0x8a
 8008260:	6003      	strhi	r3, [r0, #0]
 8008262:	700a      	strbls	r2, [r1, #0]
 8008264:	f04f 30ff 	movhi.w	r0, #4294967295
 8008268:	bf98      	it	ls
 800826a:	2001      	movls	r0, #1
 800826c:	4770      	bx	lr
 800826e:	4608      	mov	r0, r1
 8008270:	4770      	bx	lr
	...

08008274 <__assert_func>:
 8008274:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008276:	4614      	mov	r4, r2
 8008278:	461a      	mov	r2, r3
 800827a:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <__assert_func+0x2c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4605      	mov	r5, r0
 8008280:	68d8      	ldr	r0, [r3, #12]
 8008282:	b14c      	cbz	r4, 8008298 <__assert_func+0x24>
 8008284:	4b07      	ldr	r3, [pc, #28]	; (80082a4 <__assert_func+0x30>)
 8008286:	9100      	str	r1, [sp, #0]
 8008288:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800828c:	4906      	ldr	r1, [pc, #24]	; (80082a8 <__assert_func+0x34>)
 800828e:	462b      	mov	r3, r5
 8008290:	f000 f80e 	bl	80082b0 <fiprintf>
 8008294:	f000 fa8c 	bl	80087b0 <abort>
 8008298:	4b04      	ldr	r3, [pc, #16]	; (80082ac <__assert_func+0x38>)
 800829a:	461c      	mov	r4, r3
 800829c:	e7f3      	b.n	8008286 <__assert_func+0x12>
 800829e:	bf00      	nop
 80082a0:	20000034 	.word	0x20000034
 80082a4:	0800924d 	.word	0x0800924d
 80082a8:	0800925a 	.word	0x0800925a
 80082ac:	08009288 	.word	0x08009288

080082b0 <fiprintf>:
 80082b0:	b40e      	push	{r1, r2, r3}
 80082b2:	b503      	push	{r0, r1, lr}
 80082b4:	4601      	mov	r1, r0
 80082b6:	ab03      	add	r3, sp, #12
 80082b8:	4805      	ldr	r0, [pc, #20]	; (80082d0 <fiprintf+0x20>)
 80082ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80082be:	6800      	ldr	r0, [r0, #0]
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	f000 f885 	bl	80083d0 <_vfiprintf_r>
 80082c6:	b002      	add	sp, #8
 80082c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082cc:	b003      	add	sp, #12
 80082ce:	4770      	bx	lr
 80082d0:	20000034 	.word	0x20000034

080082d4 <memmove>:
 80082d4:	4288      	cmp	r0, r1
 80082d6:	b510      	push	{r4, lr}
 80082d8:	eb01 0402 	add.w	r4, r1, r2
 80082dc:	d902      	bls.n	80082e4 <memmove+0x10>
 80082de:	4284      	cmp	r4, r0
 80082e0:	4623      	mov	r3, r4
 80082e2:	d807      	bhi.n	80082f4 <memmove+0x20>
 80082e4:	1e43      	subs	r3, r0, #1
 80082e6:	42a1      	cmp	r1, r4
 80082e8:	d008      	beq.n	80082fc <memmove+0x28>
 80082ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082f2:	e7f8      	b.n	80082e6 <memmove+0x12>
 80082f4:	4402      	add	r2, r0
 80082f6:	4601      	mov	r1, r0
 80082f8:	428a      	cmp	r2, r1
 80082fa:	d100      	bne.n	80082fe <memmove+0x2a>
 80082fc:	bd10      	pop	{r4, pc}
 80082fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008306:	e7f7      	b.n	80082f8 <memmove+0x24>

08008308 <__malloc_lock>:
 8008308:	4801      	ldr	r0, [pc, #4]	; (8008310 <__malloc_lock+0x8>)
 800830a:	f000 bc11 	b.w	8008b30 <__retarget_lock_acquire_recursive>
 800830e:	bf00      	nop
 8008310:	20000320 	.word	0x20000320

08008314 <__malloc_unlock>:
 8008314:	4801      	ldr	r0, [pc, #4]	; (800831c <__malloc_unlock+0x8>)
 8008316:	f000 bc0c 	b.w	8008b32 <__retarget_lock_release_recursive>
 800831a:	bf00      	nop
 800831c:	20000320 	.word	0x20000320

08008320 <_realloc_r>:
 8008320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008324:	4680      	mov	r8, r0
 8008326:	4614      	mov	r4, r2
 8008328:	460e      	mov	r6, r1
 800832a:	b921      	cbnz	r1, 8008336 <_realloc_r+0x16>
 800832c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008330:	4611      	mov	r1, r2
 8008332:	f7ff bd93 	b.w	8007e5c <_malloc_r>
 8008336:	b92a      	cbnz	r2, 8008344 <_realloc_r+0x24>
 8008338:	f7ff fd24 	bl	8007d84 <_free_r>
 800833c:	4625      	mov	r5, r4
 800833e:	4628      	mov	r0, r5
 8008340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008344:	f000 fc5c 	bl	8008c00 <_malloc_usable_size_r>
 8008348:	4284      	cmp	r4, r0
 800834a:	4607      	mov	r7, r0
 800834c:	d802      	bhi.n	8008354 <_realloc_r+0x34>
 800834e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008352:	d812      	bhi.n	800837a <_realloc_r+0x5a>
 8008354:	4621      	mov	r1, r4
 8008356:	4640      	mov	r0, r8
 8008358:	f7ff fd80 	bl	8007e5c <_malloc_r>
 800835c:	4605      	mov	r5, r0
 800835e:	2800      	cmp	r0, #0
 8008360:	d0ed      	beq.n	800833e <_realloc_r+0x1e>
 8008362:	42bc      	cmp	r4, r7
 8008364:	4622      	mov	r2, r4
 8008366:	4631      	mov	r1, r6
 8008368:	bf28      	it	cs
 800836a:	463a      	movcs	r2, r7
 800836c:	f7ff f824 	bl	80073b8 <memcpy>
 8008370:	4631      	mov	r1, r6
 8008372:	4640      	mov	r0, r8
 8008374:	f7ff fd06 	bl	8007d84 <_free_r>
 8008378:	e7e1      	b.n	800833e <_realloc_r+0x1e>
 800837a:	4635      	mov	r5, r6
 800837c:	e7df      	b.n	800833e <_realloc_r+0x1e>

0800837e <__sfputc_r>:
 800837e:	6893      	ldr	r3, [r2, #8]
 8008380:	3b01      	subs	r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	b410      	push	{r4}
 8008386:	6093      	str	r3, [r2, #8]
 8008388:	da08      	bge.n	800839c <__sfputc_r+0x1e>
 800838a:	6994      	ldr	r4, [r2, #24]
 800838c:	42a3      	cmp	r3, r4
 800838e:	db01      	blt.n	8008394 <__sfputc_r+0x16>
 8008390:	290a      	cmp	r1, #10
 8008392:	d103      	bne.n	800839c <__sfputc_r+0x1e>
 8008394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008398:	f000 b94a 	b.w	8008630 <__swbuf_r>
 800839c:	6813      	ldr	r3, [r2, #0]
 800839e:	1c58      	adds	r0, r3, #1
 80083a0:	6010      	str	r0, [r2, #0]
 80083a2:	7019      	strb	r1, [r3, #0]
 80083a4:	4608      	mov	r0, r1
 80083a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <__sfputs_r>:
 80083ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ae:	4606      	mov	r6, r0
 80083b0:	460f      	mov	r7, r1
 80083b2:	4614      	mov	r4, r2
 80083b4:	18d5      	adds	r5, r2, r3
 80083b6:	42ac      	cmp	r4, r5
 80083b8:	d101      	bne.n	80083be <__sfputs_r+0x12>
 80083ba:	2000      	movs	r0, #0
 80083bc:	e007      	b.n	80083ce <__sfputs_r+0x22>
 80083be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c2:	463a      	mov	r2, r7
 80083c4:	4630      	mov	r0, r6
 80083c6:	f7ff ffda 	bl	800837e <__sfputc_r>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	d1f3      	bne.n	80083b6 <__sfputs_r+0xa>
 80083ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083d0 <_vfiprintf_r>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	460d      	mov	r5, r1
 80083d6:	b09d      	sub	sp, #116	; 0x74
 80083d8:	4614      	mov	r4, r2
 80083da:	4698      	mov	r8, r3
 80083dc:	4606      	mov	r6, r0
 80083de:	b118      	cbz	r0, 80083e8 <_vfiprintf_r+0x18>
 80083e0:	6983      	ldr	r3, [r0, #24]
 80083e2:	b90b      	cbnz	r3, 80083e8 <_vfiprintf_r+0x18>
 80083e4:	f000 fb06 	bl	80089f4 <__sinit>
 80083e8:	4b89      	ldr	r3, [pc, #548]	; (8008610 <_vfiprintf_r+0x240>)
 80083ea:	429d      	cmp	r5, r3
 80083ec:	d11b      	bne.n	8008426 <_vfiprintf_r+0x56>
 80083ee:	6875      	ldr	r5, [r6, #4]
 80083f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083f2:	07d9      	lsls	r1, r3, #31
 80083f4:	d405      	bmi.n	8008402 <_vfiprintf_r+0x32>
 80083f6:	89ab      	ldrh	r3, [r5, #12]
 80083f8:	059a      	lsls	r2, r3, #22
 80083fa:	d402      	bmi.n	8008402 <_vfiprintf_r+0x32>
 80083fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083fe:	f000 fb97 	bl	8008b30 <__retarget_lock_acquire_recursive>
 8008402:	89ab      	ldrh	r3, [r5, #12]
 8008404:	071b      	lsls	r3, r3, #28
 8008406:	d501      	bpl.n	800840c <_vfiprintf_r+0x3c>
 8008408:	692b      	ldr	r3, [r5, #16]
 800840a:	b9eb      	cbnz	r3, 8008448 <_vfiprintf_r+0x78>
 800840c:	4629      	mov	r1, r5
 800840e:	4630      	mov	r0, r6
 8008410:	f000 f960 	bl	80086d4 <__swsetup_r>
 8008414:	b1c0      	cbz	r0, 8008448 <_vfiprintf_r+0x78>
 8008416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008418:	07dc      	lsls	r4, r3, #31
 800841a:	d50e      	bpl.n	800843a <_vfiprintf_r+0x6a>
 800841c:	f04f 30ff 	mov.w	r0, #4294967295
 8008420:	b01d      	add	sp, #116	; 0x74
 8008422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008426:	4b7b      	ldr	r3, [pc, #492]	; (8008614 <_vfiprintf_r+0x244>)
 8008428:	429d      	cmp	r5, r3
 800842a:	d101      	bne.n	8008430 <_vfiprintf_r+0x60>
 800842c:	68b5      	ldr	r5, [r6, #8]
 800842e:	e7df      	b.n	80083f0 <_vfiprintf_r+0x20>
 8008430:	4b79      	ldr	r3, [pc, #484]	; (8008618 <_vfiprintf_r+0x248>)
 8008432:	429d      	cmp	r5, r3
 8008434:	bf08      	it	eq
 8008436:	68f5      	ldreq	r5, [r6, #12]
 8008438:	e7da      	b.n	80083f0 <_vfiprintf_r+0x20>
 800843a:	89ab      	ldrh	r3, [r5, #12]
 800843c:	0598      	lsls	r0, r3, #22
 800843e:	d4ed      	bmi.n	800841c <_vfiprintf_r+0x4c>
 8008440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008442:	f000 fb76 	bl	8008b32 <__retarget_lock_release_recursive>
 8008446:	e7e9      	b.n	800841c <_vfiprintf_r+0x4c>
 8008448:	2300      	movs	r3, #0
 800844a:	9309      	str	r3, [sp, #36]	; 0x24
 800844c:	2320      	movs	r3, #32
 800844e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008452:	f8cd 800c 	str.w	r8, [sp, #12]
 8008456:	2330      	movs	r3, #48	; 0x30
 8008458:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800861c <_vfiprintf_r+0x24c>
 800845c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008460:	f04f 0901 	mov.w	r9, #1
 8008464:	4623      	mov	r3, r4
 8008466:	469a      	mov	sl, r3
 8008468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800846c:	b10a      	cbz	r2, 8008472 <_vfiprintf_r+0xa2>
 800846e:	2a25      	cmp	r2, #37	; 0x25
 8008470:	d1f9      	bne.n	8008466 <_vfiprintf_r+0x96>
 8008472:	ebba 0b04 	subs.w	fp, sl, r4
 8008476:	d00b      	beq.n	8008490 <_vfiprintf_r+0xc0>
 8008478:	465b      	mov	r3, fp
 800847a:	4622      	mov	r2, r4
 800847c:	4629      	mov	r1, r5
 800847e:	4630      	mov	r0, r6
 8008480:	f7ff ff94 	bl	80083ac <__sfputs_r>
 8008484:	3001      	adds	r0, #1
 8008486:	f000 80aa 	beq.w	80085de <_vfiprintf_r+0x20e>
 800848a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800848c:	445a      	add	r2, fp
 800848e:	9209      	str	r2, [sp, #36]	; 0x24
 8008490:	f89a 3000 	ldrb.w	r3, [sl]
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 80a2 	beq.w	80085de <_vfiprintf_r+0x20e>
 800849a:	2300      	movs	r3, #0
 800849c:	f04f 32ff 	mov.w	r2, #4294967295
 80084a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084a4:	f10a 0a01 	add.w	sl, sl, #1
 80084a8:	9304      	str	r3, [sp, #16]
 80084aa:	9307      	str	r3, [sp, #28]
 80084ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084b0:	931a      	str	r3, [sp, #104]	; 0x68
 80084b2:	4654      	mov	r4, sl
 80084b4:	2205      	movs	r2, #5
 80084b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ba:	4858      	ldr	r0, [pc, #352]	; (800861c <_vfiprintf_r+0x24c>)
 80084bc:	f7f7 fe98 	bl	80001f0 <memchr>
 80084c0:	9a04      	ldr	r2, [sp, #16]
 80084c2:	b9d8      	cbnz	r0, 80084fc <_vfiprintf_r+0x12c>
 80084c4:	06d1      	lsls	r1, r2, #27
 80084c6:	bf44      	itt	mi
 80084c8:	2320      	movmi	r3, #32
 80084ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ce:	0713      	lsls	r3, r2, #28
 80084d0:	bf44      	itt	mi
 80084d2:	232b      	movmi	r3, #43	; 0x2b
 80084d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084d8:	f89a 3000 	ldrb.w	r3, [sl]
 80084dc:	2b2a      	cmp	r3, #42	; 0x2a
 80084de:	d015      	beq.n	800850c <_vfiprintf_r+0x13c>
 80084e0:	9a07      	ldr	r2, [sp, #28]
 80084e2:	4654      	mov	r4, sl
 80084e4:	2000      	movs	r0, #0
 80084e6:	f04f 0c0a 	mov.w	ip, #10
 80084ea:	4621      	mov	r1, r4
 80084ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084f0:	3b30      	subs	r3, #48	; 0x30
 80084f2:	2b09      	cmp	r3, #9
 80084f4:	d94e      	bls.n	8008594 <_vfiprintf_r+0x1c4>
 80084f6:	b1b0      	cbz	r0, 8008526 <_vfiprintf_r+0x156>
 80084f8:	9207      	str	r2, [sp, #28]
 80084fa:	e014      	b.n	8008526 <_vfiprintf_r+0x156>
 80084fc:	eba0 0308 	sub.w	r3, r0, r8
 8008500:	fa09 f303 	lsl.w	r3, r9, r3
 8008504:	4313      	orrs	r3, r2
 8008506:	9304      	str	r3, [sp, #16]
 8008508:	46a2      	mov	sl, r4
 800850a:	e7d2      	b.n	80084b2 <_vfiprintf_r+0xe2>
 800850c:	9b03      	ldr	r3, [sp, #12]
 800850e:	1d19      	adds	r1, r3, #4
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	9103      	str	r1, [sp, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	bfbb      	ittet	lt
 8008518:	425b      	neglt	r3, r3
 800851a:	f042 0202 	orrlt.w	r2, r2, #2
 800851e:	9307      	strge	r3, [sp, #28]
 8008520:	9307      	strlt	r3, [sp, #28]
 8008522:	bfb8      	it	lt
 8008524:	9204      	strlt	r2, [sp, #16]
 8008526:	7823      	ldrb	r3, [r4, #0]
 8008528:	2b2e      	cmp	r3, #46	; 0x2e
 800852a:	d10c      	bne.n	8008546 <_vfiprintf_r+0x176>
 800852c:	7863      	ldrb	r3, [r4, #1]
 800852e:	2b2a      	cmp	r3, #42	; 0x2a
 8008530:	d135      	bne.n	800859e <_vfiprintf_r+0x1ce>
 8008532:	9b03      	ldr	r3, [sp, #12]
 8008534:	1d1a      	adds	r2, r3, #4
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	9203      	str	r2, [sp, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	bfb8      	it	lt
 800853e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008542:	3402      	adds	r4, #2
 8008544:	9305      	str	r3, [sp, #20]
 8008546:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800862c <_vfiprintf_r+0x25c>
 800854a:	7821      	ldrb	r1, [r4, #0]
 800854c:	2203      	movs	r2, #3
 800854e:	4650      	mov	r0, sl
 8008550:	f7f7 fe4e 	bl	80001f0 <memchr>
 8008554:	b140      	cbz	r0, 8008568 <_vfiprintf_r+0x198>
 8008556:	2340      	movs	r3, #64	; 0x40
 8008558:	eba0 000a 	sub.w	r0, r0, sl
 800855c:	fa03 f000 	lsl.w	r0, r3, r0
 8008560:	9b04      	ldr	r3, [sp, #16]
 8008562:	4303      	orrs	r3, r0
 8008564:	3401      	adds	r4, #1
 8008566:	9304      	str	r3, [sp, #16]
 8008568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800856c:	482c      	ldr	r0, [pc, #176]	; (8008620 <_vfiprintf_r+0x250>)
 800856e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008572:	2206      	movs	r2, #6
 8008574:	f7f7 fe3c 	bl	80001f0 <memchr>
 8008578:	2800      	cmp	r0, #0
 800857a:	d03f      	beq.n	80085fc <_vfiprintf_r+0x22c>
 800857c:	4b29      	ldr	r3, [pc, #164]	; (8008624 <_vfiprintf_r+0x254>)
 800857e:	bb1b      	cbnz	r3, 80085c8 <_vfiprintf_r+0x1f8>
 8008580:	9b03      	ldr	r3, [sp, #12]
 8008582:	3307      	adds	r3, #7
 8008584:	f023 0307 	bic.w	r3, r3, #7
 8008588:	3308      	adds	r3, #8
 800858a:	9303      	str	r3, [sp, #12]
 800858c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858e:	443b      	add	r3, r7
 8008590:	9309      	str	r3, [sp, #36]	; 0x24
 8008592:	e767      	b.n	8008464 <_vfiprintf_r+0x94>
 8008594:	fb0c 3202 	mla	r2, ip, r2, r3
 8008598:	460c      	mov	r4, r1
 800859a:	2001      	movs	r0, #1
 800859c:	e7a5      	b.n	80084ea <_vfiprintf_r+0x11a>
 800859e:	2300      	movs	r3, #0
 80085a0:	3401      	adds	r4, #1
 80085a2:	9305      	str	r3, [sp, #20]
 80085a4:	4619      	mov	r1, r3
 80085a6:	f04f 0c0a 	mov.w	ip, #10
 80085aa:	4620      	mov	r0, r4
 80085ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085b0:	3a30      	subs	r2, #48	; 0x30
 80085b2:	2a09      	cmp	r2, #9
 80085b4:	d903      	bls.n	80085be <_vfiprintf_r+0x1ee>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0c5      	beq.n	8008546 <_vfiprintf_r+0x176>
 80085ba:	9105      	str	r1, [sp, #20]
 80085bc:	e7c3      	b.n	8008546 <_vfiprintf_r+0x176>
 80085be:	fb0c 2101 	mla	r1, ip, r1, r2
 80085c2:	4604      	mov	r4, r0
 80085c4:	2301      	movs	r3, #1
 80085c6:	e7f0      	b.n	80085aa <_vfiprintf_r+0x1da>
 80085c8:	ab03      	add	r3, sp, #12
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	462a      	mov	r2, r5
 80085ce:	4b16      	ldr	r3, [pc, #88]	; (8008628 <_vfiprintf_r+0x258>)
 80085d0:	a904      	add	r1, sp, #16
 80085d2:	4630      	mov	r0, r6
 80085d4:	f7fc f808 	bl	80045e8 <_printf_float>
 80085d8:	4607      	mov	r7, r0
 80085da:	1c78      	adds	r0, r7, #1
 80085dc:	d1d6      	bne.n	800858c <_vfiprintf_r+0x1bc>
 80085de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085e0:	07d9      	lsls	r1, r3, #31
 80085e2:	d405      	bmi.n	80085f0 <_vfiprintf_r+0x220>
 80085e4:	89ab      	ldrh	r3, [r5, #12]
 80085e6:	059a      	lsls	r2, r3, #22
 80085e8:	d402      	bmi.n	80085f0 <_vfiprintf_r+0x220>
 80085ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ec:	f000 faa1 	bl	8008b32 <__retarget_lock_release_recursive>
 80085f0:	89ab      	ldrh	r3, [r5, #12]
 80085f2:	065b      	lsls	r3, r3, #25
 80085f4:	f53f af12 	bmi.w	800841c <_vfiprintf_r+0x4c>
 80085f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085fa:	e711      	b.n	8008420 <_vfiprintf_r+0x50>
 80085fc:	ab03      	add	r3, sp, #12
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	462a      	mov	r2, r5
 8008602:	4b09      	ldr	r3, [pc, #36]	; (8008628 <_vfiprintf_r+0x258>)
 8008604:	a904      	add	r1, sp, #16
 8008606:	4630      	mov	r0, r6
 8008608:	f7fc fa92 	bl	8004b30 <_printf_i>
 800860c:	e7e4      	b.n	80085d8 <_vfiprintf_r+0x208>
 800860e:	bf00      	nop
 8008610:	080092ac 	.word	0x080092ac
 8008614:	080092cc 	.word	0x080092cc
 8008618:	0800928c 	.word	0x0800928c
 800861c:	0800923c 	.word	0x0800923c
 8008620:	08009246 	.word	0x08009246
 8008624:	080045e9 	.word	0x080045e9
 8008628:	080083ad 	.word	0x080083ad
 800862c:	08009242 	.word	0x08009242

08008630 <__swbuf_r>:
 8008630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008632:	460e      	mov	r6, r1
 8008634:	4614      	mov	r4, r2
 8008636:	4605      	mov	r5, r0
 8008638:	b118      	cbz	r0, 8008642 <__swbuf_r+0x12>
 800863a:	6983      	ldr	r3, [r0, #24]
 800863c:	b90b      	cbnz	r3, 8008642 <__swbuf_r+0x12>
 800863e:	f000 f9d9 	bl	80089f4 <__sinit>
 8008642:	4b21      	ldr	r3, [pc, #132]	; (80086c8 <__swbuf_r+0x98>)
 8008644:	429c      	cmp	r4, r3
 8008646:	d12b      	bne.n	80086a0 <__swbuf_r+0x70>
 8008648:	686c      	ldr	r4, [r5, #4]
 800864a:	69a3      	ldr	r3, [r4, #24]
 800864c:	60a3      	str	r3, [r4, #8]
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	071a      	lsls	r2, r3, #28
 8008652:	d52f      	bpl.n	80086b4 <__swbuf_r+0x84>
 8008654:	6923      	ldr	r3, [r4, #16]
 8008656:	b36b      	cbz	r3, 80086b4 <__swbuf_r+0x84>
 8008658:	6923      	ldr	r3, [r4, #16]
 800865a:	6820      	ldr	r0, [r4, #0]
 800865c:	1ac0      	subs	r0, r0, r3
 800865e:	6963      	ldr	r3, [r4, #20]
 8008660:	b2f6      	uxtb	r6, r6
 8008662:	4283      	cmp	r3, r0
 8008664:	4637      	mov	r7, r6
 8008666:	dc04      	bgt.n	8008672 <__swbuf_r+0x42>
 8008668:	4621      	mov	r1, r4
 800866a:	4628      	mov	r0, r5
 800866c:	f000 f92e 	bl	80088cc <_fflush_r>
 8008670:	bb30      	cbnz	r0, 80086c0 <__swbuf_r+0x90>
 8008672:	68a3      	ldr	r3, [r4, #8]
 8008674:	3b01      	subs	r3, #1
 8008676:	60a3      	str	r3, [r4, #8]
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	6022      	str	r2, [r4, #0]
 800867e:	701e      	strb	r6, [r3, #0]
 8008680:	6963      	ldr	r3, [r4, #20]
 8008682:	3001      	adds	r0, #1
 8008684:	4283      	cmp	r3, r0
 8008686:	d004      	beq.n	8008692 <__swbuf_r+0x62>
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	07db      	lsls	r3, r3, #31
 800868c:	d506      	bpl.n	800869c <__swbuf_r+0x6c>
 800868e:	2e0a      	cmp	r6, #10
 8008690:	d104      	bne.n	800869c <__swbuf_r+0x6c>
 8008692:	4621      	mov	r1, r4
 8008694:	4628      	mov	r0, r5
 8008696:	f000 f919 	bl	80088cc <_fflush_r>
 800869a:	b988      	cbnz	r0, 80086c0 <__swbuf_r+0x90>
 800869c:	4638      	mov	r0, r7
 800869e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086a0:	4b0a      	ldr	r3, [pc, #40]	; (80086cc <__swbuf_r+0x9c>)
 80086a2:	429c      	cmp	r4, r3
 80086a4:	d101      	bne.n	80086aa <__swbuf_r+0x7a>
 80086a6:	68ac      	ldr	r4, [r5, #8]
 80086a8:	e7cf      	b.n	800864a <__swbuf_r+0x1a>
 80086aa:	4b09      	ldr	r3, [pc, #36]	; (80086d0 <__swbuf_r+0xa0>)
 80086ac:	429c      	cmp	r4, r3
 80086ae:	bf08      	it	eq
 80086b0:	68ec      	ldreq	r4, [r5, #12]
 80086b2:	e7ca      	b.n	800864a <__swbuf_r+0x1a>
 80086b4:	4621      	mov	r1, r4
 80086b6:	4628      	mov	r0, r5
 80086b8:	f000 f80c 	bl	80086d4 <__swsetup_r>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d0cb      	beq.n	8008658 <__swbuf_r+0x28>
 80086c0:	f04f 37ff 	mov.w	r7, #4294967295
 80086c4:	e7ea      	b.n	800869c <__swbuf_r+0x6c>
 80086c6:	bf00      	nop
 80086c8:	080092ac 	.word	0x080092ac
 80086cc:	080092cc 	.word	0x080092cc
 80086d0:	0800928c 	.word	0x0800928c

080086d4 <__swsetup_r>:
 80086d4:	4b32      	ldr	r3, [pc, #200]	; (80087a0 <__swsetup_r+0xcc>)
 80086d6:	b570      	push	{r4, r5, r6, lr}
 80086d8:	681d      	ldr	r5, [r3, #0]
 80086da:	4606      	mov	r6, r0
 80086dc:	460c      	mov	r4, r1
 80086de:	b125      	cbz	r5, 80086ea <__swsetup_r+0x16>
 80086e0:	69ab      	ldr	r3, [r5, #24]
 80086e2:	b913      	cbnz	r3, 80086ea <__swsetup_r+0x16>
 80086e4:	4628      	mov	r0, r5
 80086e6:	f000 f985 	bl	80089f4 <__sinit>
 80086ea:	4b2e      	ldr	r3, [pc, #184]	; (80087a4 <__swsetup_r+0xd0>)
 80086ec:	429c      	cmp	r4, r3
 80086ee:	d10f      	bne.n	8008710 <__swsetup_r+0x3c>
 80086f0:	686c      	ldr	r4, [r5, #4]
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086f8:	0719      	lsls	r1, r3, #28
 80086fa:	d42c      	bmi.n	8008756 <__swsetup_r+0x82>
 80086fc:	06dd      	lsls	r5, r3, #27
 80086fe:	d411      	bmi.n	8008724 <__swsetup_r+0x50>
 8008700:	2309      	movs	r3, #9
 8008702:	6033      	str	r3, [r6, #0]
 8008704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008708:	81a3      	strh	r3, [r4, #12]
 800870a:	f04f 30ff 	mov.w	r0, #4294967295
 800870e:	e03e      	b.n	800878e <__swsetup_r+0xba>
 8008710:	4b25      	ldr	r3, [pc, #148]	; (80087a8 <__swsetup_r+0xd4>)
 8008712:	429c      	cmp	r4, r3
 8008714:	d101      	bne.n	800871a <__swsetup_r+0x46>
 8008716:	68ac      	ldr	r4, [r5, #8]
 8008718:	e7eb      	b.n	80086f2 <__swsetup_r+0x1e>
 800871a:	4b24      	ldr	r3, [pc, #144]	; (80087ac <__swsetup_r+0xd8>)
 800871c:	429c      	cmp	r4, r3
 800871e:	bf08      	it	eq
 8008720:	68ec      	ldreq	r4, [r5, #12]
 8008722:	e7e6      	b.n	80086f2 <__swsetup_r+0x1e>
 8008724:	0758      	lsls	r0, r3, #29
 8008726:	d512      	bpl.n	800874e <__swsetup_r+0x7a>
 8008728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800872a:	b141      	cbz	r1, 800873e <__swsetup_r+0x6a>
 800872c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008730:	4299      	cmp	r1, r3
 8008732:	d002      	beq.n	800873a <__swsetup_r+0x66>
 8008734:	4630      	mov	r0, r6
 8008736:	f7ff fb25 	bl	8007d84 <_free_r>
 800873a:	2300      	movs	r3, #0
 800873c:	6363      	str	r3, [r4, #52]	; 0x34
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008744:	81a3      	strh	r3, [r4, #12]
 8008746:	2300      	movs	r3, #0
 8008748:	6063      	str	r3, [r4, #4]
 800874a:	6923      	ldr	r3, [r4, #16]
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	f043 0308 	orr.w	r3, r3, #8
 8008754:	81a3      	strh	r3, [r4, #12]
 8008756:	6923      	ldr	r3, [r4, #16]
 8008758:	b94b      	cbnz	r3, 800876e <__swsetup_r+0x9a>
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008764:	d003      	beq.n	800876e <__swsetup_r+0x9a>
 8008766:	4621      	mov	r1, r4
 8008768:	4630      	mov	r0, r6
 800876a:	f000 fa09 	bl	8008b80 <__smakebuf_r>
 800876e:	89a0      	ldrh	r0, [r4, #12]
 8008770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008774:	f010 0301 	ands.w	r3, r0, #1
 8008778:	d00a      	beq.n	8008790 <__swsetup_r+0xbc>
 800877a:	2300      	movs	r3, #0
 800877c:	60a3      	str	r3, [r4, #8]
 800877e:	6963      	ldr	r3, [r4, #20]
 8008780:	425b      	negs	r3, r3
 8008782:	61a3      	str	r3, [r4, #24]
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	b943      	cbnz	r3, 800879a <__swsetup_r+0xc6>
 8008788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800878c:	d1ba      	bne.n	8008704 <__swsetup_r+0x30>
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	0781      	lsls	r1, r0, #30
 8008792:	bf58      	it	pl
 8008794:	6963      	ldrpl	r3, [r4, #20]
 8008796:	60a3      	str	r3, [r4, #8]
 8008798:	e7f4      	b.n	8008784 <__swsetup_r+0xb0>
 800879a:	2000      	movs	r0, #0
 800879c:	e7f7      	b.n	800878e <__swsetup_r+0xba>
 800879e:	bf00      	nop
 80087a0:	20000034 	.word	0x20000034
 80087a4:	080092ac 	.word	0x080092ac
 80087a8:	080092cc 	.word	0x080092cc
 80087ac:	0800928c 	.word	0x0800928c

080087b0 <abort>:
 80087b0:	b508      	push	{r3, lr}
 80087b2:	2006      	movs	r0, #6
 80087b4:	f000 fa54 	bl	8008c60 <raise>
 80087b8:	2001      	movs	r0, #1
 80087ba:	f7f9 fa0d 	bl	8001bd8 <_exit>
	...

080087c0 <__sflush_r>:
 80087c0:	898a      	ldrh	r2, [r1, #12]
 80087c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c6:	4605      	mov	r5, r0
 80087c8:	0710      	lsls	r0, r2, #28
 80087ca:	460c      	mov	r4, r1
 80087cc:	d458      	bmi.n	8008880 <__sflush_r+0xc0>
 80087ce:	684b      	ldr	r3, [r1, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	dc05      	bgt.n	80087e0 <__sflush_r+0x20>
 80087d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	dc02      	bgt.n	80087e0 <__sflush_r+0x20>
 80087da:	2000      	movs	r0, #0
 80087dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087e2:	2e00      	cmp	r6, #0
 80087e4:	d0f9      	beq.n	80087da <__sflush_r+0x1a>
 80087e6:	2300      	movs	r3, #0
 80087e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087ec:	682f      	ldr	r7, [r5, #0]
 80087ee:	602b      	str	r3, [r5, #0]
 80087f0:	d032      	beq.n	8008858 <__sflush_r+0x98>
 80087f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087f4:	89a3      	ldrh	r3, [r4, #12]
 80087f6:	075a      	lsls	r2, r3, #29
 80087f8:	d505      	bpl.n	8008806 <__sflush_r+0x46>
 80087fa:	6863      	ldr	r3, [r4, #4]
 80087fc:	1ac0      	subs	r0, r0, r3
 80087fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008800:	b10b      	cbz	r3, 8008806 <__sflush_r+0x46>
 8008802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008804:	1ac0      	subs	r0, r0, r3
 8008806:	2300      	movs	r3, #0
 8008808:	4602      	mov	r2, r0
 800880a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800880c:	6a21      	ldr	r1, [r4, #32]
 800880e:	4628      	mov	r0, r5
 8008810:	47b0      	blx	r6
 8008812:	1c43      	adds	r3, r0, #1
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	d106      	bne.n	8008826 <__sflush_r+0x66>
 8008818:	6829      	ldr	r1, [r5, #0]
 800881a:	291d      	cmp	r1, #29
 800881c:	d82c      	bhi.n	8008878 <__sflush_r+0xb8>
 800881e:	4a2a      	ldr	r2, [pc, #168]	; (80088c8 <__sflush_r+0x108>)
 8008820:	40ca      	lsrs	r2, r1
 8008822:	07d6      	lsls	r6, r2, #31
 8008824:	d528      	bpl.n	8008878 <__sflush_r+0xb8>
 8008826:	2200      	movs	r2, #0
 8008828:	6062      	str	r2, [r4, #4]
 800882a:	04d9      	lsls	r1, r3, #19
 800882c:	6922      	ldr	r2, [r4, #16]
 800882e:	6022      	str	r2, [r4, #0]
 8008830:	d504      	bpl.n	800883c <__sflush_r+0x7c>
 8008832:	1c42      	adds	r2, r0, #1
 8008834:	d101      	bne.n	800883a <__sflush_r+0x7a>
 8008836:	682b      	ldr	r3, [r5, #0]
 8008838:	b903      	cbnz	r3, 800883c <__sflush_r+0x7c>
 800883a:	6560      	str	r0, [r4, #84]	; 0x54
 800883c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800883e:	602f      	str	r7, [r5, #0]
 8008840:	2900      	cmp	r1, #0
 8008842:	d0ca      	beq.n	80087da <__sflush_r+0x1a>
 8008844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008848:	4299      	cmp	r1, r3
 800884a:	d002      	beq.n	8008852 <__sflush_r+0x92>
 800884c:	4628      	mov	r0, r5
 800884e:	f7ff fa99 	bl	8007d84 <_free_r>
 8008852:	2000      	movs	r0, #0
 8008854:	6360      	str	r0, [r4, #52]	; 0x34
 8008856:	e7c1      	b.n	80087dc <__sflush_r+0x1c>
 8008858:	6a21      	ldr	r1, [r4, #32]
 800885a:	2301      	movs	r3, #1
 800885c:	4628      	mov	r0, r5
 800885e:	47b0      	blx	r6
 8008860:	1c41      	adds	r1, r0, #1
 8008862:	d1c7      	bne.n	80087f4 <__sflush_r+0x34>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d0c4      	beq.n	80087f4 <__sflush_r+0x34>
 800886a:	2b1d      	cmp	r3, #29
 800886c:	d001      	beq.n	8008872 <__sflush_r+0xb2>
 800886e:	2b16      	cmp	r3, #22
 8008870:	d101      	bne.n	8008876 <__sflush_r+0xb6>
 8008872:	602f      	str	r7, [r5, #0]
 8008874:	e7b1      	b.n	80087da <__sflush_r+0x1a>
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800887c:	81a3      	strh	r3, [r4, #12]
 800887e:	e7ad      	b.n	80087dc <__sflush_r+0x1c>
 8008880:	690f      	ldr	r7, [r1, #16]
 8008882:	2f00      	cmp	r7, #0
 8008884:	d0a9      	beq.n	80087da <__sflush_r+0x1a>
 8008886:	0793      	lsls	r3, r2, #30
 8008888:	680e      	ldr	r6, [r1, #0]
 800888a:	bf08      	it	eq
 800888c:	694b      	ldreq	r3, [r1, #20]
 800888e:	600f      	str	r7, [r1, #0]
 8008890:	bf18      	it	ne
 8008892:	2300      	movne	r3, #0
 8008894:	eba6 0807 	sub.w	r8, r6, r7
 8008898:	608b      	str	r3, [r1, #8]
 800889a:	f1b8 0f00 	cmp.w	r8, #0
 800889e:	dd9c      	ble.n	80087da <__sflush_r+0x1a>
 80088a0:	6a21      	ldr	r1, [r4, #32]
 80088a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088a4:	4643      	mov	r3, r8
 80088a6:	463a      	mov	r2, r7
 80088a8:	4628      	mov	r0, r5
 80088aa:	47b0      	blx	r6
 80088ac:	2800      	cmp	r0, #0
 80088ae:	dc06      	bgt.n	80088be <__sflush_r+0xfe>
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088b6:	81a3      	strh	r3, [r4, #12]
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
 80088bc:	e78e      	b.n	80087dc <__sflush_r+0x1c>
 80088be:	4407      	add	r7, r0
 80088c0:	eba8 0800 	sub.w	r8, r8, r0
 80088c4:	e7e9      	b.n	800889a <__sflush_r+0xda>
 80088c6:	bf00      	nop
 80088c8:	20400001 	.word	0x20400001

080088cc <_fflush_r>:
 80088cc:	b538      	push	{r3, r4, r5, lr}
 80088ce:	690b      	ldr	r3, [r1, #16]
 80088d0:	4605      	mov	r5, r0
 80088d2:	460c      	mov	r4, r1
 80088d4:	b913      	cbnz	r3, 80088dc <_fflush_r+0x10>
 80088d6:	2500      	movs	r5, #0
 80088d8:	4628      	mov	r0, r5
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	b118      	cbz	r0, 80088e6 <_fflush_r+0x1a>
 80088de:	6983      	ldr	r3, [r0, #24]
 80088e0:	b90b      	cbnz	r3, 80088e6 <_fflush_r+0x1a>
 80088e2:	f000 f887 	bl	80089f4 <__sinit>
 80088e6:	4b14      	ldr	r3, [pc, #80]	; (8008938 <_fflush_r+0x6c>)
 80088e8:	429c      	cmp	r4, r3
 80088ea:	d11b      	bne.n	8008924 <_fflush_r+0x58>
 80088ec:	686c      	ldr	r4, [r5, #4]
 80088ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0ef      	beq.n	80088d6 <_fflush_r+0xa>
 80088f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088f8:	07d0      	lsls	r0, r2, #31
 80088fa:	d404      	bmi.n	8008906 <_fflush_r+0x3a>
 80088fc:	0599      	lsls	r1, r3, #22
 80088fe:	d402      	bmi.n	8008906 <_fflush_r+0x3a>
 8008900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008902:	f000 f915 	bl	8008b30 <__retarget_lock_acquire_recursive>
 8008906:	4628      	mov	r0, r5
 8008908:	4621      	mov	r1, r4
 800890a:	f7ff ff59 	bl	80087c0 <__sflush_r>
 800890e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008910:	07da      	lsls	r2, r3, #31
 8008912:	4605      	mov	r5, r0
 8008914:	d4e0      	bmi.n	80088d8 <_fflush_r+0xc>
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	059b      	lsls	r3, r3, #22
 800891a:	d4dd      	bmi.n	80088d8 <_fflush_r+0xc>
 800891c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800891e:	f000 f908 	bl	8008b32 <__retarget_lock_release_recursive>
 8008922:	e7d9      	b.n	80088d8 <_fflush_r+0xc>
 8008924:	4b05      	ldr	r3, [pc, #20]	; (800893c <_fflush_r+0x70>)
 8008926:	429c      	cmp	r4, r3
 8008928:	d101      	bne.n	800892e <_fflush_r+0x62>
 800892a:	68ac      	ldr	r4, [r5, #8]
 800892c:	e7df      	b.n	80088ee <_fflush_r+0x22>
 800892e:	4b04      	ldr	r3, [pc, #16]	; (8008940 <_fflush_r+0x74>)
 8008930:	429c      	cmp	r4, r3
 8008932:	bf08      	it	eq
 8008934:	68ec      	ldreq	r4, [r5, #12]
 8008936:	e7da      	b.n	80088ee <_fflush_r+0x22>
 8008938:	080092ac 	.word	0x080092ac
 800893c:	080092cc 	.word	0x080092cc
 8008940:	0800928c 	.word	0x0800928c

08008944 <std>:
 8008944:	2300      	movs	r3, #0
 8008946:	b510      	push	{r4, lr}
 8008948:	4604      	mov	r4, r0
 800894a:	e9c0 3300 	strd	r3, r3, [r0]
 800894e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008952:	6083      	str	r3, [r0, #8]
 8008954:	8181      	strh	r1, [r0, #12]
 8008956:	6643      	str	r3, [r0, #100]	; 0x64
 8008958:	81c2      	strh	r2, [r0, #14]
 800895a:	6183      	str	r3, [r0, #24]
 800895c:	4619      	mov	r1, r3
 800895e:	2208      	movs	r2, #8
 8008960:	305c      	adds	r0, #92	; 0x5c
 8008962:	f7fb fd99 	bl	8004498 <memset>
 8008966:	4b05      	ldr	r3, [pc, #20]	; (800897c <std+0x38>)
 8008968:	6263      	str	r3, [r4, #36]	; 0x24
 800896a:	4b05      	ldr	r3, [pc, #20]	; (8008980 <std+0x3c>)
 800896c:	62a3      	str	r3, [r4, #40]	; 0x28
 800896e:	4b05      	ldr	r3, [pc, #20]	; (8008984 <std+0x40>)
 8008970:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008972:	4b05      	ldr	r3, [pc, #20]	; (8008988 <std+0x44>)
 8008974:	6224      	str	r4, [r4, #32]
 8008976:	6323      	str	r3, [r4, #48]	; 0x30
 8008978:	bd10      	pop	{r4, pc}
 800897a:	bf00      	nop
 800897c:	08008c99 	.word	0x08008c99
 8008980:	08008cbb 	.word	0x08008cbb
 8008984:	08008cf3 	.word	0x08008cf3
 8008988:	08008d17 	.word	0x08008d17

0800898c <_cleanup_r>:
 800898c:	4901      	ldr	r1, [pc, #4]	; (8008994 <_cleanup_r+0x8>)
 800898e:	f000 b8af 	b.w	8008af0 <_fwalk_reent>
 8008992:	bf00      	nop
 8008994:	080088cd 	.word	0x080088cd

08008998 <__sfmoreglue>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	2268      	movs	r2, #104	; 0x68
 800899c:	1e4d      	subs	r5, r1, #1
 800899e:	4355      	muls	r5, r2
 80089a0:	460e      	mov	r6, r1
 80089a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80089a6:	f7ff fa59 	bl	8007e5c <_malloc_r>
 80089aa:	4604      	mov	r4, r0
 80089ac:	b140      	cbz	r0, 80089c0 <__sfmoreglue+0x28>
 80089ae:	2100      	movs	r1, #0
 80089b0:	e9c0 1600 	strd	r1, r6, [r0]
 80089b4:	300c      	adds	r0, #12
 80089b6:	60a0      	str	r0, [r4, #8]
 80089b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089bc:	f7fb fd6c 	bl	8004498 <memset>
 80089c0:	4620      	mov	r0, r4
 80089c2:	bd70      	pop	{r4, r5, r6, pc}

080089c4 <__sfp_lock_acquire>:
 80089c4:	4801      	ldr	r0, [pc, #4]	; (80089cc <__sfp_lock_acquire+0x8>)
 80089c6:	f000 b8b3 	b.w	8008b30 <__retarget_lock_acquire_recursive>
 80089ca:	bf00      	nop
 80089cc:	20000321 	.word	0x20000321

080089d0 <__sfp_lock_release>:
 80089d0:	4801      	ldr	r0, [pc, #4]	; (80089d8 <__sfp_lock_release+0x8>)
 80089d2:	f000 b8ae 	b.w	8008b32 <__retarget_lock_release_recursive>
 80089d6:	bf00      	nop
 80089d8:	20000321 	.word	0x20000321

080089dc <__sinit_lock_acquire>:
 80089dc:	4801      	ldr	r0, [pc, #4]	; (80089e4 <__sinit_lock_acquire+0x8>)
 80089de:	f000 b8a7 	b.w	8008b30 <__retarget_lock_acquire_recursive>
 80089e2:	bf00      	nop
 80089e4:	20000322 	.word	0x20000322

080089e8 <__sinit_lock_release>:
 80089e8:	4801      	ldr	r0, [pc, #4]	; (80089f0 <__sinit_lock_release+0x8>)
 80089ea:	f000 b8a2 	b.w	8008b32 <__retarget_lock_release_recursive>
 80089ee:	bf00      	nop
 80089f0:	20000322 	.word	0x20000322

080089f4 <__sinit>:
 80089f4:	b510      	push	{r4, lr}
 80089f6:	4604      	mov	r4, r0
 80089f8:	f7ff fff0 	bl	80089dc <__sinit_lock_acquire>
 80089fc:	69a3      	ldr	r3, [r4, #24]
 80089fe:	b11b      	cbz	r3, 8008a08 <__sinit+0x14>
 8008a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a04:	f7ff bff0 	b.w	80089e8 <__sinit_lock_release>
 8008a08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a0c:	6523      	str	r3, [r4, #80]	; 0x50
 8008a0e:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <__sinit+0x68>)
 8008a10:	4a13      	ldr	r2, [pc, #76]	; (8008a60 <__sinit+0x6c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a16:	42a3      	cmp	r3, r4
 8008a18:	bf04      	itt	eq
 8008a1a:	2301      	moveq	r3, #1
 8008a1c:	61a3      	streq	r3, [r4, #24]
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f000 f820 	bl	8008a64 <__sfp>
 8008a24:	6060      	str	r0, [r4, #4]
 8008a26:	4620      	mov	r0, r4
 8008a28:	f000 f81c 	bl	8008a64 <__sfp>
 8008a2c:	60a0      	str	r0, [r4, #8]
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 f818 	bl	8008a64 <__sfp>
 8008a34:	2200      	movs	r2, #0
 8008a36:	60e0      	str	r0, [r4, #12]
 8008a38:	2104      	movs	r1, #4
 8008a3a:	6860      	ldr	r0, [r4, #4]
 8008a3c:	f7ff ff82 	bl	8008944 <std>
 8008a40:	68a0      	ldr	r0, [r4, #8]
 8008a42:	2201      	movs	r2, #1
 8008a44:	2109      	movs	r1, #9
 8008a46:	f7ff ff7d 	bl	8008944 <std>
 8008a4a:	68e0      	ldr	r0, [r4, #12]
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	2112      	movs	r1, #18
 8008a50:	f7ff ff78 	bl	8008944 <std>
 8008a54:	2301      	movs	r3, #1
 8008a56:	61a3      	str	r3, [r4, #24]
 8008a58:	e7d2      	b.n	8008a00 <__sinit+0xc>
 8008a5a:	bf00      	nop
 8008a5c:	08008e44 	.word	0x08008e44
 8008a60:	0800898d 	.word	0x0800898d

08008a64 <__sfp>:
 8008a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a66:	4607      	mov	r7, r0
 8008a68:	f7ff ffac 	bl	80089c4 <__sfp_lock_acquire>
 8008a6c:	4b1e      	ldr	r3, [pc, #120]	; (8008ae8 <__sfp+0x84>)
 8008a6e:	681e      	ldr	r6, [r3, #0]
 8008a70:	69b3      	ldr	r3, [r6, #24]
 8008a72:	b913      	cbnz	r3, 8008a7a <__sfp+0x16>
 8008a74:	4630      	mov	r0, r6
 8008a76:	f7ff ffbd 	bl	80089f4 <__sinit>
 8008a7a:	3648      	adds	r6, #72	; 0x48
 8008a7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a80:	3b01      	subs	r3, #1
 8008a82:	d503      	bpl.n	8008a8c <__sfp+0x28>
 8008a84:	6833      	ldr	r3, [r6, #0]
 8008a86:	b30b      	cbz	r3, 8008acc <__sfp+0x68>
 8008a88:	6836      	ldr	r6, [r6, #0]
 8008a8a:	e7f7      	b.n	8008a7c <__sfp+0x18>
 8008a8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a90:	b9d5      	cbnz	r5, 8008ac8 <__sfp+0x64>
 8008a92:	4b16      	ldr	r3, [pc, #88]	; (8008aec <__sfp+0x88>)
 8008a94:	60e3      	str	r3, [r4, #12]
 8008a96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a9a:	6665      	str	r5, [r4, #100]	; 0x64
 8008a9c:	f000 f847 	bl	8008b2e <__retarget_lock_init_recursive>
 8008aa0:	f7ff ff96 	bl	80089d0 <__sfp_lock_release>
 8008aa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008aa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008aac:	6025      	str	r5, [r4, #0]
 8008aae:	61a5      	str	r5, [r4, #24]
 8008ab0:	2208      	movs	r2, #8
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ab8:	f7fb fcee 	bl	8004498 <memset>
 8008abc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ac0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ac8:	3468      	adds	r4, #104	; 0x68
 8008aca:	e7d9      	b.n	8008a80 <__sfp+0x1c>
 8008acc:	2104      	movs	r1, #4
 8008ace:	4638      	mov	r0, r7
 8008ad0:	f7ff ff62 	bl	8008998 <__sfmoreglue>
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	6030      	str	r0, [r6, #0]
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d1d5      	bne.n	8008a88 <__sfp+0x24>
 8008adc:	f7ff ff78 	bl	80089d0 <__sfp_lock_release>
 8008ae0:	230c      	movs	r3, #12
 8008ae2:	603b      	str	r3, [r7, #0]
 8008ae4:	e7ee      	b.n	8008ac4 <__sfp+0x60>
 8008ae6:	bf00      	nop
 8008ae8:	08008e44 	.word	0x08008e44
 8008aec:	ffff0001 	.word	0xffff0001

08008af0 <_fwalk_reent>:
 8008af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af4:	4606      	mov	r6, r0
 8008af6:	4688      	mov	r8, r1
 8008af8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008afc:	2700      	movs	r7, #0
 8008afe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b02:	f1b9 0901 	subs.w	r9, r9, #1
 8008b06:	d505      	bpl.n	8008b14 <_fwalk_reent+0x24>
 8008b08:	6824      	ldr	r4, [r4, #0]
 8008b0a:	2c00      	cmp	r4, #0
 8008b0c:	d1f7      	bne.n	8008afe <_fwalk_reent+0xe>
 8008b0e:	4638      	mov	r0, r7
 8008b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b14:	89ab      	ldrh	r3, [r5, #12]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d907      	bls.n	8008b2a <_fwalk_reent+0x3a>
 8008b1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	d003      	beq.n	8008b2a <_fwalk_reent+0x3a>
 8008b22:	4629      	mov	r1, r5
 8008b24:	4630      	mov	r0, r6
 8008b26:	47c0      	blx	r8
 8008b28:	4307      	orrs	r7, r0
 8008b2a:	3568      	adds	r5, #104	; 0x68
 8008b2c:	e7e9      	b.n	8008b02 <_fwalk_reent+0x12>

08008b2e <__retarget_lock_init_recursive>:
 8008b2e:	4770      	bx	lr

08008b30 <__retarget_lock_acquire_recursive>:
 8008b30:	4770      	bx	lr

08008b32 <__retarget_lock_release_recursive>:
 8008b32:	4770      	bx	lr

08008b34 <__swhatbuf_r>:
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	460e      	mov	r6, r1
 8008b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b3c:	2900      	cmp	r1, #0
 8008b3e:	b096      	sub	sp, #88	; 0x58
 8008b40:	4614      	mov	r4, r2
 8008b42:	461d      	mov	r5, r3
 8008b44:	da08      	bge.n	8008b58 <__swhatbuf_r+0x24>
 8008b46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	602a      	str	r2, [r5, #0]
 8008b4e:	061a      	lsls	r2, r3, #24
 8008b50:	d410      	bmi.n	8008b74 <__swhatbuf_r+0x40>
 8008b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b56:	e00e      	b.n	8008b76 <__swhatbuf_r+0x42>
 8008b58:	466a      	mov	r2, sp
 8008b5a:	f000 f903 	bl	8008d64 <_fstat_r>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	dbf1      	blt.n	8008b46 <__swhatbuf_r+0x12>
 8008b62:	9a01      	ldr	r2, [sp, #4]
 8008b64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b6c:	425a      	negs	r2, r3
 8008b6e:	415a      	adcs	r2, r3
 8008b70:	602a      	str	r2, [r5, #0]
 8008b72:	e7ee      	b.n	8008b52 <__swhatbuf_r+0x1e>
 8008b74:	2340      	movs	r3, #64	; 0x40
 8008b76:	2000      	movs	r0, #0
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	b016      	add	sp, #88	; 0x58
 8008b7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b80 <__smakebuf_r>:
 8008b80:	898b      	ldrh	r3, [r1, #12]
 8008b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b84:	079d      	lsls	r5, r3, #30
 8008b86:	4606      	mov	r6, r0
 8008b88:	460c      	mov	r4, r1
 8008b8a:	d507      	bpl.n	8008b9c <__smakebuf_r+0x1c>
 8008b8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	6123      	str	r3, [r4, #16]
 8008b94:	2301      	movs	r3, #1
 8008b96:	6163      	str	r3, [r4, #20]
 8008b98:	b002      	add	sp, #8
 8008b9a:	bd70      	pop	{r4, r5, r6, pc}
 8008b9c:	ab01      	add	r3, sp, #4
 8008b9e:	466a      	mov	r2, sp
 8008ba0:	f7ff ffc8 	bl	8008b34 <__swhatbuf_r>
 8008ba4:	9900      	ldr	r1, [sp, #0]
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7ff f957 	bl	8007e5c <_malloc_r>
 8008bae:	b948      	cbnz	r0, 8008bc4 <__smakebuf_r+0x44>
 8008bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb4:	059a      	lsls	r2, r3, #22
 8008bb6:	d4ef      	bmi.n	8008b98 <__smakebuf_r+0x18>
 8008bb8:	f023 0303 	bic.w	r3, r3, #3
 8008bbc:	f043 0302 	orr.w	r3, r3, #2
 8008bc0:	81a3      	strh	r3, [r4, #12]
 8008bc2:	e7e3      	b.n	8008b8c <__smakebuf_r+0xc>
 8008bc4:	4b0d      	ldr	r3, [pc, #52]	; (8008bfc <__smakebuf_r+0x7c>)
 8008bc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bc8:	89a3      	ldrh	r3, [r4, #12]
 8008bca:	6020      	str	r0, [r4, #0]
 8008bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd0:	81a3      	strh	r3, [r4, #12]
 8008bd2:	9b00      	ldr	r3, [sp, #0]
 8008bd4:	6163      	str	r3, [r4, #20]
 8008bd6:	9b01      	ldr	r3, [sp, #4]
 8008bd8:	6120      	str	r0, [r4, #16]
 8008bda:	b15b      	cbz	r3, 8008bf4 <__smakebuf_r+0x74>
 8008bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008be0:	4630      	mov	r0, r6
 8008be2:	f000 f8d1 	bl	8008d88 <_isatty_r>
 8008be6:	b128      	cbz	r0, 8008bf4 <__smakebuf_r+0x74>
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	f023 0303 	bic.w	r3, r3, #3
 8008bee:	f043 0301 	orr.w	r3, r3, #1
 8008bf2:	81a3      	strh	r3, [r4, #12]
 8008bf4:	89a0      	ldrh	r0, [r4, #12]
 8008bf6:	4305      	orrs	r5, r0
 8008bf8:	81a5      	strh	r5, [r4, #12]
 8008bfa:	e7cd      	b.n	8008b98 <__smakebuf_r+0x18>
 8008bfc:	0800898d 	.word	0x0800898d

08008c00 <_malloc_usable_size_r>:
 8008c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c04:	1f18      	subs	r0, r3, #4
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	bfbc      	itt	lt
 8008c0a:	580b      	ldrlt	r3, [r1, r0]
 8008c0c:	18c0      	addlt	r0, r0, r3
 8008c0e:	4770      	bx	lr

08008c10 <_raise_r>:
 8008c10:	291f      	cmp	r1, #31
 8008c12:	b538      	push	{r3, r4, r5, lr}
 8008c14:	4604      	mov	r4, r0
 8008c16:	460d      	mov	r5, r1
 8008c18:	d904      	bls.n	8008c24 <_raise_r+0x14>
 8008c1a:	2316      	movs	r3, #22
 8008c1c:	6003      	str	r3, [r0, #0]
 8008c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c22:	bd38      	pop	{r3, r4, r5, pc}
 8008c24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c26:	b112      	cbz	r2, 8008c2e <_raise_r+0x1e>
 8008c28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c2c:	b94b      	cbnz	r3, 8008c42 <_raise_r+0x32>
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 f830 	bl	8008c94 <_getpid_r>
 8008c34:	462a      	mov	r2, r5
 8008c36:	4601      	mov	r1, r0
 8008c38:	4620      	mov	r0, r4
 8008c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c3e:	f000 b817 	b.w	8008c70 <_kill_r>
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d00a      	beq.n	8008c5c <_raise_r+0x4c>
 8008c46:	1c59      	adds	r1, r3, #1
 8008c48:	d103      	bne.n	8008c52 <_raise_r+0x42>
 8008c4a:	2316      	movs	r3, #22
 8008c4c:	6003      	str	r3, [r0, #0]
 8008c4e:	2001      	movs	r0, #1
 8008c50:	e7e7      	b.n	8008c22 <_raise_r+0x12>
 8008c52:	2400      	movs	r4, #0
 8008c54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c58:	4628      	mov	r0, r5
 8008c5a:	4798      	blx	r3
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	e7e0      	b.n	8008c22 <_raise_r+0x12>

08008c60 <raise>:
 8008c60:	4b02      	ldr	r3, [pc, #8]	; (8008c6c <raise+0xc>)
 8008c62:	4601      	mov	r1, r0
 8008c64:	6818      	ldr	r0, [r3, #0]
 8008c66:	f7ff bfd3 	b.w	8008c10 <_raise_r>
 8008c6a:	bf00      	nop
 8008c6c:	20000034 	.word	0x20000034

08008c70 <_kill_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4d07      	ldr	r5, [pc, #28]	; (8008c90 <_kill_r+0x20>)
 8008c74:	2300      	movs	r3, #0
 8008c76:	4604      	mov	r4, r0
 8008c78:	4608      	mov	r0, r1
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	602b      	str	r3, [r5, #0]
 8008c7e:	f7f8 ff9b 	bl	8001bb8 <_kill>
 8008c82:	1c43      	adds	r3, r0, #1
 8008c84:	d102      	bne.n	8008c8c <_kill_r+0x1c>
 8008c86:	682b      	ldr	r3, [r5, #0]
 8008c88:	b103      	cbz	r3, 8008c8c <_kill_r+0x1c>
 8008c8a:	6023      	str	r3, [r4, #0]
 8008c8c:	bd38      	pop	{r3, r4, r5, pc}
 8008c8e:	bf00      	nop
 8008c90:	2000031c 	.word	0x2000031c

08008c94 <_getpid_r>:
 8008c94:	f7f8 bf88 	b.w	8001ba8 <_getpid>

08008c98 <__sread>:
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca0:	f000 f894 	bl	8008dcc <_read_r>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	bfab      	itete	ge
 8008ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008caa:	89a3      	ldrhlt	r3, [r4, #12]
 8008cac:	181b      	addge	r3, r3, r0
 8008cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cb2:	bfac      	ite	ge
 8008cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cb6:	81a3      	strhlt	r3, [r4, #12]
 8008cb8:	bd10      	pop	{r4, pc}

08008cba <__swrite>:
 8008cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cbe:	461f      	mov	r7, r3
 8008cc0:	898b      	ldrh	r3, [r1, #12]
 8008cc2:	05db      	lsls	r3, r3, #23
 8008cc4:	4605      	mov	r5, r0
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	4616      	mov	r6, r2
 8008cca:	d505      	bpl.n	8008cd8 <__swrite+0x1e>
 8008ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f000 f868 	bl	8008da8 <_lseek_r>
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ce2:	81a3      	strh	r3, [r4, #12]
 8008ce4:	4632      	mov	r2, r6
 8008ce6:	463b      	mov	r3, r7
 8008ce8:	4628      	mov	r0, r5
 8008cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cee:	f000 b817 	b.w	8008d20 <_write_r>

08008cf2 <__sseek>:
 8008cf2:	b510      	push	{r4, lr}
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfa:	f000 f855 	bl	8008da8 <_lseek_r>
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	bf15      	itete	ne
 8008d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d0e:	81a3      	strheq	r3, [r4, #12]
 8008d10:	bf18      	it	ne
 8008d12:	81a3      	strhne	r3, [r4, #12]
 8008d14:	bd10      	pop	{r4, pc}

08008d16 <__sclose>:
 8008d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1a:	f000 b813 	b.w	8008d44 <_close_r>
	...

08008d20 <_write_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d07      	ldr	r5, [pc, #28]	; (8008d40 <_write_r+0x20>)
 8008d24:	4604      	mov	r4, r0
 8008d26:	4608      	mov	r0, r1
 8008d28:	4611      	mov	r1, r2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	602a      	str	r2, [r5, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f7f8 ff79 	bl	8001c26 <_write>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_write_r+0x1e>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_write_r+0x1e>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	2000031c 	.word	0x2000031c

08008d44 <_close_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4d06      	ldr	r5, [pc, #24]	; (8008d60 <_close_r+0x1c>)
 8008d48:	2300      	movs	r3, #0
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	4608      	mov	r0, r1
 8008d4e:	602b      	str	r3, [r5, #0]
 8008d50:	f7f8 ff85 	bl	8001c5e <_close>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_close_r+0x1a>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_close_r+0x1a>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	2000031c 	.word	0x2000031c

08008d64 <_fstat_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4d07      	ldr	r5, [pc, #28]	; (8008d84 <_fstat_r+0x20>)
 8008d68:	2300      	movs	r3, #0
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	4611      	mov	r1, r2
 8008d70:	602b      	str	r3, [r5, #0]
 8008d72:	f7f8 ff80 	bl	8001c76 <_fstat>
 8008d76:	1c43      	adds	r3, r0, #1
 8008d78:	d102      	bne.n	8008d80 <_fstat_r+0x1c>
 8008d7a:	682b      	ldr	r3, [r5, #0]
 8008d7c:	b103      	cbz	r3, 8008d80 <_fstat_r+0x1c>
 8008d7e:	6023      	str	r3, [r4, #0]
 8008d80:	bd38      	pop	{r3, r4, r5, pc}
 8008d82:	bf00      	nop
 8008d84:	2000031c 	.word	0x2000031c

08008d88 <_isatty_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4d06      	ldr	r5, [pc, #24]	; (8008da4 <_isatty_r+0x1c>)
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	4604      	mov	r4, r0
 8008d90:	4608      	mov	r0, r1
 8008d92:	602b      	str	r3, [r5, #0]
 8008d94:	f7f8 ff7f 	bl	8001c96 <_isatty>
 8008d98:	1c43      	adds	r3, r0, #1
 8008d9a:	d102      	bne.n	8008da2 <_isatty_r+0x1a>
 8008d9c:	682b      	ldr	r3, [r5, #0]
 8008d9e:	b103      	cbz	r3, 8008da2 <_isatty_r+0x1a>
 8008da0:	6023      	str	r3, [r4, #0]
 8008da2:	bd38      	pop	{r3, r4, r5, pc}
 8008da4:	2000031c 	.word	0x2000031c

08008da8 <_lseek_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4d07      	ldr	r5, [pc, #28]	; (8008dc8 <_lseek_r+0x20>)
 8008dac:	4604      	mov	r4, r0
 8008dae:	4608      	mov	r0, r1
 8008db0:	4611      	mov	r1, r2
 8008db2:	2200      	movs	r2, #0
 8008db4:	602a      	str	r2, [r5, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	f7f8 ff78 	bl	8001cac <_lseek>
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	d102      	bne.n	8008dc6 <_lseek_r+0x1e>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	b103      	cbz	r3, 8008dc6 <_lseek_r+0x1e>
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	2000031c 	.word	0x2000031c

08008dcc <_read_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	4d07      	ldr	r5, [pc, #28]	; (8008dec <_read_r+0x20>)
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	4608      	mov	r0, r1
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	602a      	str	r2, [r5, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	f7f8 ff06 	bl	8001bec <_read>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d102      	bne.n	8008dea <_read_r+0x1e>
 8008de4:	682b      	ldr	r3, [r5, #0]
 8008de6:	b103      	cbz	r3, 8008dea <_read_r+0x1e>
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	2000031c 	.word	0x2000031c

08008df0 <_init>:
 8008df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df2:	bf00      	nop
 8008df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df6:	bc08      	pop	{r3}
 8008df8:	469e      	mov	lr, r3
 8008dfa:	4770      	bx	lr

08008dfc <_fini>:
 8008dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfe:	bf00      	nop
 8008e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e02:	bc08      	pop	{r3}
 8008e04:	469e      	mov	lr, r3
 8008e06:	4770      	bx	lr
