
hw_7_I2c_LIS2DE_int_UART-DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08009ff8  08009ff8  00019ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4ec  0800a4ec  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4ec  0800a4ec  0001a4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4f4  0800a4f4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4f4  0800a4f4  0001a4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4f8  0800a4f8  0001a4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a4fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  200001f4  0800a6f0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  0800a6f0  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bfd  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a9  00000000  00000000  00030e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00032ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00033e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017403  00000000  00000000  00034d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d5a  00000000  00000000  0004c143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000912dc  00000000  00000000  0005de9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef179  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058e8  00000000  00000000  000ef1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009fe0 	.word	0x08009fe0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	08009fe0 	.word	0x08009fe0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001008:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800100c:	b09c      	sub	sp, #112	; 0x70
 800100e:	af06      	add	r7, sp, #24
 8001010:	6078      	str	r0, [r7, #4]

	if (htim == &htim10) {
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a55      	ldr	r2, [pc, #340]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001016:	4293      	cmp	r3, r2
 8001018:	f040 80a3 	bne.w	8001162 <HAL_TIM_PeriodElapsedCallback+0x15a>

		int8_t accelerometer_x_raw;
		HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADDRESS, &LIS2DE_X, 1, 50);
 800101c:	4b54      	ldr	r3, [pc, #336]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b299      	uxth	r1, r3
 8001022:	2332      	movs	r3, #50	; 0x32
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	4a52      	ldr	r2, [pc, #328]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800102a:	4853      	ldr	r0, [pc, #332]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800102c:	f001 fd38 	bl	8002aa0 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, LIS2DE_ADDRESS+1, &accelerometer_x_raw, 1, 50);
 8001030:	4b4f      	ldr	r3, [pc, #316]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b29b      	uxth	r3, r3
 8001036:	3301      	adds	r3, #1
 8001038:	b299      	uxth	r1, r3
 800103a:	f107 024b 	add.w	r2, r7, #75	; 0x4b
 800103e:	2332      	movs	r3, #50	; 0x32
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	484c      	ldr	r0, [pc, #304]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001046:	f001 fe29 	bl	8002c9c <HAL_I2C_Master_Receive>

		int8_t accelerometer_y_raw;
		HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADDRESS, &LIS2DE_Y, 1, 50);
 800104a:	4b49      	ldr	r3, [pc, #292]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b299      	uxth	r1, r3
 8001050:	2332      	movs	r3, #50	; 0x32
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	4a49      	ldr	r2, [pc, #292]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001058:	4847      	ldr	r0, [pc, #284]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800105a:	f001 fd21 	bl	8002aa0 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, LIS2DE_ADDRESS+1, &accelerometer_y_raw, 1, 50);
 800105e:	4b44      	ldr	r3, [pc, #272]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b29b      	uxth	r3, r3
 8001064:	3301      	adds	r3, #1
 8001066:	b299      	uxth	r1, r3
 8001068:	f107 024a 	add.w	r2, r7, #74	; 0x4a
 800106c:	2332      	movs	r3, #50	; 0x32
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	4841      	ldr	r0, [pc, #260]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001074:	f001 fe12 	bl	8002c9c <HAL_I2C_Master_Receive>

		int8_t accelerometer_z_raw;
		HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADDRESS, &LIS2DE_Z, 1, 50);
 8001078:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b299      	uxth	r1, r3
 800107e:	2332      	movs	r3, #50	; 0x32
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	4a3e      	ldr	r2, [pc, #248]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001086:	483c      	ldr	r0, [pc, #240]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001088:	f001 fd0a 	bl	8002aa0 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, LIS2DE_ADDRESS+1, &accelerometer_z_raw, 1, 50);
 800108c:	4b38      	ldr	r3, [pc, #224]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b29b      	uxth	r3, r3
 8001092:	3301      	adds	r3, #1
 8001094:	b299      	uxth	r1, r3
 8001096:	f107 0249 	add.w	r2, r7, #73	; 0x49
 800109a:	2332      	movs	r3, #50	; 0x32
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	4835      	ldr	r0, [pc, #212]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80010a2:	f001 fdfb 	bl	8002c9c <HAL_I2C_Master_Receive>

		float accelerometer_x = accelerometer_x_raw / 64.0;
 80010a6:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa42 	bl	8000534 <__aeabi_i2d>
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	4b33      	ldr	r3, [pc, #204]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80010b6:	f7ff fbd1 	bl	800085c <__aeabi_ddiv>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fd99 	bl	8000bf8 <__aeabi_d2f>
 80010c6:	4603      	mov	r3, r0
 80010c8:	657b      	str	r3, [r7, #84]	; 0x54
		float accelerometer_y = accelerometer_y_raw / 64.0;
 80010ca:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa30 	bl	8000534 <__aeabi_i2d>
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80010da:	f7ff fbbf 	bl	800085c <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f7ff fd87 	bl	8000bf8 <__aeabi_d2f>
 80010ea:	4603      	mov	r3, r0
 80010ec:	653b      	str	r3, [r7, #80]	; 0x50
		float accelerometer_z = accelerometer_z_raw / 64.0;
 80010ee:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa1e 	bl	8000534 <__aeabi_i2d>
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b21      	ldr	r3, [pc, #132]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80010fe:	f7ff fbad 	bl	800085c <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd75 	bl	8000bf8 <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	64fb      	str	r3, [r7, #76]	; 0x4c

		char string[64];
		snprintf(string, sizeof(string), "-> x: %+.2f g | y: %+.2f g | z: %+.2f g\r\n", accelerometer_x, accelerometer_y, accelerometer_z);
 8001112:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001114:	f7ff fa20 	bl	8000558 <__aeabi_f2d>
 8001118:	4604      	mov	r4, r0
 800111a:	460d      	mov	r5, r1
 800111c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800111e:	f7ff fa1b 	bl	8000558 <__aeabi_f2d>
 8001122:	4680      	mov	r8, r0
 8001124:	4689      	mov	r9, r1
 8001126:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001128:	f7ff fa16 	bl	8000558 <__aeabi_f2d>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	f107 0008 	add.w	r0, r7, #8
 8001134:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001138:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800113c:	e9cd 4500 	strd	r4, r5, [sp]
 8001140:	4a11      	ldr	r2, [pc, #68]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001142:	2140      	movs	r1, #64	; 0x40
 8001144:	f005 f928 	bl	8006398 <sniprintf>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)string, strlen(string));
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f847 	bl	80001e0 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4619      	mov	r1, r3
 800115c:	480b      	ldr	r0, [pc, #44]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x184>)
 800115e:	f003 fa4d 	bl	80045fc <HAL_UART_Transmit_DMA>

	}

}
 8001162:	bf00      	nop
 8001164:	3758      	adds	r7, #88	; 0x58
 8001166:	46bd      	mov	sp, r7
 8001168:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800116c:	20000264 	.word	0x20000264
 8001170:	20000000 	.word	0x20000000
 8001174:	2000000e 	.word	0x2000000e
 8001178:	20000210 	.word	0x20000210
 800117c:	2000000f 	.word	0x2000000f
 8001180:	20000010 	.word	0x20000010
 8001184:	40500000 	.word	0x40500000
 8001188:	08009ff8 	.word	0x08009ff8
 800118c:	200002ac 	.word	0x200002ac

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001196:	f000 fc1b 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119a:	f000 f839 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119e:	f000 f93f 	bl	8001420 <MX_GPIO_Init>
  MX_DMA_Init();
 80011a2:	f000 f91d 	bl	80013e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011a6:	f000 f8f1 	bl	800138c <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80011aa:	f000 f8cb 	bl	8001344 <MX_TIM10_Init>
  MX_I2C1_Init();
 80011ae:	f000 f89b 	bl	80012e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADDRESS, LIS2DE_CTRL_1, sizeof(LIS2DE_CTRL_1), 50);
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <main+0x68>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b299      	uxth	r1, r3
 80011b8:	2332      	movs	r3, #50	; 0x32
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2302      	movs	r3, #2
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <main+0x6c>)
 80011c0:	480f      	ldr	r0, [pc, #60]	; (8001200 <main+0x70>)
 80011c2:	f001 fc6d 	bl	8002aa0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADDRESS, LIS2DE_CTRL_2, sizeof(LIS2DE_CTRL_2), 50);
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <main+0x68>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b299      	uxth	r1, r3
 80011cc:	2332      	movs	r3, #50	; 0x32
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2302      	movs	r3, #2
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <main+0x74>)
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <main+0x70>)
 80011d6:	f001 fc63 	bl	8002aa0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADDRESS, LIS2DE_CTRL_4, sizeof(LIS2DE_CTRL_4), 50);
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <main+0x68>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b299      	uxth	r1, r3
 80011e0:	2332      	movs	r3, #50	; 0x32
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2302      	movs	r3, #2
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <main+0x78>)
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <main+0x70>)
 80011ea:	f001 fc59 	bl	8002aa0 <HAL_I2C_Master_Transmit>

  HAL_TIM_Base_Start_IT(&htim10);
 80011ee:	4807      	ldr	r0, [pc, #28]	; (800120c <main+0x7c>)
 80011f0:	f002 ff90 	bl	8004114 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <main+0x64>
 80011f6:	bf00      	nop
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000004 	.word	0x20000004
 8001200:	20000210 	.word	0x20000210
 8001204:	20000008 	.word	0x20000008
 8001208:	2000000c 	.word	0x2000000c
 800120c:	20000264 	.word	0x20000264

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	; 0x50
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	2230      	movs	r2, #48	; 0x30
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f004 fa32 	bl	8005688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <SystemClock_Config+0xd0>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	4a28      	ldr	r2, [pc, #160]	; (80012e0 <SystemClock_Config+0xd0>)
 800123e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001242:	6413      	str	r3, [r2, #64]	; 0x40
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <SystemClock_Config+0xd0>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <SystemClock_Config+0xd4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800125c:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <SystemClock_Config+0xd4>)
 800125e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <SystemClock_Config+0xd4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001270:	2302      	movs	r3, #2
 8001272:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001274:	2301      	movs	r3, #1
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001278:	2310      	movs	r3, #16
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127c:	2302      	movs	r3, #2
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001280:	2300      	movs	r3, #0
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001284:	2310      	movs	r3, #16
 8001286:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001288:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800128c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800128e:	2304      	movs	r3, #4
 8001290:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001292:	2307      	movs	r3, #7
 8001294:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	4618      	mov	r0, r3
 800129c:	f002 fa52 	bl	8003744 <HAL_RCC_OscConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012a6:	f000 f929 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012aa:	230f      	movs	r3, #15
 80012ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ae:	2302      	movs	r3, #2
 80012b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2102      	movs	r1, #2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 fcb4 	bl	8003c34 <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012d2:	f000 f913 	bl	80014fc <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3750      	adds	r7, #80	; 0x50
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MX_I2C1_Init+0x50>)
 80012ee:	4a13      	ldr	r2, [pc, #76]	; (800133c <MX_I2C1_Init+0x54>)
 80012f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_I2C1_Init+0x50>)
 80012f4:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_I2C1_Init+0x58>)
 80012f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_I2C1_Init+0x50>)
 8001306:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <MX_I2C1_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_I2C1_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <MX_I2C1_Init+0x50>)
 8001326:	f001 fa77 	bl	8002818 <HAL_I2C_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001330:	f000 f8e4 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000210 	.word	0x20000210
 800133c:	40005400 	.word	0x40005400
 8001340:	000186a0 	.word	0x000186a0

08001344 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_TIM10_Init+0x40>)
 800134a:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <MX_TIM10_Init+0x44>)
 800134c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <MX_TIM10_Init+0x40>)
 8001350:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001354:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_TIM10_Init+0x40>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_TIM10_Init+0x40>)
 800135e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001362:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <MX_TIM10_Init+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_TIM10_Init+0x40>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <MX_TIM10_Init+0x40>)
 8001372:	f002 fe7f 	bl	8004074 <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800137c:	f000 f8be 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000264 	.word	0x20000264
 8001388:	40014400 	.word	0x40014400

0800138c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <MX_USART2_UART_Init+0x50>)
 8001394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800139c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013c4:	f003 f8cc 	bl	8004560 <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ce:	f000 f895 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200002ac 	.word	0x200002ac
 80013dc:	40004400 	.word	0x40004400

080013e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_DMA_Init+0x3c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <MX_DMA_Init+0x3c>)
 80013f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_DMA_Init+0x3c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2011      	movs	r0, #17
 8001408:	f000 fc2f 	bl	8001c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800140c:	2011      	movs	r0, #17
 800140e:	f000 fc48 	bl	8001ca2 <HAL_NVIC_EnableIRQ>

}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a25      	ldr	r2, [pc, #148]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2120      	movs	r1, #32
 80014aa:	4812      	ldr	r0, [pc, #72]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014ac:	f001 f99a 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_GPIO_Init+0xd8>)
 80014c8:	f001 f808 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014cc:	2320      	movs	r3, #32
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014e4:	f000 fffa 	bl	80024dc <HAL_GPIO_Init>

}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020800 	.word	0x40020800

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001504:	e7fe      	b.n	8001504 <Error_Handler+0x8>
	...

08001508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <HAL_MspInit+0x4c>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_MspInit+0x4c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_MspInit+0x4c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_MspInit+0x4c>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_MspInit+0x4c>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001546:	2007      	movs	r0, #7
 8001548:	f000 fb84 	bl	8001c54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a19      	ldr	r2, [pc, #100]	; (80015dc <HAL_I2C_MspInit+0x84>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d12c      	bne.n	80015d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <HAL_I2C_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <HAL_I2C_MspInit+0x88>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_I2C_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001596:	f44f 7340 	mov.w	r3, #768	; 0x300
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159c:	2312      	movs	r3, #18
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a8:	2304      	movs	r3, #4
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	480c      	ldr	r0, [pc, #48]	; (80015e4 <HAL_I2C_MspInit+0x8c>)
 80015b4:	f000 ff92 	bl	80024dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_I2C_MspInit+0x88>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_I2C_MspInit+0x88>)
 80015c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_I2C_MspInit+0x88>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40005400 	.word	0x40005400
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020400 	.word	0x40020400

080015e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_TIM_Base_MspInit+0x48>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d115      	bne.n	8001626 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_TIM_Base_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <HAL_TIM_Base_MspInit+0x4c>)
 8001604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_TIM_Base_MspInit+0x4c>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2019      	movs	r0, #25
 800161c:	f000 fb25 	bl	8001c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001620:	2019      	movs	r0, #25
 8001622:	f000 fb3e 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40014400 	.word	0x40014400
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a34      	ldr	r2, [pc, #208]	; (8001728 <HAL_UART_MspInit+0xf0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d162      	bne.n	8001720 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <HAL_UART_MspInit+0xf4>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a32      	ldr	r2, [pc, #200]	; (800172c <HAL_UART_MspInit+0xf4>)
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b30      	ldr	r3, [pc, #192]	; (800172c <HAL_UART_MspInit+0xf4>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b2c      	ldr	r3, [pc, #176]	; (800172c <HAL_UART_MspInit+0xf4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a2b      	ldr	r2, [pc, #172]	; (800172c <HAL_UART_MspInit+0xf4>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b29      	ldr	r3, [pc, #164]	; (800172c <HAL_UART_MspInit+0xf4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001692:	230c      	movs	r3, #12
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a2:	2307      	movs	r3, #7
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4820      	ldr	r0, [pc, #128]	; (8001730 <HAL_UART_MspInit+0xf8>)
 80016ae:	f000 ff15 	bl	80024dc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_UART_MspInit+0xfc>)
 80016b4:	4a20      	ldr	r2, [pc, #128]	; (8001738 <HAL_UART_MspInit+0x100>)
 80016b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_UART_MspInit+0xfc>)
 80016ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016be:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <HAL_UART_MspInit+0xfc>)
 80016c2:	2240      	movs	r2, #64	; 0x40
 80016c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_UART_MspInit+0xfc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_UART_MspInit+0xfc>)
 80016ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_UART_MspInit+0xfc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_UART_MspInit+0xfc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <HAL_UART_MspInit+0xfc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_UART_MspInit+0xfc>)
 80016e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016ec:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_UART_MspInit+0xfc>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016f4:	480f      	ldr	r0, [pc, #60]	; (8001734 <HAL_UART_MspInit+0xfc>)
 80016f6:	f000 faef 	bl	8001cd8 <HAL_DMA_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001700:	f7ff fefc 	bl	80014fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_UART_MspInit+0xfc>)
 8001708:	635a      	str	r2, [r3, #52]	; 0x34
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_UART_MspInit+0xfc>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	2026      	movs	r0, #38	; 0x26
 8001716:	f000 faa8 	bl	8001c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800171a:	2026      	movs	r0, #38	; 0x26
 800171c:	f000 fac1 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	; 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40004400 	.word	0x40004400
 800172c:	40023800 	.word	0x40023800
 8001730:	40020000 	.word	0x40020000
 8001734:	200002f0 	.word	0x200002f0
 8001738:	400260a0 	.word	0x400260a0

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <NMI_Handler+0x4>

08001742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <MemManage_Handler+0x4>

0800174e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <UsageFault_Handler+0x4>

0800175a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001788:	f000 f974 	bl	8001a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <DMA1_Stream6_IRQHandler+0x10>)
 8001796:	f000 fc37 	bl	8002008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200002f0 	.word	0x200002f0

080017a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017aa:	f002 fd15 	bl	80041d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000264 	.word	0x20000264

080017b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <USART2_IRQHandler+0x10>)
 80017be:	f002 ff9b 	bl	80046f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200002ac 	.word	0x200002ac

080017cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	return 1;
 80017d0:	2301      	movs	r3, #1
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_kill>:

int _kill(int pid, int sig)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017e6:	f003 ff25 	bl	8005634 <__errno>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2216      	movs	r2, #22
 80017ee:	601a      	str	r2, [r3, #0]
	return -1;
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_exit>:

void _exit (int status)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ffe7 	bl	80017dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800180e:	e7fe      	b.n	800180e <_exit+0x12>

08001810 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e00a      	b.n	8001838 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001822:	f3af 8000 	nop.w
 8001826:	4601      	mov	r1, r0
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	b2ca      	uxtb	r2, r1
 8001830:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf0      	blt.n	8001822 <_read+0x12>
	}

return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e009      	b.n	8001870 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbf1      	blt.n	800185c <_write+0x12>
	}
	return len;
 8001878:	687b      	ldr	r3, [r7, #4]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_close>:

int _close(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	return -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018aa:	605a      	str	r2, [r3, #4]
	return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_isatty>:

int _isatty(int file)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
	return 1;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
	return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f003 fe8a 	bl	8005634 <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20018000 	.word	0x20018000
 800194c:	00000400 	.word	0x00000400
 8001950:	20000350 	.word	0x20000350
 8001954:	20000368 	.word	0x20000368

08001958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001982:	490e      	ldr	r1, [pc, #56]	; (80019bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001984:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001998:	4c0b      	ldr	r4, [pc, #44]	; (80019c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019a6:	f7ff ffd7 	bl	8001958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019aa:	f003 fe49 	bl	8005640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ae:	f7ff fbef 	bl	8001190 <main>
  bx  lr    
 80019b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80019c0:	0800a4fc 	.word	0x0800a4fc
  ldr r2, =_sbss
 80019c4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80019c8:	20000368 	.word	0x20000368

080019cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_Init+0x40>)
 80019da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_Init+0x40>)
 80019e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_Init+0x40>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 f92b 	bl	8001c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f000 f808 	bl	8001a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a04:	f7ff fd80 	bl	8001508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_InitTick+0x54>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x58>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f943 	bl	8001cbe <HAL_SYSTICK_Config>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00e      	b.n	8001a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d80a      	bhi.n	8001a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f000 f90b 	bl	8001c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a54:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <HAL_InitTick+0x5c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000014 	.word	0x20000014
 8001a6c:	2000001c 	.word	0x2000001c
 8001a70:	20000018 	.word	0x20000018

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	2000001c 	.word	0x2000001c
 8001a98:	20000354 	.word	0x20000354

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000354 	.word	0x20000354

08001ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	db0b      	blt.n	8001b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <__NVIC_EnableIRQ+0x38>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	2001      	movs	r0, #1
 8001b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c20:	d301      	bcc.n	8001c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00f      	b.n	8001c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <SysTick_Config+0x40>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2e:	210f      	movs	r1, #15
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f7ff ff8e 	bl	8001b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <SysTick_Config+0x40>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SysTick_Config+0x40>)
 8001c40:	2207      	movs	r2, #7
 8001c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	e000e010 	.word	0xe000e010

08001c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff29 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7c:	f7ff ff3e 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7ff ff8e 	bl	8001ba8 <NVIC_EncodePriority>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff5d 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff31 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffa2 	bl	8001c10 <SysTick_Config>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff feda 	bl	8001a9c <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e099      	b.n	8001e28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d14:	e00f      	b.n	8001d36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d16:	f7ff fec1 	bl	8001a9c <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b05      	cmp	r3, #5
 8001d22:	d908      	bls.n	8001d36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e078      	b.n	8001e28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1e8      	bne.n	8001d16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <HAL_DMA_Init+0x158>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d107      	bne.n	8001da0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f023 0307 	bic.w	r3, r3, #7
 8001db6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d117      	bne.n	8001dfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00e      	beq.n	8001dfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fb01 	bl	80023e4 <DMA_CheckFifoParam>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2240      	movs	r2, #64	; 0x40
 8001dec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001df6:	2301      	movs	r3, #1
 8001df8:	e016      	b.n	8001e28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fab8 	bl	8002378 <DMA_CalcBaseAndBitshift>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	223f      	movs	r2, #63	; 0x3f
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	f010803f 	.word	0xf010803f

08001e34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_DMA_Start_IT+0x26>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e040      	b.n	8001edc <HAL_DMA_Start_IT+0xa8>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d12f      	bne.n	8001ece <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2202      	movs	r2, #2
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 fa4a 	bl	800231c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	223f      	movs	r2, #63	; 0x3f
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0216 	orr.w	r2, r2, #22
 8001ea2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0208 	orr.w	r2, r2, #8
 8001eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e005      	b.n	8001eda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ef2:	f7ff fdd3 	bl	8001a9c <HAL_GetTick>
 8001ef6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d008      	beq.n	8001f16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e052      	b.n	8001fbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0216 	bic.w	r2, r2, #22
 8001f24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <HAL_DMA_Abort+0x62>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0208 	bic.w	r2, r2, #8
 8001f54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f66:	e013      	b.n	8001f90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f68:	f7ff fd98 	bl	8001a9c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d90c      	bls.n	8001f90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2203      	movs	r2, #3
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e015      	b.n	8001fbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1e4      	bne.n	8001f68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa2:	223f      	movs	r2, #63	; 0x3f
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d004      	beq.n	8001fe2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2280      	movs	r2, #128	; 0x80
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00c      	b.n	8001ffc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2205      	movs	r2, #5
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002014:	4b8e      	ldr	r3, [pc, #568]	; (8002250 <HAL_DMA_IRQHandler+0x248>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a8e      	ldr	r2, [pc, #568]	; (8002254 <HAL_DMA_IRQHandler+0x24c>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0a9b      	lsrs	r3, r3, #10
 8002020:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002032:	2208      	movs	r2, #8
 8002034:	409a      	lsls	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01a      	beq.n	8002074 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d013      	beq.n	8002074 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0204 	bic.w	r2, r2, #4
 800205a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	2208      	movs	r2, #8
 8002062:	409a      	lsls	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	2201      	movs	r2, #1
 800207a:	409a      	lsls	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d012      	beq.n	80020aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002096:	2201      	movs	r2, #1
 8002098:	409a      	lsls	r2, r3
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f043 0202 	orr.w	r2, r3, #2
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ae:	2204      	movs	r2, #4
 80020b0:	409a      	lsls	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d012      	beq.n	80020e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	2204      	movs	r2, #4
 80020ce:	409a      	lsls	r2, r3
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	f043 0204 	orr.w	r2, r3, #4
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e4:	2210      	movs	r2, #16
 80020e6:	409a      	lsls	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d043      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d03c      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002102:	2210      	movs	r2, #16
 8002104:	409a      	lsls	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d018      	beq.n	800214a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d108      	bne.n	8002138 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d024      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
 8002136:	e01f      	b.n	8002178 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01b      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
 8002148:	e016      	b.n	8002178 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0208 	bic.w	r2, r2, #8
 8002166:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	2220      	movs	r2, #32
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 808f 	beq.w	80022a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 8087 	beq.w	80022a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	2220      	movs	r2, #32
 80021a0:	409a      	lsls	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d136      	bne.n	8002220 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0216 	bic.w	r2, r2, #22
 80021c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <HAL_DMA_IRQHandler+0x1da>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0208 	bic.w	r2, r2, #8
 80021f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	223f      	movs	r2, #63	; 0x3f
 80021f8:	409a      	lsls	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002212:	2b00      	cmp	r3, #0
 8002214:	d07e      	beq.n	8002314 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4798      	blx	r3
        }
        return;
 800221e:	e079      	b.n	8002314 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d01d      	beq.n	800226a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10d      	bne.n	8002258 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	2b00      	cmp	r3, #0
 8002242:	d031      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
 800224c:	e02c      	b.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
 800224e:	bf00      	nop
 8002250:	20000014 	.word	0x20000014
 8002254:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d023      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	4798      	blx	r3
 8002268:	e01e      	b.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10f      	bne.n	8002298 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0210 	bic.w	r2, r2, #16
 8002286:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d032      	beq.n	8002316 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d022      	beq.n	8002302 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2205      	movs	r2, #5
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	3301      	adds	r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d307      	bcc.n	80022f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f2      	bne.n	80022d4 <HAL_DMA_IRQHandler+0x2cc>
 80022ee:	e000      	b.n	80022f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4798      	blx	r3
 8002312:	e000      	b.n	8002316 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002314:	bf00      	nop
    }
  }
}
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002338:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d108      	bne.n	800235c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800235a:	e007      	b.n	800236c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	60da      	str	r2, [r3, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	3b10      	subs	r3, #16
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <DMA_CalcBaseAndBitshift+0x64>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002392:	4a13      	ldr	r2, [pc, #76]	; (80023e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4413      	add	r3, r2
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d909      	bls.n	80023ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ae:	f023 0303 	bic.w	r3, r3, #3
 80023b2:	1d1a      	adds	r2, r3, #4
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	659a      	str	r2, [r3, #88]	; 0x58
 80023b8:	e007      	b.n	80023ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	aaaaaaab 	.word	0xaaaaaaab
 80023e0:	0800a03c 	.word	0x0800a03c

080023e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11f      	bne.n	800243e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d856      	bhi.n	80024b2 <DMA_CheckFifoParam+0xce>
 8002404:	a201      	add	r2, pc, #4	; (adr r2, 800240c <DMA_CheckFifoParam+0x28>)
 8002406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240a:	bf00      	nop
 800240c:	0800241d 	.word	0x0800241d
 8002410:	0800242f 	.word	0x0800242f
 8002414:	0800241d 	.word	0x0800241d
 8002418:	080024b3 	.word	0x080024b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d046      	beq.n	80024b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242c:	e043      	b.n	80024b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002436:	d140      	bne.n	80024ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243c:	e03d      	b.n	80024ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002446:	d121      	bne.n	800248c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d837      	bhi.n	80024be <DMA_CheckFifoParam+0xda>
 800244e:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <DMA_CheckFifoParam+0x70>)
 8002450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002454:	08002465 	.word	0x08002465
 8002458:	0800246b 	.word	0x0800246b
 800245c:	08002465 	.word	0x08002465
 8002460:	0800247d 	.word	0x0800247d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      break;
 8002468:	e030      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d025      	beq.n	80024c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247a:	e022      	b.n	80024c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002484:	d11f      	bne.n	80024c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800248a:	e01c      	b.n	80024c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d903      	bls.n	800249a <DMA_CheckFifoParam+0xb6>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d003      	beq.n	80024a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002498:	e018      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
      break;
 800249e:	e015      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
      break;
 80024b0:	e00b      	b.n	80024ca <DMA_CheckFifoParam+0xe6>
      break;
 80024b2:	bf00      	nop
 80024b4:	e00a      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      break;
 80024b6:	bf00      	nop
 80024b8:	e008      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      break;
 80024ba:	bf00      	nop
 80024bc:	e006      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      break;
 80024be:	bf00      	nop
 80024c0:	e004      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      break;
 80024c2:	bf00      	nop
 80024c4:	e002      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      break;   
 80024c6:	bf00      	nop
 80024c8:	e000      	b.n	80024cc <DMA_CheckFifoParam+0xe8>
      break;
 80024ca:	bf00      	nop
    }
  } 
  
  return status; 
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e159      	b.n	80027ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f8:	2201      	movs	r2, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	429a      	cmp	r2, r3
 8002512:	f040 8148 	bne.w	80027a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d005      	beq.n	800252e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	2b02      	cmp	r3, #2
 800252c:	d130      	bne.n	8002590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002564:	2201      	movs	r2, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 0201 	and.w	r2, r3, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b03      	cmp	r3, #3
 800259a:	d017      	beq.n	80025cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d123      	bne.n	8002620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	220f      	movs	r2, #15
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0203 	and.w	r2, r3, #3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80a2 	beq.w	80027a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <HAL_GPIO_Init+0x2e8>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a56      	ldr	r2, [pc, #344]	; (80027c4 <HAL_GPIO_Init+0x2e8>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b54      	ldr	r3, [pc, #336]	; (80027c4 <HAL_GPIO_Init+0x2e8>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800267e:	4a52      	ldr	r2, [pc, #328]	; (80027c8 <HAL_GPIO_Init+0x2ec>)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a49      	ldr	r2, [pc, #292]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d019      	beq.n	80026de <HAL_GPIO_Init+0x202>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a48      	ldr	r2, [pc, #288]	; (80027d0 <HAL_GPIO_Init+0x2f4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_GPIO_Init+0x1fe>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a47      	ldr	r2, [pc, #284]	; (80027d4 <HAL_GPIO_Init+0x2f8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00d      	beq.n	80026d6 <HAL_GPIO_Init+0x1fa>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a46      	ldr	r2, [pc, #280]	; (80027d8 <HAL_GPIO_Init+0x2fc>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d007      	beq.n	80026d2 <HAL_GPIO_Init+0x1f6>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a45      	ldr	r2, [pc, #276]	; (80027dc <HAL_GPIO_Init+0x300>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_GPIO_Init+0x1f2>
 80026ca:	2304      	movs	r3, #4
 80026cc:	e008      	b.n	80026e0 <HAL_GPIO_Init+0x204>
 80026ce:	2307      	movs	r3, #7
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x204>
 80026d2:	2303      	movs	r3, #3
 80026d4:	e004      	b.n	80026e0 <HAL_GPIO_Init+0x204>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_Init+0x204>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x204>
 80026de:	2300      	movs	r3, #0
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f002 0203 	and.w	r2, r2, #3
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4093      	lsls	r3, r2
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f0:	4935      	ldr	r1, [pc, #212]	; (80027c8 <HAL_GPIO_Init+0x2ec>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fe:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <HAL_GPIO_Init+0x304>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002722:	4a2f      	ldr	r2, [pc, #188]	; (80027e0 <HAL_GPIO_Init+0x304>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002728:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_GPIO_Init+0x304>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800274c:	4a24      	ldr	r2, [pc, #144]	; (80027e0 <HAL_GPIO_Init+0x304>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002752:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <HAL_GPIO_Init+0x304>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002776:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <HAL_GPIO_Init+0x304>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_GPIO_Init+0x304>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a0:	4a0f      	ldr	r2, [pc, #60]	; (80027e0 <HAL_GPIO_Init+0x304>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3301      	adds	r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b0f      	cmp	r3, #15
 80027b0:	f67f aea2 	bls.w	80024f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40013800 	.word	0x40013800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40013c00 	.word	0x40013c00

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
 80027f0:	4613      	mov	r3, r2
 80027f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002800:	e003      	b.n	800280a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	041a      	lsls	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	619a      	str	r2, [r3, #24]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e12b      	b.n	8002a82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe fe8a 	bl	8001558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800286a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800287a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800287c:	f001 fbd2 	bl	8004024 <HAL_RCC_GetPCLK1Freq>
 8002880:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4a81      	ldr	r2, [pc, #516]	; (8002a8c <HAL_I2C_Init+0x274>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d807      	bhi.n	800289c <HAL_I2C_Init+0x84>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4a80      	ldr	r2, [pc, #512]	; (8002a90 <HAL_I2C_Init+0x278>)
 8002890:	4293      	cmp	r3, r2
 8002892:	bf94      	ite	ls
 8002894:	2301      	movls	r3, #1
 8002896:	2300      	movhi	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	e006      	b.n	80028aa <HAL_I2C_Init+0x92>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a7d      	ldr	r2, [pc, #500]	; (8002a94 <HAL_I2C_Init+0x27c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bf94      	ite	ls
 80028a4:	2301      	movls	r3, #1
 80028a6:	2300      	movhi	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0e7      	b.n	8002a82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a78      	ldr	r2, [pc, #480]	; (8002a98 <HAL_I2C_Init+0x280>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	0c9b      	lsrs	r3, r3, #18
 80028bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a6a      	ldr	r2, [pc, #424]	; (8002a8c <HAL_I2C_Init+0x274>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d802      	bhi.n	80028ec <HAL_I2C_Init+0xd4>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	3301      	adds	r3, #1
 80028ea:	e009      	b.n	8002900 <HAL_I2C_Init+0xe8>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	4a69      	ldr	r2, [pc, #420]	; (8002a9c <HAL_I2C_Init+0x284>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	099b      	lsrs	r3, r3, #6
 80028fe:	3301      	adds	r3, #1
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	430b      	orrs	r3, r1
 8002906:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002912:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	495c      	ldr	r1, [pc, #368]	; (8002a8c <HAL_I2C_Init+0x274>)
 800291c:	428b      	cmp	r3, r1
 800291e:	d819      	bhi.n	8002954 <HAL_I2C_Init+0x13c>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e59      	subs	r1, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fbb1 f3f3 	udiv	r3, r1, r3
 800292e:	1c59      	adds	r1, r3, #1
 8002930:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002934:	400b      	ands	r3, r1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_I2C_Init+0x138>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1e59      	subs	r1, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fbb1 f3f3 	udiv	r3, r1, r3
 8002948:	3301      	adds	r3, #1
 800294a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294e:	e051      	b.n	80029f4 <HAL_I2C_Init+0x1dc>
 8002950:	2304      	movs	r3, #4
 8002952:	e04f      	b.n	80029f4 <HAL_I2C_Init+0x1dc>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d111      	bne.n	8002980 <HAL_I2C_Init+0x168>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1e58      	subs	r0, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	440b      	add	r3, r1
 800296a:	fbb0 f3f3 	udiv	r3, r0, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	e012      	b.n	80029a6 <HAL_I2C_Init+0x18e>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1e58      	subs	r0, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6859      	ldr	r1, [r3, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	0099      	lsls	r1, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	fbb0 f3f3 	udiv	r3, r0, r3
 8002996:	3301      	adds	r3, #1
 8002998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Init+0x196>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e022      	b.n	80029f4 <HAL_I2C_Init+0x1dc>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10e      	bne.n	80029d4 <HAL_I2C_Init+0x1bc>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e58      	subs	r0, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	440b      	add	r3, r1
 80029c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c8:	3301      	adds	r3, #1
 80029ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d2:	e00f      	b.n	80029f4 <HAL_I2C_Init+0x1dc>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1e58      	subs	r0, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	0099      	lsls	r1, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ea:	3301      	adds	r3, #1
 80029ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	6809      	ldr	r1, [r1, #0]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6911      	ldr	r1, [r2, #16]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68d2      	ldr	r2, [r2, #12]
 8002a2e:	4311      	orrs	r1, r2
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	430b      	orrs	r3, r1
 8002a36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	000186a0 	.word	0x000186a0
 8002a90:	001e847f 	.word	0x001e847f
 8002a94:	003d08ff 	.word	0x003d08ff
 8002a98:	431bde83 	.word	0x431bde83
 8002a9c:	10624dd3 	.word	0x10624dd3

08002aa0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	460b      	mov	r3, r1
 8002aae:	817b      	strh	r3, [r7, #10]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ab4:	f7fe fff2 	bl	8001a9c <HAL_GetTick>
 8002ab8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	f040 80e0 	bne.w	8002c88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	2319      	movs	r3, #25
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4970      	ldr	r1, [pc, #448]	; (8002c94 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fc58 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e0d3      	b.n	8002c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_I2C_Master_Transmit+0x50>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e0cc      	b.n	8002c8a <HAL_I2C_Master_Transmit+0x1ea>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d007      	beq.n	8002b16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2221      	movs	r2, #33	; 0x21
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2210      	movs	r2, #16
 8002b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	893a      	ldrh	r2, [r7, #8]
 8002b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4a50      	ldr	r2, [pc, #320]	; (8002c98 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b58:	8979      	ldrh	r1, [r7, #10]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	6a3a      	ldr	r2, [r7, #32]
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fac2 	bl	80030e8 <I2C_MasterRequestWrite>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e08d      	b.n	8002c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b84:	e066      	b.n	8002c54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	6a39      	ldr	r1, [r7, #32]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fcd2 	bl	8003534 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00d      	beq.n	8002bb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d107      	bne.n	8002bae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e06b      	b.n	8002c8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	781a      	ldrb	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d11b      	bne.n	8002c28 <HAL_I2C_Master_Transmit+0x188>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d017      	beq.n	8002c28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	6a39      	ldr	r1, [r7, #32]
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fcc2 	bl	80035b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00d      	beq.n	8002c54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d107      	bne.n	8002c50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e01a      	b.n	8002c8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d194      	bne.n	8002b86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e000      	b.n	8002c8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c88:	2302      	movs	r3, #2
  }
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	00100002 	.word	0x00100002
 8002c98:	ffff0000 	.word	0xffff0000

08002c9c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08c      	sub	sp, #48	; 0x30
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	460b      	mov	r3, r1
 8002caa:	817b      	strh	r3, [r7, #10]
 8002cac:	4613      	mov	r3, r2
 8002cae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cb0:	f7fe fef4 	bl	8001a9c <HAL_GetTick>
 8002cb4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	f040 820b 	bne.w	80030da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	2319      	movs	r3, #25
 8002cca:	2201      	movs	r2, #1
 8002ccc:	497c      	ldr	r1, [pc, #496]	; (8002ec0 <HAL_I2C_Master_Receive+0x224>)
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fb5a 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e1fe      	b.n	80030dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_I2C_Master_Receive+0x50>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e1f7      	b.n	80030dc <HAL_I2C_Master_Receive+0x440>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d007      	beq.n	8002d12 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0201 	orr.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2222      	movs	r2, #34	; 0x22
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	893a      	ldrh	r2, [r7, #8]
 8002d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4a5c      	ldr	r2, [pc, #368]	; (8002ec4 <HAL_I2C_Master_Receive+0x228>)
 8002d52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d54:	8979      	ldrh	r1, [r7, #10]
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fa46 	bl	80031ec <I2C_MasterRequestRead>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e1b8      	b.n	80030dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d113      	bne.n	8002d9a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	623b      	str	r3, [r7, #32]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	e18c      	b.n	80030b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d11b      	bne.n	8002dda <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e16c      	b.n	80030b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d11b      	bne.n	8002e1a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e02:	2300      	movs	r3, #0
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	e14c      	b.n	80030b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e40:	e138      	b.n	80030b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	f200 80f1 	bhi.w	800302e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d123      	bne.n	8002e9c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fbed 	bl	8003638 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e139      	b.n	80030dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e9a:	e10b      	b.n	80030b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d14e      	bne.n	8002f42 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	2200      	movs	r2, #0
 8002eac:	4906      	ldr	r1, [pc, #24]	; (8002ec8 <HAL_I2C_Master_Receive+0x22c>)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fa6a 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e10e      	b.n	80030dc <HAL_I2C_Master_Receive+0x440>
 8002ebe:	bf00      	nop
 8002ec0:	00100002 	.word	0x00100002
 8002ec4:	ffff0000 	.word	0xffff0000
 8002ec8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f40:	e0b8      	b.n	80030b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	2200      	movs	r2, #0
 8002f4a:	4966      	ldr	r1, [pc, #408]	; (80030e4 <HAL_I2C_Master_Receive+0x448>)
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fa1b 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0bf      	b.n	80030dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	494f      	ldr	r1, [pc, #316]	; (80030e4 <HAL_I2C_Master_Receive+0x448>)
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f9ed 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e091      	b.n	80030dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800302c:	e042      	b.n	80030b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800302e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003030:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fb00 	bl	8003638 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e04c      	b.n	80030dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b04      	cmp	r3, #4
 8003080:	d118      	bne.n	80030b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f47f aec2 	bne.w	8002e42 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e000      	b.n	80030dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80030da:	2302      	movs	r3, #2
  }
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3728      	adds	r7, #40	; 0x28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	00010004 	.word	0x00010004

080030e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	460b      	mov	r3, r1
 80030f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b08      	cmp	r3, #8
 8003102:	d006      	beq.n	8003112 <I2C_MasterRequestWrite+0x2a>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d003      	beq.n	8003112 <I2C_MasterRequestWrite+0x2a>
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003110:	d108      	bne.n	8003124 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e00b      	b.n	800313c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	2b12      	cmp	r3, #18
 800312a:	d107      	bne.n	800313c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800313a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f91d 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00d      	beq.n	8003170 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003162:	d103      	bne.n	800316c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800316a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e035      	b.n	80031dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003178:	d108      	bne.n	800318c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800317a:	897b      	ldrh	r3, [r7, #10]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003188:	611a      	str	r2, [r3, #16]
 800318a:	e01b      	b.n	80031c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800318c:	897b      	ldrh	r3, [r7, #10]
 800318e:	11db      	asrs	r3, r3, #7
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f003 0306 	and.w	r3, r3, #6
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f063 030f 	orn	r3, r3, #15
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	490e      	ldr	r1, [pc, #56]	; (80031e4 <I2C_MasterRequestWrite+0xfc>)
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f943 	bl	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e010      	b.n	80031dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031ba:	897b      	ldrh	r3, [r7, #10]
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	4907      	ldr	r1, [pc, #28]	; (80031e8 <I2C_MasterRequestWrite+0x100>)
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f933 	bl	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	00010008 	.word	0x00010008
 80031e8:	00010002 	.word	0x00010002

080031ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	460b      	mov	r3, r1
 80031fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003210:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d006      	beq.n	8003226 <I2C_MasterRequestRead+0x3a>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d003      	beq.n	8003226 <I2C_MasterRequestRead+0x3a>
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003224:	d108      	bne.n	8003238 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e00b      	b.n	8003250 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	2b11      	cmp	r3, #17
 800323e:	d107      	bne.n	8003250 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800324e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f893 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00d      	beq.n	8003284 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003276:	d103      	bne.n	8003280 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e079      	b.n	8003378 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800328c:	d108      	bne.n	80032a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800328e:	897b      	ldrh	r3, [r7, #10]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	b2da      	uxtb	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	611a      	str	r2, [r3, #16]
 800329e:	e05f      	b.n	8003360 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032a0:	897b      	ldrh	r3, [r7, #10]
 80032a2:	11db      	asrs	r3, r3, #7
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f003 0306 	and.w	r3, r3, #6
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f063 030f 	orn	r3, r3, #15
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4930      	ldr	r1, [pc, #192]	; (8003380 <I2C_MasterRequestRead+0x194>)
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f8b9 	bl	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e054      	b.n	8003378 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4929      	ldr	r1, [pc, #164]	; (8003384 <I2C_MasterRequestRead+0x198>)
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f8a9 	bl	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e044      	b.n	8003378 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003312:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 f831 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00d      	beq.n	8003348 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333a:	d103      	bne.n	8003344 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e017      	b.n	8003378 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003348:	897b      	ldrh	r3, [r7, #10]
 800334a:	11db      	asrs	r3, r3, #7
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f003 0306 	and.w	r3, r3, #6
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f063 030e 	orn	r3, r3, #14
 8003358:	b2da      	uxtb	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4907      	ldr	r1, [pc, #28]	; (8003384 <I2C_MasterRequestRead+0x198>)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f865 	bl	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	00010008 	.word	0x00010008
 8003384:	00010002 	.word	0x00010002

08003388 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003398:	e025      	b.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d021      	beq.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a2:	f7fe fb7b 	bl	8001a9c <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d302      	bcc.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d116      	bne.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f043 0220 	orr.w	r2, r3, #32
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e023      	b.n	800342e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	0c1b      	lsrs	r3, r3, #16
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d10d      	bne.n	800340c <I2C_WaitOnFlagUntilTimeout+0x84>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	43da      	mvns	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4013      	ands	r3, r2
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	bf0c      	ite	eq
 8003402:	2301      	moveq	r3, #1
 8003404:	2300      	movne	r3, #0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	e00c      	b.n	8003426 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	43da      	mvns	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4013      	ands	r3, r2
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	bf0c      	ite	eq
 800341e:	2301      	moveq	r3, #1
 8003420:	2300      	movne	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	429a      	cmp	r2, r3
 800342a:	d0b6      	beq.n	800339a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003444:	e051      	b.n	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003454:	d123      	bne.n	800349e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003464:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800346e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f043 0204 	orr.w	r2, r3, #4
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e046      	b.n	800352c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d021      	beq.n	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a6:	f7fe faf9 	bl	8001a9c <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d302      	bcc.n	80034bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d116      	bne.n	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e020      	b.n	800352c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d10c      	bne.n	800350e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	43da      	mvns	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4013      	ands	r3, r2
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf14      	ite	ne
 8003506:	2301      	movne	r3, #1
 8003508:	2300      	moveq	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	e00b      	b.n	8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	43da      	mvns	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4013      	ands	r3, r2
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf14      	ite	ne
 8003520:	2301      	movne	r3, #1
 8003522:	2300      	moveq	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d18d      	bne.n	8003446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003540:	e02d      	b.n	800359e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f8ce 	bl	80036e4 <I2C_IsAcknowledgeFailed>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e02d      	b.n	80035ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d021      	beq.n	800359e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355a:	f7fe fa9f 	bl	8001a9c <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	429a      	cmp	r2, r3
 8003568:	d302      	bcc.n	8003570 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d116      	bne.n	800359e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f043 0220 	orr.w	r2, r3, #32
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e007      	b.n	80035ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d1ca      	bne.n	8003542 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035c2:	e02d      	b.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f88d 	bl	80036e4 <I2C_IsAcknowledgeFailed>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e02d      	b.n	8003630 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035da:	d021      	beq.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035dc:	f7fe fa5e 	bl	8001a9c <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d302      	bcc.n	80035f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d116      	bne.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e007      	b.n	8003630 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d1ca      	bne.n	80035c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003644:	e042      	b.n	80036cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b10      	cmp	r3, #16
 8003652:	d119      	bne.n	8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0210 	mvn.w	r2, #16
 800365c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e029      	b.n	80036dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003688:	f7fe fa08 	bl	8001a9c <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d116      	bne.n	80036cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e007      	b.n	80036dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d6:	2b40      	cmp	r3, #64	; 0x40
 80036d8:	d1b5      	bne.n	8003646 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fa:	d11b      	bne.n	8003734 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003704:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f043 0204 	orr.w	r2, r3, #4
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e267      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d075      	beq.n	800384e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003762:	4b88      	ldr	r3, [pc, #544]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b04      	cmp	r3, #4
 800376c:	d00c      	beq.n	8003788 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376e:	4b85      	ldr	r3, [pc, #532]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003776:	2b08      	cmp	r3, #8
 8003778:	d112      	bne.n	80037a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800377a:	4b82      	ldr	r3, [pc, #520]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003786:	d10b      	bne.n	80037a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003788:	4b7e      	ldr	r3, [pc, #504]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d05b      	beq.n	800384c <HAL_RCC_OscConfig+0x108>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d157      	bne.n	800384c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e242      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d106      	bne.n	80037b8 <HAL_RCC_OscConfig+0x74>
 80037aa:	4b76      	ldr	r3, [pc, #472]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a75      	ldr	r2, [pc, #468]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e01d      	b.n	80037f4 <HAL_RCC_OscConfig+0xb0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c0:	d10c      	bne.n	80037dc <HAL_RCC_OscConfig+0x98>
 80037c2:	4b70      	ldr	r3, [pc, #448]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a6f      	ldr	r2, [pc, #444]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	4b6d      	ldr	r3, [pc, #436]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a6c      	ldr	r2, [pc, #432]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e00b      	b.n	80037f4 <HAL_RCC_OscConfig+0xb0>
 80037dc:	4b69      	ldr	r3, [pc, #420]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a68      	ldr	r2, [pc, #416]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b66      	ldr	r3, [pc, #408]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a65      	ldr	r2, [pc, #404]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d013      	beq.n	8003824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fe f94e 	bl	8001a9c <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003804:	f7fe f94a 	bl	8001a9c <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	; 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e207      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003816:	4b5b      	ldr	r3, [pc, #364]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0xc0>
 8003822:	e014      	b.n	800384e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fe f93a 	bl	8001a9c <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800382c:	f7fe f936 	bl	8001a9c <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	; 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e1f3      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383e:	4b51      	ldr	r3, [pc, #324]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0xe8>
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d063      	beq.n	8003922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800385a:	4b4a      	ldr	r3, [pc, #296]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00b      	beq.n	800387e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003866:	4b47      	ldr	r3, [pc, #284]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800386e:	2b08      	cmp	r3, #8
 8003870:	d11c      	bne.n	80038ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003872:	4b44      	ldr	r3, [pc, #272]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d116      	bne.n	80038ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387e:	4b41      	ldr	r3, [pc, #260]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d005      	beq.n	8003896 <HAL_RCC_OscConfig+0x152>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d001      	beq.n	8003896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e1c7      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003896:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4937      	ldr	r1, [pc, #220]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038aa:	e03a      	b.n	8003922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d020      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b4:	4b34      	ldr	r3, [pc, #208]	; (8003988 <HAL_RCC_OscConfig+0x244>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7fe f8ef 	bl	8001a9c <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c2:	f7fe f8eb 	bl	8001a9c <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e1a8      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d4:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e0:	4b28      	ldr	r3, [pc, #160]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4925      	ldr	r1, [pc, #148]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	600b      	str	r3, [r1, #0]
 80038f4:	e015      	b.n	8003922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f6:	4b24      	ldr	r3, [pc, #144]	; (8003988 <HAL_RCC_OscConfig+0x244>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fe f8ce 	bl	8001a9c <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003904:	f7fe f8ca 	bl	8001a9c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e187      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003916:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d036      	beq.n	800399c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d016      	beq.n	8003964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_RCC_OscConfig+0x248>)
 8003938:	2201      	movs	r2, #1
 800393a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393c:	f7fe f8ae 	bl	8001a9c <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003944:	f7fe f8aa 	bl	8001a9c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e167      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x200>
 8003962:	e01b      	b.n	800399c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_OscConfig+0x248>)
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396a:	f7fe f897 	bl	8001a9c <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003970:	e00e      	b.n	8003990 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003972:	f7fe f893 	bl	8001a9c <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d907      	bls.n	8003990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e150      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
 8003984:	40023800 	.word	0x40023800
 8003988:	42470000 	.word	0x42470000
 800398c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003990:	4b88      	ldr	r3, [pc, #544]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ea      	bne.n	8003972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8097 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039aa:	2300      	movs	r3, #0
 80039ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ae:	4b81      	ldr	r3, [pc, #516]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10f      	bne.n	80039da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	4b7d      	ldr	r3, [pc, #500]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	4a7c      	ldr	r2, [pc, #496]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 80039c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ca:	4b7a      	ldr	r3, [pc, #488]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d6:	2301      	movs	r3, #1
 80039d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039da:	4b77      	ldr	r3, [pc, #476]	; (8003bb8 <HAL_RCC_OscConfig+0x474>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d118      	bne.n	8003a18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e6:	4b74      	ldr	r3, [pc, #464]	; (8003bb8 <HAL_RCC_OscConfig+0x474>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a73      	ldr	r2, [pc, #460]	; (8003bb8 <HAL_RCC_OscConfig+0x474>)
 80039ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f2:	f7fe f853 	bl	8001a9c <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fa:	f7fe f84f 	bl	8001a9c <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e10c      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0c:	4b6a      	ldr	r3, [pc, #424]	; (8003bb8 <HAL_RCC_OscConfig+0x474>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_OscConfig+0x2ea>
 8003a20:	4b64      	ldr	r3, [pc, #400]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	4a63      	ldr	r2, [pc, #396]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2c:	e01c      	b.n	8003a68 <HAL_RCC_OscConfig+0x324>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b05      	cmp	r3, #5
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x30c>
 8003a36:	4b5f      	ldr	r3, [pc, #380]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a5e      	ldr	r2, [pc, #376]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	f043 0304 	orr.w	r3, r3, #4
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
 8003a42:	4b5c      	ldr	r3, [pc, #368]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	4a5b      	ldr	r2, [pc, #364]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCC_OscConfig+0x324>
 8003a50:	4b58      	ldr	r3, [pc, #352]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	4a57      	ldr	r2, [pc, #348]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5c:	4b55      	ldr	r3, [pc, #340]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	4a54      	ldr	r2, [pc, #336]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a62:	f023 0304 	bic.w	r3, r3, #4
 8003a66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d015      	beq.n	8003a9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fe f814 	bl	8001a9c <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a78:	f7fe f810 	bl	8001a9c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e0cb      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8e:	4b49      	ldr	r3, [pc, #292]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0ee      	beq.n	8003a78 <HAL_RCC_OscConfig+0x334>
 8003a9a:	e014      	b.n	8003ac6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9c:	f7fd fffe 	bl	8001a9c <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa4:	f7fd fffa 	bl	8001a9c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e0b5      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aba:	4b3e      	ldr	r3, [pc, #248]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1ee      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003acc:	4b39      	ldr	r3, [pc, #228]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	4a38      	ldr	r2, [pc, #224]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80a1 	beq.w	8003c24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ae2:	4b34      	ldr	r3, [pc, #208]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d05c      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d141      	bne.n	8003b7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af6:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_RCC_OscConfig+0x478>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fd ffce 	bl	8001a9c <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b04:	f7fd ffca 	bl	8001a9c <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e087      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b16:	4b27      	ldr	r3, [pc, #156]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	019b      	lsls	r3, r3, #6
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	041b      	lsls	r3, r3, #16
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	061b      	lsls	r3, r3, #24
 8003b46:	491b      	ldr	r1, [pc, #108]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b4c:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <HAL_RCC_OscConfig+0x478>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b52:	f7fd ffa3 	bl	8001a9c <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5a:	f7fd ff9f 	bl	8001a9c <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e05c      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCC_OscConfig+0x416>
 8003b78:	e054      	b.n	8003c24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <HAL_RCC_OscConfig+0x478>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fd ff8c 	bl	8001a9c <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b88:	f7fd ff88 	bl	8001a9c <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e045      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x444>
 8003ba6:	e03d      	b.n	8003c24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d107      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e038      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40007000 	.word	0x40007000
 8003bbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <HAL_RCC_OscConfig+0x4ec>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d028      	beq.n	8003c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d121      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d11a      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d111      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d107      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800

08003c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0cc      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c48:	4b68      	ldr	r3, [pc, #416]	; (8003dec <HAL_RCC_ClockConfig+0x1b8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d90c      	bls.n	8003c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	4b65      	ldr	r3, [pc, #404]	; (8003dec <HAL_RCC_ClockConfig+0x1b8>)
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	4b63      	ldr	r3, [pc, #396]	; (8003dec <HAL_RCC_ClockConfig+0x1b8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e0b8      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d020      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c88:	4b59      	ldr	r3, [pc, #356]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a58      	ldr	r2, [pc, #352]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ca0:	4b53      	ldr	r3, [pc, #332]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4a52      	ldr	r2, [pc, #328]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cac:	4b50      	ldr	r3, [pc, #320]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	494d      	ldr	r1, [pc, #308]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d044      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d107      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	4b47      	ldr	r3, [pc, #284]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d119      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e07f      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d003      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d107      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf2:	4b3f      	ldr	r3, [pc, #252]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e06f      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d02:	4b3b      	ldr	r3, [pc, #236]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e067      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d12:	4b37      	ldr	r3, [pc, #220]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f023 0203 	bic.w	r2, r3, #3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4934      	ldr	r1, [pc, #208]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d24:	f7fd feba 	bl	8001a9c <HAL_GetTick>
 8003d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d2c:	f7fd feb6 	bl	8001a9c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e04f      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d42:	4b2b      	ldr	r3, [pc, #172]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 020c 	and.w	r2, r3, #12
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d1eb      	bne.n	8003d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d54:	4b25      	ldr	r3, [pc, #148]	; (8003dec <HAL_RCC_ClockConfig+0x1b8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d20c      	bcs.n	8003d7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b22      	ldr	r3, [pc, #136]	; (8003dec <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	4b20      	ldr	r3, [pc, #128]	; (8003dec <HAL_RCC_ClockConfig+0x1b8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e032      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d88:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4916      	ldr	r1, [pc, #88]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003da6:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	490e      	ldr	r1, [pc, #56]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dba:	f000 f821 	bl	8003e00 <HAL_RCC_GetSysClockFreq>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	490a      	ldr	r1, [pc, #40]	; (8003df4 <HAL_RCC_ClockConfig+0x1c0>)
 8003dcc:	5ccb      	ldrb	r3, [r1, r3]
 8003dce:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd2:	4a09      	ldr	r2, [pc, #36]	; (8003df8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_RCC_ClockConfig+0x1c8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fd fe1a 	bl	8001a14 <HAL_InitTick>

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40023c00 	.word	0x40023c00
 8003df0:	40023800 	.word	0x40023800
 8003df4:	0800a024 	.word	0x0800a024
 8003df8:	20000014 	.word	0x20000014
 8003dfc:	20000018 	.word	0x20000018

08003e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e04:	b094      	sub	sp, #80	; 0x50
 8003e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e10:	2300      	movs	r3, #0
 8003e12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e18:	4b79      	ldr	r3, [pc, #484]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d00d      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0x40>
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	f200 80e1 	bhi.w	8003fec <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0x34>
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d003      	beq.n	8003e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e32:	e0db      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e34:	4b73      	ldr	r3, [pc, #460]	; (8004004 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e38:	e0db      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e3a:	4b73      	ldr	r3, [pc, #460]	; (8004008 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e3e:	e0d8      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e40:	4b6f      	ldr	r3, [pc, #444]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e4a:	4b6d      	ldr	r3, [pc, #436]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d063      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e56:	4b6a      	ldr	r3, [pc, #424]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	099b      	lsrs	r3, r3, #6
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e72:	4622      	mov	r2, r4
 8003e74:	462b      	mov	r3, r5
 8003e76:	f04f 0000 	mov.w	r0, #0
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	0159      	lsls	r1, r3, #5
 8003e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e84:	0150      	lsls	r0, r2, #5
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	1a51      	subs	r1, r2, r1
 8003e8e:	6139      	str	r1, [r7, #16]
 8003e90:	4629      	mov	r1, r5
 8003e92:	eb63 0301 	sbc.w	r3, r3, r1
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ea4:	4659      	mov	r1, fp
 8003ea6:	018b      	lsls	r3, r1, #6
 8003ea8:	4651      	mov	r1, sl
 8003eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eae:	4651      	mov	r1, sl
 8003eb0:	018a      	lsls	r2, r1, #6
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	ebb2 0801 	subs.w	r8, r2, r1
 8003eb8:	4659      	mov	r1, fp
 8003eba:	eb63 0901 	sbc.w	r9, r3, r1
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ed2:	4690      	mov	r8, r2
 8003ed4:	4699      	mov	r9, r3
 8003ed6:	4623      	mov	r3, r4
 8003ed8:	eb18 0303 	adds.w	r3, r8, r3
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	462b      	mov	r3, r5
 8003ee0:	eb49 0303 	adc.w	r3, r9, r3
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	024b      	lsls	r3, r1, #9
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003efc:	4621      	mov	r1, r4
 8003efe:	024a      	lsls	r2, r1, #9
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f06:	2200      	movs	r2, #0
 8003f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f10:	f7fc fec2 	bl	8000c98 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4613      	mov	r3, r2
 8003f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f1c:	e058      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1e:	4b38      	ldr	r3, [pc, #224]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	099b      	lsrs	r3, r3, #6
 8003f24:	2200      	movs	r2, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	4611      	mov	r1, r2
 8003f2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	2300      	movs	r3, #0
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
 8003f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f38:	4642      	mov	r2, r8
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	f04f 0000 	mov.w	r0, #0
 8003f40:	f04f 0100 	mov.w	r1, #0
 8003f44:	0159      	lsls	r1, r3, #5
 8003f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f4a:	0150      	lsls	r0, r2, #5
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4641      	mov	r1, r8
 8003f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f56:	4649      	mov	r1, r9
 8003f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f70:	ebb2 040a 	subs.w	r4, r2, sl
 8003f74:	eb63 050b 	sbc.w	r5, r3, fp
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	00eb      	lsls	r3, r5, #3
 8003f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f86:	00e2      	lsls	r2, r4, #3
 8003f88:	4614      	mov	r4, r2
 8003f8a:	461d      	mov	r5, r3
 8003f8c:	4643      	mov	r3, r8
 8003f8e:	18e3      	adds	r3, r4, r3
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	464b      	mov	r3, r9
 8003f94:	eb45 0303 	adc.w	r3, r5, r3
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	028b      	lsls	r3, r1, #10
 8003faa:	4621      	mov	r1, r4
 8003fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	028a      	lsls	r2, r1, #10
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fba:	2200      	movs	r2, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	61fa      	str	r2, [r7, #28]
 8003fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fc4:	f7fc fe68 	bl	8000c98 <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4613      	mov	r3, r2
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	0c1b      	lsrs	r3, r3, #16
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	3301      	adds	r3, #1
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fea:	e002      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3750      	adds	r7, #80	; 0x50
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffe:	bf00      	nop
 8004000:	40023800 	.word	0x40023800
 8004004:	00f42400 	.word	0x00f42400
 8004008:	007a1200 	.word	0x007a1200

0800400c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <HAL_RCC_GetHCLKFreq+0x14>)
 8004012:	681b      	ldr	r3, [r3, #0]
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000014 	.word	0x20000014

08004024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004028:	f7ff fff0 	bl	800400c <HAL_RCC_GetHCLKFreq>
 800402c:	4602      	mov	r2, r0
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	0a9b      	lsrs	r3, r3, #10
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	4903      	ldr	r1, [pc, #12]	; (8004048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800403a:	5ccb      	ldrb	r3, [r1, r3]
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40023800 	.word	0x40023800
 8004048:	0800a034 	.word	0x0800a034

0800404c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004050:	f7ff ffdc 	bl	800400c <HAL_RCC_GetHCLKFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	0b5b      	lsrs	r3, r3, #13
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	4903      	ldr	r1, [pc, #12]	; (8004070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004068:	4618      	mov	r0, r3
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40023800 	.word	0x40023800
 8004070:	0800a034 	.word	0x0800a034

08004074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e041      	b.n	800410a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd faa4 	bl	80015e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4619      	mov	r1, r3
 80040b2:	4610      	mov	r0, r2
 80040b4:	f000 f9c0 	bl	8004438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	d001      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e044      	b.n	80041b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d018      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x6c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004156:	d013      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x6c>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1a      	ldr	r2, [pc, #104]	; (80041c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00e      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x6c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a19      	ldr	r2, [pc, #100]	; (80041cc <HAL_TIM_Base_Start_IT+0xb8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d009      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x6c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a17      	ldr	r2, [pc, #92]	; (80041d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x6c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a16      	ldr	r2, [pc, #88]	; (80041d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d111      	bne.n	80041a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b06      	cmp	r3, #6
 8004190:	d010      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a2:	e007      	b.n	80041b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40010000 	.word	0x40010000
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800
 80041d0:	40000c00 	.word	0x40000c00
 80041d4:	40014000 	.word	0x40014000

080041d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d122      	bne.n	8004234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d11b      	bne.n	8004234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0202 	mvn.w	r2, #2
 8004204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f8ee 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 8004220:	e005      	b.n	800422e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f8e0 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f8f1 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b04      	cmp	r3, #4
 8004240:	d122      	bne.n	8004288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d11b      	bne.n	8004288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0204 	mvn.w	r2, #4
 8004258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2202      	movs	r2, #2
 800425e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8c4 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 8004274:	e005      	b.n	8004282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f8b6 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f8c7 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b08      	cmp	r3, #8
 8004294:	d122      	bne.n	80042dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d11b      	bne.n	80042dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0208 	mvn.w	r2, #8
 80042ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2204      	movs	r2, #4
 80042b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f89a 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 80042c8:	e005      	b.n	80042d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f88c 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f89d 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d122      	bne.n	8004330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d11b      	bne.n	8004330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0210 	mvn.w	r2, #16
 8004300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2208      	movs	r2, #8
 8004306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f870 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 800431c:	e005      	b.n	800432a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f862 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f873 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b01      	cmp	r3, #1
 800433c:	d10e      	bne.n	800435c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0201 	mvn.w	r2, #1
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fc fe56 	bl	8001008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004366:	2b80      	cmp	r3, #128	; 0x80
 8004368:	d10e      	bne.n	8004388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004374:	2b80      	cmp	r3, #128	; 0x80
 8004376:	d107      	bne.n	8004388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8e2 	bl	800454c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	d10e      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d107      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f838 	bl	8004424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d10e      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d107      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0220 	mvn.w	r2, #32
 80043d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f8ac 	bl	8004538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a34      	ldr	r2, [pc, #208]	; (800451c <TIM_Base_SetConfig+0xe4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00f      	beq.n	8004470 <TIM_Base_SetConfig+0x38>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004456:	d00b      	beq.n	8004470 <TIM_Base_SetConfig+0x38>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a31      	ldr	r2, [pc, #196]	; (8004520 <TIM_Base_SetConfig+0xe8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d007      	beq.n	8004470 <TIM_Base_SetConfig+0x38>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a30      	ldr	r2, [pc, #192]	; (8004524 <TIM_Base_SetConfig+0xec>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d003      	beq.n	8004470 <TIM_Base_SetConfig+0x38>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a2f      	ldr	r2, [pc, #188]	; (8004528 <TIM_Base_SetConfig+0xf0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d108      	bne.n	8004482 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a25      	ldr	r2, [pc, #148]	; (800451c <TIM_Base_SetConfig+0xe4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01b      	beq.n	80044c2 <TIM_Base_SetConfig+0x8a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004490:	d017      	beq.n	80044c2 <TIM_Base_SetConfig+0x8a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a22      	ldr	r2, [pc, #136]	; (8004520 <TIM_Base_SetConfig+0xe8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <TIM_Base_SetConfig+0x8a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a21      	ldr	r2, [pc, #132]	; (8004524 <TIM_Base_SetConfig+0xec>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00f      	beq.n	80044c2 <TIM_Base_SetConfig+0x8a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a20      	ldr	r2, [pc, #128]	; (8004528 <TIM_Base_SetConfig+0xf0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00b      	beq.n	80044c2 <TIM_Base_SetConfig+0x8a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a1f      	ldr	r2, [pc, #124]	; (800452c <TIM_Base_SetConfig+0xf4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d007      	beq.n	80044c2 <TIM_Base_SetConfig+0x8a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a1e      	ldr	r2, [pc, #120]	; (8004530 <TIM_Base_SetConfig+0xf8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d003      	beq.n	80044c2 <TIM_Base_SetConfig+0x8a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <TIM_Base_SetConfig+0xfc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d108      	bne.n	80044d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a08      	ldr	r2, [pc, #32]	; (800451c <TIM_Base_SetConfig+0xe4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d103      	bne.n	8004508 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	615a      	str	r2, [r3, #20]
}
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40010000 	.word	0x40010000
 8004520:	40000400 	.word	0x40000400
 8004524:	40000800 	.word	0x40000800
 8004528:	40000c00 	.word	0x40000c00
 800452c:	40014000 	.word	0x40014000
 8004530:	40014400 	.word	0x40014400
 8004534:	40014800 	.word	0x40014800

08004538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e03f      	b.n	80045f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fd f856 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2224      	movs	r2, #36	; 0x24
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fdd1 	bl	800514c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08c      	sub	sp, #48	; 0x30
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b20      	cmp	r3, #32
 8004614:	d165      	bne.n	80046e2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_UART_Transmit_DMA+0x26>
 800461c:	88fb      	ldrh	r3, [r7, #6]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e05e      	b.n	80046e4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_UART_Transmit_DMA+0x38>
 8004630:	2302      	movs	r3, #2
 8004632:	e057      	b.n	80046e4 <HAL_UART_Transmit_DMA+0xe8>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	88fa      	ldrh	r2, [r7, #6]
 8004646:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	88fa      	ldrh	r2, [r7, #6]
 800464c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2221      	movs	r2, #33	; 0x21
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004660:	4a22      	ldr	r2, [pc, #136]	; (80046ec <HAL_UART_Transmit_DMA+0xf0>)
 8004662:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004668:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <HAL_UART_Transmit_DMA+0xf4>)
 800466a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004670:	4a20      	ldr	r2, [pc, #128]	; (80046f4 <HAL_UART_Transmit_DMA+0xf8>)
 8004672:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004678:	2200      	movs	r2, #0
 800467a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800467c:	f107 0308 	add.w	r3, r7, #8
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3304      	adds	r3, #4
 8004690:	461a      	mov	r2, r3
 8004692:	88fb      	ldrh	r3, [r7, #6]
 8004694:	f7fd fbce 	bl	8001e34 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046a0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3314      	adds	r3, #20
 80046b0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3314      	adds	r3, #20
 80046c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ca:	627a      	str	r2, [r7, #36]	; 0x24
 80046cc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6a39      	ldr	r1, [r7, #32]
 80046d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e5      	bne.n	80046aa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e000      	b.n	80046e4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80046e2:	2302      	movs	r3, #2
  }
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3730      	adds	r7, #48	; 0x30
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	08004c7d 	.word	0x08004c7d
 80046f0:	08004d17 	.word	0x08004d17
 80046f4:	08004d33 	.word	0x08004d33

080046f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b0ba      	sub	sp, #232	; 0xe8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800471e:	2300      	movs	r3, #0
 8004720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10f      	bne.n	800475e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800473e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <HAL_UART_IRQHandler+0x66>
 800474a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fc3c 	bl	8004fd4 <UART_Receive_IT>
      return;
 800475c:	e256      	b.n	8004c0c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800475e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 80de 	beq.w	8004924 <HAL_UART_IRQHandler+0x22c>
 8004768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d106      	bne.n	8004782 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004778:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80d1 	beq.w	8004924 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <HAL_UART_IRQHandler+0xae>
 800478e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f043 0201 	orr.w	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00b      	beq.n	80047ca <HAL_UART_IRQHandler+0xd2>
 80047b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f043 0202 	orr.w	r2, r3, #2
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <HAL_UART_IRQHandler+0xf6>
 80047d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f043 0204 	orr.w	r2, r3, #4
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d011      	beq.n	800481e <HAL_UART_IRQHandler+0x126>
 80047fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b00      	cmp	r3, #0
 8004804:	d105      	bne.n	8004812 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0208 	orr.w	r2, r3, #8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 81ed 	beq.w	8004c02 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_UART_IRQHandler+0x14e>
 8004834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fbc7 	bl	8004fd4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b40      	cmp	r3, #64	; 0x40
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d103      	bne.n	8004872 <HAL_UART_IRQHandler+0x17a>
 800486a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d04f      	beq.n	8004912 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 facf 	bl	8004e16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b40      	cmp	r3, #64	; 0x40
 8004884:	d141      	bne.n	800490a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3314      	adds	r3, #20
 800488c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800489c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3314      	adds	r3, #20
 80048ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1d9      	bne.n	8004886 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d013      	beq.n	8004902 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	4a7d      	ldr	r2, [pc, #500]	; (8004ad4 <HAL_UART_IRQHandler+0x3dc>)
 80048e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd fb6c 	bl	8001fc4 <HAL_DMA_Abort_IT>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048fc:	4610      	mov	r0, r2
 80048fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004900:	e00e      	b.n	8004920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f9a4 	bl	8004c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004908:	e00a      	b.n	8004920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f9a0 	bl	8004c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004910:	e006      	b.n	8004920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f99c 	bl	8004c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800491e:	e170      	b.n	8004c02 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	bf00      	nop
    return;
 8004922:	e16e      	b.n	8004c02 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	2b01      	cmp	r3, #1
 800492a:	f040 814a 	bne.w	8004bc2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800492e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8143 	beq.w	8004bc2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800493c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 813c 	beq.w	8004bc2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800494a:	2300      	movs	r3, #0
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b40      	cmp	r3, #64	; 0x40
 800496c:	f040 80b4 	bne.w	8004ad8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800497c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8140 	beq.w	8004c06 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800498a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800498e:	429a      	cmp	r2, r3
 8004990:	f080 8139 	bcs.w	8004c06 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800499a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a6:	f000 8088 	beq.w	8004aba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80049d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1d9      	bne.n	80049aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3314      	adds	r3, #20
 80049fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3314      	adds	r3, #20
 8004a16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e1      	bne.n	80049f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3314      	adds	r3, #20
 8004a38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3314      	adds	r3, #20
 8004a52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e3      	bne.n	8004a32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8a:	f023 0310 	bic.w	r3, r3, #16
 8004a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	330c      	adds	r3, #12
 8004a98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aa4:	e841 2300 	strex	r3, r2, [r1]
 8004aa8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e3      	bne.n	8004a78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fd fa15 	bl	8001ee4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f8ca 	bl	8004c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ad0:	e099      	b.n	8004c06 <HAL_UART_IRQHandler+0x50e>
 8004ad2:	bf00      	nop
 8004ad4:	08004edd 	.word	0x08004edd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 808b 	beq.w	8004c0a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8086 	beq.w	8004c0a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	330c      	adds	r3, #12
 8004b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	330c      	adds	r3, #12
 8004b1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b22:	647a      	str	r2, [r7, #68]	; 0x44
 8004b24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1e3      	bne.n	8004afe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3314      	adds	r3, #20
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	623b      	str	r3, [r7, #32]
   return(result);
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	f023 0301 	bic.w	r3, r3, #1
 8004b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3314      	adds	r3, #20
 8004b56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b5a:	633a      	str	r2, [r7, #48]	; 0x30
 8004b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e3      	bne.n	8004b36 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0310 	bic.w	r3, r3, #16
 8004b92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ba0:	61fa      	str	r2, [r7, #28]
 8004ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	69b9      	ldr	r1, [r7, #24]
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	617b      	str	r3, [r7, #20]
   return(result);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e3      	bne.n	8004b7c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bb8:	4619      	mov	r1, r3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f852 	bl	8004c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bc0:	e023      	b.n	8004c0a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <HAL_UART_IRQHandler+0x4ea>
 8004bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f992 	bl	8004f04 <UART_Transmit_IT>
    return;
 8004be0:	e014      	b.n	8004c0c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00e      	beq.n	8004c0c <HAL_UART_IRQHandler+0x514>
 8004bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d008      	beq.n	8004c0c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f9d2 	bl	8004fa4 <UART_EndTransmit_IT>
    return;
 8004c00:	e004      	b.n	8004c0c <HAL_UART_IRQHandler+0x514>
    return;
 8004c02:	bf00      	nop
 8004c04:	e002      	b.n	8004c0c <HAL_UART_IRQHandler+0x514>
      return;
 8004c06:	bf00      	nop
 8004c08:	e000      	b.n	8004c0c <HAL_UART_IRQHandler+0x514>
      return;
 8004c0a:	bf00      	nop
  }
}
 8004c0c:	37e8      	adds	r7, #232	; 0xe8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop

08004c14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b090      	sub	sp, #64	; 0x40
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d137      	bne.n	8004d08 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3314      	adds	r3, #20
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	623b      	str	r3, [r7, #32]
   return(result);
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3314      	adds	r3, #20
 8004cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cbe:	633a      	str	r2, [r7, #48]	; 0x30
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e5      	bne.n	8004c9e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	330c      	adds	r3, #12
 8004cd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	330c      	adds	r3, #12
 8004cf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf2:	61fa      	str	r2, [r7, #28]
 8004cf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	69b9      	ldr	r1, [r7, #24]
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	617b      	str	r3, [r7, #20]
   return(result);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e5      	bne.n	8004cd2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d06:	e002      	b.n	8004d0e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004d08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004d0a:	f7ff ff83 	bl	8004c14 <HAL_UART_TxCpltCallback>
}
 8004d0e:	bf00      	nop
 8004d10:	3740      	adds	r7, #64	; 0x40
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff ff7f 	bl	8004c28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b80      	cmp	r3, #128	; 0x80
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b21      	cmp	r3, #33	; 0x21
 8004d64:	d108      	bne.n	8004d78 <UART_DMAError+0x46>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004d72:	68b8      	ldr	r0, [r7, #8]
 8004d74:	f000 f827 	bl	8004dc6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	bf0c      	ite	eq
 8004d86:	2301      	moveq	r3, #1
 8004d88:	2300      	movne	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b22      	cmp	r3, #34	; 0x22
 8004d98:	d108      	bne.n	8004dac <UART_DMAError+0x7a>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2200      	movs	r2, #0
 8004da4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004da6:	68b8      	ldr	r0, [r7, #8]
 8004da8:	f000 f835 	bl	8004e16 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	f043 0210 	orr.w	r2, r3, #16
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004db8:	68b8      	ldr	r0, [r7, #8]
 8004dba:	f7ff ff49 	bl	8004c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b089      	sub	sp, #36	; 0x24
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	330c      	adds	r3, #12
 8004dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	e853 3f00 	ldrex	r3, [r3]
 8004ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004de4:	61fb      	str	r3, [r7, #28]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	330c      	adds	r3, #12
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	61ba      	str	r2, [r7, #24]
 8004df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df2:	6979      	ldr	r1, [r7, #20]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	e841 2300 	strex	r3, r2, [r1]
 8004dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1e5      	bne.n	8004dce <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004e0a:	bf00      	nop
 8004e0c:	3724      	adds	r7, #36	; 0x24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b095      	sub	sp, #84	; 0x54
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	330c      	adds	r3, #12
 8004e24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e3e:	643a      	str	r2, [r7, #64]	; 0x40
 8004e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e5      	bne.n	8004e1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3314      	adds	r3, #20
 8004e58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3314      	adds	r3, #20
 8004e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e5      	bne.n	8004e52 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d119      	bne.n	8004ec2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	330c      	adds	r3, #12
 8004e94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f023 0310 	bic.w	r3, r3, #16
 8004ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eae:	61ba      	str	r2, [r7, #24]
 8004eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6979      	ldr	r1, [r7, #20]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	613b      	str	r3, [r7, #16]
   return(result);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e5      	bne.n	8004e8e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ed0:	bf00      	nop
 8004ed2:	3754      	adds	r7, #84	; 0x54
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7ff feaa 	bl	8004c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004efc:	bf00      	nop
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b21      	cmp	r3, #33	; 0x21
 8004f16:	d13e      	bne.n	8004f96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f20:	d114      	bne.n	8004f4c <UART_Transmit_IT+0x48>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d110      	bne.n	8004f4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	1c9a      	adds	r2, r3, #2
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	621a      	str	r2, [r3, #32]
 8004f4a:	e008      	b.n	8004f5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	1c59      	adds	r1, r3, #1
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6211      	str	r1, [r2, #32]
 8004f56:	781a      	ldrb	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10f      	bne.n	8004f92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e000      	b.n	8004f98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f96:	2302      	movs	r3, #2
  }
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff fe25 	bl	8004c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08c      	sub	sp, #48	; 0x30
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b22      	cmp	r3, #34	; 0x22
 8004fe6:	f040 80ab 	bne.w	8005140 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff2:	d117      	bne.n	8005024 <UART_Receive_IT+0x50>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d113      	bne.n	8005024 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005004:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	b29b      	uxth	r3, r3
 800500e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005012:	b29a      	uxth	r2, r3
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	1c9a      	adds	r2, r3, #2
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	629a      	str	r2, [r3, #40]	; 0x28
 8005022:	e026      	b.n	8005072 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800502a:	2300      	movs	r3, #0
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005036:	d007      	beq.n	8005048 <UART_Receive_IT+0x74>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <UART_Receive_IT+0x82>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	b2da      	uxtb	r2, r3
 8005050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	e008      	b.n	8005068 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005062:	b2da      	uxtb	r2, r3
 8005064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005066:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29b      	uxth	r3, r3
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	4619      	mov	r1, r3
 8005080:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005082:	2b00      	cmp	r3, #0
 8005084:	d15a      	bne.n	800513c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0220 	bic.w	r2, r2, #32
 8005094:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695a      	ldr	r2, [r3, #20]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d135      	bne.n	8005132 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	613b      	str	r3, [r7, #16]
   return(result);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f023 0310 	bic.w	r3, r3, #16
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ec:	623a      	str	r2, [r7, #32]
 80050ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	69f9      	ldr	r1, [r7, #28]
 80050f2:	6a3a      	ldr	r2, [r7, #32]
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b10      	cmp	r3, #16
 800510c:	d10a      	bne.n	8005124 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005128:	4619      	mov	r1, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff fd9a 	bl	8004c64 <HAL_UARTEx_RxEventCallback>
 8005130:	e002      	b.n	8005138 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff fd82 	bl	8004c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e002      	b.n	8005142 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	e000      	b.n	8005142 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005140:	2302      	movs	r3, #2
  }
}
 8005142:	4618      	mov	r0, r3
 8005144:	3730      	adds	r7, #48	; 0x30
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800514c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005150:	b0c0      	sub	sp, #256	; 0x100
 8005152:	af00      	add	r7, sp, #0
 8005154:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	68d9      	ldr	r1, [r3, #12]
 800516a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	ea40 0301 	orr.w	r3, r0, r1
 8005174:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	431a      	orrs	r2, r3
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	431a      	orrs	r2, r3
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051a4:	f021 010c 	bic.w	r1, r1, #12
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051b2:	430b      	orrs	r3, r1
 80051b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c6:	6999      	ldr	r1, [r3, #24]
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	ea40 0301 	orr.w	r3, r0, r1
 80051d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4b8f      	ldr	r3, [pc, #572]	; (8005418 <UART_SetConfig+0x2cc>)
 80051dc:	429a      	cmp	r2, r3
 80051de:	d005      	beq.n	80051ec <UART_SetConfig+0xa0>
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	4b8d      	ldr	r3, [pc, #564]	; (800541c <UART_SetConfig+0x2d0>)
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d104      	bne.n	80051f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051ec:	f7fe ff2e 	bl	800404c <HAL_RCC_GetPCLK2Freq>
 80051f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051f4:	e003      	b.n	80051fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051f6:	f7fe ff15 	bl	8004024 <HAL_RCC_GetPCLK1Freq>
 80051fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005208:	f040 810c 	bne.w	8005424 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800520c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005210:	2200      	movs	r2, #0
 8005212:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005216:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800521a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800521e:	4622      	mov	r2, r4
 8005220:	462b      	mov	r3, r5
 8005222:	1891      	adds	r1, r2, r2
 8005224:	65b9      	str	r1, [r7, #88]	; 0x58
 8005226:	415b      	adcs	r3, r3
 8005228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800522a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800522e:	4621      	mov	r1, r4
 8005230:	eb12 0801 	adds.w	r8, r2, r1
 8005234:	4629      	mov	r1, r5
 8005236:	eb43 0901 	adc.w	r9, r3, r1
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800524a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800524e:	4690      	mov	r8, r2
 8005250:	4699      	mov	r9, r3
 8005252:	4623      	mov	r3, r4
 8005254:	eb18 0303 	adds.w	r3, r8, r3
 8005258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800525c:	462b      	mov	r3, r5
 800525e:	eb49 0303 	adc.w	r3, r9, r3
 8005262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005272:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005276:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800527a:	460b      	mov	r3, r1
 800527c:	18db      	adds	r3, r3, r3
 800527e:	653b      	str	r3, [r7, #80]	; 0x50
 8005280:	4613      	mov	r3, r2
 8005282:	eb42 0303 	adc.w	r3, r2, r3
 8005286:	657b      	str	r3, [r7, #84]	; 0x54
 8005288:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800528c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005290:	f7fb fd02 	bl	8000c98 <__aeabi_uldivmod>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4b61      	ldr	r3, [pc, #388]	; (8005420 <UART_SetConfig+0x2d4>)
 800529a:	fba3 2302 	umull	r2, r3, r3, r2
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	011c      	lsls	r4, r3, #4
 80052a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052b4:	4642      	mov	r2, r8
 80052b6:	464b      	mov	r3, r9
 80052b8:	1891      	adds	r1, r2, r2
 80052ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80052bc:	415b      	adcs	r3, r3
 80052be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052c4:	4641      	mov	r1, r8
 80052c6:	eb12 0a01 	adds.w	sl, r2, r1
 80052ca:	4649      	mov	r1, r9
 80052cc:	eb43 0b01 	adc.w	fp, r3, r1
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052e4:	4692      	mov	sl, r2
 80052e6:	469b      	mov	fp, r3
 80052e8:	4643      	mov	r3, r8
 80052ea:	eb1a 0303 	adds.w	r3, sl, r3
 80052ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052f2:	464b      	mov	r3, r9
 80052f4:	eb4b 0303 	adc.w	r3, fp, r3
 80052f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005308:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800530c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005310:	460b      	mov	r3, r1
 8005312:	18db      	adds	r3, r3, r3
 8005314:	643b      	str	r3, [r7, #64]	; 0x40
 8005316:	4613      	mov	r3, r2
 8005318:	eb42 0303 	adc.w	r3, r2, r3
 800531c:	647b      	str	r3, [r7, #68]	; 0x44
 800531e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005322:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005326:	f7fb fcb7 	bl	8000c98 <__aeabi_uldivmod>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4611      	mov	r1, r2
 8005330:	4b3b      	ldr	r3, [pc, #236]	; (8005420 <UART_SetConfig+0x2d4>)
 8005332:	fba3 2301 	umull	r2, r3, r3, r1
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	2264      	movs	r2, #100	; 0x64
 800533a:	fb02 f303 	mul.w	r3, r2, r3
 800533e:	1acb      	subs	r3, r1, r3
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005346:	4b36      	ldr	r3, [pc, #216]	; (8005420 <UART_SetConfig+0x2d4>)
 8005348:	fba3 2302 	umull	r2, r3, r3, r2
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005354:	441c      	add	r4, r3
 8005356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535a:	2200      	movs	r2, #0
 800535c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005360:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005364:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005368:	4642      	mov	r2, r8
 800536a:	464b      	mov	r3, r9
 800536c:	1891      	adds	r1, r2, r2
 800536e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005370:	415b      	adcs	r3, r3
 8005372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005374:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005378:	4641      	mov	r1, r8
 800537a:	1851      	adds	r1, r2, r1
 800537c:	6339      	str	r1, [r7, #48]	; 0x30
 800537e:	4649      	mov	r1, r9
 8005380:	414b      	adcs	r3, r1
 8005382:	637b      	str	r3, [r7, #52]	; 0x34
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005390:	4659      	mov	r1, fp
 8005392:	00cb      	lsls	r3, r1, #3
 8005394:	4651      	mov	r1, sl
 8005396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539a:	4651      	mov	r1, sl
 800539c:	00ca      	lsls	r2, r1, #3
 800539e:	4610      	mov	r0, r2
 80053a0:	4619      	mov	r1, r3
 80053a2:	4603      	mov	r3, r0
 80053a4:	4642      	mov	r2, r8
 80053a6:	189b      	adds	r3, r3, r2
 80053a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053ac:	464b      	mov	r3, r9
 80053ae:	460a      	mov	r2, r1
 80053b0:	eb42 0303 	adc.w	r3, r2, r3
 80053b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053cc:	460b      	mov	r3, r1
 80053ce:	18db      	adds	r3, r3, r3
 80053d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053d2:	4613      	mov	r3, r2
 80053d4:	eb42 0303 	adc.w	r3, r2, r3
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053e2:	f7fb fc59 	bl	8000c98 <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4b0d      	ldr	r3, [pc, #52]	; (8005420 <UART_SetConfig+0x2d4>)
 80053ec:	fba3 1302 	umull	r1, r3, r3, r2
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	2164      	movs	r1, #100	; 0x64
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	3332      	adds	r3, #50	; 0x32
 80053fe:	4a08      	ldr	r2, [pc, #32]	; (8005420 <UART_SetConfig+0x2d4>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f003 0207 	and.w	r2, r3, #7
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4422      	add	r2, r4
 8005412:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005414:	e105      	b.n	8005622 <UART_SetConfig+0x4d6>
 8005416:	bf00      	nop
 8005418:	40011000 	.word	0x40011000
 800541c:	40011400 	.word	0x40011400
 8005420:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005428:	2200      	movs	r2, #0
 800542a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800542e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005432:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005436:	4642      	mov	r2, r8
 8005438:	464b      	mov	r3, r9
 800543a:	1891      	adds	r1, r2, r2
 800543c:	6239      	str	r1, [r7, #32]
 800543e:	415b      	adcs	r3, r3
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
 8005442:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005446:	4641      	mov	r1, r8
 8005448:	1854      	adds	r4, r2, r1
 800544a:	4649      	mov	r1, r9
 800544c:	eb43 0501 	adc.w	r5, r3, r1
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	00eb      	lsls	r3, r5, #3
 800545a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800545e:	00e2      	lsls	r2, r4, #3
 8005460:	4614      	mov	r4, r2
 8005462:	461d      	mov	r5, r3
 8005464:	4643      	mov	r3, r8
 8005466:	18e3      	adds	r3, r4, r3
 8005468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800546c:	464b      	mov	r3, r9
 800546e:	eb45 0303 	adc.w	r3, r5, r3
 8005472:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005482:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	f04f 0300 	mov.w	r3, #0
 800548e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005492:	4629      	mov	r1, r5
 8005494:	008b      	lsls	r3, r1, #2
 8005496:	4621      	mov	r1, r4
 8005498:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800549c:	4621      	mov	r1, r4
 800549e:	008a      	lsls	r2, r1, #2
 80054a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054a4:	f7fb fbf8 	bl	8000c98 <__aeabi_uldivmod>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4b60      	ldr	r3, [pc, #384]	; (8005630 <UART_SetConfig+0x4e4>)
 80054ae:	fba3 2302 	umull	r2, r3, r3, r2
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	011c      	lsls	r4, r3, #4
 80054b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054c8:	4642      	mov	r2, r8
 80054ca:	464b      	mov	r3, r9
 80054cc:	1891      	adds	r1, r2, r2
 80054ce:	61b9      	str	r1, [r7, #24]
 80054d0:	415b      	adcs	r3, r3
 80054d2:	61fb      	str	r3, [r7, #28]
 80054d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054d8:	4641      	mov	r1, r8
 80054da:	1851      	adds	r1, r2, r1
 80054dc:	6139      	str	r1, [r7, #16]
 80054de:	4649      	mov	r1, r9
 80054e0:	414b      	adcs	r3, r1
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054f0:	4659      	mov	r1, fp
 80054f2:	00cb      	lsls	r3, r1, #3
 80054f4:	4651      	mov	r1, sl
 80054f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054fa:	4651      	mov	r1, sl
 80054fc:	00ca      	lsls	r2, r1, #3
 80054fe:	4610      	mov	r0, r2
 8005500:	4619      	mov	r1, r3
 8005502:	4603      	mov	r3, r0
 8005504:	4642      	mov	r2, r8
 8005506:	189b      	adds	r3, r3, r2
 8005508:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800550c:	464b      	mov	r3, r9
 800550e:	460a      	mov	r2, r1
 8005510:	eb42 0303 	adc.w	r3, r2, r3
 8005514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	67bb      	str	r3, [r7, #120]	; 0x78
 8005522:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005530:	4649      	mov	r1, r9
 8005532:	008b      	lsls	r3, r1, #2
 8005534:	4641      	mov	r1, r8
 8005536:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800553a:	4641      	mov	r1, r8
 800553c:	008a      	lsls	r2, r1, #2
 800553e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005542:	f7fb fba9 	bl	8000c98 <__aeabi_uldivmod>
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	4b39      	ldr	r3, [pc, #228]	; (8005630 <UART_SetConfig+0x4e4>)
 800554c:	fba3 1302 	umull	r1, r3, r3, r2
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	2164      	movs	r1, #100	; 0x64
 8005554:	fb01 f303 	mul.w	r3, r1, r3
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	3332      	adds	r3, #50	; 0x32
 800555e:	4a34      	ldr	r2, [pc, #208]	; (8005630 <UART_SetConfig+0x4e4>)
 8005560:	fba2 2303 	umull	r2, r3, r2, r3
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800556a:	441c      	add	r4, r3
 800556c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005570:	2200      	movs	r2, #0
 8005572:	673b      	str	r3, [r7, #112]	; 0x70
 8005574:	677a      	str	r2, [r7, #116]	; 0x74
 8005576:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800557a:	4642      	mov	r2, r8
 800557c:	464b      	mov	r3, r9
 800557e:	1891      	adds	r1, r2, r2
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	415b      	adcs	r3, r3
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800558a:	4641      	mov	r1, r8
 800558c:	1851      	adds	r1, r2, r1
 800558e:	6039      	str	r1, [r7, #0]
 8005590:	4649      	mov	r1, r9
 8005592:	414b      	adcs	r3, r1
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055a2:	4659      	mov	r1, fp
 80055a4:	00cb      	lsls	r3, r1, #3
 80055a6:	4651      	mov	r1, sl
 80055a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ac:	4651      	mov	r1, sl
 80055ae:	00ca      	lsls	r2, r1, #3
 80055b0:	4610      	mov	r0, r2
 80055b2:	4619      	mov	r1, r3
 80055b4:	4603      	mov	r3, r0
 80055b6:	4642      	mov	r2, r8
 80055b8:	189b      	adds	r3, r3, r2
 80055ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80055bc:	464b      	mov	r3, r9
 80055be:	460a      	mov	r2, r1
 80055c0:	eb42 0303 	adc.w	r3, r2, r3
 80055c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	663b      	str	r3, [r7, #96]	; 0x60
 80055d0:	667a      	str	r2, [r7, #100]	; 0x64
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055de:	4649      	mov	r1, r9
 80055e0:	008b      	lsls	r3, r1, #2
 80055e2:	4641      	mov	r1, r8
 80055e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055e8:	4641      	mov	r1, r8
 80055ea:	008a      	lsls	r2, r1, #2
 80055ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055f0:	f7fb fb52 	bl	8000c98 <__aeabi_uldivmod>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <UART_SetConfig+0x4e4>)
 80055fa:	fba3 1302 	umull	r1, r3, r3, r2
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	2164      	movs	r1, #100	; 0x64
 8005602:	fb01 f303 	mul.w	r3, r1, r3
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	3332      	adds	r3, #50	; 0x32
 800560c:	4a08      	ldr	r2, [pc, #32]	; (8005630 <UART_SetConfig+0x4e4>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	f003 020f 	and.w	r2, r3, #15
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4422      	add	r2, r4
 8005620:	609a      	str	r2, [r3, #8]
}
 8005622:	bf00      	nop
 8005624:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005628:	46bd      	mov	sp, r7
 800562a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800562e:	bf00      	nop
 8005630:	51eb851f 	.word	0x51eb851f

08005634 <__errno>:
 8005634:	4b01      	ldr	r3, [pc, #4]	; (800563c <__errno+0x8>)
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000020 	.word	0x20000020

08005640 <__libc_init_array>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	4d0d      	ldr	r5, [pc, #52]	; (8005678 <__libc_init_array+0x38>)
 8005644:	4c0d      	ldr	r4, [pc, #52]	; (800567c <__libc_init_array+0x3c>)
 8005646:	1b64      	subs	r4, r4, r5
 8005648:	10a4      	asrs	r4, r4, #2
 800564a:	2600      	movs	r6, #0
 800564c:	42a6      	cmp	r6, r4
 800564e:	d109      	bne.n	8005664 <__libc_init_array+0x24>
 8005650:	4d0b      	ldr	r5, [pc, #44]	; (8005680 <__libc_init_array+0x40>)
 8005652:	4c0c      	ldr	r4, [pc, #48]	; (8005684 <__libc_init_array+0x44>)
 8005654:	f004 fcc4 	bl	8009fe0 <_init>
 8005658:	1b64      	subs	r4, r4, r5
 800565a:	10a4      	asrs	r4, r4, #2
 800565c:	2600      	movs	r6, #0
 800565e:	42a6      	cmp	r6, r4
 8005660:	d105      	bne.n	800566e <__libc_init_array+0x2e>
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	f855 3b04 	ldr.w	r3, [r5], #4
 8005668:	4798      	blx	r3
 800566a:	3601      	adds	r6, #1
 800566c:	e7ee      	b.n	800564c <__libc_init_array+0xc>
 800566e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005672:	4798      	blx	r3
 8005674:	3601      	adds	r6, #1
 8005676:	e7f2      	b.n	800565e <__libc_init_array+0x1e>
 8005678:	0800a4f4 	.word	0x0800a4f4
 800567c:	0800a4f4 	.word	0x0800a4f4
 8005680:	0800a4f4 	.word	0x0800a4f4
 8005684:	0800a4f8 	.word	0x0800a4f8

08005688 <memset>:
 8005688:	4402      	add	r2, r0
 800568a:	4603      	mov	r3, r0
 800568c:	4293      	cmp	r3, r2
 800568e:	d100      	bne.n	8005692 <memset+0xa>
 8005690:	4770      	bx	lr
 8005692:	f803 1b01 	strb.w	r1, [r3], #1
 8005696:	e7f9      	b.n	800568c <memset+0x4>

08005698 <__cvt>:
 8005698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800569c:	ec55 4b10 	vmov	r4, r5, d0
 80056a0:	2d00      	cmp	r5, #0
 80056a2:	460e      	mov	r6, r1
 80056a4:	4619      	mov	r1, r3
 80056a6:	462b      	mov	r3, r5
 80056a8:	bfbb      	ittet	lt
 80056aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056ae:	461d      	movlt	r5, r3
 80056b0:	2300      	movge	r3, #0
 80056b2:	232d      	movlt	r3, #45	; 0x2d
 80056b4:	700b      	strb	r3, [r1, #0]
 80056b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056bc:	4691      	mov	r9, r2
 80056be:	f023 0820 	bic.w	r8, r3, #32
 80056c2:	bfbc      	itt	lt
 80056c4:	4622      	movlt	r2, r4
 80056c6:	4614      	movlt	r4, r2
 80056c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056cc:	d005      	beq.n	80056da <__cvt+0x42>
 80056ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056d2:	d100      	bne.n	80056d6 <__cvt+0x3e>
 80056d4:	3601      	adds	r6, #1
 80056d6:	2102      	movs	r1, #2
 80056d8:	e000      	b.n	80056dc <__cvt+0x44>
 80056da:	2103      	movs	r1, #3
 80056dc:	ab03      	add	r3, sp, #12
 80056de:	9301      	str	r3, [sp, #4]
 80056e0:	ab02      	add	r3, sp, #8
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	ec45 4b10 	vmov	d0, r4, r5
 80056e8:	4653      	mov	r3, sl
 80056ea:	4632      	mov	r2, r6
 80056ec:	f001 fde0 	bl	80072b0 <_dtoa_r>
 80056f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056f4:	4607      	mov	r7, r0
 80056f6:	d102      	bne.n	80056fe <__cvt+0x66>
 80056f8:	f019 0f01 	tst.w	r9, #1
 80056fc:	d022      	beq.n	8005744 <__cvt+0xac>
 80056fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005702:	eb07 0906 	add.w	r9, r7, r6
 8005706:	d110      	bne.n	800572a <__cvt+0x92>
 8005708:	783b      	ldrb	r3, [r7, #0]
 800570a:	2b30      	cmp	r3, #48	; 0x30
 800570c:	d10a      	bne.n	8005724 <__cvt+0x8c>
 800570e:	2200      	movs	r2, #0
 8005710:	2300      	movs	r3, #0
 8005712:	4620      	mov	r0, r4
 8005714:	4629      	mov	r1, r5
 8005716:	f7fb f9df 	bl	8000ad8 <__aeabi_dcmpeq>
 800571a:	b918      	cbnz	r0, 8005724 <__cvt+0x8c>
 800571c:	f1c6 0601 	rsb	r6, r6, #1
 8005720:	f8ca 6000 	str.w	r6, [sl]
 8005724:	f8da 3000 	ldr.w	r3, [sl]
 8005728:	4499      	add	r9, r3
 800572a:	2200      	movs	r2, #0
 800572c:	2300      	movs	r3, #0
 800572e:	4620      	mov	r0, r4
 8005730:	4629      	mov	r1, r5
 8005732:	f7fb f9d1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005736:	b108      	cbz	r0, 800573c <__cvt+0xa4>
 8005738:	f8cd 900c 	str.w	r9, [sp, #12]
 800573c:	2230      	movs	r2, #48	; 0x30
 800573e:	9b03      	ldr	r3, [sp, #12]
 8005740:	454b      	cmp	r3, r9
 8005742:	d307      	bcc.n	8005754 <__cvt+0xbc>
 8005744:	9b03      	ldr	r3, [sp, #12]
 8005746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005748:	1bdb      	subs	r3, r3, r7
 800574a:	4638      	mov	r0, r7
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	b004      	add	sp, #16
 8005750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005754:	1c59      	adds	r1, r3, #1
 8005756:	9103      	str	r1, [sp, #12]
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	e7f0      	b.n	800573e <__cvt+0xa6>

0800575c <__exponent>:
 800575c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800575e:	4603      	mov	r3, r0
 8005760:	2900      	cmp	r1, #0
 8005762:	bfb8      	it	lt
 8005764:	4249      	neglt	r1, r1
 8005766:	f803 2b02 	strb.w	r2, [r3], #2
 800576a:	bfb4      	ite	lt
 800576c:	222d      	movlt	r2, #45	; 0x2d
 800576e:	222b      	movge	r2, #43	; 0x2b
 8005770:	2909      	cmp	r1, #9
 8005772:	7042      	strb	r2, [r0, #1]
 8005774:	dd2a      	ble.n	80057cc <__exponent+0x70>
 8005776:	f10d 0407 	add.w	r4, sp, #7
 800577a:	46a4      	mov	ip, r4
 800577c:	270a      	movs	r7, #10
 800577e:	46a6      	mov	lr, r4
 8005780:	460a      	mov	r2, r1
 8005782:	fb91 f6f7 	sdiv	r6, r1, r7
 8005786:	fb07 1516 	mls	r5, r7, r6, r1
 800578a:	3530      	adds	r5, #48	; 0x30
 800578c:	2a63      	cmp	r2, #99	; 0x63
 800578e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005792:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005796:	4631      	mov	r1, r6
 8005798:	dcf1      	bgt.n	800577e <__exponent+0x22>
 800579a:	3130      	adds	r1, #48	; 0x30
 800579c:	f1ae 0502 	sub.w	r5, lr, #2
 80057a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057a4:	1c44      	adds	r4, r0, #1
 80057a6:	4629      	mov	r1, r5
 80057a8:	4561      	cmp	r1, ip
 80057aa:	d30a      	bcc.n	80057c2 <__exponent+0x66>
 80057ac:	f10d 0209 	add.w	r2, sp, #9
 80057b0:	eba2 020e 	sub.w	r2, r2, lr
 80057b4:	4565      	cmp	r5, ip
 80057b6:	bf88      	it	hi
 80057b8:	2200      	movhi	r2, #0
 80057ba:	4413      	add	r3, r2
 80057bc:	1a18      	subs	r0, r3, r0
 80057be:	b003      	add	sp, #12
 80057c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80057ca:	e7ed      	b.n	80057a8 <__exponent+0x4c>
 80057cc:	2330      	movs	r3, #48	; 0x30
 80057ce:	3130      	adds	r1, #48	; 0x30
 80057d0:	7083      	strb	r3, [r0, #2]
 80057d2:	70c1      	strb	r1, [r0, #3]
 80057d4:	1d03      	adds	r3, r0, #4
 80057d6:	e7f1      	b.n	80057bc <__exponent+0x60>

080057d8 <_printf_float>:
 80057d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057dc:	ed2d 8b02 	vpush	{d8}
 80057e0:	b08d      	sub	sp, #52	; 0x34
 80057e2:	460c      	mov	r4, r1
 80057e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80057e8:	4616      	mov	r6, r2
 80057ea:	461f      	mov	r7, r3
 80057ec:	4605      	mov	r5, r0
 80057ee:	f002 febd 	bl	800856c <_localeconv_r>
 80057f2:	f8d0 a000 	ldr.w	sl, [r0]
 80057f6:	4650      	mov	r0, sl
 80057f8:	f7fa fcf2 	bl	80001e0 <strlen>
 80057fc:	2300      	movs	r3, #0
 80057fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	9305      	str	r3, [sp, #20]
 8005804:	f8d8 3000 	ldr.w	r3, [r8]
 8005808:	f894 b018 	ldrb.w	fp, [r4, #24]
 800580c:	3307      	adds	r3, #7
 800580e:	f023 0307 	bic.w	r3, r3, #7
 8005812:	f103 0208 	add.w	r2, r3, #8
 8005816:	f8c8 2000 	str.w	r2, [r8]
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005822:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005826:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800582a:	9307      	str	r3, [sp, #28]
 800582c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005830:	ee08 0a10 	vmov	s16, r0
 8005834:	4b9f      	ldr	r3, [pc, #636]	; (8005ab4 <_printf_float+0x2dc>)
 8005836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800583a:	f04f 32ff 	mov.w	r2, #4294967295
 800583e:	f7fb f97d 	bl	8000b3c <__aeabi_dcmpun>
 8005842:	bb88      	cbnz	r0, 80058a8 <_printf_float+0xd0>
 8005844:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005848:	4b9a      	ldr	r3, [pc, #616]	; (8005ab4 <_printf_float+0x2dc>)
 800584a:	f04f 32ff 	mov.w	r2, #4294967295
 800584e:	f7fb f957 	bl	8000b00 <__aeabi_dcmple>
 8005852:	bb48      	cbnz	r0, 80058a8 <_printf_float+0xd0>
 8005854:	2200      	movs	r2, #0
 8005856:	2300      	movs	r3, #0
 8005858:	4640      	mov	r0, r8
 800585a:	4649      	mov	r1, r9
 800585c:	f7fb f946 	bl	8000aec <__aeabi_dcmplt>
 8005860:	b110      	cbz	r0, 8005868 <_printf_float+0x90>
 8005862:	232d      	movs	r3, #45	; 0x2d
 8005864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005868:	4b93      	ldr	r3, [pc, #588]	; (8005ab8 <_printf_float+0x2e0>)
 800586a:	4894      	ldr	r0, [pc, #592]	; (8005abc <_printf_float+0x2e4>)
 800586c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005870:	bf94      	ite	ls
 8005872:	4698      	movls	r8, r3
 8005874:	4680      	movhi	r8, r0
 8005876:	2303      	movs	r3, #3
 8005878:	6123      	str	r3, [r4, #16]
 800587a:	9b05      	ldr	r3, [sp, #20]
 800587c:	f023 0204 	bic.w	r2, r3, #4
 8005880:	6022      	str	r2, [r4, #0]
 8005882:	f04f 0900 	mov.w	r9, #0
 8005886:	9700      	str	r7, [sp, #0]
 8005888:	4633      	mov	r3, r6
 800588a:	aa0b      	add	r2, sp, #44	; 0x2c
 800588c:	4621      	mov	r1, r4
 800588e:	4628      	mov	r0, r5
 8005890:	f000 f9d8 	bl	8005c44 <_printf_common>
 8005894:	3001      	adds	r0, #1
 8005896:	f040 8090 	bne.w	80059ba <_printf_float+0x1e2>
 800589a:	f04f 30ff 	mov.w	r0, #4294967295
 800589e:	b00d      	add	sp, #52	; 0x34
 80058a0:	ecbd 8b02 	vpop	{d8}
 80058a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a8:	4642      	mov	r2, r8
 80058aa:	464b      	mov	r3, r9
 80058ac:	4640      	mov	r0, r8
 80058ae:	4649      	mov	r1, r9
 80058b0:	f7fb f944 	bl	8000b3c <__aeabi_dcmpun>
 80058b4:	b140      	cbz	r0, 80058c8 <_printf_float+0xf0>
 80058b6:	464b      	mov	r3, r9
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	bfbc      	itt	lt
 80058bc:	232d      	movlt	r3, #45	; 0x2d
 80058be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058c2:	487f      	ldr	r0, [pc, #508]	; (8005ac0 <_printf_float+0x2e8>)
 80058c4:	4b7f      	ldr	r3, [pc, #508]	; (8005ac4 <_printf_float+0x2ec>)
 80058c6:	e7d1      	b.n	800586c <_printf_float+0x94>
 80058c8:	6863      	ldr	r3, [r4, #4]
 80058ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80058ce:	9206      	str	r2, [sp, #24]
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	d13f      	bne.n	8005954 <_printf_float+0x17c>
 80058d4:	2306      	movs	r3, #6
 80058d6:	6063      	str	r3, [r4, #4]
 80058d8:	9b05      	ldr	r3, [sp, #20]
 80058da:	6861      	ldr	r1, [r4, #4]
 80058dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058e0:	2300      	movs	r3, #0
 80058e2:	9303      	str	r3, [sp, #12]
 80058e4:	ab0a      	add	r3, sp, #40	; 0x28
 80058e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80058ea:	ab09      	add	r3, sp, #36	; 0x24
 80058ec:	ec49 8b10 	vmov	d0, r8, r9
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	6022      	str	r2, [r4, #0]
 80058f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058f8:	4628      	mov	r0, r5
 80058fa:	f7ff fecd 	bl	8005698 <__cvt>
 80058fe:	9b06      	ldr	r3, [sp, #24]
 8005900:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005902:	2b47      	cmp	r3, #71	; 0x47
 8005904:	4680      	mov	r8, r0
 8005906:	d108      	bne.n	800591a <_printf_float+0x142>
 8005908:	1cc8      	adds	r0, r1, #3
 800590a:	db02      	blt.n	8005912 <_printf_float+0x13a>
 800590c:	6863      	ldr	r3, [r4, #4]
 800590e:	4299      	cmp	r1, r3
 8005910:	dd41      	ble.n	8005996 <_printf_float+0x1be>
 8005912:	f1ab 0b02 	sub.w	fp, fp, #2
 8005916:	fa5f fb8b 	uxtb.w	fp, fp
 800591a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800591e:	d820      	bhi.n	8005962 <_printf_float+0x18a>
 8005920:	3901      	subs	r1, #1
 8005922:	465a      	mov	r2, fp
 8005924:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005928:	9109      	str	r1, [sp, #36]	; 0x24
 800592a:	f7ff ff17 	bl	800575c <__exponent>
 800592e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005930:	1813      	adds	r3, r2, r0
 8005932:	2a01      	cmp	r2, #1
 8005934:	4681      	mov	r9, r0
 8005936:	6123      	str	r3, [r4, #16]
 8005938:	dc02      	bgt.n	8005940 <_printf_float+0x168>
 800593a:	6822      	ldr	r2, [r4, #0]
 800593c:	07d2      	lsls	r2, r2, #31
 800593e:	d501      	bpl.n	8005944 <_printf_float+0x16c>
 8005940:	3301      	adds	r3, #1
 8005942:	6123      	str	r3, [r4, #16]
 8005944:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005948:	2b00      	cmp	r3, #0
 800594a:	d09c      	beq.n	8005886 <_printf_float+0xae>
 800594c:	232d      	movs	r3, #45	; 0x2d
 800594e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005952:	e798      	b.n	8005886 <_printf_float+0xae>
 8005954:	9a06      	ldr	r2, [sp, #24]
 8005956:	2a47      	cmp	r2, #71	; 0x47
 8005958:	d1be      	bne.n	80058d8 <_printf_float+0x100>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1bc      	bne.n	80058d8 <_printf_float+0x100>
 800595e:	2301      	movs	r3, #1
 8005960:	e7b9      	b.n	80058d6 <_printf_float+0xfe>
 8005962:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005966:	d118      	bne.n	800599a <_printf_float+0x1c2>
 8005968:	2900      	cmp	r1, #0
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	dd0b      	ble.n	8005986 <_printf_float+0x1ae>
 800596e:	6121      	str	r1, [r4, #16]
 8005970:	b913      	cbnz	r3, 8005978 <_printf_float+0x1a0>
 8005972:	6822      	ldr	r2, [r4, #0]
 8005974:	07d0      	lsls	r0, r2, #31
 8005976:	d502      	bpl.n	800597e <_printf_float+0x1a6>
 8005978:	3301      	adds	r3, #1
 800597a:	440b      	add	r3, r1
 800597c:	6123      	str	r3, [r4, #16]
 800597e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005980:	f04f 0900 	mov.w	r9, #0
 8005984:	e7de      	b.n	8005944 <_printf_float+0x16c>
 8005986:	b913      	cbnz	r3, 800598e <_printf_float+0x1b6>
 8005988:	6822      	ldr	r2, [r4, #0]
 800598a:	07d2      	lsls	r2, r2, #31
 800598c:	d501      	bpl.n	8005992 <_printf_float+0x1ba>
 800598e:	3302      	adds	r3, #2
 8005990:	e7f4      	b.n	800597c <_printf_float+0x1a4>
 8005992:	2301      	movs	r3, #1
 8005994:	e7f2      	b.n	800597c <_printf_float+0x1a4>
 8005996:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800599a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800599c:	4299      	cmp	r1, r3
 800599e:	db05      	blt.n	80059ac <_printf_float+0x1d4>
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	6121      	str	r1, [r4, #16]
 80059a4:	07d8      	lsls	r0, r3, #31
 80059a6:	d5ea      	bpl.n	800597e <_printf_float+0x1a6>
 80059a8:	1c4b      	adds	r3, r1, #1
 80059aa:	e7e7      	b.n	800597c <_printf_float+0x1a4>
 80059ac:	2900      	cmp	r1, #0
 80059ae:	bfd4      	ite	le
 80059b0:	f1c1 0202 	rsble	r2, r1, #2
 80059b4:	2201      	movgt	r2, #1
 80059b6:	4413      	add	r3, r2
 80059b8:	e7e0      	b.n	800597c <_printf_float+0x1a4>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	055a      	lsls	r2, r3, #21
 80059be:	d407      	bmi.n	80059d0 <_printf_float+0x1f8>
 80059c0:	6923      	ldr	r3, [r4, #16]
 80059c2:	4642      	mov	r2, r8
 80059c4:	4631      	mov	r1, r6
 80059c6:	4628      	mov	r0, r5
 80059c8:	47b8      	blx	r7
 80059ca:	3001      	adds	r0, #1
 80059cc:	d12c      	bne.n	8005a28 <_printf_float+0x250>
 80059ce:	e764      	b.n	800589a <_printf_float+0xc2>
 80059d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059d4:	f240 80e0 	bls.w	8005b98 <_printf_float+0x3c0>
 80059d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059dc:	2200      	movs	r2, #0
 80059de:	2300      	movs	r3, #0
 80059e0:	f7fb f87a 	bl	8000ad8 <__aeabi_dcmpeq>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d034      	beq.n	8005a52 <_printf_float+0x27a>
 80059e8:	4a37      	ldr	r2, [pc, #220]	; (8005ac8 <_printf_float+0x2f0>)
 80059ea:	2301      	movs	r3, #1
 80059ec:	4631      	mov	r1, r6
 80059ee:	4628      	mov	r0, r5
 80059f0:	47b8      	blx	r7
 80059f2:	3001      	adds	r0, #1
 80059f4:	f43f af51 	beq.w	800589a <_printf_float+0xc2>
 80059f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059fc:	429a      	cmp	r2, r3
 80059fe:	db02      	blt.n	8005a06 <_printf_float+0x22e>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	07d8      	lsls	r0, r3, #31
 8005a04:	d510      	bpl.n	8005a28 <_printf_float+0x250>
 8005a06:	ee18 3a10 	vmov	r3, s16
 8005a0a:	4652      	mov	r2, sl
 8005a0c:	4631      	mov	r1, r6
 8005a0e:	4628      	mov	r0, r5
 8005a10:	47b8      	blx	r7
 8005a12:	3001      	adds	r0, #1
 8005a14:	f43f af41 	beq.w	800589a <_printf_float+0xc2>
 8005a18:	f04f 0800 	mov.w	r8, #0
 8005a1c:	f104 091a 	add.w	r9, r4, #26
 8005a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a22:	3b01      	subs	r3, #1
 8005a24:	4543      	cmp	r3, r8
 8005a26:	dc09      	bgt.n	8005a3c <_printf_float+0x264>
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	079b      	lsls	r3, r3, #30
 8005a2c:	f100 8105 	bmi.w	8005c3a <_printf_float+0x462>
 8005a30:	68e0      	ldr	r0, [r4, #12]
 8005a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a34:	4298      	cmp	r0, r3
 8005a36:	bfb8      	it	lt
 8005a38:	4618      	movlt	r0, r3
 8005a3a:	e730      	b.n	800589e <_printf_float+0xc6>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	464a      	mov	r2, r9
 8005a40:	4631      	mov	r1, r6
 8005a42:	4628      	mov	r0, r5
 8005a44:	47b8      	blx	r7
 8005a46:	3001      	adds	r0, #1
 8005a48:	f43f af27 	beq.w	800589a <_printf_float+0xc2>
 8005a4c:	f108 0801 	add.w	r8, r8, #1
 8005a50:	e7e6      	b.n	8005a20 <_printf_float+0x248>
 8005a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	dc39      	bgt.n	8005acc <_printf_float+0x2f4>
 8005a58:	4a1b      	ldr	r2, [pc, #108]	; (8005ac8 <_printf_float+0x2f0>)
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4631      	mov	r1, r6
 8005a5e:	4628      	mov	r0, r5
 8005a60:	47b8      	blx	r7
 8005a62:	3001      	adds	r0, #1
 8005a64:	f43f af19 	beq.w	800589a <_printf_float+0xc2>
 8005a68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	d102      	bne.n	8005a76 <_printf_float+0x29e>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	07d9      	lsls	r1, r3, #31
 8005a74:	d5d8      	bpl.n	8005a28 <_printf_float+0x250>
 8005a76:	ee18 3a10 	vmov	r3, s16
 8005a7a:	4652      	mov	r2, sl
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	4628      	mov	r0, r5
 8005a80:	47b8      	blx	r7
 8005a82:	3001      	adds	r0, #1
 8005a84:	f43f af09 	beq.w	800589a <_printf_float+0xc2>
 8005a88:	f04f 0900 	mov.w	r9, #0
 8005a8c:	f104 0a1a 	add.w	sl, r4, #26
 8005a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a92:	425b      	negs	r3, r3
 8005a94:	454b      	cmp	r3, r9
 8005a96:	dc01      	bgt.n	8005a9c <_printf_float+0x2c4>
 8005a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a9a:	e792      	b.n	80059c2 <_printf_float+0x1ea>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	4652      	mov	r2, sl
 8005aa0:	4631      	mov	r1, r6
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	47b8      	blx	r7
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	f43f aef7 	beq.w	800589a <_printf_float+0xc2>
 8005aac:	f109 0901 	add.w	r9, r9, #1
 8005ab0:	e7ee      	b.n	8005a90 <_printf_float+0x2b8>
 8005ab2:	bf00      	nop
 8005ab4:	7fefffff 	.word	0x7fefffff
 8005ab8:	0800a048 	.word	0x0800a048
 8005abc:	0800a04c 	.word	0x0800a04c
 8005ac0:	0800a054 	.word	0x0800a054
 8005ac4:	0800a050 	.word	0x0800a050
 8005ac8:	0800a058 	.word	0x0800a058
 8005acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ace:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	bfa8      	it	ge
 8005ad4:	461a      	movge	r2, r3
 8005ad6:	2a00      	cmp	r2, #0
 8005ad8:	4691      	mov	r9, r2
 8005ada:	dc37      	bgt.n	8005b4c <_printf_float+0x374>
 8005adc:	f04f 0b00 	mov.w	fp, #0
 8005ae0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ae4:	f104 021a 	add.w	r2, r4, #26
 8005ae8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005aea:	9305      	str	r3, [sp, #20]
 8005aec:	eba3 0309 	sub.w	r3, r3, r9
 8005af0:	455b      	cmp	r3, fp
 8005af2:	dc33      	bgt.n	8005b5c <_printf_float+0x384>
 8005af4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005af8:	429a      	cmp	r2, r3
 8005afa:	db3b      	blt.n	8005b74 <_printf_float+0x39c>
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	07da      	lsls	r2, r3, #31
 8005b00:	d438      	bmi.n	8005b74 <_printf_float+0x39c>
 8005b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b04:	9a05      	ldr	r2, [sp, #20]
 8005b06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b08:	1a9a      	subs	r2, r3, r2
 8005b0a:	eba3 0901 	sub.w	r9, r3, r1
 8005b0e:	4591      	cmp	r9, r2
 8005b10:	bfa8      	it	ge
 8005b12:	4691      	movge	r9, r2
 8005b14:	f1b9 0f00 	cmp.w	r9, #0
 8005b18:	dc35      	bgt.n	8005b86 <_printf_float+0x3ae>
 8005b1a:	f04f 0800 	mov.w	r8, #0
 8005b1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b22:	f104 0a1a 	add.w	sl, r4, #26
 8005b26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b2a:	1a9b      	subs	r3, r3, r2
 8005b2c:	eba3 0309 	sub.w	r3, r3, r9
 8005b30:	4543      	cmp	r3, r8
 8005b32:	f77f af79 	ble.w	8005a28 <_printf_float+0x250>
 8005b36:	2301      	movs	r3, #1
 8005b38:	4652      	mov	r2, sl
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	47b8      	blx	r7
 8005b40:	3001      	adds	r0, #1
 8005b42:	f43f aeaa 	beq.w	800589a <_printf_float+0xc2>
 8005b46:	f108 0801 	add.w	r8, r8, #1
 8005b4a:	e7ec      	b.n	8005b26 <_printf_float+0x34e>
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	4631      	mov	r1, r6
 8005b50:	4642      	mov	r2, r8
 8005b52:	4628      	mov	r0, r5
 8005b54:	47b8      	blx	r7
 8005b56:	3001      	adds	r0, #1
 8005b58:	d1c0      	bne.n	8005adc <_printf_float+0x304>
 8005b5a:	e69e      	b.n	800589a <_printf_float+0xc2>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4628      	mov	r0, r5
 8005b62:	9205      	str	r2, [sp, #20]
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	f43f ae97 	beq.w	800589a <_printf_float+0xc2>
 8005b6c:	9a05      	ldr	r2, [sp, #20]
 8005b6e:	f10b 0b01 	add.w	fp, fp, #1
 8005b72:	e7b9      	b.n	8005ae8 <_printf_float+0x310>
 8005b74:	ee18 3a10 	vmov	r3, s16
 8005b78:	4652      	mov	r2, sl
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	47b8      	blx	r7
 8005b80:	3001      	adds	r0, #1
 8005b82:	d1be      	bne.n	8005b02 <_printf_float+0x32a>
 8005b84:	e689      	b.n	800589a <_printf_float+0xc2>
 8005b86:	9a05      	ldr	r2, [sp, #20]
 8005b88:	464b      	mov	r3, r9
 8005b8a:	4442      	add	r2, r8
 8005b8c:	4631      	mov	r1, r6
 8005b8e:	4628      	mov	r0, r5
 8005b90:	47b8      	blx	r7
 8005b92:	3001      	adds	r0, #1
 8005b94:	d1c1      	bne.n	8005b1a <_printf_float+0x342>
 8005b96:	e680      	b.n	800589a <_printf_float+0xc2>
 8005b98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b9a:	2a01      	cmp	r2, #1
 8005b9c:	dc01      	bgt.n	8005ba2 <_printf_float+0x3ca>
 8005b9e:	07db      	lsls	r3, r3, #31
 8005ba0:	d538      	bpl.n	8005c14 <_printf_float+0x43c>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4642      	mov	r2, r8
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4628      	mov	r0, r5
 8005baa:	47b8      	blx	r7
 8005bac:	3001      	adds	r0, #1
 8005bae:	f43f ae74 	beq.w	800589a <_printf_float+0xc2>
 8005bb2:	ee18 3a10 	vmov	r3, s16
 8005bb6:	4652      	mov	r2, sl
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b8      	blx	r7
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f43f ae6b 	beq.w	800589a <_printf_float+0xc2>
 8005bc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f7fa ff84 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bd0:	b9d8      	cbnz	r0, 8005c0a <_printf_float+0x432>
 8005bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bd4:	f108 0201 	add.w	r2, r8, #1
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4628      	mov	r0, r5
 8005bde:	47b8      	blx	r7
 8005be0:	3001      	adds	r0, #1
 8005be2:	d10e      	bne.n	8005c02 <_printf_float+0x42a>
 8005be4:	e659      	b.n	800589a <_printf_float+0xc2>
 8005be6:	2301      	movs	r3, #1
 8005be8:	4652      	mov	r2, sl
 8005bea:	4631      	mov	r1, r6
 8005bec:	4628      	mov	r0, r5
 8005bee:	47b8      	blx	r7
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	f43f ae52 	beq.w	800589a <_printf_float+0xc2>
 8005bf6:	f108 0801 	add.w	r8, r8, #1
 8005bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	4543      	cmp	r3, r8
 8005c00:	dcf1      	bgt.n	8005be6 <_printf_float+0x40e>
 8005c02:	464b      	mov	r3, r9
 8005c04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c08:	e6dc      	b.n	80059c4 <_printf_float+0x1ec>
 8005c0a:	f04f 0800 	mov.w	r8, #0
 8005c0e:	f104 0a1a 	add.w	sl, r4, #26
 8005c12:	e7f2      	b.n	8005bfa <_printf_float+0x422>
 8005c14:	2301      	movs	r3, #1
 8005c16:	4642      	mov	r2, r8
 8005c18:	e7df      	b.n	8005bda <_printf_float+0x402>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	464a      	mov	r2, r9
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	f43f ae38 	beq.w	800589a <_printf_float+0xc2>
 8005c2a:	f108 0801 	add.w	r8, r8, #1
 8005c2e:	68e3      	ldr	r3, [r4, #12]
 8005c30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c32:	1a5b      	subs	r3, r3, r1
 8005c34:	4543      	cmp	r3, r8
 8005c36:	dcf0      	bgt.n	8005c1a <_printf_float+0x442>
 8005c38:	e6fa      	b.n	8005a30 <_printf_float+0x258>
 8005c3a:	f04f 0800 	mov.w	r8, #0
 8005c3e:	f104 0919 	add.w	r9, r4, #25
 8005c42:	e7f4      	b.n	8005c2e <_printf_float+0x456>

08005c44 <_printf_common>:
 8005c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c48:	4616      	mov	r6, r2
 8005c4a:	4699      	mov	r9, r3
 8005c4c:	688a      	ldr	r2, [r1, #8]
 8005c4e:	690b      	ldr	r3, [r1, #16]
 8005c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c54:	4293      	cmp	r3, r2
 8005c56:	bfb8      	it	lt
 8005c58:	4613      	movlt	r3, r2
 8005c5a:	6033      	str	r3, [r6, #0]
 8005c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c60:	4607      	mov	r7, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	b10a      	cbz	r2, 8005c6a <_printf_common+0x26>
 8005c66:	3301      	adds	r3, #1
 8005c68:	6033      	str	r3, [r6, #0]
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	0699      	lsls	r1, r3, #26
 8005c6e:	bf42      	ittt	mi
 8005c70:	6833      	ldrmi	r3, [r6, #0]
 8005c72:	3302      	addmi	r3, #2
 8005c74:	6033      	strmi	r3, [r6, #0]
 8005c76:	6825      	ldr	r5, [r4, #0]
 8005c78:	f015 0506 	ands.w	r5, r5, #6
 8005c7c:	d106      	bne.n	8005c8c <_printf_common+0x48>
 8005c7e:	f104 0a19 	add.w	sl, r4, #25
 8005c82:	68e3      	ldr	r3, [r4, #12]
 8005c84:	6832      	ldr	r2, [r6, #0]
 8005c86:	1a9b      	subs	r3, r3, r2
 8005c88:	42ab      	cmp	r3, r5
 8005c8a:	dc26      	bgt.n	8005cda <_printf_common+0x96>
 8005c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c90:	1e13      	subs	r3, r2, #0
 8005c92:	6822      	ldr	r2, [r4, #0]
 8005c94:	bf18      	it	ne
 8005c96:	2301      	movne	r3, #1
 8005c98:	0692      	lsls	r2, r2, #26
 8005c9a:	d42b      	bmi.n	8005cf4 <_printf_common+0xb0>
 8005c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ca0:	4649      	mov	r1, r9
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	47c0      	blx	r8
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	d01e      	beq.n	8005ce8 <_printf_common+0xa4>
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	68e5      	ldr	r5, [r4, #12]
 8005cae:	6832      	ldr	r2, [r6, #0]
 8005cb0:	f003 0306 	and.w	r3, r3, #6
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	bf08      	it	eq
 8005cb8:	1aad      	subeq	r5, r5, r2
 8005cba:	68a3      	ldr	r3, [r4, #8]
 8005cbc:	6922      	ldr	r2, [r4, #16]
 8005cbe:	bf0c      	ite	eq
 8005cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cc4:	2500      	movne	r5, #0
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	bfc4      	itt	gt
 8005cca:	1a9b      	subgt	r3, r3, r2
 8005ccc:	18ed      	addgt	r5, r5, r3
 8005cce:	2600      	movs	r6, #0
 8005cd0:	341a      	adds	r4, #26
 8005cd2:	42b5      	cmp	r5, r6
 8005cd4:	d11a      	bne.n	8005d0c <_printf_common+0xc8>
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	e008      	b.n	8005cec <_printf_common+0xa8>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4652      	mov	r2, sl
 8005cde:	4649      	mov	r1, r9
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	47c0      	blx	r8
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d103      	bne.n	8005cf0 <_printf_common+0xac>
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf0:	3501      	adds	r5, #1
 8005cf2:	e7c6      	b.n	8005c82 <_printf_common+0x3e>
 8005cf4:	18e1      	adds	r1, r4, r3
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	2030      	movs	r0, #48	; 0x30
 8005cfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cfe:	4422      	add	r2, r4
 8005d00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d08:	3302      	adds	r3, #2
 8005d0a:	e7c7      	b.n	8005c9c <_printf_common+0x58>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	4622      	mov	r2, r4
 8005d10:	4649      	mov	r1, r9
 8005d12:	4638      	mov	r0, r7
 8005d14:	47c0      	blx	r8
 8005d16:	3001      	adds	r0, #1
 8005d18:	d0e6      	beq.n	8005ce8 <_printf_common+0xa4>
 8005d1a:	3601      	adds	r6, #1
 8005d1c:	e7d9      	b.n	8005cd2 <_printf_common+0x8e>
	...

08005d20 <_printf_i>:
 8005d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d24:	7e0f      	ldrb	r7, [r1, #24]
 8005d26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d28:	2f78      	cmp	r7, #120	; 0x78
 8005d2a:	4691      	mov	r9, r2
 8005d2c:	4680      	mov	r8, r0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	469a      	mov	sl, r3
 8005d32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d36:	d807      	bhi.n	8005d48 <_printf_i+0x28>
 8005d38:	2f62      	cmp	r7, #98	; 0x62
 8005d3a:	d80a      	bhi.n	8005d52 <_printf_i+0x32>
 8005d3c:	2f00      	cmp	r7, #0
 8005d3e:	f000 80d8 	beq.w	8005ef2 <_printf_i+0x1d2>
 8005d42:	2f58      	cmp	r7, #88	; 0x58
 8005d44:	f000 80a3 	beq.w	8005e8e <_printf_i+0x16e>
 8005d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d50:	e03a      	b.n	8005dc8 <_printf_i+0xa8>
 8005d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d56:	2b15      	cmp	r3, #21
 8005d58:	d8f6      	bhi.n	8005d48 <_printf_i+0x28>
 8005d5a:	a101      	add	r1, pc, #4	; (adr r1, 8005d60 <_printf_i+0x40>)
 8005d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d60:	08005db9 	.word	0x08005db9
 8005d64:	08005dcd 	.word	0x08005dcd
 8005d68:	08005d49 	.word	0x08005d49
 8005d6c:	08005d49 	.word	0x08005d49
 8005d70:	08005d49 	.word	0x08005d49
 8005d74:	08005d49 	.word	0x08005d49
 8005d78:	08005dcd 	.word	0x08005dcd
 8005d7c:	08005d49 	.word	0x08005d49
 8005d80:	08005d49 	.word	0x08005d49
 8005d84:	08005d49 	.word	0x08005d49
 8005d88:	08005d49 	.word	0x08005d49
 8005d8c:	08005ed9 	.word	0x08005ed9
 8005d90:	08005dfd 	.word	0x08005dfd
 8005d94:	08005ebb 	.word	0x08005ebb
 8005d98:	08005d49 	.word	0x08005d49
 8005d9c:	08005d49 	.word	0x08005d49
 8005da0:	08005efb 	.word	0x08005efb
 8005da4:	08005d49 	.word	0x08005d49
 8005da8:	08005dfd 	.word	0x08005dfd
 8005dac:	08005d49 	.word	0x08005d49
 8005db0:	08005d49 	.word	0x08005d49
 8005db4:	08005ec3 	.word	0x08005ec3
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	1d1a      	adds	r2, r3, #4
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	602a      	str	r2, [r5, #0]
 8005dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0a3      	b.n	8005f14 <_printf_i+0x1f4>
 8005dcc:	6820      	ldr	r0, [r4, #0]
 8005dce:	6829      	ldr	r1, [r5, #0]
 8005dd0:	0606      	lsls	r6, r0, #24
 8005dd2:	f101 0304 	add.w	r3, r1, #4
 8005dd6:	d50a      	bpl.n	8005dee <_printf_i+0xce>
 8005dd8:	680e      	ldr	r6, [r1, #0]
 8005dda:	602b      	str	r3, [r5, #0]
 8005ddc:	2e00      	cmp	r6, #0
 8005dde:	da03      	bge.n	8005de8 <_printf_i+0xc8>
 8005de0:	232d      	movs	r3, #45	; 0x2d
 8005de2:	4276      	negs	r6, r6
 8005de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005de8:	485e      	ldr	r0, [pc, #376]	; (8005f64 <_printf_i+0x244>)
 8005dea:	230a      	movs	r3, #10
 8005dec:	e019      	b.n	8005e22 <_printf_i+0x102>
 8005dee:	680e      	ldr	r6, [r1, #0]
 8005df0:	602b      	str	r3, [r5, #0]
 8005df2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005df6:	bf18      	it	ne
 8005df8:	b236      	sxthne	r6, r6
 8005dfa:	e7ef      	b.n	8005ddc <_printf_i+0xbc>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	6820      	ldr	r0, [r4, #0]
 8005e00:	1d19      	adds	r1, r3, #4
 8005e02:	6029      	str	r1, [r5, #0]
 8005e04:	0601      	lsls	r1, r0, #24
 8005e06:	d501      	bpl.n	8005e0c <_printf_i+0xec>
 8005e08:	681e      	ldr	r6, [r3, #0]
 8005e0a:	e002      	b.n	8005e12 <_printf_i+0xf2>
 8005e0c:	0646      	lsls	r6, r0, #25
 8005e0e:	d5fb      	bpl.n	8005e08 <_printf_i+0xe8>
 8005e10:	881e      	ldrh	r6, [r3, #0]
 8005e12:	4854      	ldr	r0, [pc, #336]	; (8005f64 <_printf_i+0x244>)
 8005e14:	2f6f      	cmp	r7, #111	; 0x6f
 8005e16:	bf0c      	ite	eq
 8005e18:	2308      	moveq	r3, #8
 8005e1a:	230a      	movne	r3, #10
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e22:	6865      	ldr	r5, [r4, #4]
 8005e24:	60a5      	str	r5, [r4, #8]
 8005e26:	2d00      	cmp	r5, #0
 8005e28:	bfa2      	ittt	ge
 8005e2a:	6821      	ldrge	r1, [r4, #0]
 8005e2c:	f021 0104 	bicge.w	r1, r1, #4
 8005e30:	6021      	strge	r1, [r4, #0]
 8005e32:	b90e      	cbnz	r6, 8005e38 <_printf_i+0x118>
 8005e34:	2d00      	cmp	r5, #0
 8005e36:	d04d      	beq.n	8005ed4 <_printf_i+0x1b4>
 8005e38:	4615      	mov	r5, r2
 8005e3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e3e:	fb03 6711 	mls	r7, r3, r1, r6
 8005e42:	5dc7      	ldrb	r7, [r0, r7]
 8005e44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e48:	4637      	mov	r7, r6
 8005e4a:	42bb      	cmp	r3, r7
 8005e4c:	460e      	mov	r6, r1
 8005e4e:	d9f4      	bls.n	8005e3a <_printf_i+0x11a>
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d10b      	bne.n	8005e6c <_printf_i+0x14c>
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	07de      	lsls	r6, r3, #31
 8005e58:	d508      	bpl.n	8005e6c <_printf_i+0x14c>
 8005e5a:	6923      	ldr	r3, [r4, #16]
 8005e5c:	6861      	ldr	r1, [r4, #4]
 8005e5e:	4299      	cmp	r1, r3
 8005e60:	bfde      	ittt	le
 8005e62:	2330      	movle	r3, #48	; 0x30
 8005e64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e6c:	1b52      	subs	r2, r2, r5
 8005e6e:	6122      	str	r2, [r4, #16]
 8005e70:	f8cd a000 	str.w	sl, [sp]
 8005e74:	464b      	mov	r3, r9
 8005e76:	aa03      	add	r2, sp, #12
 8005e78:	4621      	mov	r1, r4
 8005e7a:	4640      	mov	r0, r8
 8005e7c:	f7ff fee2 	bl	8005c44 <_printf_common>
 8005e80:	3001      	adds	r0, #1
 8005e82:	d14c      	bne.n	8005f1e <_printf_i+0x1fe>
 8005e84:	f04f 30ff 	mov.w	r0, #4294967295
 8005e88:	b004      	add	sp, #16
 8005e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8e:	4835      	ldr	r0, [pc, #212]	; (8005f64 <_printf_i+0x244>)
 8005e90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e94:	6829      	ldr	r1, [r5, #0]
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e9c:	6029      	str	r1, [r5, #0]
 8005e9e:	061d      	lsls	r5, r3, #24
 8005ea0:	d514      	bpl.n	8005ecc <_printf_i+0x1ac>
 8005ea2:	07df      	lsls	r7, r3, #31
 8005ea4:	bf44      	itt	mi
 8005ea6:	f043 0320 	orrmi.w	r3, r3, #32
 8005eaa:	6023      	strmi	r3, [r4, #0]
 8005eac:	b91e      	cbnz	r6, 8005eb6 <_printf_i+0x196>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	f023 0320 	bic.w	r3, r3, #32
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	2310      	movs	r3, #16
 8005eb8:	e7b0      	b.n	8005e1c <_printf_i+0xfc>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	f043 0320 	orr.w	r3, r3, #32
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	2378      	movs	r3, #120	; 0x78
 8005ec4:	4828      	ldr	r0, [pc, #160]	; (8005f68 <_printf_i+0x248>)
 8005ec6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005eca:	e7e3      	b.n	8005e94 <_printf_i+0x174>
 8005ecc:	0659      	lsls	r1, r3, #25
 8005ece:	bf48      	it	mi
 8005ed0:	b2b6      	uxthmi	r6, r6
 8005ed2:	e7e6      	b.n	8005ea2 <_printf_i+0x182>
 8005ed4:	4615      	mov	r5, r2
 8005ed6:	e7bb      	b.n	8005e50 <_printf_i+0x130>
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	6826      	ldr	r6, [r4, #0]
 8005edc:	6961      	ldr	r1, [r4, #20]
 8005ede:	1d18      	adds	r0, r3, #4
 8005ee0:	6028      	str	r0, [r5, #0]
 8005ee2:	0635      	lsls	r5, r6, #24
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	d501      	bpl.n	8005eec <_printf_i+0x1cc>
 8005ee8:	6019      	str	r1, [r3, #0]
 8005eea:	e002      	b.n	8005ef2 <_printf_i+0x1d2>
 8005eec:	0670      	lsls	r0, r6, #25
 8005eee:	d5fb      	bpl.n	8005ee8 <_printf_i+0x1c8>
 8005ef0:	8019      	strh	r1, [r3, #0]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	6123      	str	r3, [r4, #16]
 8005ef6:	4615      	mov	r5, r2
 8005ef8:	e7ba      	b.n	8005e70 <_printf_i+0x150>
 8005efa:	682b      	ldr	r3, [r5, #0]
 8005efc:	1d1a      	adds	r2, r3, #4
 8005efe:	602a      	str	r2, [r5, #0]
 8005f00:	681d      	ldr	r5, [r3, #0]
 8005f02:	6862      	ldr	r2, [r4, #4]
 8005f04:	2100      	movs	r1, #0
 8005f06:	4628      	mov	r0, r5
 8005f08:	f7fa f972 	bl	80001f0 <memchr>
 8005f0c:	b108      	cbz	r0, 8005f12 <_printf_i+0x1f2>
 8005f0e:	1b40      	subs	r0, r0, r5
 8005f10:	6060      	str	r0, [r4, #4]
 8005f12:	6863      	ldr	r3, [r4, #4]
 8005f14:	6123      	str	r3, [r4, #16]
 8005f16:	2300      	movs	r3, #0
 8005f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f1c:	e7a8      	b.n	8005e70 <_printf_i+0x150>
 8005f1e:	6923      	ldr	r3, [r4, #16]
 8005f20:	462a      	mov	r2, r5
 8005f22:	4649      	mov	r1, r9
 8005f24:	4640      	mov	r0, r8
 8005f26:	47d0      	blx	sl
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d0ab      	beq.n	8005e84 <_printf_i+0x164>
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	079b      	lsls	r3, r3, #30
 8005f30:	d413      	bmi.n	8005f5a <_printf_i+0x23a>
 8005f32:	68e0      	ldr	r0, [r4, #12]
 8005f34:	9b03      	ldr	r3, [sp, #12]
 8005f36:	4298      	cmp	r0, r3
 8005f38:	bfb8      	it	lt
 8005f3a:	4618      	movlt	r0, r3
 8005f3c:	e7a4      	b.n	8005e88 <_printf_i+0x168>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	4632      	mov	r2, r6
 8005f42:	4649      	mov	r1, r9
 8005f44:	4640      	mov	r0, r8
 8005f46:	47d0      	blx	sl
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d09b      	beq.n	8005e84 <_printf_i+0x164>
 8005f4c:	3501      	adds	r5, #1
 8005f4e:	68e3      	ldr	r3, [r4, #12]
 8005f50:	9903      	ldr	r1, [sp, #12]
 8005f52:	1a5b      	subs	r3, r3, r1
 8005f54:	42ab      	cmp	r3, r5
 8005f56:	dcf2      	bgt.n	8005f3e <_printf_i+0x21e>
 8005f58:	e7eb      	b.n	8005f32 <_printf_i+0x212>
 8005f5a:	2500      	movs	r5, #0
 8005f5c:	f104 0619 	add.w	r6, r4, #25
 8005f60:	e7f5      	b.n	8005f4e <_printf_i+0x22e>
 8005f62:	bf00      	nop
 8005f64:	0800a05a 	.word	0x0800a05a
 8005f68:	0800a06b 	.word	0x0800a06b

08005f6c <_scanf_float>:
 8005f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f70:	b087      	sub	sp, #28
 8005f72:	4617      	mov	r7, r2
 8005f74:	9303      	str	r3, [sp, #12]
 8005f76:	688b      	ldr	r3, [r1, #8]
 8005f78:	1e5a      	subs	r2, r3, #1
 8005f7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f7e:	bf83      	ittte	hi
 8005f80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f84:	195b      	addhi	r3, r3, r5
 8005f86:	9302      	strhi	r3, [sp, #8]
 8005f88:	2300      	movls	r3, #0
 8005f8a:	bf86      	itte	hi
 8005f8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f90:	608b      	strhi	r3, [r1, #8]
 8005f92:	9302      	strls	r3, [sp, #8]
 8005f94:	680b      	ldr	r3, [r1, #0]
 8005f96:	468b      	mov	fp, r1
 8005f98:	2500      	movs	r5, #0
 8005f9a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005f9e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005fa2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005fa6:	4680      	mov	r8, r0
 8005fa8:	460c      	mov	r4, r1
 8005faa:	465e      	mov	r6, fp
 8005fac:	46aa      	mov	sl, r5
 8005fae:	46a9      	mov	r9, r5
 8005fb0:	9501      	str	r5, [sp, #4]
 8005fb2:	68a2      	ldr	r2, [r4, #8]
 8005fb4:	b152      	cbz	r2, 8005fcc <_scanf_float+0x60>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b4e      	cmp	r3, #78	; 0x4e
 8005fbc:	d864      	bhi.n	8006088 <_scanf_float+0x11c>
 8005fbe:	2b40      	cmp	r3, #64	; 0x40
 8005fc0:	d83c      	bhi.n	800603c <_scanf_float+0xd0>
 8005fc2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005fc6:	b2c8      	uxtb	r0, r1
 8005fc8:	280e      	cmp	r0, #14
 8005fca:	d93a      	bls.n	8006042 <_scanf_float+0xd6>
 8005fcc:	f1b9 0f00 	cmp.w	r9, #0
 8005fd0:	d003      	beq.n	8005fda <_scanf_float+0x6e>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fde:	f1ba 0f01 	cmp.w	sl, #1
 8005fe2:	f200 8113 	bhi.w	800620c <_scanf_float+0x2a0>
 8005fe6:	455e      	cmp	r6, fp
 8005fe8:	f200 8105 	bhi.w	80061f6 <_scanf_float+0x28a>
 8005fec:	2501      	movs	r5, #1
 8005fee:	4628      	mov	r0, r5
 8005ff0:	b007      	add	sp, #28
 8005ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005ffa:	2a0d      	cmp	r2, #13
 8005ffc:	d8e6      	bhi.n	8005fcc <_scanf_float+0x60>
 8005ffe:	a101      	add	r1, pc, #4	; (adr r1, 8006004 <_scanf_float+0x98>)
 8006000:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006004:	08006143 	.word	0x08006143
 8006008:	08005fcd 	.word	0x08005fcd
 800600c:	08005fcd 	.word	0x08005fcd
 8006010:	08005fcd 	.word	0x08005fcd
 8006014:	080061a3 	.word	0x080061a3
 8006018:	0800617b 	.word	0x0800617b
 800601c:	08005fcd 	.word	0x08005fcd
 8006020:	08005fcd 	.word	0x08005fcd
 8006024:	08006151 	.word	0x08006151
 8006028:	08005fcd 	.word	0x08005fcd
 800602c:	08005fcd 	.word	0x08005fcd
 8006030:	08005fcd 	.word	0x08005fcd
 8006034:	08005fcd 	.word	0x08005fcd
 8006038:	08006109 	.word	0x08006109
 800603c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006040:	e7db      	b.n	8005ffa <_scanf_float+0x8e>
 8006042:	290e      	cmp	r1, #14
 8006044:	d8c2      	bhi.n	8005fcc <_scanf_float+0x60>
 8006046:	a001      	add	r0, pc, #4	; (adr r0, 800604c <_scanf_float+0xe0>)
 8006048:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800604c:	080060fb 	.word	0x080060fb
 8006050:	08005fcd 	.word	0x08005fcd
 8006054:	080060fb 	.word	0x080060fb
 8006058:	0800618f 	.word	0x0800618f
 800605c:	08005fcd 	.word	0x08005fcd
 8006060:	080060a9 	.word	0x080060a9
 8006064:	080060e5 	.word	0x080060e5
 8006068:	080060e5 	.word	0x080060e5
 800606c:	080060e5 	.word	0x080060e5
 8006070:	080060e5 	.word	0x080060e5
 8006074:	080060e5 	.word	0x080060e5
 8006078:	080060e5 	.word	0x080060e5
 800607c:	080060e5 	.word	0x080060e5
 8006080:	080060e5 	.word	0x080060e5
 8006084:	080060e5 	.word	0x080060e5
 8006088:	2b6e      	cmp	r3, #110	; 0x6e
 800608a:	d809      	bhi.n	80060a0 <_scanf_float+0x134>
 800608c:	2b60      	cmp	r3, #96	; 0x60
 800608e:	d8b2      	bhi.n	8005ff6 <_scanf_float+0x8a>
 8006090:	2b54      	cmp	r3, #84	; 0x54
 8006092:	d077      	beq.n	8006184 <_scanf_float+0x218>
 8006094:	2b59      	cmp	r3, #89	; 0x59
 8006096:	d199      	bne.n	8005fcc <_scanf_float+0x60>
 8006098:	2d07      	cmp	r5, #7
 800609a:	d197      	bne.n	8005fcc <_scanf_float+0x60>
 800609c:	2508      	movs	r5, #8
 800609e:	e029      	b.n	80060f4 <_scanf_float+0x188>
 80060a0:	2b74      	cmp	r3, #116	; 0x74
 80060a2:	d06f      	beq.n	8006184 <_scanf_float+0x218>
 80060a4:	2b79      	cmp	r3, #121	; 0x79
 80060a6:	e7f6      	b.n	8006096 <_scanf_float+0x12a>
 80060a8:	6821      	ldr	r1, [r4, #0]
 80060aa:	05c8      	lsls	r0, r1, #23
 80060ac:	d51a      	bpl.n	80060e4 <_scanf_float+0x178>
 80060ae:	9b02      	ldr	r3, [sp, #8]
 80060b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80060b4:	6021      	str	r1, [r4, #0]
 80060b6:	f109 0901 	add.w	r9, r9, #1
 80060ba:	b11b      	cbz	r3, 80060c4 <_scanf_float+0x158>
 80060bc:	3b01      	subs	r3, #1
 80060be:	3201      	adds	r2, #1
 80060c0:	9302      	str	r3, [sp, #8]
 80060c2:	60a2      	str	r2, [r4, #8]
 80060c4:	68a3      	ldr	r3, [r4, #8]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	60a3      	str	r3, [r4, #8]
 80060ca:	6923      	ldr	r3, [r4, #16]
 80060cc:	3301      	adds	r3, #1
 80060ce:	6123      	str	r3, [r4, #16]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	607b      	str	r3, [r7, #4]
 80060d8:	f340 8084 	ble.w	80061e4 <_scanf_float+0x278>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	3301      	adds	r3, #1
 80060e0:	603b      	str	r3, [r7, #0]
 80060e2:	e766      	b.n	8005fb2 <_scanf_float+0x46>
 80060e4:	eb1a 0f05 	cmn.w	sl, r5
 80060e8:	f47f af70 	bne.w	8005fcc <_scanf_float+0x60>
 80060ec:	6822      	ldr	r2, [r4, #0]
 80060ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80060f2:	6022      	str	r2, [r4, #0]
 80060f4:	f806 3b01 	strb.w	r3, [r6], #1
 80060f8:	e7e4      	b.n	80060c4 <_scanf_float+0x158>
 80060fa:	6822      	ldr	r2, [r4, #0]
 80060fc:	0610      	lsls	r0, r2, #24
 80060fe:	f57f af65 	bpl.w	8005fcc <_scanf_float+0x60>
 8006102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006106:	e7f4      	b.n	80060f2 <_scanf_float+0x186>
 8006108:	f1ba 0f00 	cmp.w	sl, #0
 800610c:	d10e      	bne.n	800612c <_scanf_float+0x1c0>
 800610e:	f1b9 0f00 	cmp.w	r9, #0
 8006112:	d10e      	bne.n	8006132 <_scanf_float+0x1c6>
 8006114:	6822      	ldr	r2, [r4, #0]
 8006116:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800611a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800611e:	d108      	bne.n	8006132 <_scanf_float+0x1c6>
 8006120:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006124:	6022      	str	r2, [r4, #0]
 8006126:	f04f 0a01 	mov.w	sl, #1
 800612a:	e7e3      	b.n	80060f4 <_scanf_float+0x188>
 800612c:	f1ba 0f02 	cmp.w	sl, #2
 8006130:	d055      	beq.n	80061de <_scanf_float+0x272>
 8006132:	2d01      	cmp	r5, #1
 8006134:	d002      	beq.n	800613c <_scanf_float+0x1d0>
 8006136:	2d04      	cmp	r5, #4
 8006138:	f47f af48 	bne.w	8005fcc <_scanf_float+0x60>
 800613c:	3501      	adds	r5, #1
 800613e:	b2ed      	uxtb	r5, r5
 8006140:	e7d8      	b.n	80060f4 <_scanf_float+0x188>
 8006142:	f1ba 0f01 	cmp.w	sl, #1
 8006146:	f47f af41 	bne.w	8005fcc <_scanf_float+0x60>
 800614a:	f04f 0a02 	mov.w	sl, #2
 800614e:	e7d1      	b.n	80060f4 <_scanf_float+0x188>
 8006150:	b97d      	cbnz	r5, 8006172 <_scanf_float+0x206>
 8006152:	f1b9 0f00 	cmp.w	r9, #0
 8006156:	f47f af3c 	bne.w	8005fd2 <_scanf_float+0x66>
 800615a:	6822      	ldr	r2, [r4, #0]
 800615c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006160:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006164:	f47f af39 	bne.w	8005fda <_scanf_float+0x6e>
 8006168:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800616c:	6022      	str	r2, [r4, #0]
 800616e:	2501      	movs	r5, #1
 8006170:	e7c0      	b.n	80060f4 <_scanf_float+0x188>
 8006172:	2d03      	cmp	r5, #3
 8006174:	d0e2      	beq.n	800613c <_scanf_float+0x1d0>
 8006176:	2d05      	cmp	r5, #5
 8006178:	e7de      	b.n	8006138 <_scanf_float+0x1cc>
 800617a:	2d02      	cmp	r5, #2
 800617c:	f47f af26 	bne.w	8005fcc <_scanf_float+0x60>
 8006180:	2503      	movs	r5, #3
 8006182:	e7b7      	b.n	80060f4 <_scanf_float+0x188>
 8006184:	2d06      	cmp	r5, #6
 8006186:	f47f af21 	bne.w	8005fcc <_scanf_float+0x60>
 800618a:	2507      	movs	r5, #7
 800618c:	e7b2      	b.n	80060f4 <_scanf_float+0x188>
 800618e:	6822      	ldr	r2, [r4, #0]
 8006190:	0591      	lsls	r1, r2, #22
 8006192:	f57f af1b 	bpl.w	8005fcc <_scanf_float+0x60>
 8006196:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800619a:	6022      	str	r2, [r4, #0]
 800619c:	f8cd 9004 	str.w	r9, [sp, #4]
 80061a0:	e7a8      	b.n	80060f4 <_scanf_float+0x188>
 80061a2:	6822      	ldr	r2, [r4, #0]
 80061a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80061a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80061ac:	d006      	beq.n	80061bc <_scanf_float+0x250>
 80061ae:	0550      	lsls	r0, r2, #21
 80061b0:	f57f af0c 	bpl.w	8005fcc <_scanf_float+0x60>
 80061b4:	f1b9 0f00 	cmp.w	r9, #0
 80061b8:	f43f af0f 	beq.w	8005fda <_scanf_float+0x6e>
 80061bc:	0591      	lsls	r1, r2, #22
 80061be:	bf58      	it	pl
 80061c0:	9901      	ldrpl	r1, [sp, #4]
 80061c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061c6:	bf58      	it	pl
 80061c8:	eba9 0101 	subpl.w	r1, r9, r1
 80061cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80061d0:	bf58      	it	pl
 80061d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80061d6:	6022      	str	r2, [r4, #0]
 80061d8:	f04f 0900 	mov.w	r9, #0
 80061dc:	e78a      	b.n	80060f4 <_scanf_float+0x188>
 80061de:	f04f 0a03 	mov.w	sl, #3
 80061e2:	e787      	b.n	80060f4 <_scanf_float+0x188>
 80061e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80061e8:	4639      	mov	r1, r7
 80061ea:	4640      	mov	r0, r8
 80061ec:	4798      	blx	r3
 80061ee:	2800      	cmp	r0, #0
 80061f0:	f43f aedf 	beq.w	8005fb2 <_scanf_float+0x46>
 80061f4:	e6ea      	b.n	8005fcc <_scanf_float+0x60>
 80061f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061fe:	463a      	mov	r2, r7
 8006200:	4640      	mov	r0, r8
 8006202:	4798      	blx	r3
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	3b01      	subs	r3, #1
 8006208:	6123      	str	r3, [r4, #16]
 800620a:	e6ec      	b.n	8005fe6 <_scanf_float+0x7a>
 800620c:	1e6b      	subs	r3, r5, #1
 800620e:	2b06      	cmp	r3, #6
 8006210:	d825      	bhi.n	800625e <_scanf_float+0x2f2>
 8006212:	2d02      	cmp	r5, #2
 8006214:	d836      	bhi.n	8006284 <_scanf_float+0x318>
 8006216:	455e      	cmp	r6, fp
 8006218:	f67f aee8 	bls.w	8005fec <_scanf_float+0x80>
 800621c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006220:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006224:	463a      	mov	r2, r7
 8006226:	4640      	mov	r0, r8
 8006228:	4798      	blx	r3
 800622a:	6923      	ldr	r3, [r4, #16]
 800622c:	3b01      	subs	r3, #1
 800622e:	6123      	str	r3, [r4, #16]
 8006230:	e7f1      	b.n	8006216 <_scanf_float+0x2aa>
 8006232:	9802      	ldr	r0, [sp, #8]
 8006234:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006238:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800623c:	9002      	str	r0, [sp, #8]
 800623e:	463a      	mov	r2, r7
 8006240:	4640      	mov	r0, r8
 8006242:	4798      	blx	r3
 8006244:	6923      	ldr	r3, [r4, #16]
 8006246:	3b01      	subs	r3, #1
 8006248:	6123      	str	r3, [r4, #16]
 800624a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800624e:	fa5f fa8a 	uxtb.w	sl, sl
 8006252:	f1ba 0f02 	cmp.w	sl, #2
 8006256:	d1ec      	bne.n	8006232 <_scanf_float+0x2c6>
 8006258:	3d03      	subs	r5, #3
 800625a:	b2ed      	uxtb	r5, r5
 800625c:	1b76      	subs	r6, r6, r5
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	05da      	lsls	r2, r3, #23
 8006262:	d52f      	bpl.n	80062c4 <_scanf_float+0x358>
 8006264:	055b      	lsls	r3, r3, #21
 8006266:	d510      	bpl.n	800628a <_scanf_float+0x31e>
 8006268:	455e      	cmp	r6, fp
 800626a:	f67f aebf 	bls.w	8005fec <_scanf_float+0x80>
 800626e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006272:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006276:	463a      	mov	r2, r7
 8006278:	4640      	mov	r0, r8
 800627a:	4798      	blx	r3
 800627c:	6923      	ldr	r3, [r4, #16]
 800627e:	3b01      	subs	r3, #1
 8006280:	6123      	str	r3, [r4, #16]
 8006282:	e7f1      	b.n	8006268 <_scanf_float+0x2fc>
 8006284:	46aa      	mov	sl, r5
 8006286:	9602      	str	r6, [sp, #8]
 8006288:	e7df      	b.n	800624a <_scanf_float+0x2de>
 800628a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800628e:	6923      	ldr	r3, [r4, #16]
 8006290:	2965      	cmp	r1, #101	; 0x65
 8006292:	f103 33ff 	add.w	r3, r3, #4294967295
 8006296:	f106 35ff 	add.w	r5, r6, #4294967295
 800629a:	6123      	str	r3, [r4, #16]
 800629c:	d00c      	beq.n	80062b8 <_scanf_float+0x34c>
 800629e:	2945      	cmp	r1, #69	; 0x45
 80062a0:	d00a      	beq.n	80062b8 <_scanf_float+0x34c>
 80062a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062a6:	463a      	mov	r2, r7
 80062a8:	4640      	mov	r0, r8
 80062aa:	4798      	blx	r3
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	1eb5      	subs	r5, r6, #2
 80062b6:	6123      	str	r3, [r4, #16]
 80062b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062bc:	463a      	mov	r2, r7
 80062be:	4640      	mov	r0, r8
 80062c0:	4798      	blx	r3
 80062c2:	462e      	mov	r6, r5
 80062c4:	6825      	ldr	r5, [r4, #0]
 80062c6:	f015 0510 	ands.w	r5, r5, #16
 80062ca:	d159      	bne.n	8006380 <_scanf_float+0x414>
 80062cc:	7035      	strb	r5, [r6, #0]
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d8:	d11b      	bne.n	8006312 <_scanf_float+0x3a6>
 80062da:	9b01      	ldr	r3, [sp, #4]
 80062dc:	454b      	cmp	r3, r9
 80062de:	eba3 0209 	sub.w	r2, r3, r9
 80062e2:	d123      	bne.n	800632c <_scanf_float+0x3c0>
 80062e4:	2200      	movs	r2, #0
 80062e6:	4659      	mov	r1, fp
 80062e8:	4640      	mov	r0, r8
 80062ea:	f000 fecb 	bl	8007084 <_strtod_r>
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	9b03      	ldr	r3, [sp, #12]
 80062f2:	f012 0f02 	tst.w	r2, #2
 80062f6:	ec57 6b10 	vmov	r6, r7, d0
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	d021      	beq.n	8006342 <_scanf_float+0x3d6>
 80062fe:	9903      	ldr	r1, [sp, #12]
 8006300:	1d1a      	adds	r2, r3, #4
 8006302:	600a      	str	r2, [r1, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	e9c3 6700 	strd	r6, r7, [r3]
 800630a:	68e3      	ldr	r3, [r4, #12]
 800630c:	3301      	adds	r3, #1
 800630e:	60e3      	str	r3, [r4, #12]
 8006310:	e66d      	b.n	8005fee <_scanf_float+0x82>
 8006312:	9b04      	ldr	r3, [sp, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0e5      	beq.n	80062e4 <_scanf_float+0x378>
 8006318:	9905      	ldr	r1, [sp, #20]
 800631a:	230a      	movs	r3, #10
 800631c:	462a      	mov	r2, r5
 800631e:	3101      	adds	r1, #1
 8006320:	4640      	mov	r0, r8
 8006322:	f000 ff37 	bl	8007194 <_strtol_r>
 8006326:	9b04      	ldr	r3, [sp, #16]
 8006328:	9e05      	ldr	r6, [sp, #20]
 800632a:	1ac2      	subs	r2, r0, r3
 800632c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006330:	429e      	cmp	r6, r3
 8006332:	bf28      	it	cs
 8006334:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006338:	4912      	ldr	r1, [pc, #72]	; (8006384 <_scanf_float+0x418>)
 800633a:	4630      	mov	r0, r6
 800633c:	f000 f860 	bl	8006400 <siprintf>
 8006340:	e7d0      	b.n	80062e4 <_scanf_float+0x378>
 8006342:	9903      	ldr	r1, [sp, #12]
 8006344:	f012 0f04 	tst.w	r2, #4
 8006348:	f103 0204 	add.w	r2, r3, #4
 800634c:	600a      	str	r2, [r1, #0]
 800634e:	d1d9      	bne.n	8006304 <_scanf_float+0x398>
 8006350:	f8d3 8000 	ldr.w	r8, [r3]
 8006354:	ee10 2a10 	vmov	r2, s0
 8006358:	ee10 0a10 	vmov	r0, s0
 800635c:	463b      	mov	r3, r7
 800635e:	4639      	mov	r1, r7
 8006360:	f7fa fbec 	bl	8000b3c <__aeabi_dcmpun>
 8006364:	b128      	cbz	r0, 8006372 <_scanf_float+0x406>
 8006366:	4808      	ldr	r0, [pc, #32]	; (8006388 <_scanf_float+0x41c>)
 8006368:	f000 f810 	bl	800638c <nanf>
 800636c:	ed88 0a00 	vstr	s0, [r8]
 8006370:	e7cb      	b.n	800630a <_scanf_float+0x39e>
 8006372:	4630      	mov	r0, r6
 8006374:	4639      	mov	r1, r7
 8006376:	f7fa fc3f 	bl	8000bf8 <__aeabi_d2f>
 800637a:	f8c8 0000 	str.w	r0, [r8]
 800637e:	e7c4      	b.n	800630a <_scanf_float+0x39e>
 8006380:	2500      	movs	r5, #0
 8006382:	e634      	b.n	8005fee <_scanf_float+0x82>
 8006384:	0800a07c 	.word	0x0800a07c
 8006388:	0800a488 	.word	0x0800a488

0800638c <nanf>:
 800638c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006394 <nanf+0x8>
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	7fc00000 	.word	0x7fc00000

08006398 <sniprintf>:
 8006398:	b40c      	push	{r2, r3}
 800639a:	b530      	push	{r4, r5, lr}
 800639c:	4b17      	ldr	r3, [pc, #92]	; (80063fc <sniprintf+0x64>)
 800639e:	1e0c      	subs	r4, r1, #0
 80063a0:	681d      	ldr	r5, [r3, #0]
 80063a2:	b09d      	sub	sp, #116	; 0x74
 80063a4:	da08      	bge.n	80063b8 <sniprintf+0x20>
 80063a6:	238b      	movs	r3, #139	; 0x8b
 80063a8:	602b      	str	r3, [r5, #0]
 80063aa:	f04f 30ff 	mov.w	r0, #4294967295
 80063ae:	b01d      	add	sp, #116	; 0x74
 80063b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063b4:	b002      	add	sp, #8
 80063b6:	4770      	bx	lr
 80063b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80063bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80063c0:	bf14      	ite	ne
 80063c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80063c6:	4623      	moveq	r3, r4
 80063c8:	9304      	str	r3, [sp, #16]
 80063ca:	9307      	str	r3, [sp, #28]
 80063cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063d0:	9002      	str	r0, [sp, #8]
 80063d2:	9006      	str	r0, [sp, #24]
 80063d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80063d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80063da:	ab21      	add	r3, sp, #132	; 0x84
 80063dc:	a902      	add	r1, sp, #8
 80063de:	4628      	mov	r0, r5
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	f002 ff03 	bl	80091ec <_svfiprintf_r>
 80063e6:	1c43      	adds	r3, r0, #1
 80063e8:	bfbc      	itt	lt
 80063ea:	238b      	movlt	r3, #139	; 0x8b
 80063ec:	602b      	strlt	r3, [r5, #0]
 80063ee:	2c00      	cmp	r4, #0
 80063f0:	d0dd      	beq.n	80063ae <sniprintf+0x16>
 80063f2:	9b02      	ldr	r3, [sp, #8]
 80063f4:	2200      	movs	r2, #0
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	e7d9      	b.n	80063ae <sniprintf+0x16>
 80063fa:	bf00      	nop
 80063fc:	20000020 	.word	0x20000020

08006400 <siprintf>:
 8006400:	b40e      	push	{r1, r2, r3}
 8006402:	b500      	push	{lr}
 8006404:	b09c      	sub	sp, #112	; 0x70
 8006406:	ab1d      	add	r3, sp, #116	; 0x74
 8006408:	9002      	str	r0, [sp, #8]
 800640a:	9006      	str	r0, [sp, #24]
 800640c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006410:	4809      	ldr	r0, [pc, #36]	; (8006438 <siprintf+0x38>)
 8006412:	9107      	str	r1, [sp, #28]
 8006414:	9104      	str	r1, [sp, #16]
 8006416:	4909      	ldr	r1, [pc, #36]	; (800643c <siprintf+0x3c>)
 8006418:	f853 2b04 	ldr.w	r2, [r3], #4
 800641c:	9105      	str	r1, [sp, #20]
 800641e:	6800      	ldr	r0, [r0, #0]
 8006420:	9301      	str	r3, [sp, #4]
 8006422:	a902      	add	r1, sp, #8
 8006424:	f002 fee2 	bl	80091ec <_svfiprintf_r>
 8006428:	9b02      	ldr	r3, [sp, #8]
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	b01c      	add	sp, #112	; 0x70
 8006430:	f85d eb04 	ldr.w	lr, [sp], #4
 8006434:	b003      	add	sp, #12
 8006436:	4770      	bx	lr
 8006438:	20000020 	.word	0x20000020
 800643c:	ffff0208 	.word	0xffff0208

08006440 <sulp>:
 8006440:	b570      	push	{r4, r5, r6, lr}
 8006442:	4604      	mov	r4, r0
 8006444:	460d      	mov	r5, r1
 8006446:	ec45 4b10 	vmov	d0, r4, r5
 800644a:	4616      	mov	r6, r2
 800644c:	f002 fc2c 	bl	8008ca8 <__ulp>
 8006450:	ec51 0b10 	vmov	r0, r1, d0
 8006454:	b17e      	cbz	r6, 8006476 <sulp+0x36>
 8006456:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800645a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800645e:	2b00      	cmp	r3, #0
 8006460:	dd09      	ble.n	8006476 <sulp+0x36>
 8006462:	051b      	lsls	r3, r3, #20
 8006464:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006468:	2400      	movs	r4, #0
 800646a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800646e:	4622      	mov	r2, r4
 8006470:	462b      	mov	r3, r5
 8006472:	f7fa f8c9 	bl	8000608 <__aeabi_dmul>
 8006476:	bd70      	pop	{r4, r5, r6, pc}

08006478 <_strtod_l>:
 8006478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	ed2d 8b02 	vpush	{d8}
 8006480:	b09d      	sub	sp, #116	; 0x74
 8006482:	461f      	mov	r7, r3
 8006484:	2300      	movs	r3, #0
 8006486:	9318      	str	r3, [sp, #96]	; 0x60
 8006488:	4ba2      	ldr	r3, [pc, #648]	; (8006714 <_strtod_l+0x29c>)
 800648a:	9213      	str	r2, [sp, #76]	; 0x4c
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	9305      	str	r3, [sp, #20]
 8006490:	4604      	mov	r4, r0
 8006492:	4618      	mov	r0, r3
 8006494:	4688      	mov	r8, r1
 8006496:	f7f9 fea3 	bl	80001e0 <strlen>
 800649a:	f04f 0a00 	mov.w	sl, #0
 800649e:	4605      	mov	r5, r0
 80064a0:	f04f 0b00 	mov.w	fp, #0
 80064a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80064a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064aa:	781a      	ldrb	r2, [r3, #0]
 80064ac:	2a2b      	cmp	r2, #43	; 0x2b
 80064ae:	d04e      	beq.n	800654e <_strtod_l+0xd6>
 80064b0:	d83b      	bhi.n	800652a <_strtod_l+0xb2>
 80064b2:	2a0d      	cmp	r2, #13
 80064b4:	d834      	bhi.n	8006520 <_strtod_l+0xa8>
 80064b6:	2a08      	cmp	r2, #8
 80064b8:	d834      	bhi.n	8006524 <_strtod_l+0xac>
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	d03e      	beq.n	800653c <_strtod_l+0xc4>
 80064be:	2300      	movs	r3, #0
 80064c0:	930a      	str	r3, [sp, #40]	; 0x28
 80064c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80064c4:	7833      	ldrb	r3, [r6, #0]
 80064c6:	2b30      	cmp	r3, #48	; 0x30
 80064c8:	f040 80b0 	bne.w	800662c <_strtod_l+0x1b4>
 80064cc:	7873      	ldrb	r3, [r6, #1]
 80064ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064d2:	2b58      	cmp	r3, #88	; 0x58
 80064d4:	d168      	bne.n	80065a8 <_strtod_l+0x130>
 80064d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	ab18      	add	r3, sp, #96	; 0x60
 80064dc:	9702      	str	r7, [sp, #8]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	4a8d      	ldr	r2, [pc, #564]	; (8006718 <_strtod_l+0x2a0>)
 80064e2:	ab19      	add	r3, sp, #100	; 0x64
 80064e4:	a917      	add	r1, sp, #92	; 0x5c
 80064e6:	4620      	mov	r0, r4
 80064e8:	f001 fd38 	bl	8007f5c <__gethex>
 80064ec:	f010 0707 	ands.w	r7, r0, #7
 80064f0:	4605      	mov	r5, r0
 80064f2:	d005      	beq.n	8006500 <_strtod_l+0x88>
 80064f4:	2f06      	cmp	r7, #6
 80064f6:	d12c      	bne.n	8006552 <_strtod_l+0xda>
 80064f8:	3601      	adds	r6, #1
 80064fa:	2300      	movs	r3, #0
 80064fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80064fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006500:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006502:	2b00      	cmp	r3, #0
 8006504:	f040 8590 	bne.w	8007028 <_strtod_l+0xbb0>
 8006508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650a:	b1eb      	cbz	r3, 8006548 <_strtod_l+0xd0>
 800650c:	4652      	mov	r2, sl
 800650e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006512:	ec43 2b10 	vmov	d0, r2, r3
 8006516:	b01d      	add	sp, #116	; 0x74
 8006518:	ecbd 8b02 	vpop	{d8}
 800651c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006520:	2a20      	cmp	r2, #32
 8006522:	d1cc      	bne.n	80064be <_strtod_l+0x46>
 8006524:	3301      	adds	r3, #1
 8006526:	9317      	str	r3, [sp, #92]	; 0x5c
 8006528:	e7be      	b.n	80064a8 <_strtod_l+0x30>
 800652a:	2a2d      	cmp	r2, #45	; 0x2d
 800652c:	d1c7      	bne.n	80064be <_strtod_l+0x46>
 800652e:	2201      	movs	r2, #1
 8006530:	920a      	str	r2, [sp, #40]	; 0x28
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	9217      	str	r2, [sp, #92]	; 0x5c
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1c2      	bne.n	80064c2 <_strtod_l+0x4a>
 800653c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800653e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006542:	2b00      	cmp	r3, #0
 8006544:	f040 856e 	bne.w	8007024 <_strtod_l+0xbac>
 8006548:	4652      	mov	r2, sl
 800654a:	465b      	mov	r3, fp
 800654c:	e7e1      	b.n	8006512 <_strtod_l+0x9a>
 800654e:	2200      	movs	r2, #0
 8006550:	e7ee      	b.n	8006530 <_strtod_l+0xb8>
 8006552:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006554:	b13a      	cbz	r2, 8006566 <_strtod_l+0xee>
 8006556:	2135      	movs	r1, #53	; 0x35
 8006558:	a81a      	add	r0, sp, #104	; 0x68
 800655a:	f002 fcb0 	bl	8008ebe <__copybits>
 800655e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006560:	4620      	mov	r0, r4
 8006562:	f002 f86f 	bl	8008644 <_Bfree>
 8006566:	3f01      	subs	r7, #1
 8006568:	2f04      	cmp	r7, #4
 800656a:	d806      	bhi.n	800657a <_strtod_l+0x102>
 800656c:	e8df f007 	tbb	[pc, r7]
 8006570:	1714030a 	.word	0x1714030a
 8006574:	0a          	.byte	0x0a
 8006575:	00          	.byte	0x00
 8006576:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800657a:	0728      	lsls	r0, r5, #28
 800657c:	d5c0      	bpl.n	8006500 <_strtod_l+0x88>
 800657e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006582:	e7bd      	b.n	8006500 <_strtod_l+0x88>
 8006584:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006588:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800658a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800658e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006592:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006596:	e7f0      	b.n	800657a <_strtod_l+0x102>
 8006598:	f8df b180 	ldr.w	fp, [pc, #384]	; 800671c <_strtod_l+0x2a4>
 800659c:	e7ed      	b.n	800657a <_strtod_l+0x102>
 800659e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80065a2:	f04f 3aff 	mov.w	sl, #4294967295
 80065a6:	e7e8      	b.n	800657a <_strtod_l+0x102>
 80065a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80065ae:	785b      	ldrb	r3, [r3, #1]
 80065b0:	2b30      	cmp	r3, #48	; 0x30
 80065b2:	d0f9      	beq.n	80065a8 <_strtod_l+0x130>
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0a3      	beq.n	8006500 <_strtod_l+0x88>
 80065b8:	2301      	movs	r3, #1
 80065ba:	f04f 0900 	mov.w	r9, #0
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065c2:	9308      	str	r3, [sp, #32]
 80065c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80065c8:	464f      	mov	r7, r9
 80065ca:	220a      	movs	r2, #10
 80065cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80065ce:	7806      	ldrb	r6, [r0, #0]
 80065d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80065d4:	b2d9      	uxtb	r1, r3
 80065d6:	2909      	cmp	r1, #9
 80065d8:	d92a      	bls.n	8006630 <_strtod_l+0x1b8>
 80065da:	9905      	ldr	r1, [sp, #20]
 80065dc:	462a      	mov	r2, r5
 80065de:	f002 ff1f 	bl	8009420 <strncmp>
 80065e2:	b398      	cbz	r0, 800664c <_strtod_l+0x1d4>
 80065e4:	2000      	movs	r0, #0
 80065e6:	4632      	mov	r2, r6
 80065e8:	463d      	mov	r5, r7
 80065ea:	9005      	str	r0, [sp, #20]
 80065ec:	4603      	mov	r3, r0
 80065ee:	2a65      	cmp	r2, #101	; 0x65
 80065f0:	d001      	beq.n	80065f6 <_strtod_l+0x17e>
 80065f2:	2a45      	cmp	r2, #69	; 0x45
 80065f4:	d118      	bne.n	8006628 <_strtod_l+0x1b0>
 80065f6:	b91d      	cbnz	r5, 8006600 <_strtod_l+0x188>
 80065f8:	9a04      	ldr	r2, [sp, #16]
 80065fa:	4302      	orrs	r2, r0
 80065fc:	d09e      	beq.n	800653c <_strtod_l+0xc4>
 80065fe:	2500      	movs	r5, #0
 8006600:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006604:	f108 0201 	add.w	r2, r8, #1
 8006608:	9217      	str	r2, [sp, #92]	; 0x5c
 800660a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800660e:	2a2b      	cmp	r2, #43	; 0x2b
 8006610:	d075      	beq.n	80066fe <_strtod_l+0x286>
 8006612:	2a2d      	cmp	r2, #45	; 0x2d
 8006614:	d07b      	beq.n	800670e <_strtod_l+0x296>
 8006616:	f04f 0c00 	mov.w	ip, #0
 800661a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800661e:	2909      	cmp	r1, #9
 8006620:	f240 8082 	bls.w	8006728 <_strtod_l+0x2b0>
 8006624:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006628:	2600      	movs	r6, #0
 800662a:	e09d      	b.n	8006768 <_strtod_l+0x2f0>
 800662c:	2300      	movs	r3, #0
 800662e:	e7c4      	b.n	80065ba <_strtod_l+0x142>
 8006630:	2f08      	cmp	r7, #8
 8006632:	bfd8      	it	le
 8006634:	9907      	ldrle	r1, [sp, #28]
 8006636:	f100 0001 	add.w	r0, r0, #1
 800663a:	bfda      	itte	le
 800663c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006640:	9307      	strle	r3, [sp, #28]
 8006642:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006646:	3701      	adds	r7, #1
 8006648:	9017      	str	r0, [sp, #92]	; 0x5c
 800664a:	e7bf      	b.n	80065cc <_strtod_l+0x154>
 800664c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800664e:	195a      	adds	r2, r3, r5
 8006650:	9217      	str	r2, [sp, #92]	; 0x5c
 8006652:	5d5a      	ldrb	r2, [r3, r5]
 8006654:	2f00      	cmp	r7, #0
 8006656:	d037      	beq.n	80066c8 <_strtod_l+0x250>
 8006658:	9005      	str	r0, [sp, #20]
 800665a:	463d      	mov	r5, r7
 800665c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006660:	2b09      	cmp	r3, #9
 8006662:	d912      	bls.n	800668a <_strtod_l+0x212>
 8006664:	2301      	movs	r3, #1
 8006666:	e7c2      	b.n	80065ee <_strtod_l+0x176>
 8006668:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	9217      	str	r2, [sp, #92]	; 0x5c
 800666e:	785a      	ldrb	r2, [r3, #1]
 8006670:	3001      	adds	r0, #1
 8006672:	2a30      	cmp	r2, #48	; 0x30
 8006674:	d0f8      	beq.n	8006668 <_strtod_l+0x1f0>
 8006676:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800667a:	2b08      	cmp	r3, #8
 800667c:	f200 84d9 	bhi.w	8007032 <_strtod_l+0xbba>
 8006680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006682:	9005      	str	r0, [sp, #20]
 8006684:	2000      	movs	r0, #0
 8006686:	9308      	str	r3, [sp, #32]
 8006688:	4605      	mov	r5, r0
 800668a:	3a30      	subs	r2, #48	; 0x30
 800668c:	f100 0301 	add.w	r3, r0, #1
 8006690:	d014      	beq.n	80066bc <_strtod_l+0x244>
 8006692:	9905      	ldr	r1, [sp, #20]
 8006694:	4419      	add	r1, r3
 8006696:	9105      	str	r1, [sp, #20]
 8006698:	462b      	mov	r3, r5
 800669a:	eb00 0e05 	add.w	lr, r0, r5
 800669e:	210a      	movs	r1, #10
 80066a0:	4573      	cmp	r3, lr
 80066a2:	d113      	bne.n	80066cc <_strtod_l+0x254>
 80066a4:	182b      	adds	r3, r5, r0
 80066a6:	2b08      	cmp	r3, #8
 80066a8:	f105 0501 	add.w	r5, r5, #1
 80066ac:	4405      	add	r5, r0
 80066ae:	dc1c      	bgt.n	80066ea <_strtod_l+0x272>
 80066b0:	9907      	ldr	r1, [sp, #28]
 80066b2:	230a      	movs	r3, #10
 80066b4:	fb03 2301 	mla	r3, r3, r1, r2
 80066b8:	9307      	str	r3, [sp, #28]
 80066ba:	2300      	movs	r3, #0
 80066bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80066be:	1c51      	adds	r1, r2, #1
 80066c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80066c2:	7852      	ldrb	r2, [r2, #1]
 80066c4:	4618      	mov	r0, r3
 80066c6:	e7c9      	b.n	800665c <_strtod_l+0x1e4>
 80066c8:	4638      	mov	r0, r7
 80066ca:	e7d2      	b.n	8006672 <_strtod_l+0x1fa>
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	dc04      	bgt.n	80066da <_strtod_l+0x262>
 80066d0:	9e07      	ldr	r6, [sp, #28]
 80066d2:	434e      	muls	r6, r1
 80066d4:	9607      	str	r6, [sp, #28]
 80066d6:	3301      	adds	r3, #1
 80066d8:	e7e2      	b.n	80066a0 <_strtod_l+0x228>
 80066da:	f103 0c01 	add.w	ip, r3, #1
 80066de:	f1bc 0f10 	cmp.w	ip, #16
 80066e2:	bfd8      	it	le
 80066e4:	fb01 f909 	mulle.w	r9, r1, r9
 80066e8:	e7f5      	b.n	80066d6 <_strtod_l+0x25e>
 80066ea:	2d10      	cmp	r5, #16
 80066ec:	bfdc      	itt	le
 80066ee:	230a      	movle	r3, #10
 80066f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80066f4:	e7e1      	b.n	80066ba <_strtod_l+0x242>
 80066f6:	2300      	movs	r3, #0
 80066f8:	9305      	str	r3, [sp, #20]
 80066fa:	2301      	movs	r3, #1
 80066fc:	e77c      	b.n	80065f8 <_strtod_l+0x180>
 80066fe:	f04f 0c00 	mov.w	ip, #0
 8006702:	f108 0202 	add.w	r2, r8, #2
 8006706:	9217      	str	r2, [sp, #92]	; 0x5c
 8006708:	f898 2002 	ldrb.w	r2, [r8, #2]
 800670c:	e785      	b.n	800661a <_strtod_l+0x1a2>
 800670e:	f04f 0c01 	mov.w	ip, #1
 8006712:	e7f6      	b.n	8006702 <_strtod_l+0x28a>
 8006714:	0800a2d0 	.word	0x0800a2d0
 8006718:	0800a084 	.word	0x0800a084
 800671c:	7ff00000 	.word	0x7ff00000
 8006720:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006722:	1c51      	adds	r1, r2, #1
 8006724:	9117      	str	r1, [sp, #92]	; 0x5c
 8006726:	7852      	ldrb	r2, [r2, #1]
 8006728:	2a30      	cmp	r2, #48	; 0x30
 800672a:	d0f9      	beq.n	8006720 <_strtod_l+0x2a8>
 800672c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006730:	2908      	cmp	r1, #8
 8006732:	f63f af79 	bhi.w	8006628 <_strtod_l+0x1b0>
 8006736:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800673a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800673c:	9206      	str	r2, [sp, #24]
 800673e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006740:	1c51      	adds	r1, r2, #1
 8006742:	9117      	str	r1, [sp, #92]	; 0x5c
 8006744:	7852      	ldrb	r2, [r2, #1]
 8006746:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800674a:	2e09      	cmp	r6, #9
 800674c:	d937      	bls.n	80067be <_strtod_l+0x346>
 800674e:	9e06      	ldr	r6, [sp, #24]
 8006750:	1b89      	subs	r1, r1, r6
 8006752:	2908      	cmp	r1, #8
 8006754:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006758:	dc02      	bgt.n	8006760 <_strtod_l+0x2e8>
 800675a:	4576      	cmp	r6, lr
 800675c:	bfa8      	it	ge
 800675e:	4676      	movge	r6, lr
 8006760:	f1bc 0f00 	cmp.w	ip, #0
 8006764:	d000      	beq.n	8006768 <_strtod_l+0x2f0>
 8006766:	4276      	negs	r6, r6
 8006768:	2d00      	cmp	r5, #0
 800676a:	d14d      	bne.n	8006808 <_strtod_l+0x390>
 800676c:	9904      	ldr	r1, [sp, #16]
 800676e:	4301      	orrs	r1, r0
 8006770:	f47f aec6 	bne.w	8006500 <_strtod_l+0x88>
 8006774:	2b00      	cmp	r3, #0
 8006776:	f47f aee1 	bne.w	800653c <_strtod_l+0xc4>
 800677a:	2a69      	cmp	r2, #105	; 0x69
 800677c:	d027      	beq.n	80067ce <_strtod_l+0x356>
 800677e:	dc24      	bgt.n	80067ca <_strtod_l+0x352>
 8006780:	2a49      	cmp	r2, #73	; 0x49
 8006782:	d024      	beq.n	80067ce <_strtod_l+0x356>
 8006784:	2a4e      	cmp	r2, #78	; 0x4e
 8006786:	f47f aed9 	bne.w	800653c <_strtod_l+0xc4>
 800678a:	499f      	ldr	r1, [pc, #636]	; (8006a08 <_strtod_l+0x590>)
 800678c:	a817      	add	r0, sp, #92	; 0x5c
 800678e:	f001 fe3d 	bl	800840c <__match>
 8006792:	2800      	cmp	r0, #0
 8006794:	f43f aed2 	beq.w	800653c <_strtod_l+0xc4>
 8006798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b28      	cmp	r3, #40	; 0x28
 800679e:	d12d      	bne.n	80067fc <_strtod_l+0x384>
 80067a0:	499a      	ldr	r1, [pc, #616]	; (8006a0c <_strtod_l+0x594>)
 80067a2:	aa1a      	add	r2, sp, #104	; 0x68
 80067a4:	a817      	add	r0, sp, #92	; 0x5c
 80067a6:	f001 fe45 	bl	8008434 <__hexnan>
 80067aa:	2805      	cmp	r0, #5
 80067ac:	d126      	bne.n	80067fc <_strtod_l+0x384>
 80067ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80067b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80067b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80067bc:	e6a0      	b.n	8006500 <_strtod_l+0x88>
 80067be:	210a      	movs	r1, #10
 80067c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80067c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80067c8:	e7b9      	b.n	800673e <_strtod_l+0x2c6>
 80067ca:	2a6e      	cmp	r2, #110	; 0x6e
 80067cc:	e7db      	b.n	8006786 <_strtod_l+0x30e>
 80067ce:	4990      	ldr	r1, [pc, #576]	; (8006a10 <_strtod_l+0x598>)
 80067d0:	a817      	add	r0, sp, #92	; 0x5c
 80067d2:	f001 fe1b 	bl	800840c <__match>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	f43f aeb0 	beq.w	800653c <_strtod_l+0xc4>
 80067dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067de:	498d      	ldr	r1, [pc, #564]	; (8006a14 <_strtod_l+0x59c>)
 80067e0:	3b01      	subs	r3, #1
 80067e2:	a817      	add	r0, sp, #92	; 0x5c
 80067e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80067e6:	f001 fe11 	bl	800840c <__match>
 80067ea:	b910      	cbnz	r0, 80067f2 <_strtod_l+0x37a>
 80067ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067ee:	3301      	adds	r3, #1
 80067f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80067f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006a24 <_strtod_l+0x5ac>
 80067f6:	f04f 0a00 	mov.w	sl, #0
 80067fa:	e681      	b.n	8006500 <_strtod_l+0x88>
 80067fc:	4886      	ldr	r0, [pc, #536]	; (8006a18 <_strtod_l+0x5a0>)
 80067fe:	f002 fdf7 	bl	80093f0 <nan>
 8006802:	ec5b ab10 	vmov	sl, fp, d0
 8006806:	e67b      	b.n	8006500 <_strtod_l+0x88>
 8006808:	9b05      	ldr	r3, [sp, #20]
 800680a:	9807      	ldr	r0, [sp, #28]
 800680c:	1af3      	subs	r3, r6, r3
 800680e:	2f00      	cmp	r7, #0
 8006810:	bf08      	it	eq
 8006812:	462f      	moveq	r7, r5
 8006814:	2d10      	cmp	r5, #16
 8006816:	9306      	str	r3, [sp, #24]
 8006818:	46a8      	mov	r8, r5
 800681a:	bfa8      	it	ge
 800681c:	f04f 0810 	movge.w	r8, #16
 8006820:	f7f9 fe78 	bl	8000514 <__aeabi_ui2d>
 8006824:	2d09      	cmp	r5, #9
 8006826:	4682      	mov	sl, r0
 8006828:	468b      	mov	fp, r1
 800682a:	dd13      	ble.n	8006854 <_strtod_l+0x3dc>
 800682c:	4b7b      	ldr	r3, [pc, #492]	; (8006a1c <_strtod_l+0x5a4>)
 800682e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006832:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006836:	f7f9 fee7 	bl	8000608 <__aeabi_dmul>
 800683a:	4682      	mov	sl, r0
 800683c:	4648      	mov	r0, r9
 800683e:	468b      	mov	fp, r1
 8006840:	f7f9 fe68 	bl	8000514 <__aeabi_ui2d>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4650      	mov	r0, sl
 800684a:	4659      	mov	r1, fp
 800684c:	f7f9 fd26 	bl	800029c <__adddf3>
 8006850:	4682      	mov	sl, r0
 8006852:	468b      	mov	fp, r1
 8006854:	2d0f      	cmp	r5, #15
 8006856:	dc38      	bgt.n	80068ca <_strtod_l+0x452>
 8006858:	9b06      	ldr	r3, [sp, #24]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f43f ae50 	beq.w	8006500 <_strtod_l+0x88>
 8006860:	dd24      	ble.n	80068ac <_strtod_l+0x434>
 8006862:	2b16      	cmp	r3, #22
 8006864:	dc0b      	bgt.n	800687e <_strtod_l+0x406>
 8006866:	496d      	ldr	r1, [pc, #436]	; (8006a1c <_strtod_l+0x5a4>)
 8006868:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800686c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006870:	4652      	mov	r2, sl
 8006872:	465b      	mov	r3, fp
 8006874:	f7f9 fec8 	bl	8000608 <__aeabi_dmul>
 8006878:	4682      	mov	sl, r0
 800687a:	468b      	mov	fp, r1
 800687c:	e640      	b.n	8006500 <_strtod_l+0x88>
 800687e:	9a06      	ldr	r2, [sp, #24]
 8006880:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006884:	4293      	cmp	r3, r2
 8006886:	db20      	blt.n	80068ca <_strtod_l+0x452>
 8006888:	4c64      	ldr	r4, [pc, #400]	; (8006a1c <_strtod_l+0x5a4>)
 800688a:	f1c5 050f 	rsb	r5, r5, #15
 800688e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006892:	4652      	mov	r2, sl
 8006894:	465b      	mov	r3, fp
 8006896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800689a:	f7f9 feb5 	bl	8000608 <__aeabi_dmul>
 800689e:	9b06      	ldr	r3, [sp, #24]
 80068a0:	1b5d      	subs	r5, r3, r5
 80068a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80068a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80068aa:	e7e3      	b.n	8006874 <_strtod_l+0x3fc>
 80068ac:	9b06      	ldr	r3, [sp, #24]
 80068ae:	3316      	adds	r3, #22
 80068b0:	db0b      	blt.n	80068ca <_strtod_l+0x452>
 80068b2:	9b05      	ldr	r3, [sp, #20]
 80068b4:	1b9e      	subs	r6, r3, r6
 80068b6:	4b59      	ldr	r3, [pc, #356]	; (8006a1c <_strtod_l+0x5a4>)
 80068b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80068bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068c0:	4650      	mov	r0, sl
 80068c2:	4659      	mov	r1, fp
 80068c4:	f7f9 ffca 	bl	800085c <__aeabi_ddiv>
 80068c8:	e7d6      	b.n	8006878 <_strtod_l+0x400>
 80068ca:	9b06      	ldr	r3, [sp, #24]
 80068cc:	eba5 0808 	sub.w	r8, r5, r8
 80068d0:	4498      	add	r8, r3
 80068d2:	f1b8 0f00 	cmp.w	r8, #0
 80068d6:	dd74      	ble.n	80069c2 <_strtod_l+0x54a>
 80068d8:	f018 030f 	ands.w	r3, r8, #15
 80068dc:	d00a      	beq.n	80068f4 <_strtod_l+0x47c>
 80068de:	494f      	ldr	r1, [pc, #316]	; (8006a1c <_strtod_l+0x5a4>)
 80068e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068e4:	4652      	mov	r2, sl
 80068e6:	465b      	mov	r3, fp
 80068e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068ec:	f7f9 fe8c 	bl	8000608 <__aeabi_dmul>
 80068f0:	4682      	mov	sl, r0
 80068f2:	468b      	mov	fp, r1
 80068f4:	f038 080f 	bics.w	r8, r8, #15
 80068f8:	d04f      	beq.n	800699a <_strtod_l+0x522>
 80068fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80068fe:	dd22      	ble.n	8006946 <_strtod_l+0x4ce>
 8006900:	2500      	movs	r5, #0
 8006902:	462e      	mov	r6, r5
 8006904:	9507      	str	r5, [sp, #28]
 8006906:	9505      	str	r5, [sp, #20]
 8006908:	2322      	movs	r3, #34	; 0x22
 800690a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006a24 <_strtod_l+0x5ac>
 800690e:	6023      	str	r3, [r4, #0]
 8006910:	f04f 0a00 	mov.w	sl, #0
 8006914:	9b07      	ldr	r3, [sp, #28]
 8006916:	2b00      	cmp	r3, #0
 8006918:	f43f adf2 	beq.w	8006500 <_strtod_l+0x88>
 800691c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800691e:	4620      	mov	r0, r4
 8006920:	f001 fe90 	bl	8008644 <_Bfree>
 8006924:	9905      	ldr	r1, [sp, #20]
 8006926:	4620      	mov	r0, r4
 8006928:	f001 fe8c 	bl	8008644 <_Bfree>
 800692c:	4631      	mov	r1, r6
 800692e:	4620      	mov	r0, r4
 8006930:	f001 fe88 	bl	8008644 <_Bfree>
 8006934:	9907      	ldr	r1, [sp, #28]
 8006936:	4620      	mov	r0, r4
 8006938:	f001 fe84 	bl	8008644 <_Bfree>
 800693c:	4629      	mov	r1, r5
 800693e:	4620      	mov	r0, r4
 8006940:	f001 fe80 	bl	8008644 <_Bfree>
 8006944:	e5dc      	b.n	8006500 <_strtod_l+0x88>
 8006946:	4b36      	ldr	r3, [pc, #216]	; (8006a20 <_strtod_l+0x5a8>)
 8006948:	9304      	str	r3, [sp, #16]
 800694a:	2300      	movs	r3, #0
 800694c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006950:	4650      	mov	r0, sl
 8006952:	4659      	mov	r1, fp
 8006954:	4699      	mov	r9, r3
 8006956:	f1b8 0f01 	cmp.w	r8, #1
 800695a:	dc21      	bgt.n	80069a0 <_strtod_l+0x528>
 800695c:	b10b      	cbz	r3, 8006962 <_strtod_l+0x4ea>
 800695e:	4682      	mov	sl, r0
 8006960:	468b      	mov	fp, r1
 8006962:	4b2f      	ldr	r3, [pc, #188]	; (8006a20 <_strtod_l+0x5a8>)
 8006964:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006968:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800696c:	4652      	mov	r2, sl
 800696e:	465b      	mov	r3, fp
 8006970:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006974:	f7f9 fe48 	bl	8000608 <__aeabi_dmul>
 8006978:	4b2a      	ldr	r3, [pc, #168]	; (8006a24 <_strtod_l+0x5ac>)
 800697a:	460a      	mov	r2, r1
 800697c:	400b      	ands	r3, r1
 800697e:	492a      	ldr	r1, [pc, #168]	; (8006a28 <_strtod_l+0x5b0>)
 8006980:	428b      	cmp	r3, r1
 8006982:	4682      	mov	sl, r0
 8006984:	d8bc      	bhi.n	8006900 <_strtod_l+0x488>
 8006986:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800698a:	428b      	cmp	r3, r1
 800698c:	bf86      	itte	hi
 800698e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006a2c <_strtod_l+0x5b4>
 8006992:	f04f 3aff 	movhi.w	sl, #4294967295
 8006996:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800699a:	2300      	movs	r3, #0
 800699c:	9304      	str	r3, [sp, #16]
 800699e:	e084      	b.n	8006aaa <_strtod_l+0x632>
 80069a0:	f018 0f01 	tst.w	r8, #1
 80069a4:	d005      	beq.n	80069b2 <_strtod_l+0x53a>
 80069a6:	9b04      	ldr	r3, [sp, #16]
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f7f9 fe2c 	bl	8000608 <__aeabi_dmul>
 80069b0:	2301      	movs	r3, #1
 80069b2:	9a04      	ldr	r2, [sp, #16]
 80069b4:	3208      	adds	r2, #8
 80069b6:	f109 0901 	add.w	r9, r9, #1
 80069ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069be:	9204      	str	r2, [sp, #16]
 80069c0:	e7c9      	b.n	8006956 <_strtod_l+0x4de>
 80069c2:	d0ea      	beq.n	800699a <_strtod_l+0x522>
 80069c4:	f1c8 0800 	rsb	r8, r8, #0
 80069c8:	f018 020f 	ands.w	r2, r8, #15
 80069cc:	d00a      	beq.n	80069e4 <_strtod_l+0x56c>
 80069ce:	4b13      	ldr	r3, [pc, #76]	; (8006a1c <_strtod_l+0x5a4>)
 80069d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069d4:	4650      	mov	r0, sl
 80069d6:	4659      	mov	r1, fp
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	f7f9 ff3e 	bl	800085c <__aeabi_ddiv>
 80069e0:	4682      	mov	sl, r0
 80069e2:	468b      	mov	fp, r1
 80069e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80069e8:	d0d7      	beq.n	800699a <_strtod_l+0x522>
 80069ea:	f1b8 0f1f 	cmp.w	r8, #31
 80069ee:	dd1f      	ble.n	8006a30 <_strtod_l+0x5b8>
 80069f0:	2500      	movs	r5, #0
 80069f2:	462e      	mov	r6, r5
 80069f4:	9507      	str	r5, [sp, #28]
 80069f6:	9505      	str	r5, [sp, #20]
 80069f8:	2322      	movs	r3, #34	; 0x22
 80069fa:	f04f 0a00 	mov.w	sl, #0
 80069fe:	f04f 0b00 	mov.w	fp, #0
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	e786      	b.n	8006914 <_strtod_l+0x49c>
 8006a06:	bf00      	nop
 8006a08:	0800a055 	.word	0x0800a055
 8006a0c:	0800a098 	.word	0x0800a098
 8006a10:	0800a04d 	.word	0x0800a04d
 8006a14:	0800a1dc 	.word	0x0800a1dc
 8006a18:	0800a488 	.word	0x0800a488
 8006a1c:	0800a368 	.word	0x0800a368
 8006a20:	0800a340 	.word	0x0800a340
 8006a24:	7ff00000 	.word	0x7ff00000
 8006a28:	7ca00000 	.word	0x7ca00000
 8006a2c:	7fefffff 	.word	0x7fefffff
 8006a30:	f018 0310 	ands.w	r3, r8, #16
 8006a34:	bf18      	it	ne
 8006a36:	236a      	movne	r3, #106	; 0x6a
 8006a38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006de8 <_strtod_l+0x970>
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	4650      	mov	r0, sl
 8006a40:	4659      	mov	r1, fp
 8006a42:	2300      	movs	r3, #0
 8006a44:	f018 0f01 	tst.w	r8, #1
 8006a48:	d004      	beq.n	8006a54 <_strtod_l+0x5dc>
 8006a4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006a4e:	f7f9 fddb 	bl	8000608 <__aeabi_dmul>
 8006a52:	2301      	movs	r3, #1
 8006a54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006a58:	f109 0908 	add.w	r9, r9, #8
 8006a5c:	d1f2      	bne.n	8006a44 <_strtod_l+0x5cc>
 8006a5e:	b10b      	cbz	r3, 8006a64 <_strtod_l+0x5ec>
 8006a60:	4682      	mov	sl, r0
 8006a62:	468b      	mov	fp, r1
 8006a64:	9b04      	ldr	r3, [sp, #16]
 8006a66:	b1c3      	cbz	r3, 8006a9a <_strtod_l+0x622>
 8006a68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006a6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	4659      	mov	r1, fp
 8006a74:	dd11      	ble.n	8006a9a <_strtod_l+0x622>
 8006a76:	2b1f      	cmp	r3, #31
 8006a78:	f340 8124 	ble.w	8006cc4 <_strtod_l+0x84c>
 8006a7c:	2b34      	cmp	r3, #52	; 0x34
 8006a7e:	bfde      	ittt	le
 8006a80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006a84:	f04f 33ff 	movle.w	r3, #4294967295
 8006a88:	fa03 f202 	lslle.w	r2, r3, r2
 8006a8c:	f04f 0a00 	mov.w	sl, #0
 8006a90:	bfcc      	ite	gt
 8006a92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006a96:	ea02 0b01 	andle.w	fp, r2, r1
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4650      	mov	r0, sl
 8006aa0:	4659      	mov	r1, fp
 8006aa2:	f7fa f819 	bl	8000ad8 <__aeabi_dcmpeq>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d1a2      	bne.n	80069f0 <_strtod_l+0x578>
 8006aaa:	9b07      	ldr	r3, [sp, #28]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	9908      	ldr	r1, [sp, #32]
 8006ab0:	462b      	mov	r3, r5
 8006ab2:	463a      	mov	r2, r7
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f001 fe2d 	bl	8008714 <__s2b>
 8006aba:	9007      	str	r0, [sp, #28]
 8006abc:	2800      	cmp	r0, #0
 8006abe:	f43f af1f 	beq.w	8006900 <_strtod_l+0x488>
 8006ac2:	9b05      	ldr	r3, [sp, #20]
 8006ac4:	1b9e      	subs	r6, r3, r6
 8006ac6:	9b06      	ldr	r3, [sp, #24]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bfb4      	ite	lt
 8006acc:	4633      	movlt	r3, r6
 8006ace:	2300      	movge	r3, #0
 8006ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8006ad2:	9b06      	ldr	r3, [sp, #24]
 8006ad4:	2500      	movs	r5, #0
 8006ad6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ada:	9312      	str	r3, [sp, #72]	; 0x48
 8006adc:	462e      	mov	r6, r5
 8006ade:	9b07      	ldr	r3, [sp, #28]
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	6859      	ldr	r1, [r3, #4]
 8006ae4:	f001 fd6e 	bl	80085c4 <_Balloc>
 8006ae8:	9005      	str	r0, [sp, #20]
 8006aea:	2800      	cmp	r0, #0
 8006aec:	f43f af0c 	beq.w	8006908 <_strtod_l+0x490>
 8006af0:	9b07      	ldr	r3, [sp, #28]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	3202      	adds	r2, #2
 8006af6:	f103 010c 	add.w	r1, r3, #12
 8006afa:	0092      	lsls	r2, r2, #2
 8006afc:	300c      	adds	r0, #12
 8006afe:	f001 fd53 	bl	80085a8 <memcpy>
 8006b02:	ec4b ab10 	vmov	d0, sl, fp
 8006b06:	aa1a      	add	r2, sp, #104	; 0x68
 8006b08:	a919      	add	r1, sp, #100	; 0x64
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f002 f948 	bl	8008da0 <__d2b>
 8006b10:	ec4b ab18 	vmov	d8, sl, fp
 8006b14:	9018      	str	r0, [sp, #96]	; 0x60
 8006b16:	2800      	cmp	r0, #0
 8006b18:	f43f aef6 	beq.w	8006908 <_strtod_l+0x490>
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f001 fe92 	bl	8008848 <__i2b>
 8006b24:	4606      	mov	r6, r0
 8006b26:	2800      	cmp	r0, #0
 8006b28:	f43f aeee 	beq.w	8006908 <_strtod_l+0x490>
 8006b2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b2e:	9904      	ldr	r1, [sp, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bfab      	itete	ge
 8006b34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006b36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006b38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006b3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006b3e:	bfac      	ite	ge
 8006b40:	eb03 0902 	addge.w	r9, r3, r2
 8006b44:	1ad7      	sublt	r7, r2, r3
 8006b46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006b48:	eba3 0801 	sub.w	r8, r3, r1
 8006b4c:	4490      	add	r8, r2
 8006b4e:	4ba1      	ldr	r3, [pc, #644]	; (8006dd4 <_strtod_l+0x95c>)
 8006b50:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b54:	4598      	cmp	r8, r3
 8006b56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006b5a:	f280 80c7 	bge.w	8006cec <_strtod_l+0x874>
 8006b5e:	eba3 0308 	sub.w	r3, r3, r8
 8006b62:	2b1f      	cmp	r3, #31
 8006b64:	eba2 0203 	sub.w	r2, r2, r3
 8006b68:	f04f 0101 	mov.w	r1, #1
 8006b6c:	f300 80b1 	bgt.w	8006cd2 <_strtod_l+0x85a>
 8006b70:	fa01 f303 	lsl.w	r3, r1, r3
 8006b74:	930d      	str	r3, [sp, #52]	; 0x34
 8006b76:	2300      	movs	r3, #0
 8006b78:	9308      	str	r3, [sp, #32]
 8006b7a:	eb09 0802 	add.w	r8, r9, r2
 8006b7e:	9b04      	ldr	r3, [sp, #16]
 8006b80:	45c1      	cmp	r9, r8
 8006b82:	4417      	add	r7, r2
 8006b84:	441f      	add	r7, r3
 8006b86:	464b      	mov	r3, r9
 8006b88:	bfa8      	it	ge
 8006b8a:	4643      	movge	r3, r8
 8006b8c:	42bb      	cmp	r3, r7
 8006b8e:	bfa8      	it	ge
 8006b90:	463b      	movge	r3, r7
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bfc2      	ittt	gt
 8006b96:	eba8 0803 	subgt.w	r8, r8, r3
 8006b9a:	1aff      	subgt	r7, r7, r3
 8006b9c:	eba9 0903 	subgt.w	r9, r9, r3
 8006ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	dd17      	ble.n	8006bd6 <_strtod_l+0x75e>
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4620      	mov	r0, r4
 8006bac:	f001 ff0c 	bl	80089c8 <__pow5mult>
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f43f aea8 	beq.w	8006908 <_strtod_l+0x490>
 8006bb8:	4601      	mov	r1, r0
 8006bba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f001 fe59 	bl	8008874 <__multiply>
 8006bc2:	900b      	str	r0, [sp, #44]	; 0x2c
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	f43f ae9f 	beq.w	8006908 <_strtod_l+0x490>
 8006bca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f001 fd39 	bl	8008644 <_Bfree>
 8006bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bd4:	9318      	str	r3, [sp, #96]	; 0x60
 8006bd6:	f1b8 0f00 	cmp.w	r8, #0
 8006bda:	f300 808c 	bgt.w	8006cf6 <_strtod_l+0x87e>
 8006bde:	9b06      	ldr	r3, [sp, #24]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	dd08      	ble.n	8006bf6 <_strtod_l+0x77e>
 8006be4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006be6:	9905      	ldr	r1, [sp, #20]
 8006be8:	4620      	mov	r0, r4
 8006bea:	f001 feed 	bl	80089c8 <__pow5mult>
 8006bee:	9005      	str	r0, [sp, #20]
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	f43f ae89 	beq.w	8006908 <_strtod_l+0x490>
 8006bf6:	2f00      	cmp	r7, #0
 8006bf8:	dd08      	ble.n	8006c0c <_strtod_l+0x794>
 8006bfa:	9905      	ldr	r1, [sp, #20]
 8006bfc:	463a      	mov	r2, r7
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f001 ff3c 	bl	8008a7c <__lshift>
 8006c04:	9005      	str	r0, [sp, #20]
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f43f ae7e 	beq.w	8006908 <_strtod_l+0x490>
 8006c0c:	f1b9 0f00 	cmp.w	r9, #0
 8006c10:	dd08      	ble.n	8006c24 <_strtod_l+0x7ac>
 8006c12:	4631      	mov	r1, r6
 8006c14:	464a      	mov	r2, r9
 8006c16:	4620      	mov	r0, r4
 8006c18:	f001 ff30 	bl	8008a7c <__lshift>
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f43f ae72 	beq.w	8006908 <_strtod_l+0x490>
 8006c24:	9a05      	ldr	r2, [sp, #20]
 8006c26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f001 ffb3 	bl	8008b94 <__mdiff>
 8006c2e:	4605      	mov	r5, r0
 8006c30:	2800      	cmp	r0, #0
 8006c32:	f43f ae69 	beq.w	8006908 <_strtod_l+0x490>
 8006c36:	68c3      	ldr	r3, [r0, #12]
 8006c38:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60c3      	str	r3, [r0, #12]
 8006c3e:	4631      	mov	r1, r6
 8006c40:	f001 ff8c 	bl	8008b5c <__mcmp>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	da60      	bge.n	8006d0a <_strtod_l+0x892>
 8006c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c4a:	ea53 030a 	orrs.w	r3, r3, sl
 8006c4e:	f040 8082 	bne.w	8006d56 <_strtod_l+0x8de>
 8006c52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d17d      	bne.n	8006d56 <_strtod_l+0x8de>
 8006c5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c5e:	0d1b      	lsrs	r3, r3, #20
 8006c60:	051b      	lsls	r3, r3, #20
 8006c62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006c66:	d976      	bls.n	8006d56 <_strtod_l+0x8de>
 8006c68:	696b      	ldr	r3, [r5, #20]
 8006c6a:	b913      	cbnz	r3, 8006c72 <_strtod_l+0x7fa>
 8006c6c:	692b      	ldr	r3, [r5, #16]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	dd71      	ble.n	8006d56 <_strtod_l+0x8de>
 8006c72:	4629      	mov	r1, r5
 8006c74:	2201      	movs	r2, #1
 8006c76:	4620      	mov	r0, r4
 8006c78:	f001 ff00 	bl	8008a7c <__lshift>
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4605      	mov	r5, r0
 8006c80:	f001 ff6c 	bl	8008b5c <__mcmp>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	dd66      	ble.n	8006d56 <_strtod_l+0x8de>
 8006c88:	9904      	ldr	r1, [sp, #16]
 8006c8a:	4a53      	ldr	r2, [pc, #332]	; (8006dd8 <_strtod_l+0x960>)
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	2900      	cmp	r1, #0
 8006c90:	f000 8081 	beq.w	8006d96 <_strtod_l+0x91e>
 8006c94:	ea02 010b 	and.w	r1, r2, fp
 8006c98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006c9c:	dc7b      	bgt.n	8006d96 <_strtod_l+0x91e>
 8006c9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006ca2:	f77f aea9 	ble.w	80069f8 <_strtod_l+0x580>
 8006ca6:	4b4d      	ldr	r3, [pc, #308]	; (8006ddc <_strtod_l+0x964>)
 8006ca8:	4650      	mov	r0, sl
 8006caa:	4659      	mov	r1, fp
 8006cac:	2200      	movs	r2, #0
 8006cae:	f7f9 fcab 	bl	8000608 <__aeabi_dmul>
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4303      	orrs	r3, r0
 8006cb6:	bf08      	it	eq
 8006cb8:	2322      	moveq	r3, #34	; 0x22
 8006cba:	4682      	mov	sl, r0
 8006cbc:	468b      	mov	fp, r1
 8006cbe:	bf08      	it	eq
 8006cc0:	6023      	streq	r3, [r4, #0]
 8006cc2:	e62b      	b.n	800691c <_strtod_l+0x4a4>
 8006cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ccc:	ea03 0a0a 	and.w	sl, r3, sl
 8006cd0:	e6e3      	b.n	8006a9a <_strtod_l+0x622>
 8006cd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006cd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006cda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006cde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006ce2:	fa01 f308 	lsl.w	r3, r1, r8
 8006ce6:	9308      	str	r3, [sp, #32]
 8006ce8:	910d      	str	r1, [sp, #52]	; 0x34
 8006cea:	e746      	b.n	8006b7a <_strtod_l+0x702>
 8006cec:	2300      	movs	r3, #0
 8006cee:	9308      	str	r3, [sp, #32]
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8006cf4:	e741      	b.n	8006b7a <_strtod_l+0x702>
 8006cf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f001 febe 	bl	8008a7c <__lshift>
 8006d00:	9018      	str	r0, [sp, #96]	; 0x60
 8006d02:	2800      	cmp	r0, #0
 8006d04:	f47f af6b 	bne.w	8006bde <_strtod_l+0x766>
 8006d08:	e5fe      	b.n	8006908 <_strtod_l+0x490>
 8006d0a:	465f      	mov	r7, fp
 8006d0c:	d16e      	bne.n	8006dec <_strtod_l+0x974>
 8006d0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d14:	b342      	cbz	r2, 8006d68 <_strtod_l+0x8f0>
 8006d16:	4a32      	ldr	r2, [pc, #200]	; (8006de0 <_strtod_l+0x968>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d128      	bne.n	8006d6e <_strtod_l+0x8f6>
 8006d1c:	9b04      	ldr	r3, [sp, #16]
 8006d1e:	4651      	mov	r1, sl
 8006d20:	b1eb      	cbz	r3, 8006d5e <_strtod_l+0x8e6>
 8006d22:	4b2d      	ldr	r3, [pc, #180]	; (8006dd8 <_strtod_l+0x960>)
 8006d24:	403b      	ands	r3, r7
 8006d26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d2e:	d819      	bhi.n	8006d64 <_strtod_l+0x8ec>
 8006d30:	0d1b      	lsrs	r3, r3, #20
 8006d32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d36:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3a:	4299      	cmp	r1, r3
 8006d3c:	d117      	bne.n	8006d6e <_strtod_l+0x8f6>
 8006d3e:	4b29      	ldr	r3, [pc, #164]	; (8006de4 <_strtod_l+0x96c>)
 8006d40:	429f      	cmp	r7, r3
 8006d42:	d102      	bne.n	8006d4a <_strtod_l+0x8d2>
 8006d44:	3101      	adds	r1, #1
 8006d46:	f43f addf 	beq.w	8006908 <_strtod_l+0x490>
 8006d4a:	4b23      	ldr	r3, [pc, #140]	; (8006dd8 <_strtod_l+0x960>)
 8006d4c:	403b      	ands	r3, r7
 8006d4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006d52:	f04f 0a00 	mov.w	sl, #0
 8006d56:	9b04      	ldr	r3, [sp, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1a4      	bne.n	8006ca6 <_strtod_l+0x82e>
 8006d5c:	e5de      	b.n	800691c <_strtod_l+0x4a4>
 8006d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d62:	e7ea      	b.n	8006d3a <_strtod_l+0x8c2>
 8006d64:	4613      	mov	r3, r2
 8006d66:	e7e8      	b.n	8006d3a <_strtod_l+0x8c2>
 8006d68:	ea53 030a 	orrs.w	r3, r3, sl
 8006d6c:	d08c      	beq.n	8006c88 <_strtod_l+0x810>
 8006d6e:	9b08      	ldr	r3, [sp, #32]
 8006d70:	b1db      	cbz	r3, 8006daa <_strtod_l+0x932>
 8006d72:	423b      	tst	r3, r7
 8006d74:	d0ef      	beq.n	8006d56 <_strtod_l+0x8de>
 8006d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d78:	9a04      	ldr	r2, [sp, #16]
 8006d7a:	4650      	mov	r0, sl
 8006d7c:	4659      	mov	r1, fp
 8006d7e:	b1c3      	cbz	r3, 8006db2 <_strtod_l+0x93a>
 8006d80:	f7ff fb5e 	bl	8006440 <sulp>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	ec51 0b18 	vmov	r0, r1, d8
 8006d8c:	f7f9 fa86 	bl	800029c <__adddf3>
 8006d90:	4682      	mov	sl, r0
 8006d92:	468b      	mov	fp, r1
 8006d94:	e7df      	b.n	8006d56 <_strtod_l+0x8de>
 8006d96:	4013      	ands	r3, r2
 8006d98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006d9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006da0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006da4:	f04f 3aff 	mov.w	sl, #4294967295
 8006da8:	e7d5      	b.n	8006d56 <_strtod_l+0x8de>
 8006daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dac:	ea13 0f0a 	tst.w	r3, sl
 8006db0:	e7e0      	b.n	8006d74 <_strtod_l+0x8fc>
 8006db2:	f7ff fb45 	bl	8006440 <sulp>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	ec51 0b18 	vmov	r0, r1, d8
 8006dbe:	f7f9 fa6b 	bl	8000298 <__aeabi_dsub>
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4682      	mov	sl, r0
 8006dc8:	468b      	mov	fp, r1
 8006dca:	f7f9 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d0c1      	beq.n	8006d56 <_strtod_l+0x8de>
 8006dd2:	e611      	b.n	80069f8 <_strtod_l+0x580>
 8006dd4:	fffffc02 	.word	0xfffffc02
 8006dd8:	7ff00000 	.word	0x7ff00000
 8006ddc:	39500000 	.word	0x39500000
 8006de0:	000fffff 	.word	0x000fffff
 8006de4:	7fefffff 	.word	0x7fefffff
 8006de8:	0800a0b0 	.word	0x0800a0b0
 8006dec:	4631      	mov	r1, r6
 8006dee:	4628      	mov	r0, r5
 8006df0:	f002 f832 	bl	8008e58 <__ratio>
 8006df4:	ec59 8b10 	vmov	r8, r9, d0
 8006df8:	ee10 0a10 	vmov	r0, s0
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e02:	4649      	mov	r1, r9
 8006e04:	f7f9 fe7c 	bl	8000b00 <__aeabi_dcmple>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	d07a      	beq.n	8006f02 <_strtod_l+0xa8a>
 8006e0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d04a      	beq.n	8006ea8 <_strtod_l+0xa30>
 8006e12:	4b95      	ldr	r3, [pc, #596]	; (8007068 <_strtod_l+0xbf0>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007068 <_strtod_l+0xbf0>
 8006e1e:	f04f 0800 	mov.w	r8, #0
 8006e22:	4b92      	ldr	r3, [pc, #584]	; (800706c <_strtod_l+0xbf4>)
 8006e24:	403b      	ands	r3, r7
 8006e26:	930d      	str	r3, [sp, #52]	; 0x34
 8006e28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e2a:	4b91      	ldr	r3, [pc, #580]	; (8007070 <_strtod_l+0xbf8>)
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	f040 80b0 	bne.w	8006f92 <_strtod_l+0xb1a>
 8006e32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006e3a:	ec4b ab10 	vmov	d0, sl, fp
 8006e3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e42:	f001 ff31 	bl	8008ca8 <__ulp>
 8006e46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e4a:	ec53 2b10 	vmov	r2, r3, d0
 8006e4e:	f7f9 fbdb 	bl	8000608 <__aeabi_dmul>
 8006e52:	4652      	mov	r2, sl
 8006e54:	465b      	mov	r3, fp
 8006e56:	f7f9 fa21 	bl	800029c <__adddf3>
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4983      	ldr	r1, [pc, #524]	; (800706c <_strtod_l+0xbf4>)
 8006e5e:	4a85      	ldr	r2, [pc, #532]	; (8007074 <_strtod_l+0xbfc>)
 8006e60:	4019      	ands	r1, r3
 8006e62:	4291      	cmp	r1, r2
 8006e64:	4682      	mov	sl, r0
 8006e66:	d960      	bls.n	8006f2a <_strtod_l+0xab2>
 8006e68:	ee18 3a90 	vmov	r3, s17
 8006e6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d104      	bne.n	8006e7e <_strtod_l+0xa06>
 8006e74:	ee18 3a10 	vmov	r3, s16
 8006e78:	3301      	adds	r3, #1
 8006e7a:	f43f ad45 	beq.w	8006908 <_strtod_l+0x490>
 8006e7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007080 <_strtod_l+0xc08>
 8006e82:	f04f 3aff 	mov.w	sl, #4294967295
 8006e86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f001 fbdb 	bl	8008644 <_Bfree>
 8006e8e:	9905      	ldr	r1, [sp, #20]
 8006e90:	4620      	mov	r0, r4
 8006e92:	f001 fbd7 	bl	8008644 <_Bfree>
 8006e96:	4631      	mov	r1, r6
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f001 fbd3 	bl	8008644 <_Bfree>
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f001 fbcf 	bl	8008644 <_Bfree>
 8006ea6:	e61a      	b.n	8006ade <_strtod_l+0x666>
 8006ea8:	f1ba 0f00 	cmp.w	sl, #0
 8006eac:	d11b      	bne.n	8006ee6 <_strtod_l+0xa6e>
 8006eae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006eb2:	b9f3      	cbnz	r3, 8006ef2 <_strtod_l+0xa7a>
 8006eb4:	4b6c      	ldr	r3, [pc, #432]	; (8007068 <_strtod_l+0xbf0>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4640      	mov	r0, r8
 8006eba:	4649      	mov	r1, r9
 8006ebc:	f7f9 fe16 	bl	8000aec <__aeabi_dcmplt>
 8006ec0:	b9d0      	cbnz	r0, 8006ef8 <_strtod_l+0xa80>
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	4b6c      	ldr	r3, [pc, #432]	; (8007078 <_strtod_l+0xc00>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f7f9 fb9d 	bl	8000608 <__aeabi_dmul>
 8006ece:	4680      	mov	r8, r0
 8006ed0:	4689      	mov	r9, r1
 8006ed2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006ed6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006eda:	9315      	str	r3, [sp, #84]	; 0x54
 8006edc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006ee0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ee4:	e79d      	b.n	8006e22 <_strtod_l+0x9aa>
 8006ee6:	f1ba 0f01 	cmp.w	sl, #1
 8006eea:	d102      	bne.n	8006ef2 <_strtod_l+0xa7a>
 8006eec:	2f00      	cmp	r7, #0
 8006eee:	f43f ad83 	beq.w	80069f8 <_strtod_l+0x580>
 8006ef2:	4b62      	ldr	r3, [pc, #392]	; (800707c <_strtod_l+0xc04>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	e78e      	b.n	8006e16 <_strtod_l+0x99e>
 8006ef8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007078 <_strtod_l+0xc00>
 8006efc:	f04f 0800 	mov.w	r8, #0
 8006f00:	e7e7      	b.n	8006ed2 <_strtod_l+0xa5a>
 8006f02:	4b5d      	ldr	r3, [pc, #372]	; (8007078 <_strtod_l+0xc00>)
 8006f04:	4640      	mov	r0, r8
 8006f06:	4649      	mov	r1, r9
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f7f9 fb7d 	bl	8000608 <__aeabi_dmul>
 8006f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f10:	4680      	mov	r8, r0
 8006f12:	4689      	mov	r9, r1
 8006f14:	b933      	cbnz	r3, 8006f24 <_strtod_l+0xaac>
 8006f16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f1a:	900e      	str	r0, [sp, #56]	; 0x38
 8006f1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006f22:	e7dd      	b.n	8006ee0 <_strtod_l+0xa68>
 8006f24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006f28:	e7f9      	b.n	8006f1e <_strtod_l+0xaa6>
 8006f2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006f2e:	9b04      	ldr	r3, [sp, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1a8      	bne.n	8006e86 <_strtod_l+0xa0e>
 8006f34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f3a:	0d1b      	lsrs	r3, r3, #20
 8006f3c:	051b      	lsls	r3, r3, #20
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d1a1      	bne.n	8006e86 <_strtod_l+0xa0e>
 8006f42:	4640      	mov	r0, r8
 8006f44:	4649      	mov	r1, r9
 8006f46:	f7f9 febf 	bl	8000cc8 <__aeabi_d2lz>
 8006f4a:	f7f9 fb2f 	bl	80005ac <__aeabi_l2d>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	4640      	mov	r0, r8
 8006f54:	4649      	mov	r1, r9
 8006f56:	f7f9 f99f 	bl	8000298 <__aeabi_dsub>
 8006f5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f60:	ea43 030a 	orr.w	r3, r3, sl
 8006f64:	4313      	orrs	r3, r2
 8006f66:	4680      	mov	r8, r0
 8006f68:	4689      	mov	r9, r1
 8006f6a:	d055      	beq.n	8007018 <_strtod_l+0xba0>
 8006f6c:	a336      	add	r3, pc, #216	; (adr r3, 8007048 <_strtod_l+0xbd0>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f7f9 fdbb 	bl	8000aec <__aeabi_dcmplt>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	f47f acd0 	bne.w	800691c <_strtod_l+0x4a4>
 8006f7c:	a334      	add	r3, pc, #208	; (adr r3, 8007050 <_strtod_l+0xbd8>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	4640      	mov	r0, r8
 8006f84:	4649      	mov	r1, r9
 8006f86:	f7f9 fdcf 	bl	8000b28 <__aeabi_dcmpgt>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	f43f af7b 	beq.w	8006e86 <_strtod_l+0xa0e>
 8006f90:	e4c4      	b.n	800691c <_strtod_l+0x4a4>
 8006f92:	9b04      	ldr	r3, [sp, #16]
 8006f94:	b333      	cbz	r3, 8006fe4 <_strtod_l+0xb6c>
 8006f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006f9c:	d822      	bhi.n	8006fe4 <_strtod_l+0xb6c>
 8006f9e:	a32e      	add	r3, pc, #184	; (adr r3, 8007058 <_strtod_l+0xbe0>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	f7f9 fdaa 	bl	8000b00 <__aeabi_dcmple>
 8006fac:	b1a0      	cbz	r0, 8006fd8 <_strtod_l+0xb60>
 8006fae:	4649      	mov	r1, r9
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	f7f9 fe01 	bl	8000bb8 <__aeabi_d2uiz>
 8006fb6:	2801      	cmp	r0, #1
 8006fb8:	bf38      	it	cc
 8006fba:	2001      	movcc	r0, #1
 8006fbc:	f7f9 faaa 	bl	8000514 <__aeabi_ui2d>
 8006fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fc2:	4680      	mov	r8, r0
 8006fc4:	4689      	mov	r9, r1
 8006fc6:	bb23      	cbnz	r3, 8007012 <_strtod_l+0xb9a>
 8006fc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fcc:	9010      	str	r0, [sp, #64]	; 0x40
 8006fce:	9311      	str	r3, [sp, #68]	; 0x44
 8006fd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fdc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006fe0:	1a9b      	subs	r3, r3, r2
 8006fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fe4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fe8:	eeb0 0a48 	vmov.f32	s0, s16
 8006fec:	eef0 0a68 	vmov.f32	s1, s17
 8006ff0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006ff4:	f001 fe58 	bl	8008ca8 <__ulp>
 8006ff8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ffc:	ec53 2b10 	vmov	r2, r3, d0
 8007000:	f7f9 fb02 	bl	8000608 <__aeabi_dmul>
 8007004:	ec53 2b18 	vmov	r2, r3, d8
 8007008:	f7f9 f948 	bl	800029c <__adddf3>
 800700c:	4682      	mov	sl, r0
 800700e:	468b      	mov	fp, r1
 8007010:	e78d      	b.n	8006f2e <_strtod_l+0xab6>
 8007012:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007016:	e7db      	b.n	8006fd0 <_strtod_l+0xb58>
 8007018:	a311      	add	r3, pc, #68	; (adr r3, 8007060 <_strtod_l+0xbe8>)
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f7f9 fd65 	bl	8000aec <__aeabi_dcmplt>
 8007022:	e7b2      	b.n	8006f8a <_strtod_l+0xb12>
 8007024:	2300      	movs	r3, #0
 8007026:	930a      	str	r3, [sp, #40]	; 0x28
 8007028:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800702a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	f7ff ba6b 	b.w	8006508 <_strtod_l+0x90>
 8007032:	2a65      	cmp	r2, #101	; 0x65
 8007034:	f43f ab5f 	beq.w	80066f6 <_strtod_l+0x27e>
 8007038:	2a45      	cmp	r2, #69	; 0x45
 800703a:	f43f ab5c 	beq.w	80066f6 <_strtod_l+0x27e>
 800703e:	2301      	movs	r3, #1
 8007040:	f7ff bb94 	b.w	800676c <_strtod_l+0x2f4>
 8007044:	f3af 8000 	nop.w
 8007048:	94a03595 	.word	0x94a03595
 800704c:	3fdfffff 	.word	0x3fdfffff
 8007050:	35afe535 	.word	0x35afe535
 8007054:	3fe00000 	.word	0x3fe00000
 8007058:	ffc00000 	.word	0xffc00000
 800705c:	41dfffff 	.word	0x41dfffff
 8007060:	94a03595 	.word	0x94a03595
 8007064:	3fcfffff 	.word	0x3fcfffff
 8007068:	3ff00000 	.word	0x3ff00000
 800706c:	7ff00000 	.word	0x7ff00000
 8007070:	7fe00000 	.word	0x7fe00000
 8007074:	7c9fffff 	.word	0x7c9fffff
 8007078:	3fe00000 	.word	0x3fe00000
 800707c:	bff00000 	.word	0xbff00000
 8007080:	7fefffff 	.word	0x7fefffff

08007084 <_strtod_r>:
 8007084:	4b01      	ldr	r3, [pc, #4]	; (800708c <_strtod_r+0x8>)
 8007086:	f7ff b9f7 	b.w	8006478 <_strtod_l>
 800708a:	bf00      	nop
 800708c:	20000088 	.word	0x20000088

08007090 <_strtol_l.constprop.0>:
 8007090:	2b01      	cmp	r3, #1
 8007092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007096:	d001      	beq.n	800709c <_strtol_l.constprop.0+0xc>
 8007098:	2b24      	cmp	r3, #36	; 0x24
 800709a:	d906      	bls.n	80070aa <_strtol_l.constprop.0+0x1a>
 800709c:	f7fe faca 	bl	8005634 <__errno>
 80070a0:	2316      	movs	r3, #22
 80070a2:	6003      	str	r3, [r0, #0]
 80070a4:	2000      	movs	r0, #0
 80070a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007190 <_strtol_l.constprop.0+0x100>
 80070ae:	460d      	mov	r5, r1
 80070b0:	462e      	mov	r6, r5
 80070b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80070ba:	f017 0708 	ands.w	r7, r7, #8
 80070be:	d1f7      	bne.n	80070b0 <_strtol_l.constprop.0+0x20>
 80070c0:	2c2d      	cmp	r4, #45	; 0x2d
 80070c2:	d132      	bne.n	800712a <_strtol_l.constprop.0+0x9a>
 80070c4:	782c      	ldrb	r4, [r5, #0]
 80070c6:	2701      	movs	r7, #1
 80070c8:	1cb5      	adds	r5, r6, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d05b      	beq.n	8007186 <_strtol_l.constprop.0+0xf6>
 80070ce:	2b10      	cmp	r3, #16
 80070d0:	d109      	bne.n	80070e6 <_strtol_l.constprop.0+0x56>
 80070d2:	2c30      	cmp	r4, #48	; 0x30
 80070d4:	d107      	bne.n	80070e6 <_strtol_l.constprop.0+0x56>
 80070d6:	782c      	ldrb	r4, [r5, #0]
 80070d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80070dc:	2c58      	cmp	r4, #88	; 0x58
 80070de:	d14d      	bne.n	800717c <_strtol_l.constprop.0+0xec>
 80070e0:	786c      	ldrb	r4, [r5, #1]
 80070e2:	2310      	movs	r3, #16
 80070e4:	3502      	adds	r5, #2
 80070e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80070ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80070ee:	f04f 0c00 	mov.w	ip, #0
 80070f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80070f6:	4666      	mov	r6, ip
 80070f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80070fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007100:	f1be 0f09 	cmp.w	lr, #9
 8007104:	d816      	bhi.n	8007134 <_strtol_l.constprop.0+0xa4>
 8007106:	4674      	mov	r4, lr
 8007108:	42a3      	cmp	r3, r4
 800710a:	dd24      	ble.n	8007156 <_strtol_l.constprop.0+0xc6>
 800710c:	f1bc 0f00 	cmp.w	ip, #0
 8007110:	db1e      	blt.n	8007150 <_strtol_l.constprop.0+0xc0>
 8007112:	45b1      	cmp	r9, r6
 8007114:	d31c      	bcc.n	8007150 <_strtol_l.constprop.0+0xc0>
 8007116:	d101      	bne.n	800711c <_strtol_l.constprop.0+0x8c>
 8007118:	45a2      	cmp	sl, r4
 800711a:	db19      	blt.n	8007150 <_strtol_l.constprop.0+0xc0>
 800711c:	fb06 4603 	mla	r6, r6, r3, r4
 8007120:	f04f 0c01 	mov.w	ip, #1
 8007124:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007128:	e7e8      	b.n	80070fc <_strtol_l.constprop.0+0x6c>
 800712a:	2c2b      	cmp	r4, #43	; 0x2b
 800712c:	bf04      	itt	eq
 800712e:	782c      	ldrbeq	r4, [r5, #0]
 8007130:	1cb5      	addeq	r5, r6, #2
 8007132:	e7ca      	b.n	80070ca <_strtol_l.constprop.0+0x3a>
 8007134:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007138:	f1be 0f19 	cmp.w	lr, #25
 800713c:	d801      	bhi.n	8007142 <_strtol_l.constprop.0+0xb2>
 800713e:	3c37      	subs	r4, #55	; 0x37
 8007140:	e7e2      	b.n	8007108 <_strtol_l.constprop.0+0x78>
 8007142:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007146:	f1be 0f19 	cmp.w	lr, #25
 800714a:	d804      	bhi.n	8007156 <_strtol_l.constprop.0+0xc6>
 800714c:	3c57      	subs	r4, #87	; 0x57
 800714e:	e7db      	b.n	8007108 <_strtol_l.constprop.0+0x78>
 8007150:	f04f 3cff 	mov.w	ip, #4294967295
 8007154:	e7e6      	b.n	8007124 <_strtol_l.constprop.0+0x94>
 8007156:	f1bc 0f00 	cmp.w	ip, #0
 800715a:	da05      	bge.n	8007168 <_strtol_l.constprop.0+0xd8>
 800715c:	2322      	movs	r3, #34	; 0x22
 800715e:	6003      	str	r3, [r0, #0]
 8007160:	4646      	mov	r6, r8
 8007162:	b942      	cbnz	r2, 8007176 <_strtol_l.constprop.0+0xe6>
 8007164:	4630      	mov	r0, r6
 8007166:	e79e      	b.n	80070a6 <_strtol_l.constprop.0+0x16>
 8007168:	b107      	cbz	r7, 800716c <_strtol_l.constprop.0+0xdc>
 800716a:	4276      	negs	r6, r6
 800716c:	2a00      	cmp	r2, #0
 800716e:	d0f9      	beq.n	8007164 <_strtol_l.constprop.0+0xd4>
 8007170:	f1bc 0f00 	cmp.w	ip, #0
 8007174:	d000      	beq.n	8007178 <_strtol_l.constprop.0+0xe8>
 8007176:	1e69      	subs	r1, r5, #1
 8007178:	6011      	str	r1, [r2, #0]
 800717a:	e7f3      	b.n	8007164 <_strtol_l.constprop.0+0xd4>
 800717c:	2430      	movs	r4, #48	; 0x30
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1b1      	bne.n	80070e6 <_strtol_l.constprop.0+0x56>
 8007182:	2308      	movs	r3, #8
 8007184:	e7af      	b.n	80070e6 <_strtol_l.constprop.0+0x56>
 8007186:	2c30      	cmp	r4, #48	; 0x30
 8007188:	d0a5      	beq.n	80070d6 <_strtol_l.constprop.0+0x46>
 800718a:	230a      	movs	r3, #10
 800718c:	e7ab      	b.n	80070e6 <_strtol_l.constprop.0+0x56>
 800718e:	bf00      	nop
 8007190:	0800a0d9 	.word	0x0800a0d9

08007194 <_strtol_r>:
 8007194:	f7ff bf7c 	b.w	8007090 <_strtol_l.constprop.0>

08007198 <quorem>:
 8007198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	6903      	ldr	r3, [r0, #16]
 800719e:	690c      	ldr	r4, [r1, #16]
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	4607      	mov	r7, r0
 80071a4:	f2c0 8081 	blt.w	80072aa <quorem+0x112>
 80071a8:	3c01      	subs	r4, #1
 80071aa:	f101 0814 	add.w	r8, r1, #20
 80071ae:	f100 0514 	add.w	r5, r0, #20
 80071b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071c0:	3301      	adds	r3, #1
 80071c2:	429a      	cmp	r2, r3
 80071c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80071c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80071d0:	d331      	bcc.n	8007236 <quorem+0x9e>
 80071d2:	f04f 0e00 	mov.w	lr, #0
 80071d6:	4640      	mov	r0, r8
 80071d8:	46ac      	mov	ip, r5
 80071da:	46f2      	mov	sl, lr
 80071dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80071e0:	b293      	uxth	r3, r2
 80071e2:	fb06 e303 	mla	r3, r6, r3, lr
 80071e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	ebaa 0303 	sub.w	r3, sl, r3
 80071f0:	f8dc a000 	ldr.w	sl, [ip]
 80071f4:	0c12      	lsrs	r2, r2, #16
 80071f6:	fa13 f38a 	uxtah	r3, r3, sl
 80071fa:	fb06 e202 	mla	r2, r6, r2, lr
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	9b00      	ldr	r3, [sp, #0]
 8007202:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007206:	b292      	uxth	r2, r2
 8007208:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800720c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007210:	f8bd 3000 	ldrh.w	r3, [sp]
 8007214:	4581      	cmp	r9, r0
 8007216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800721a:	f84c 3b04 	str.w	r3, [ip], #4
 800721e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007222:	d2db      	bcs.n	80071dc <quorem+0x44>
 8007224:	f855 300b 	ldr.w	r3, [r5, fp]
 8007228:	b92b      	cbnz	r3, 8007236 <quorem+0x9e>
 800722a:	9b01      	ldr	r3, [sp, #4]
 800722c:	3b04      	subs	r3, #4
 800722e:	429d      	cmp	r5, r3
 8007230:	461a      	mov	r2, r3
 8007232:	d32e      	bcc.n	8007292 <quorem+0xfa>
 8007234:	613c      	str	r4, [r7, #16]
 8007236:	4638      	mov	r0, r7
 8007238:	f001 fc90 	bl	8008b5c <__mcmp>
 800723c:	2800      	cmp	r0, #0
 800723e:	db24      	blt.n	800728a <quorem+0xf2>
 8007240:	3601      	adds	r6, #1
 8007242:	4628      	mov	r0, r5
 8007244:	f04f 0c00 	mov.w	ip, #0
 8007248:	f858 2b04 	ldr.w	r2, [r8], #4
 800724c:	f8d0 e000 	ldr.w	lr, [r0]
 8007250:	b293      	uxth	r3, r2
 8007252:	ebac 0303 	sub.w	r3, ip, r3
 8007256:	0c12      	lsrs	r2, r2, #16
 8007258:	fa13 f38e 	uxtah	r3, r3, lr
 800725c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007264:	b29b      	uxth	r3, r3
 8007266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800726a:	45c1      	cmp	r9, r8
 800726c:	f840 3b04 	str.w	r3, [r0], #4
 8007270:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007274:	d2e8      	bcs.n	8007248 <quorem+0xb0>
 8007276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800727a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800727e:	b922      	cbnz	r2, 800728a <quorem+0xf2>
 8007280:	3b04      	subs	r3, #4
 8007282:	429d      	cmp	r5, r3
 8007284:	461a      	mov	r2, r3
 8007286:	d30a      	bcc.n	800729e <quorem+0x106>
 8007288:	613c      	str	r4, [r7, #16]
 800728a:	4630      	mov	r0, r6
 800728c:	b003      	add	sp, #12
 800728e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	3b04      	subs	r3, #4
 8007296:	2a00      	cmp	r2, #0
 8007298:	d1cc      	bne.n	8007234 <quorem+0x9c>
 800729a:	3c01      	subs	r4, #1
 800729c:	e7c7      	b.n	800722e <quorem+0x96>
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	3b04      	subs	r3, #4
 80072a2:	2a00      	cmp	r2, #0
 80072a4:	d1f0      	bne.n	8007288 <quorem+0xf0>
 80072a6:	3c01      	subs	r4, #1
 80072a8:	e7eb      	b.n	8007282 <quorem+0xea>
 80072aa:	2000      	movs	r0, #0
 80072ac:	e7ee      	b.n	800728c <quorem+0xf4>
	...

080072b0 <_dtoa_r>:
 80072b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	ed2d 8b04 	vpush	{d8-d9}
 80072b8:	ec57 6b10 	vmov	r6, r7, d0
 80072bc:	b093      	sub	sp, #76	; 0x4c
 80072be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80072c4:	9106      	str	r1, [sp, #24]
 80072c6:	ee10 aa10 	vmov	sl, s0
 80072ca:	4604      	mov	r4, r0
 80072cc:	9209      	str	r2, [sp, #36]	; 0x24
 80072ce:	930c      	str	r3, [sp, #48]	; 0x30
 80072d0:	46bb      	mov	fp, r7
 80072d2:	b975      	cbnz	r5, 80072f2 <_dtoa_r+0x42>
 80072d4:	2010      	movs	r0, #16
 80072d6:	f001 f94d 	bl	8008574 <malloc>
 80072da:	4602      	mov	r2, r0
 80072dc:	6260      	str	r0, [r4, #36]	; 0x24
 80072de:	b920      	cbnz	r0, 80072ea <_dtoa_r+0x3a>
 80072e0:	4ba7      	ldr	r3, [pc, #668]	; (8007580 <_dtoa_r+0x2d0>)
 80072e2:	21ea      	movs	r1, #234	; 0xea
 80072e4:	48a7      	ldr	r0, [pc, #668]	; (8007584 <_dtoa_r+0x2d4>)
 80072e6:	f002 f8bd 	bl	8009464 <__assert_func>
 80072ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072ee:	6005      	str	r5, [r0, #0]
 80072f0:	60c5      	str	r5, [r0, #12]
 80072f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072f4:	6819      	ldr	r1, [r3, #0]
 80072f6:	b151      	cbz	r1, 800730e <_dtoa_r+0x5e>
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	604a      	str	r2, [r1, #4]
 80072fc:	2301      	movs	r3, #1
 80072fe:	4093      	lsls	r3, r2
 8007300:	608b      	str	r3, [r1, #8]
 8007302:	4620      	mov	r0, r4
 8007304:	f001 f99e 	bl	8008644 <_Bfree>
 8007308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	1e3b      	subs	r3, r7, #0
 8007310:	bfaa      	itet	ge
 8007312:	2300      	movge	r3, #0
 8007314:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007318:	f8c8 3000 	strge.w	r3, [r8]
 800731c:	4b9a      	ldr	r3, [pc, #616]	; (8007588 <_dtoa_r+0x2d8>)
 800731e:	bfbc      	itt	lt
 8007320:	2201      	movlt	r2, #1
 8007322:	f8c8 2000 	strlt.w	r2, [r8]
 8007326:	ea33 030b 	bics.w	r3, r3, fp
 800732a:	d11b      	bne.n	8007364 <_dtoa_r+0xb4>
 800732c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800732e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007338:	4333      	orrs	r3, r6
 800733a:	f000 8592 	beq.w	8007e62 <_dtoa_r+0xbb2>
 800733e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007340:	b963      	cbnz	r3, 800735c <_dtoa_r+0xac>
 8007342:	4b92      	ldr	r3, [pc, #584]	; (800758c <_dtoa_r+0x2dc>)
 8007344:	e022      	b.n	800738c <_dtoa_r+0xdc>
 8007346:	4b92      	ldr	r3, [pc, #584]	; (8007590 <_dtoa_r+0x2e0>)
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	3308      	adds	r3, #8
 800734c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	9801      	ldr	r0, [sp, #4]
 8007352:	b013      	add	sp, #76	; 0x4c
 8007354:	ecbd 8b04 	vpop	{d8-d9}
 8007358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735c:	4b8b      	ldr	r3, [pc, #556]	; (800758c <_dtoa_r+0x2dc>)
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	3303      	adds	r3, #3
 8007362:	e7f3      	b.n	800734c <_dtoa_r+0x9c>
 8007364:	2200      	movs	r2, #0
 8007366:	2300      	movs	r3, #0
 8007368:	4650      	mov	r0, sl
 800736a:	4659      	mov	r1, fp
 800736c:	f7f9 fbb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007370:	ec4b ab19 	vmov	d9, sl, fp
 8007374:	4680      	mov	r8, r0
 8007376:	b158      	cbz	r0, 8007390 <_dtoa_r+0xe0>
 8007378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800737a:	2301      	movs	r3, #1
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 856b 	beq.w	8007e5c <_dtoa_r+0xbac>
 8007386:	4883      	ldr	r0, [pc, #524]	; (8007594 <_dtoa_r+0x2e4>)
 8007388:	6018      	str	r0, [r3, #0]
 800738a:	1e43      	subs	r3, r0, #1
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	e7df      	b.n	8007350 <_dtoa_r+0xa0>
 8007390:	ec4b ab10 	vmov	d0, sl, fp
 8007394:	aa10      	add	r2, sp, #64	; 0x40
 8007396:	a911      	add	r1, sp, #68	; 0x44
 8007398:	4620      	mov	r0, r4
 800739a:	f001 fd01 	bl	8008da0 <__d2b>
 800739e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80073a2:	ee08 0a10 	vmov	s16, r0
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	f000 8084 	beq.w	80074b4 <_dtoa_r+0x204>
 80073ac:	ee19 3a90 	vmov	r3, s19
 80073b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80073b8:	4656      	mov	r6, sl
 80073ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80073be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80073c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80073c6:	4b74      	ldr	r3, [pc, #464]	; (8007598 <_dtoa_r+0x2e8>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	4630      	mov	r0, r6
 80073cc:	4639      	mov	r1, r7
 80073ce:	f7f8 ff63 	bl	8000298 <__aeabi_dsub>
 80073d2:	a365      	add	r3, pc, #404	; (adr r3, 8007568 <_dtoa_r+0x2b8>)
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f7f9 f916 	bl	8000608 <__aeabi_dmul>
 80073dc:	a364      	add	r3, pc, #400	; (adr r3, 8007570 <_dtoa_r+0x2c0>)
 80073de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e2:	f7f8 ff5b 	bl	800029c <__adddf3>
 80073e6:	4606      	mov	r6, r0
 80073e8:	4628      	mov	r0, r5
 80073ea:	460f      	mov	r7, r1
 80073ec:	f7f9 f8a2 	bl	8000534 <__aeabi_i2d>
 80073f0:	a361      	add	r3, pc, #388	; (adr r3, 8007578 <_dtoa_r+0x2c8>)
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	f7f9 f907 	bl	8000608 <__aeabi_dmul>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4630      	mov	r0, r6
 8007400:	4639      	mov	r1, r7
 8007402:	f7f8 ff4b 	bl	800029c <__adddf3>
 8007406:	4606      	mov	r6, r0
 8007408:	460f      	mov	r7, r1
 800740a:	f7f9 fbad 	bl	8000b68 <__aeabi_d2iz>
 800740e:	2200      	movs	r2, #0
 8007410:	9000      	str	r0, [sp, #0]
 8007412:	2300      	movs	r3, #0
 8007414:	4630      	mov	r0, r6
 8007416:	4639      	mov	r1, r7
 8007418:	f7f9 fb68 	bl	8000aec <__aeabi_dcmplt>
 800741c:	b150      	cbz	r0, 8007434 <_dtoa_r+0x184>
 800741e:	9800      	ldr	r0, [sp, #0]
 8007420:	f7f9 f888 	bl	8000534 <__aeabi_i2d>
 8007424:	4632      	mov	r2, r6
 8007426:	463b      	mov	r3, r7
 8007428:	f7f9 fb56 	bl	8000ad8 <__aeabi_dcmpeq>
 800742c:	b910      	cbnz	r0, 8007434 <_dtoa_r+0x184>
 800742e:	9b00      	ldr	r3, [sp, #0]
 8007430:	3b01      	subs	r3, #1
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	9b00      	ldr	r3, [sp, #0]
 8007436:	2b16      	cmp	r3, #22
 8007438:	d85a      	bhi.n	80074f0 <_dtoa_r+0x240>
 800743a:	9a00      	ldr	r2, [sp, #0]
 800743c:	4b57      	ldr	r3, [pc, #348]	; (800759c <_dtoa_r+0x2ec>)
 800743e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	ec51 0b19 	vmov	r0, r1, d9
 800744a:	f7f9 fb4f 	bl	8000aec <__aeabi_dcmplt>
 800744e:	2800      	cmp	r0, #0
 8007450:	d050      	beq.n	80074f4 <_dtoa_r+0x244>
 8007452:	9b00      	ldr	r3, [sp, #0]
 8007454:	3b01      	subs	r3, #1
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	2300      	movs	r3, #0
 800745a:	930b      	str	r3, [sp, #44]	; 0x2c
 800745c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800745e:	1b5d      	subs	r5, r3, r5
 8007460:	1e6b      	subs	r3, r5, #1
 8007462:	9305      	str	r3, [sp, #20]
 8007464:	bf45      	ittet	mi
 8007466:	f1c5 0301 	rsbmi	r3, r5, #1
 800746a:	9304      	strmi	r3, [sp, #16]
 800746c:	2300      	movpl	r3, #0
 800746e:	2300      	movmi	r3, #0
 8007470:	bf4c      	ite	mi
 8007472:	9305      	strmi	r3, [sp, #20]
 8007474:	9304      	strpl	r3, [sp, #16]
 8007476:	9b00      	ldr	r3, [sp, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	db3d      	blt.n	80074f8 <_dtoa_r+0x248>
 800747c:	9b05      	ldr	r3, [sp, #20]
 800747e:	9a00      	ldr	r2, [sp, #0]
 8007480:	920a      	str	r2, [sp, #40]	; 0x28
 8007482:	4413      	add	r3, r2
 8007484:	9305      	str	r3, [sp, #20]
 8007486:	2300      	movs	r3, #0
 8007488:	9307      	str	r3, [sp, #28]
 800748a:	9b06      	ldr	r3, [sp, #24]
 800748c:	2b09      	cmp	r3, #9
 800748e:	f200 8089 	bhi.w	80075a4 <_dtoa_r+0x2f4>
 8007492:	2b05      	cmp	r3, #5
 8007494:	bfc4      	itt	gt
 8007496:	3b04      	subgt	r3, #4
 8007498:	9306      	strgt	r3, [sp, #24]
 800749a:	9b06      	ldr	r3, [sp, #24]
 800749c:	f1a3 0302 	sub.w	r3, r3, #2
 80074a0:	bfcc      	ite	gt
 80074a2:	2500      	movgt	r5, #0
 80074a4:	2501      	movle	r5, #1
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	f200 8087 	bhi.w	80075ba <_dtoa_r+0x30a>
 80074ac:	e8df f003 	tbb	[pc, r3]
 80074b0:	59383a2d 	.word	0x59383a2d
 80074b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80074b8:	441d      	add	r5, r3
 80074ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80074be:	2b20      	cmp	r3, #32
 80074c0:	bfc1      	itttt	gt
 80074c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80074c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80074ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80074ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80074d2:	bfda      	itte	le
 80074d4:	f1c3 0320 	rsble	r3, r3, #32
 80074d8:	fa06 f003 	lslle.w	r0, r6, r3
 80074dc:	4318      	orrgt	r0, r3
 80074de:	f7f9 f819 	bl	8000514 <__aeabi_ui2d>
 80074e2:	2301      	movs	r3, #1
 80074e4:	4606      	mov	r6, r0
 80074e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80074ea:	3d01      	subs	r5, #1
 80074ec:	930e      	str	r3, [sp, #56]	; 0x38
 80074ee:	e76a      	b.n	80073c6 <_dtoa_r+0x116>
 80074f0:	2301      	movs	r3, #1
 80074f2:	e7b2      	b.n	800745a <_dtoa_r+0x1aa>
 80074f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80074f6:	e7b1      	b.n	800745c <_dtoa_r+0x1ac>
 80074f8:	9b04      	ldr	r3, [sp, #16]
 80074fa:	9a00      	ldr	r2, [sp, #0]
 80074fc:	1a9b      	subs	r3, r3, r2
 80074fe:	9304      	str	r3, [sp, #16]
 8007500:	4253      	negs	r3, r2
 8007502:	9307      	str	r3, [sp, #28]
 8007504:	2300      	movs	r3, #0
 8007506:	930a      	str	r3, [sp, #40]	; 0x28
 8007508:	e7bf      	b.n	800748a <_dtoa_r+0x1da>
 800750a:	2300      	movs	r3, #0
 800750c:	9308      	str	r3, [sp, #32]
 800750e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007510:	2b00      	cmp	r3, #0
 8007512:	dc55      	bgt.n	80075c0 <_dtoa_r+0x310>
 8007514:	2301      	movs	r3, #1
 8007516:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800751a:	461a      	mov	r2, r3
 800751c:	9209      	str	r2, [sp, #36]	; 0x24
 800751e:	e00c      	b.n	800753a <_dtoa_r+0x28a>
 8007520:	2301      	movs	r3, #1
 8007522:	e7f3      	b.n	800750c <_dtoa_r+0x25c>
 8007524:	2300      	movs	r3, #0
 8007526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007528:	9308      	str	r3, [sp, #32]
 800752a:	9b00      	ldr	r3, [sp, #0]
 800752c:	4413      	add	r3, r2
 800752e:	9302      	str	r3, [sp, #8]
 8007530:	3301      	adds	r3, #1
 8007532:	2b01      	cmp	r3, #1
 8007534:	9303      	str	r3, [sp, #12]
 8007536:	bfb8      	it	lt
 8007538:	2301      	movlt	r3, #1
 800753a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800753c:	2200      	movs	r2, #0
 800753e:	6042      	str	r2, [r0, #4]
 8007540:	2204      	movs	r2, #4
 8007542:	f102 0614 	add.w	r6, r2, #20
 8007546:	429e      	cmp	r6, r3
 8007548:	6841      	ldr	r1, [r0, #4]
 800754a:	d93d      	bls.n	80075c8 <_dtoa_r+0x318>
 800754c:	4620      	mov	r0, r4
 800754e:	f001 f839 	bl	80085c4 <_Balloc>
 8007552:	9001      	str	r0, [sp, #4]
 8007554:	2800      	cmp	r0, #0
 8007556:	d13b      	bne.n	80075d0 <_dtoa_r+0x320>
 8007558:	4b11      	ldr	r3, [pc, #68]	; (80075a0 <_dtoa_r+0x2f0>)
 800755a:	4602      	mov	r2, r0
 800755c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007560:	e6c0      	b.n	80072e4 <_dtoa_r+0x34>
 8007562:	2301      	movs	r3, #1
 8007564:	e7df      	b.n	8007526 <_dtoa_r+0x276>
 8007566:	bf00      	nop
 8007568:	636f4361 	.word	0x636f4361
 800756c:	3fd287a7 	.word	0x3fd287a7
 8007570:	8b60c8b3 	.word	0x8b60c8b3
 8007574:	3fc68a28 	.word	0x3fc68a28
 8007578:	509f79fb 	.word	0x509f79fb
 800757c:	3fd34413 	.word	0x3fd34413
 8007580:	0800a1e6 	.word	0x0800a1e6
 8007584:	0800a1fd 	.word	0x0800a1fd
 8007588:	7ff00000 	.word	0x7ff00000
 800758c:	0800a1e2 	.word	0x0800a1e2
 8007590:	0800a1d9 	.word	0x0800a1d9
 8007594:	0800a059 	.word	0x0800a059
 8007598:	3ff80000 	.word	0x3ff80000
 800759c:	0800a368 	.word	0x0800a368
 80075a0:	0800a258 	.word	0x0800a258
 80075a4:	2501      	movs	r5, #1
 80075a6:	2300      	movs	r3, #0
 80075a8:	9306      	str	r3, [sp, #24]
 80075aa:	9508      	str	r5, [sp, #32]
 80075ac:	f04f 33ff 	mov.w	r3, #4294967295
 80075b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075b4:	2200      	movs	r2, #0
 80075b6:	2312      	movs	r3, #18
 80075b8:	e7b0      	b.n	800751c <_dtoa_r+0x26c>
 80075ba:	2301      	movs	r3, #1
 80075bc:	9308      	str	r3, [sp, #32]
 80075be:	e7f5      	b.n	80075ac <_dtoa_r+0x2fc>
 80075c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075c6:	e7b8      	b.n	800753a <_dtoa_r+0x28a>
 80075c8:	3101      	adds	r1, #1
 80075ca:	6041      	str	r1, [r0, #4]
 80075cc:	0052      	lsls	r2, r2, #1
 80075ce:	e7b8      	b.n	8007542 <_dtoa_r+0x292>
 80075d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d2:	9a01      	ldr	r2, [sp, #4]
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	2b0e      	cmp	r3, #14
 80075da:	f200 809d 	bhi.w	8007718 <_dtoa_r+0x468>
 80075de:	2d00      	cmp	r5, #0
 80075e0:	f000 809a 	beq.w	8007718 <_dtoa_r+0x468>
 80075e4:	9b00      	ldr	r3, [sp, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	dd32      	ble.n	8007650 <_dtoa_r+0x3a0>
 80075ea:	4ab7      	ldr	r2, [pc, #732]	; (80078c8 <_dtoa_r+0x618>)
 80075ec:	f003 030f 	and.w	r3, r3, #15
 80075f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80075f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075f8:	9b00      	ldr	r3, [sp, #0]
 80075fa:	05d8      	lsls	r0, r3, #23
 80075fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007600:	d516      	bpl.n	8007630 <_dtoa_r+0x380>
 8007602:	4bb2      	ldr	r3, [pc, #712]	; (80078cc <_dtoa_r+0x61c>)
 8007604:	ec51 0b19 	vmov	r0, r1, d9
 8007608:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800760c:	f7f9 f926 	bl	800085c <__aeabi_ddiv>
 8007610:	f007 070f 	and.w	r7, r7, #15
 8007614:	4682      	mov	sl, r0
 8007616:	468b      	mov	fp, r1
 8007618:	2503      	movs	r5, #3
 800761a:	4eac      	ldr	r6, [pc, #688]	; (80078cc <_dtoa_r+0x61c>)
 800761c:	b957      	cbnz	r7, 8007634 <_dtoa_r+0x384>
 800761e:	4642      	mov	r2, r8
 8007620:	464b      	mov	r3, r9
 8007622:	4650      	mov	r0, sl
 8007624:	4659      	mov	r1, fp
 8007626:	f7f9 f919 	bl	800085c <__aeabi_ddiv>
 800762a:	4682      	mov	sl, r0
 800762c:	468b      	mov	fp, r1
 800762e:	e028      	b.n	8007682 <_dtoa_r+0x3d2>
 8007630:	2502      	movs	r5, #2
 8007632:	e7f2      	b.n	800761a <_dtoa_r+0x36a>
 8007634:	07f9      	lsls	r1, r7, #31
 8007636:	d508      	bpl.n	800764a <_dtoa_r+0x39a>
 8007638:	4640      	mov	r0, r8
 800763a:	4649      	mov	r1, r9
 800763c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007640:	f7f8 ffe2 	bl	8000608 <__aeabi_dmul>
 8007644:	3501      	adds	r5, #1
 8007646:	4680      	mov	r8, r0
 8007648:	4689      	mov	r9, r1
 800764a:	107f      	asrs	r7, r7, #1
 800764c:	3608      	adds	r6, #8
 800764e:	e7e5      	b.n	800761c <_dtoa_r+0x36c>
 8007650:	f000 809b 	beq.w	800778a <_dtoa_r+0x4da>
 8007654:	9b00      	ldr	r3, [sp, #0]
 8007656:	4f9d      	ldr	r7, [pc, #628]	; (80078cc <_dtoa_r+0x61c>)
 8007658:	425e      	negs	r6, r3
 800765a:	4b9b      	ldr	r3, [pc, #620]	; (80078c8 <_dtoa_r+0x618>)
 800765c:	f006 020f 	and.w	r2, r6, #15
 8007660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	ec51 0b19 	vmov	r0, r1, d9
 800766c:	f7f8 ffcc 	bl	8000608 <__aeabi_dmul>
 8007670:	1136      	asrs	r6, r6, #4
 8007672:	4682      	mov	sl, r0
 8007674:	468b      	mov	fp, r1
 8007676:	2300      	movs	r3, #0
 8007678:	2502      	movs	r5, #2
 800767a:	2e00      	cmp	r6, #0
 800767c:	d17a      	bne.n	8007774 <_dtoa_r+0x4c4>
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1d3      	bne.n	800762a <_dtoa_r+0x37a>
 8007682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 8082 	beq.w	800778e <_dtoa_r+0x4de>
 800768a:	4b91      	ldr	r3, [pc, #580]	; (80078d0 <_dtoa_r+0x620>)
 800768c:	2200      	movs	r2, #0
 800768e:	4650      	mov	r0, sl
 8007690:	4659      	mov	r1, fp
 8007692:	f7f9 fa2b 	bl	8000aec <__aeabi_dcmplt>
 8007696:	2800      	cmp	r0, #0
 8007698:	d079      	beq.n	800778e <_dtoa_r+0x4de>
 800769a:	9b03      	ldr	r3, [sp, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d076      	beq.n	800778e <_dtoa_r+0x4de>
 80076a0:	9b02      	ldr	r3, [sp, #8]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	dd36      	ble.n	8007714 <_dtoa_r+0x464>
 80076a6:	9b00      	ldr	r3, [sp, #0]
 80076a8:	4650      	mov	r0, sl
 80076aa:	4659      	mov	r1, fp
 80076ac:	1e5f      	subs	r7, r3, #1
 80076ae:	2200      	movs	r2, #0
 80076b0:	4b88      	ldr	r3, [pc, #544]	; (80078d4 <_dtoa_r+0x624>)
 80076b2:	f7f8 ffa9 	bl	8000608 <__aeabi_dmul>
 80076b6:	9e02      	ldr	r6, [sp, #8]
 80076b8:	4682      	mov	sl, r0
 80076ba:	468b      	mov	fp, r1
 80076bc:	3501      	adds	r5, #1
 80076be:	4628      	mov	r0, r5
 80076c0:	f7f8 ff38 	bl	8000534 <__aeabi_i2d>
 80076c4:	4652      	mov	r2, sl
 80076c6:	465b      	mov	r3, fp
 80076c8:	f7f8 ff9e 	bl	8000608 <__aeabi_dmul>
 80076cc:	4b82      	ldr	r3, [pc, #520]	; (80078d8 <_dtoa_r+0x628>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	f7f8 fde4 	bl	800029c <__adddf3>
 80076d4:	46d0      	mov	r8, sl
 80076d6:	46d9      	mov	r9, fp
 80076d8:	4682      	mov	sl, r0
 80076da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80076de:	2e00      	cmp	r6, #0
 80076e0:	d158      	bne.n	8007794 <_dtoa_r+0x4e4>
 80076e2:	4b7e      	ldr	r3, [pc, #504]	; (80078dc <_dtoa_r+0x62c>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	4640      	mov	r0, r8
 80076e8:	4649      	mov	r1, r9
 80076ea:	f7f8 fdd5 	bl	8000298 <__aeabi_dsub>
 80076ee:	4652      	mov	r2, sl
 80076f0:	465b      	mov	r3, fp
 80076f2:	4680      	mov	r8, r0
 80076f4:	4689      	mov	r9, r1
 80076f6:	f7f9 fa17 	bl	8000b28 <__aeabi_dcmpgt>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	f040 8295 	bne.w	8007c2a <_dtoa_r+0x97a>
 8007700:	4652      	mov	r2, sl
 8007702:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007706:	4640      	mov	r0, r8
 8007708:	4649      	mov	r1, r9
 800770a:	f7f9 f9ef 	bl	8000aec <__aeabi_dcmplt>
 800770e:	2800      	cmp	r0, #0
 8007710:	f040 8289 	bne.w	8007c26 <_dtoa_r+0x976>
 8007714:	ec5b ab19 	vmov	sl, fp, d9
 8007718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800771a:	2b00      	cmp	r3, #0
 800771c:	f2c0 8148 	blt.w	80079b0 <_dtoa_r+0x700>
 8007720:	9a00      	ldr	r2, [sp, #0]
 8007722:	2a0e      	cmp	r2, #14
 8007724:	f300 8144 	bgt.w	80079b0 <_dtoa_r+0x700>
 8007728:	4b67      	ldr	r3, [pc, #412]	; (80078c8 <_dtoa_r+0x618>)
 800772a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800772e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007734:	2b00      	cmp	r3, #0
 8007736:	f280 80d5 	bge.w	80078e4 <_dtoa_r+0x634>
 800773a:	9b03      	ldr	r3, [sp, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	f300 80d1 	bgt.w	80078e4 <_dtoa_r+0x634>
 8007742:	f040 826f 	bne.w	8007c24 <_dtoa_r+0x974>
 8007746:	4b65      	ldr	r3, [pc, #404]	; (80078dc <_dtoa_r+0x62c>)
 8007748:	2200      	movs	r2, #0
 800774a:	4640      	mov	r0, r8
 800774c:	4649      	mov	r1, r9
 800774e:	f7f8 ff5b 	bl	8000608 <__aeabi_dmul>
 8007752:	4652      	mov	r2, sl
 8007754:	465b      	mov	r3, fp
 8007756:	f7f9 f9dd 	bl	8000b14 <__aeabi_dcmpge>
 800775a:	9e03      	ldr	r6, [sp, #12]
 800775c:	4637      	mov	r7, r6
 800775e:	2800      	cmp	r0, #0
 8007760:	f040 8245 	bne.w	8007bee <_dtoa_r+0x93e>
 8007764:	9d01      	ldr	r5, [sp, #4]
 8007766:	2331      	movs	r3, #49	; 0x31
 8007768:	f805 3b01 	strb.w	r3, [r5], #1
 800776c:	9b00      	ldr	r3, [sp, #0]
 800776e:	3301      	adds	r3, #1
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	e240      	b.n	8007bf6 <_dtoa_r+0x946>
 8007774:	07f2      	lsls	r2, r6, #31
 8007776:	d505      	bpl.n	8007784 <_dtoa_r+0x4d4>
 8007778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800777c:	f7f8 ff44 	bl	8000608 <__aeabi_dmul>
 8007780:	3501      	adds	r5, #1
 8007782:	2301      	movs	r3, #1
 8007784:	1076      	asrs	r6, r6, #1
 8007786:	3708      	adds	r7, #8
 8007788:	e777      	b.n	800767a <_dtoa_r+0x3ca>
 800778a:	2502      	movs	r5, #2
 800778c:	e779      	b.n	8007682 <_dtoa_r+0x3d2>
 800778e:	9f00      	ldr	r7, [sp, #0]
 8007790:	9e03      	ldr	r6, [sp, #12]
 8007792:	e794      	b.n	80076be <_dtoa_r+0x40e>
 8007794:	9901      	ldr	r1, [sp, #4]
 8007796:	4b4c      	ldr	r3, [pc, #304]	; (80078c8 <_dtoa_r+0x618>)
 8007798:	4431      	add	r1, r6
 800779a:	910d      	str	r1, [sp, #52]	; 0x34
 800779c:	9908      	ldr	r1, [sp, #32]
 800779e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80077a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077a6:	2900      	cmp	r1, #0
 80077a8:	d043      	beq.n	8007832 <_dtoa_r+0x582>
 80077aa:	494d      	ldr	r1, [pc, #308]	; (80078e0 <_dtoa_r+0x630>)
 80077ac:	2000      	movs	r0, #0
 80077ae:	f7f9 f855 	bl	800085c <__aeabi_ddiv>
 80077b2:	4652      	mov	r2, sl
 80077b4:	465b      	mov	r3, fp
 80077b6:	f7f8 fd6f 	bl	8000298 <__aeabi_dsub>
 80077ba:	9d01      	ldr	r5, [sp, #4]
 80077bc:	4682      	mov	sl, r0
 80077be:	468b      	mov	fp, r1
 80077c0:	4649      	mov	r1, r9
 80077c2:	4640      	mov	r0, r8
 80077c4:	f7f9 f9d0 	bl	8000b68 <__aeabi_d2iz>
 80077c8:	4606      	mov	r6, r0
 80077ca:	f7f8 feb3 	bl	8000534 <__aeabi_i2d>
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	4640      	mov	r0, r8
 80077d4:	4649      	mov	r1, r9
 80077d6:	f7f8 fd5f 	bl	8000298 <__aeabi_dsub>
 80077da:	3630      	adds	r6, #48	; 0x30
 80077dc:	f805 6b01 	strb.w	r6, [r5], #1
 80077e0:	4652      	mov	r2, sl
 80077e2:	465b      	mov	r3, fp
 80077e4:	4680      	mov	r8, r0
 80077e6:	4689      	mov	r9, r1
 80077e8:	f7f9 f980 	bl	8000aec <__aeabi_dcmplt>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d163      	bne.n	80078b8 <_dtoa_r+0x608>
 80077f0:	4642      	mov	r2, r8
 80077f2:	464b      	mov	r3, r9
 80077f4:	4936      	ldr	r1, [pc, #216]	; (80078d0 <_dtoa_r+0x620>)
 80077f6:	2000      	movs	r0, #0
 80077f8:	f7f8 fd4e 	bl	8000298 <__aeabi_dsub>
 80077fc:	4652      	mov	r2, sl
 80077fe:	465b      	mov	r3, fp
 8007800:	f7f9 f974 	bl	8000aec <__aeabi_dcmplt>
 8007804:	2800      	cmp	r0, #0
 8007806:	f040 80b5 	bne.w	8007974 <_dtoa_r+0x6c4>
 800780a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800780c:	429d      	cmp	r5, r3
 800780e:	d081      	beq.n	8007714 <_dtoa_r+0x464>
 8007810:	4b30      	ldr	r3, [pc, #192]	; (80078d4 <_dtoa_r+0x624>)
 8007812:	2200      	movs	r2, #0
 8007814:	4650      	mov	r0, sl
 8007816:	4659      	mov	r1, fp
 8007818:	f7f8 fef6 	bl	8000608 <__aeabi_dmul>
 800781c:	4b2d      	ldr	r3, [pc, #180]	; (80078d4 <_dtoa_r+0x624>)
 800781e:	4682      	mov	sl, r0
 8007820:	468b      	mov	fp, r1
 8007822:	4640      	mov	r0, r8
 8007824:	4649      	mov	r1, r9
 8007826:	2200      	movs	r2, #0
 8007828:	f7f8 feee 	bl	8000608 <__aeabi_dmul>
 800782c:	4680      	mov	r8, r0
 800782e:	4689      	mov	r9, r1
 8007830:	e7c6      	b.n	80077c0 <_dtoa_r+0x510>
 8007832:	4650      	mov	r0, sl
 8007834:	4659      	mov	r1, fp
 8007836:	f7f8 fee7 	bl	8000608 <__aeabi_dmul>
 800783a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800783c:	9d01      	ldr	r5, [sp, #4]
 800783e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007840:	4682      	mov	sl, r0
 8007842:	468b      	mov	fp, r1
 8007844:	4649      	mov	r1, r9
 8007846:	4640      	mov	r0, r8
 8007848:	f7f9 f98e 	bl	8000b68 <__aeabi_d2iz>
 800784c:	4606      	mov	r6, r0
 800784e:	f7f8 fe71 	bl	8000534 <__aeabi_i2d>
 8007852:	3630      	adds	r6, #48	; 0x30
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4640      	mov	r0, r8
 800785a:	4649      	mov	r1, r9
 800785c:	f7f8 fd1c 	bl	8000298 <__aeabi_dsub>
 8007860:	f805 6b01 	strb.w	r6, [r5], #1
 8007864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007866:	429d      	cmp	r5, r3
 8007868:	4680      	mov	r8, r0
 800786a:	4689      	mov	r9, r1
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	d124      	bne.n	80078bc <_dtoa_r+0x60c>
 8007872:	4b1b      	ldr	r3, [pc, #108]	; (80078e0 <_dtoa_r+0x630>)
 8007874:	4650      	mov	r0, sl
 8007876:	4659      	mov	r1, fp
 8007878:	f7f8 fd10 	bl	800029c <__adddf3>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4640      	mov	r0, r8
 8007882:	4649      	mov	r1, r9
 8007884:	f7f9 f950 	bl	8000b28 <__aeabi_dcmpgt>
 8007888:	2800      	cmp	r0, #0
 800788a:	d173      	bne.n	8007974 <_dtoa_r+0x6c4>
 800788c:	4652      	mov	r2, sl
 800788e:	465b      	mov	r3, fp
 8007890:	4913      	ldr	r1, [pc, #76]	; (80078e0 <_dtoa_r+0x630>)
 8007892:	2000      	movs	r0, #0
 8007894:	f7f8 fd00 	bl	8000298 <__aeabi_dsub>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4640      	mov	r0, r8
 800789e:	4649      	mov	r1, r9
 80078a0:	f7f9 f924 	bl	8000aec <__aeabi_dcmplt>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	f43f af35 	beq.w	8007714 <_dtoa_r+0x464>
 80078aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80078ac:	1e6b      	subs	r3, r5, #1
 80078ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80078b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078b4:	2b30      	cmp	r3, #48	; 0x30
 80078b6:	d0f8      	beq.n	80078aa <_dtoa_r+0x5fa>
 80078b8:	9700      	str	r7, [sp, #0]
 80078ba:	e049      	b.n	8007950 <_dtoa_r+0x6a0>
 80078bc:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <_dtoa_r+0x624>)
 80078be:	f7f8 fea3 	bl	8000608 <__aeabi_dmul>
 80078c2:	4680      	mov	r8, r0
 80078c4:	4689      	mov	r9, r1
 80078c6:	e7bd      	b.n	8007844 <_dtoa_r+0x594>
 80078c8:	0800a368 	.word	0x0800a368
 80078cc:	0800a340 	.word	0x0800a340
 80078d0:	3ff00000 	.word	0x3ff00000
 80078d4:	40240000 	.word	0x40240000
 80078d8:	401c0000 	.word	0x401c0000
 80078dc:	40140000 	.word	0x40140000
 80078e0:	3fe00000 	.word	0x3fe00000
 80078e4:	9d01      	ldr	r5, [sp, #4]
 80078e6:	4656      	mov	r6, sl
 80078e8:	465f      	mov	r7, fp
 80078ea:	4642      	mov	r2, r8
 80078ec:	464b      	mov	r3, r9
 80078ee:	4630      	mov	r0, r6
 80078f0:	4639      	mov	r1, r7
 80078f2:	f7f8 ffb3 	bl	800085c <__aeabi_ddiv>
 80078f6:	f7f9 f937 	bl	8000b68 <__aeabi_d2iz>
 80078fa:	4682      	mov	sl, r0
 80078fc:	f7f8 fe1a 	bl	8000534 <__aeabi_i2d>
 8007900:	4642      	mov	r2, r8
 8007902:	464b      	mov	r3, r9
 8007904:	f7f8 fe80 	bl	8000608 <__aeabi_dmul>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	4630      	mov	r0, r6
 800790e:	4639      	mov	r1, r7
 8007910:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007914:	f7f8 fcc0 	bl	8000298 <__aeabi_dsub>
 8007918:	f805 6b01 	strb.w	r6, [r5], #1
 800791c:	9e01      	ldr	r6, [sp, #4]
 800791e:	9f03      	ldr	r7, [sp, #12]
 8007920:	1bae      	subs	r6, r5, r6
 8007922:	42b7      	cmp	r7, r6
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	d135      	bne.n	8007996 <_dtoa_r+0x6e6>
 800792a:	f7f8 fcb7 	bl	800029c <__adddf3>
 800792e:	4642      	mov	r2, r8
 8007930:	464b      	mov	r3, r9
 8007932:	4606      	mov	r6, r0
 8007934:	460f      	mov	r7, r1
 8007936:	f7f9 f8f7 	bl	8000b28 <__aeabi_dcmpgt>
 800793a:	b9d0      	cbnz	r0, 8007972 <_dtoa_r+0x6c2>
 800793c:	4642      	mov	r2, r8
 800793e:	464b      	mov	r3, r9
 8007940:	4630      	mov	r0, r6
 8007942:	4639      	mov	r1, r7
 8007944:	f7f9 f8c8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007948:	b110      	cbz	r0, 8007950 <_dtoa_r+0x6a0>
 800794a:	f01a 0f01 	tst.w	sl, #1
 800794e:	d110      	bne.n	8007972 <_dtoa_r+0x6c2>
 8007950:	4620      	mov	r0, r4
 8007952:	ee18 1a10 	vmov	r1, s16
 8007956:	f000 fe75 	bl	8008644 <_Bfree>
 800795a:	2300      	movs	r3, #0
 800795c:	9800      	ldr	r0, [sp, #0]
 800795e:	702b      	strb	r3, [r5, #0]
 8007960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007962:	3001      	adds	r0, #1
 8007964:	6018      	str	r0, [r3, #0]
 8007966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007968:	2b00      	cmp	r3, #0
 800796a:	f43f acf1 	beq.w	8007350 <_dtoa_r+0xa0>
 800796e:	601d      	str	r5, [r3, #0]
 8007970:	e4ee      	b.n	8007350 <_dtoa_r+0xa0>
 8007972:	9f00      	ldr	r7, [sp, #0]
 8007974:	462b      	mov	r3, r5
 8007976:	461d      	mov	r5, r3
 8007978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800797c:	2a39      	cmp	r2, #57	; 0x39
 800797e:	d106      	bne.n	800798e <_dtoa_r+0x6de>
 8007980:	9a01      	ldr	r2, [sp, #4]
 8007982:	429a      	cmp	r2, r3
 8007984:	d1f7      	bne.n	8007976 <_dtoa_r+0x6c6>
 8007986:	9901      	ldr	r1, [sp, #4]
 8007988:	2230      	movs	r2, #48	; 0x30
 800798a:	3701      	adds	r7, #1
 800798c:	700a      	strb	r2, [r1, #0]
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	3201      	adds	r2, #1
 8007992:	701a      	strb	r2, [r3, #0]
 8007994:	e790      	b.n	80078b8 <_dtoa_r+0x608>
 8007996:	4ba6      	ldr	r3, [pc, #664]	; (8007c30 <_dtoa_r+0x980>)
 8007998:	2200      	movs	r2, #0
 800799a:	f7f8 fe35 	bl	8000608 <__aeabi_dmul>
 800799e:	2200      	movs	r2, #0
 80079a0:	2300      	movs	r3, #0
 80079a2:	4606      	mov	r6, r0
 80079a4:	460f      	mov	r7, r1
 80079a6:	f7f9 f897 	bl	8000ad8 <__aeabi_dcmpeq>
 80079aa:	2800      	cmp	r0, #0
 80079ac:	d09d      	beq.n	80078ea <_dtoa_r+0x63a>
 80079ae:	e7cf      	b.n	8007950 <_dtoa_r+0x6a0>
 80079b0:	9a08      	ldr	r2, [sp, #32]
 80079b2:	2a00      	cmp	r2, #0
 80079b4:	f000 80d7 	beq.w	8007b66 <_dtoa_r+0x8b6>
 80079b8:	9a06      	ldr	r2, [sp, #24]
 80079ba:	2a01      	cmp	r2, #1
 80079bc:	f300 80ba 	bgt.w	8007b34 <_dtoa_r+0x884>
 80079c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079c2:	2a00      	cmp	r2, #0
 80079c4:	f000 80b2 	beq.w	8007b2c <_dtoa_r+0x87c>
 80079c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079cc:	9e07      	ldr	r6, [sp, #28]
 80079ce:	9d04      	ldr	r5, [sp, #16]
 80079d0:	9a04      	ldr	r2, [sp, #16]
 80079d2:	441a      	add	r2, r3
 80079d4:	9204      	str	r2, [sp, #16]
 80079d6:	9a05      	ldr	r2, [sp, #20]
 80079d8:	2101      	movs	r1, #1
 80079da:	441a      	add	r2, r3
 80079dc:	4620      	mov	r0, r4
 80079de:	9205      	str	r2, [sp, #20]
 80079e0:	f000 ff32 	bl	8008848 <__i2b>
 80079e4:	4607      	mov	r7, r0
 80079e6:	2d00      	cmp	r5, #0
 80079e8:	dd0c      	ble.n	8007a04 <_dtoa_r+0x754>
 80079ea:	9b05      	ldr	r3, [sp, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	dd09      	ble.n	8007a04 <_dtoa_r+0x754>
 80079f0:	42ab      	cmp	r3, r5
 80079f2:	9a04      	ldr	r2, [sp, #16]
 80079f4:	bfa8      	it	ge
 80079f6:	462b      	movge	r3, r5
 80079f8:	1ad2      	subs	r2, r2, r3
 80079fa:	9204      	str	r2, [sp, #16]
 80079fc:	9a05      	ldr	r2, [sp, #20]
 80079fe:	1aed      	subs	r5, r5, r3
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	9305      	str	r3, [sp, #20]
 8007a04:	9b07      	ldr	r3, [sp, #28]
 8007a06:	b31b      	cbz	r3, 8007a50 <_dtoa_r+0x7a0>
 8007a08:	9b08      	ldr	r3, [sp, #32]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 80af 	beq.w	8007b6e <_dtoa_r+0x8be>
 8007a10:	2e00      	cmp	r6, #0
 8007a12:	dd13      	ble.n	8007a3c <_dtoa_r+0x78c>
 8007a14:	4639      	mov	r1, r7
 8007a16:	4632      	mov	r2, r6
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 ffd5 	bl	80089c8 <__pow5mult>
 8007a1e:	ee18 2a10 	vmov	r2, s16
 8007a22:	4601      	mov	r1, r0
 8007a24:	4607      	mov	r7, r0
 8007a26:	4620      	mov	r0, r4
 8007a28:	f000 ff24 	bl	8008874 <__multiply>
 8007a2c:	ee18 1a10 	vmov	r1, s16
 8007a30:	4680      	mov	r8, r0
 8007a32:	4620      	mov	r0, r4
 8007a34:	f000 fe06 	bl	8008644 <_Bfree>
 8007a38:	ee08 8a10 	vmov	s16, r8
 8007a3c:	9b07      	ldr	r3, [sp, #28]
 8007a3e:	1b9a      	subs	r2, r3, r6
 8007a40:	d006      	beq.n	8007a50 <_dtoa_r+0x7a0>
 8007a42:	ee18 1a10 	vmov	r1, s16
 8007a46:	4620      	mov	r0, r4
 8007a48:	f000 ffbe 	bl	80089c8 <__pow5mult>
 8007a4c:	ee08 0a10 	vmov	s16, r0
 8007a50:	2101      	movs	r1, #1
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 fef8 	bl	8008848 <__i2b>
 8007a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	f340 8088 	ble.w	8007b72 <_dtoa_r+0x8c2>
 8007a62:	461a      	mov	r2, r3
 8007a64:	4601      	mov	r1, r0
 8007a66:	4620      	mov	r0, r4
 8007a68:	f000 ffae 	bl	80089c8 <__pow5mult>
 8007a6c:	9b06      	ldr	r3, [sp, #24]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	4606      	mov	r6, r0
 8007a72:	f340 8081 	ble.w	8007b78 <_dtoa_r+0x8c8>
 8007a76:	f04f 0800 	mov.w	r8, #0
 8007a7a:	6933      	ldr	r3, [r6, #16]
 8007a7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a80:	6918      	ldr	r0, [r3, #16]
 8007a82:	f000 fe91 	bl	80087a8 <__hi0bits>
 8007a86:	f1c0 0020 	rsb	r0, r0, #32
 8007a8a:	9b05      	ldr	r3, [sp, #20]
 8007a8c:	4418      	add	r0, r3
 8007a8e:	f010 001f 	ands.w	r0, r0, #31
 8007a92:	f000 8092 	beq.w	8007bba <_dtoa_r+0x90a>
 8007a96:	f1c0 0320 	rsb	r3, r0, #32
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	f340 808a 	ble.w	8007bb4 <_dtoa_r+0x904>
 8007aa0:	f1c0 001c 	rsb	r0, r0, #28
 8007aa4:	9b04      	ldr	r3, [sp, #16]
 8007aa6:	4403      	add	r3, r0
 8007aa8:	9304      	str	r3, [sp, #16]
 8007aaa:	9b05      	ldr	r3, [sp, #20]
 8007aac:	4403      	add	r3, r0
 8007aae:	4405      	add	r5, r0
 8007ab0:	9305      	str	r3, [sp, #20]
 8007ab2:	9b04      	ldr	r3, [sp, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	dd07      	ble.n	8007ac8 <_dtoa_r+0x818>
 8007ab8:	ee18 1a10 	vmov	r1, s16
 8007abc:	461a      	mov	r2, r3
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f000 ffdc 	bl	8008a7c <__lshift>
 8007ac4:	ee08 0a10 	vmov	s16, r0
 8007ac8:	9b05      	ldr	r3, [sp, #20]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	dd05      	ble.n	8007ada <_dtoa_r+0x82a>
 8007ace:	4631      	mov	r1, r6
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 ffd2 	bl	8008a7c <__lshift>
 8007ad8:	4606      	mov	r6, r0
 8007ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d06e      	beq.n	8007bbe <_dtoa_r+0x90e>
 8007ae0:	ee18 0a10 	vmov	r0, s16
 8007ae4:	4631      	mov	r1, r6
 8007ae6:	f001 f839 	bl	8008b5c <__mcmp>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	da67      	bge.n	8007bbe <_dtoa_r+0x90e>
 8007aee:	9b00      	ldr	r3, [sp, #0]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	ee18 1a10 	vmov	r1, s16
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	220a      	movs	r2, #10
 8007afa:	2300      	movs	r3, #0
 8007afc:	4620      	mov	r0, r4
 8007afe:	f000 fdc3 	bl	8008688 <__multadd>
 8007b02:	9b08      	ldr	r3, [sp, #32]
 8007b04:	ee08 0a10 	vmov	s16, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 81b1 	beq.w	8007e70 <_dtoa_r+0xbc0>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	4639      	mov	r1, r7
 8007b12:	220a      	movs	r2, #10
 8007b14:	4620      	mov	r0, r4
 8007b16:	f000 fdb7 	bl	8008688 <__multadd>
 8007b1a:	9b02      	ldr	r3, [sp, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	4607      	mov	r7, r0
 8007b20:	f300 808e 	bgt.w	8007c40 <_dtoa_r+0x990>
 8007b24:	9b06      	ldr	r3, [sp, #24]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	dc51      	bgt.n	8007bce <_dtoa_r+0x91e>
 8007b2a:	e089      	b.n	8007c40 <_dtoa_r+0x990>
 8007b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b32:	e74b      	b.n	80079cc <_dtoa_r+0x71c>
 8007b34:	9b03      	ldr	r3, [sp, #12]
 8007b36:	1e5e      	subs	r6, r3, #1
 8007b38:	9b07      	ldr	r3, [sp, #28]
 8007b3a:	42b3      	cmp	r3, r6
 8007b3c:	bfbf      	itttt	lt
 8007b3e:	9b07      	ldrlt	r3, [sp, #28]
 8007b40:	9607      	strlt	r6, [sp, #28]
 8007b42:	1af2      	sublt	r2, r6, r3
 8007b44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b46:	bfb6      	itet	lt
 8007b48:	189b      	addlt	r3, r3, r2
 8007b4a:	1b9e      	subge	r6, r3, r6
 8007b4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007b4e:	9b03      	ldr	r3, [sp, #12]
 8007b50:	bfb8      	it	lt
 8007b52:	2600      	movlt	r6, #0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	bfb7      	itett	lt
 8007b58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007b5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007b60:	1a9d      	sublt	r5, r3, r2
 8007b62:	2300      	movlt	r3, #0
 8007b64:	e734      	b.n	80079d0 <_dtoa_r+0x720>
 8007b66:	9e07      	ldr	r6, [sp, #28]
 8007b68:	9d04      	ldr	r5, [sp, #16]
 8007b6a:	9f08      	ldr	r7, [sp, #32]
 8007b6c:	e73b      	b.n	80079e6 <_dtoa_r+0x736>
 8007b6e:	9a07      	ldr	r2, [sp, #28]
 8007b70:	e767      	b.n	8007a42 <_dtoa_r+0x792>
 8007b72:	9b06      	ldr	r3, [sp, #24]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	dc18      	bgt.n	8007baa <_dtoa_r+0x8fa>
 8007b78:	f1ba 0f00 	cmp.w	sl, #0
 8007b7c:	d115      	bne.n	8007baa <_dtoa_r+0x8fa>
 8007b7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b82:	b993      	cbnz	r3, 8007baa <_dtoa_r+0x8fa>
 8007b84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b88:	0d1b      	lsrs	r3, r3, #20
 8007b8a:	051b      	lsls	r3, r3, #20
 8007b8c:	b183      	cbz	r3, 8007bb0 <_dtoa_r+0x900>
 8007b8e:	9b04      	ldr	r3, [sp, #16]
 8007b90:	3301      	adds	r3, #1
 8007b92:	9304      	str	r3, [sp, #16]
 8007b94:	9b05      	ldr	r3, [sp, #20]
 8007b96:	3301      	adds	r3, #1
 8007b98:	9305      	str	r3, [sp, #20]
 8007b9a:	f04f 0801 	mov.w	r8, #1
 8007b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f47f af6a 	bne.w	8007a7a <_dtoa_r+0x7ca>
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	e76f      	b.n	8007a8a <_dtoa_r+0x7da>
 8007baa:	f04f 0800 	mov.w	r8, #0
 8007bae:	e7f6      	b.n	8007b9e <_dtoa_r+0x8ee>
 8007bb0:	4698      	mov	r8, r3
 8007bb2:	e7f4      	b.n	8007b9e <_dtoa_r+0x8ee>
 8007bb4:	f43f af7d 	beq.w	8007ab2 <_dtoa_r+0x802>
 8007bb8:	4618      	mov	r0, r3
 8007bba:	301c      	adds	r0, #28
 8007bbc:	e772      	b.n	8007aa4 <_dtoa_r+0x7f4>
 8007bbe:	9b03      	ldr	r3, [sp, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	dc37      	bgt.n	8007c34 <_dtoa_r+0x984>
 8007bc4:	9b06      	ldr	r3, [sp, #24]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	dd34      	ble.n	8007c34 <_dtoa_r+0x984>
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	9302      	str	r3, [sp, #8]
 8007bce:	9b02      	ldr	r3, [sp, #8]
 8007bd0:	b96b      	cbnz	r3, 8007bee <_dtoa_r+0x93e>
 8007bd2:	4631      	mov	r1, r6
 8007bd4:	2205      	movs	r2, #5
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f000 fd56 	bl	8008688 <__multadd>
 8007bdc:	4601      	mov	r1, r0
 8007bde:	4606      	mov	r6, r0
 8007be0:	ee18 0a10 	vmov	r0, s16
 8007be4:	f000 ffba 	bl	8008b5c <__mcmp>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	f73f adbb 	bgt.w	8007764 <_dtoa_r+0x4b4>
 8007bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf0:	9d01      	ldr	r5, [sp, #4]
 8007bf2:	43db      	mvns	r3, r3
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	f04f 0800 	mov.w	r8, #0
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f000 fd21 	bl	8008644 <_Bfree>
 8007c02:	2f00      	cmp	r7, #0
 8007c04:	f43f aea4 	beq.w	8007950 <_dtoa_r+0x6a0>
 8007c08:	f1b8 0f00 	cmp.w	r8, #0
 8007c0c:	d005      	beq.n	8007c1a <_dtoa_r+0x96a>
 8007c0e:	45b8      	cmp	r8, r7
 8007c10:	d003      	beq.n	8007c1a <_dtoa_r+0x96a>
 8007c12:	4641      	mov	r1, r8
 8007c14:	4620      	mov	r0, r4
 8007c16:	f000 fd15 	bl	8008644 <_Bfree>
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 fd11 	bl	8008644 <_Bfree>
 8007c22:	e695      	b.n	8007950 <_dtoa_r+0x6a0>
 8007c24:	2600      	movs	r6, #0
 8007c26:	4637      	mov	r7, r6
 8007c28:	e7e1      	b.n	8007bee <_dtoa_r+0x93e>
 8007c2a:	9700      	str	r7, [sp, #0]
 8007c2c:	4637      	mov	r7, r6
 8007c2e:	e599      	b.n	8007764 <_dtoa_r+0x4b4>
 8007c30:	40240000 	.word	0x40240000
 8007c34:	9b08      	ldr	r3, [sp, #32]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 80ca 	beq.w	8007dd0 <_dtoa_r+0xb20>
 8007c3c:	9b03      	ldr	r3, [sp, #12]
 8007c3e:	9302      	str	r3, [sp, #8]
 8007c40:	2d00      	cmp	r5, #0
 8007c42:	dd05      	ble.n	8007c50 <_dtoa_r+0x9a0>
 8007c44:	4639      	mov	r1, r7
 8007c46:	462a      	mov	r2, r5
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 ff17 	bl	8008a7c <__lshift>
 8007c4e:	4607      	mov	r7, r0
 8007c50:	f1b8 0f00 	cmp.w	r8, #0
 8007c54:	d05b      	beq.n	8007d0e <_dtoa_r+0xa5e>
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f000 fcb3 	bl	80085c4 <_Balloc>
 8007c5e:	4605      	mov	r5, r0
 8007c60:	b928      	cbnz	r0, 8007c6e <_dtoa_r+0x9be>
 8007c62:	4b87      	ldr	r3, [pc, #540]	; (8007e80 <_dtoa_r+0xbd0>)
 8007c64:	4602      	mov	r2, r0
 8007c66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007c6a:	f7ff bb3b 	b.w	80072e4 <_dtoa_r+0x34>
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	3202      	adds	r2, #2
 8007c72:	0092      	lsls	r2, r2, #2
 8007c74:	f107 010c 	add.w	r1, r7, #12
 8007c78:	300c      	adds	r0, #12
 8007c7a:	f000 fc95 	bl	80085a8 <memcpy>
 8007c7e:	2201      	movs	r2, #1
 8007c80:	4629      	mov	r1, r5
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 fefa 	bl	8008a7c <__lshift>
 8007c88:	9b01      	ldr	r3, [sp, #4]
 8007c8a:	f103 0901 	add.w	r9, r3, #1
 8007c8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007c92:	4413      	add	r3, r2
 8007c94:	9305      	str	r3, [sp, #20]
 8007c96:	f00a 0301 	and.w	r3, sl, #1
 8007c9a:	46b8      	mov	r8, r7
 8007c9c:	9304      	str	r3, [sp, #16]
 8007c9e:	4607      	mov	r7, r0
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	ee18 0a10 	vmov	r0, s16
 8007ca6:	f7ff fa77 	bl	8007198 <quorem>
 8007caa:	4641      	mov	r1, r8
 8007cac:	9002      	str	r0, [sp, #8]
 8007cae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007cb2:	ee18 0a10 	vmov	r0, s16
 8007cb6:	f000 ff51 	bl	8008b5c <__mcmp>
 8007cba:	463a      	mov	r2, r7
 8007cbc:	9003      	str	r0, [sp, #12]
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f000 ff67 	bl	8008b94 <__mdiff>
 8007cc6:	68c2      	ldr	r2, [r0, #12]
 8007cc8:	f109 3bff 	add.w	fp, r9, #4294967295
 8007ccc:	4605      	mov	r5, r0
 8007cce:	bb02      	cbnz	r2, 8007d12 <_dtoa_r+0xa62>
 8007cd0:	4601      	mov	r1, r0
 8007cd2:	ee18 0a10 	vmov	r0, s16
 8007cd6:	f000 ff41 	bl	8008b5c <__mcmp>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4620      	mov	r0, r4
 8007ce0:	9207      	str	r2, [sp, #28]
 8007ce2:	f000 fcaf 	bl	8008644 <_Bfree>
 8007ce6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007cea:	ea43 0102 	orr.w	r1, r3, r2
 8007cee:	9b04      	ldr	r3, [sp, #16]
 8007cf0:	430b      	orrs	r3, r1
 8007cf2:	464d      	mov	r5, r9
 8007cf4:	d10f      	bne.n	8007d16 <_dtoa_r+0xa66>
 8007cf6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007cfa:	d02a      	beq.n	8007d52 <_dtoa_r+0xaa2>
 8007cfc:	9b03      	ldr	r3, [sp, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	dd02      	ble.n	8007d08 <_dtoa_r+0xa58>
 8007d02:	9b02      	ldr	r3, [sp, #8]
 8007d04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007d08:	f88b a000 	strb.w	sl, [fp]
 8007d0c:	e775      	b.n	8007bfa <_dtoa_r+0x94a>
 8007d0e:	4638      	mov	r0, r7
 8007d10:	e7ba      	b.n	8007c88 <_dtoa_r+0x9d8>
 8007d12:	2201      	movs	r2, #1
 8007d14:	e7e2      	b.n	8007cdc <_dtoa_r+0xa2c>
 8007d16:	9b03      	ldr	r3, [sp, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	db04      	blt.n	8007d26 <_dtoa_r+0xa76>
 8007d1c:	9906      	ldr	r1, [sp, #24]
 8007d1e:	430b      	orrs	r3, r1
 8007d20:	9904      	ldr	r1, [sp, #16]
 8007d22:	430b      	orrs	r3, r1
 8007d24:	d122      	bne.n	8007d6c <_dtoa_r+0xabc>
 8007d26:	2a00      	cmp	r2, #0
 8007d28:	ddee      	ble.n	8007d08 <_dtoa_r+0xa58>
 8007d2a:	ee18 1a10 	vmov	r1, s16
 8007d2e:	2201      	movs	r2, #1
 8007d30:	4620      	mov	r0, r4
 8007d32:	f000 fea3 	bl	8008a7c <__lshift>
 8007d36:	4631      	mov	r1, r6
 8007d38:	ee08 0a10 	vmov	s16, r0
 8007d3c:	f000 ff0e 	bl	8008b5c <__mcmp>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	dc03      	bgt.n	8007d4c <_dtoa_r+0xa9c>
 8007d44:	d1e0      	bne.n	8007d08 <_dtoa_r+0xa58>
 8007d46:	f01a 0f01 	tst.w	sl, #1
 8007d4a:	d0dd      	beq.n	8007d08 <_dtoa_r+0xa58>
 8007d4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d50:	d1d7      	bne.n	8007d02 <_dtoa_r+0xa52>
 8007d52:	2339      	movs	r3, #57	; 0x39
 8007d54:	f88b 3000 	strb.w	r3, [fp]
 8007d58:	462b      	mov	r3, r5
 8007d5a:	461d      	mov	r5, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d62:	2a39      	cmp	r2, #57	; 0x39
 8007d64:	d071      	beq.n	8007e4a <_dtoa_r+0xb9a>
 8007d66:	3201      	adds	r2, #1
 8007d68:	701a      	strb	r2, [r3, #0]
 8007d6a:	e746      	b.n	8007bfa <_dtoa_r+0x94a>
 8007d6c:	2a00      	cmp	r2, #0
 8007d6e:	dd07      	ble.n	8007d80 <_dtoa_r+0xad0>
 8007d70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d74:	d0ed      	beq.n	8007d52 <_dtoa_r+0xaa2>
 8007d76:	f10a 0301 	add.w	r3, sl, #1
 8007d7a:	f88b 3000 	strb.w	r3, [fp]
 8007d7e:	e73c      	b.n	8007bfa <_dtoa_r+0x94a>
 8007d80:	9b05      	ldr	r3, [sp, #20]
 8007d82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007d86:	4599      	cmp	r9, r3
 8007d88:	d047      	beq.n	8007e1a <_dtoa_r+0xb6a>
 8007d8a:	ee18 1a10 	vmov	r1, s16
 8007d8e:	2300      	movs	r3, #0
 8007d90:	220a      	movs	r2, #10
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 fc78 	bl	8008688 <__multadd>
 8007d98:	45b8      	cmp	r8, r7
 8007d9a:	ee08 0a10 	vmov	s16, r0
 8007d9e:	f04f 0300 	mov.w	r3, #0
 8007da2:	f04f 020a 	mov.w	r2, #10
 8007da6:	4641      	mov	r1, r8
 8007da8:	4620      	mov	r0, r4
 8007daa:	d106      	bne.n	8007dba <_dtoa_r+0xb0a>
 8007dac:	f000 fc6c 	bl	8008688 <__multadd>
 8007db0:	4680      	mov	r8, r0
 8007db2:	4607      	mov	r7, r0
 8007db4:	f109 0901 	add.w	r9, r9, #1
 8007db8:	e772      	b.n	8007ca0 <_dtoa_r+0x9f0>
 8007dba:	f000 fc65 	bl	8008688 <__multadd>
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	4680      	mov	r8, r0
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	220a      	movs	r2, #10
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 fc5e 	bl	8008688 <__multadd>
 8007dcc:	4607      	mov	r7, r0
 8007dce:	e7f1      	b.n	8007db4 <_dtoa_r+0xb04>
 8007dd0:	9b03      	ldr	r3, [sp, #12]
 8007dd2:	9302      	str	r3, [sp, #8]
 8007dd4:	9d01      	ldr	r5, [sp, #4]
 8007dd6:	ee18 0a10 	vmov	r0, s16
 8007dda:	4631      	mov	r1, r6
 8007ddc:	f7ff f9dc 	bl	8007198 <quorem>
 8007de0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007de4:	9b01      	ldr	r3, [sp, #4]
 8007de6:	f805 ab01 	strb.w	sl, [r5], #1
 8007dea:	1aea      	subs	r2, r5, r3
 8007dec:	9b02      	ldr	r3, [sp, #8]
 8007dee:	4293      	cmp	r3, r2
 8007df0:	dd09      	ble.n	8007e06 <_dtoa_r+0xb56>
 8007df2:	ee18 1a10 	vmov	r1, s16
 8007df6:	2300      	movs	r3, #0
 8007df8:	220a      	movs	r2, #10
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f000 fc44 	bl	8008688 <__multadd>
 8007e00:	ee08 0a10 	vmov	s16, r0
 8007e04:	e7e7      	b.n	8007dd6 <_dtoa_r+0xb26>
 8007e06:	9b02      	ldr	r3, [sp, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	bfc8      	it	gt
 8007e0c:	461d      	movgt	r5, r3
 8007e0e:	9b01      	ldr	r3, [sp, #4]
 8007e10:	bfd8      	it	le
 8007e12:	2501      	movle	r5, #1
 8007e14:	441d      	add	r5, r3
 8007e16:	f04f 0800 	mov.w	r8, #0
 8007e1a:	ee18 1a10 	vmov	r1, s16
 8007e1e:	2201      	movs	r2, #1
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 fe2b 	bl	8008a7c <__lshift>
 8007e26:	4631      	mov	r1, r6
 8007e28:	ee08 0a10 	vmov	s16, r0
 8007e2c:	f000 fe96 	bl	8008b5c <__mcmp>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	dc91      	bgt.n	8007d58 <_dtoa_r+0xaa8>
 8007e34:	d102      	bne.n	8007e3c <_dtoa_r+0xb8c>
 8007e36:	f01a 0f01 	tst.w	sl, #1
 8007e3a:	d18d      	bne.n	8007d58 <_dtoa_r+0xaa8>
 8007e3c:	462b      	mov	r3, r5
 8007e3e:	461d      	mov	r5, r3
 8007e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e44:	2a30      	cmp	r2, #48	; 0x30
 8007e46:	d0fa      	beq.n	8007e3e <_dtoa_r+0xb8e>
 8007e48:	e6d7      	b.n	8007bfa <_dtoa_r+0x94a>
 8007e4a:	9a01      	ldr	r2, [sp, #4]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d184      	bne.n	8007d5a <_dtoa_r+0xaaa>
 8007e50:	9b00      	ldr	r3, [sp, #0]
 8007e52:	3301      	adds	r3, #1
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	2331      	movs	r3, #49	; 0x31
 8007e58:	7013      	strb	r3, [r2, #0]
 8007e5a:	e6ce      	b.n	8007bfa <_dtoa_r+0x94a>
 8007e5c:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <_dtoa_r+0xbd4>)
 8007e5e:	f7ff ba95 	b.w	800738c <_dtoa_r+0xdc>
 8007e62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f47f aa6e 	bne.w	8007346 <_dtoa_r+0x96>
 8007e6a:	4b07      	ldr	r3, [pc, #28]	; (8007e88 <_dtoa_r+0xbd8>)
 8007e6c:	f7ff ba8e 	b.w	800738c <_dtoa_r+0xdc>
 8007e70:	9b02      	ldr	r3, [sp, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	dcae      	bgt.n	8007dd4 <_dtoa_r+0xb24>
 8007e76:	9b06      	ldr	r3, [sp, #24]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	f73f aea8 	bgt.w	8007bce <_dtoa_r+0x91e>
 8007e7e:	e7a9      	b.n	8007dd4 <_dtoa_r+0xb24>
 8007e80:	0800a258 	.word	0x0800a258
 8007e84:	0800a058 	.word	0x0800a058
 8007e88:	0800a1d9 	.word	0x0800a1d9

08007e8c <rshift>:
 8007e8c:	6903      	ldr	r3, [r0, #16]
 8007e8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e96:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e9a:	f100 0414 	add.w	r4, r0, #20
 8007e9e:	dd45      	ble.n	8007f2c <rshift+0xa0>
 8007ea0:	f011 011f 	ands.w	r1, r1, #31
 8007ea4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ea8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007eac:	d10c      	bne.n	8007ec8 <rshift+0x3c>
 8007eae:	f100 0710 	add.w	r7, r0, #16
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	42b1      	cmp	r1, r6
 8007eb6:	d334      	bcc.n	8007f22 <rshift+0x96>
 8007eb8:	1a9b      	subs	r3, r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	1eea      	subs	r2, r5, #3
 8007ebe:	4296      	cmp	r6, r2
 8007ec0:	bf38      	it	cc
 8007ec2:	2300      	movcc	r3, #0
 8007ec4:	4423      	add	r3, r4
 8007ec6:	e015      	b.n	8007ef4 <rshift+0x68>
 8007ec8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ecc:	f1c1 0820 	rsb	r8, r1, #32
 8007ed0:	40cf      	lsrs	r7, r1
 8007ed2:	f105 0e04 	add.w	lr, r5, #4
 8007ed6:	46a1      	mov	r9, r4
 8007ed8:	4576      	cmp	r6, lr
 8007eda:	46f4      	mov	ip, lr
 8007edc:	d815      	bhi.n	8007f0a <rshift+0x7e>
 8007ede:	1a9a      	subs	r2, r3, r2
 8007ee0:	0092      	lsls	r2, r2, #2
 8007ee2:	3a04      	subs	r2, #4
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	42ae      	cmp	r6, r5
 8007ee8:	bf38      	it	cc
 8007eea:	2200      	movcc	r2, #0
 8007eec:	18a3      	adds	r3, r4, r2
 8007eee:	50a7      	str	r7, [r4, r2]
 8007ef0:	b107      	cbz	r7, 8007ef4 <rshift+0x68>
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	1b1a      	subs	r2, r3, r4
 8007ef6:	42a3      	cmp	r3, r4
 8007ef8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007efc:	bf08      	it	eq
 8007efe:	2300      	moveq	r3, #0
 8007f00:	6102      	str	r2, [r0, #16]
 8007f02:	bf08      	it	eq
 8007f04:	6143      	streq	r3, [r0, #20]
 8007f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f0a:	f8dc c000 	ldr.w	ip, [ip]
 8007f0e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f12:	ea4c 0707 	orr.w	r7, ip, r7
 8007f16:	f849 7b04 	str.w	r7, [r9], #4
 8007f1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f1e:	40cf      	lsrs	r7, r1
 8007f20:	e7da      	b.n	8007ed8 <rshift+0x4c>
 8007f22:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f26:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f2a:	e7c3      	b.n	8007eb4 <rshift+0x28>
 8007f2c:	4623      	mov	r3, r4
 8007f2e:	e7e1      	b.n	8007ef4 <rshift+0x68>

08007f30 <__hexdig_fun>:
 8007f30:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f34:	2b09      	cmp	r3, #9
 8007f36:	d802      	bhi.n	8007f3e <__hexdig_fun+0xe>
 8007f38:	3820      	subs	r0, #32
 8007f3a:	b2c0      	uxtb	r0, r0
 8007f3c:	4770      	bx	lr
 8007f3e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f42:	2b05      	cmp	r3, #5
 8007f44:	d801      	bhi.n	8007f4a <__hexdig_fun+0x1a>
 8007f46:	3847      	subs	r0, #71	; 0x47
 8007f48:	e7f7      	b.n	8007f3a <__hexdig_fun+0xa>
 8007f4a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f4e:	2b05      	cmp	r3, #5
 8007f50:	d801      	bhi.n	8007f56 <__hexdig_fun+0x26>
 8007f52:	3827      	subs	r0, #39	; 0x27
 8007f54:	e7f1      	b.n	8007f3a <__hexdig_fun+0xa>
 8007f56:	2000      	movs	r0, #0
 8007f58:	4770      	bx	lr
	...

08007f5c <__gethex>:
 8007f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f60:	ed2d 8b02 	vpush	{d8}
 8007f64:	b089      	sub	sp, #36	; 0x24
 8007f66:	ee08 0a10 	vmov	s16, r0
 8007f6a:	9304      	str	r3, [sp, #16]
 8007f6c:	4bb4      	ldr	r3, [pc, #720]	; (8008240 <__gethex+0x2e4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	9301      	str	r3, [sp, #4]
 8007f72:	4618      	mov	r0, r3
 8007f74:	468b      	mov	fp, r1
 8007f76:	4690      	mov	r8, r2
 8007f78:	f7f8 f932 	bl	80001e0 <strlen>
 8007f7c:	9b01      	ldr	r3, [sp, #4]
 8007f7e:	f8db 2000 	ldr.w	r2, [fp]
 8007f82:	4403      	add	r3, r0
 8007f84:	4682      	mov	sl, r0
 8007f86:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007f8a:	9305      	str	r3, [sp, #20]
 8007f8c:	1c93      	adds	r3, r2, #2
 8007f8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007f92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007f96:	32fe      	adds	r2, #254	; 0xfe
 8007f98:	18d1      	adds	r1, r2, r3
 8007f9a:	461f      	mov	r7, r3
 8007f9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007fa0:	9100      	str	r1, [sp, #0]
 8007fa2:	2830      	cmp	r0, #48	; 0x30
 8007fa4:	d0f8      	beq.n	8007f98 <__gethex+0x3c>
 8007fa6:	f7ff ffc3 	bl	8007f30 <__hexdig_fun>
 8007faa:	4604      	mov	r4, r0
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d13a      	bne.n	8008026 <__gethex+0xca>
 8007fb0:	9901      	ldr	r1, [sp, #4]
 8007fb2:	4652      	mov	r2, sl
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	f001 fa33 	bl	8009420 <strncmp>
 8007fba:	4605      	mov	r5, r0
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d168      	bne.n	8008092 <__gethex+0x136>
 8007fc0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007fc4:	eb07 060a 	add.w	r6, r7, sl
 8007fc8:	f7ff ffb2 	bl	8007f30 <__hexdig_fun>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d062      	beq.n	8008096 <__gethex+0x13a>
 8007fd0:	4633      	mov	r3, r6
 8007fd2:	7818      	ldrb	r0, [r3, #0]
 8007fd4:	2830      	cmp	r0, #48	; 0x30
 8007fd6:	461f      	mov	r7, r3
 8007fd8:	f103 0301 	add.w	r3, r3, #1
 8007fdc:	d0f9      	beq.n	8007fd2 <__gethex+0x76>
 8007fde:	f7ff ffa7 	bl	8007f30 <__hexdig_fun>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	fab0 f480 	clz	r4, r0
 8007fe8:	0964      	lsrs	r4, r4, #5
 8007fea:	4635      	mov	r5, r6
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	463a      	mov	r2, r7
 8007ff0:	4616      	mov	r6, r2
 8007ff2:	3201      	adds	r2, #1
 8007ff4:	7830      	ldrb	r0, [r6, #0]
 8007ff6:	f7ff ff9b 	bl	8007f30 <__hexdig_fun>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	d1f8      	bne.n	8007ff0 <__gethex+0x94>
 8007ffe:	9901      	ldr	r1, [sp, #4]
 8008000:	4652      	mov	r2, sl
 8008002:	4630      	mov	r0, r6
 8008004:	f001 fa0c 	bl	8009420 <strncmp>
 8008008:	b980      	cbnz	r0, 800802c <__gethex+0xd0>
 800800a:	b94d      	cbnz	r5, 8008020 <__gethex+0xc4>
 800800c:	eb06 050a 	add.w	r5, r6, sl
 8008010:	462a      	mov	r2, r5
 8008012:	4616      	mov	r6, r2
 8008014:	3201      	adds	r2, #1
 8008016:	7830      	ldrb	r0, [r6, #0]
 8008018:	f7ff ff8a 	bl	8007f30 <__hexdig_fun>
 800801c:	2800      	cmp	r0, #0
 800801e:	d1f8      	bne.n	8008012 <__gethex+0xb6>
 8008020:	1bad      	subs	r5, r5, r6
 8008022:	00ad      	lsls	r5, r5, #2
 8008024:	e004      	b.n	8008030 <__gethex+0xd4>
 8008026:	2400      	movs	r4, #0
 8008028:	4625      	mov	r5, r4
 800802a:	e7e0      	b.n	8007fee <__gethex+0x92>
 800802c:	2d00      	cmp	r5, #0
 800802e:	d1f7      	bne.n	8008020 <__gethex+0xc4>
 8008030:	7833      	ldrb	r3, [r6, #0]
 8008032:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008036:	2b50      	cmp	r3, #80	; 0x50
 8008038:	d13b      	bne.n	80080b2 <__gethex+0x156>
 800803a:	7873      	ldrb	r3, [r6, #1]
 800803c:	2b2b      	cmp	r3, #43	; 0x2b
 800803e:	d02c      	beq.n	800809a <__gethex+0x13e>
 8008040:	2b2d      	cmp	r3, #45	; 0x2d
 8008042:	d02e      	beq.n	80080a2 <__gethex+0x146>
 8008044:	1c71      	adds	r1, r6, #1
 8008046:	f04f 0900 	mov.w	r9, #0
 800804a:	7808      	ldrb	r0, [r1, #0]
 800804c:	f7ff ff70 	bl	8007f30 <__hexdig_fun>
 8008050:	1e43      	subs	r3, r0, #1
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b18      	cmp	r3, #24
 8008056:	d82c      	bhi.n	80080b2 <__gethex+0x156>
 8008058:	f1a0 0210 	sub.w	r2, r0, #16
 800805c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008060:	f7ff ff66 	bl	8007f30 <__hexdig_fun>
 8008064:	1e43      	subs	r3, r0, #1
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b18      	cmp	r3, #24
 800806a:	d91d      	bls.n	80080a8 <__gethex+0x14c>
 800806c:	f1b9 0f00 	cmp.w	r9, #0
 8008070:	d000      	beq.n	8008074 <__gethex+0x118>
 8008072:	4252      	negs	r2, r2
 8008074:	4415      	add	r5, r2
 8008076:	f8cb 1000 	str.w	r1, [fp]
 800807a:	b1e4      	cbz	r4, 80080b6 <__gethex+0x15a>
 800807c:	9b00      	ldr	r3, [sp, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	bf14      	ite	ne
 8008082:	2700      	movne	r7, #0
 8008084:	2706      	moveq	r7, #6
 8008086:	4638      	mov	r0, r7
 8008088:	b009      	add	sp, #36	; 0x24
 800808a:	ecbd 8b02 	vpop	{d8}
 800808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008092:	463e      	mov	r6, r7
 8008094:	4625      	mov	r5, r4
 8008096:	2401      	movs	r4, #1
 8008098:	e7ca      	b.n	8008030 <__gethex+0xd4>
 800809a:	f04f 0900 	mov.w	r9, #0
 800809e:	1cb1      	adds	r1, r6, #2
 80080a0:	e7d3      	b.n	800804a <__gethex+0xee>
 80080a2:	f04f 0901 	mov.w	r9, #1
 80080a6:	e7fa      	b.n	800809e <__gethex+0x142>
 80080a8:	230a      	movs	r3, #10
 80080aa:	fb03 0202 	mla	r2, r3, r2, r0
 80080ae:	3a10      	subs	r2, #16
 80080b0:	e7d4      	b.n	800805c <__gethex+0x100>
 80080b2:	4631      	mov	r1, r6
 80080b4:	e7df      	b.n	8008076 <__gethex+0x11a>
 80080b6:	1bf3      	subs	r3, r6, r7
 80080b8:	3b01      	subs	r3, #1
 80080ba:	4621      	mov	r1, r4
 80080bc:	2b07      	cmp	r3, #7
 80080be:	dc0b      	bgt.n	80080d8 <__gethex+0x17c>
 80080c0:	ee18 0a10 	vmov	r0, s16
 80080c4:	f000 fa7e 	bl	80085c4 <_Balloc>
 80080c8:	4604      	mov	r4, r0
 80080ca:	b940      	cbnz	r0, 80080de <__gethex+0x182>
 80080cc:	4b5d      	ldr	r3, [pc, #372]	; (8008244 <__gethex+0x2e8>)
 80080ce:	4602      	mov	r2, r0
 80080d0:	21de      	movs	r1, #222	; 0xde
 80080d2:	485d      	ldr	r0, [pc, #372]	; (8008248 <__gethex+0x2ec>)
 80080d4:	f001 f9c6 	bl	8009464 <__assert_func>
 80080d8:	3101      	adds	r1, #1
 80080da:	105b      	asrs	r3, r3, #1
 80080dc:	e7ee      	b.n	80080bc <__gethex+0x160>
 80080de:	f100 0914 	add.w	r9, r0, #20
 80080e2:	f04f 0b00 	mov.w	fp, #0
 80080e6:	f1ca 0301 	rsb	r3, sl, #1
 80080ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80080ee:	f8cd b000 	str.w	fp, [sp]
 80080f2:	9306      	str	r3, [sp, #24]
 80080f4:	42b7      	cmp	r7, r6
 80080f6:	d340      	bcc.n	800817a <__gethex+0x21e>
 80080f8:	9802      	ldr	r0, [sp, #8]
 80080fa:	9b00      	ldr	r3, [sp, #0]
 80080fc:	f840 3b04 	str.w	r3, [r0], #4
 8008100:	eba0 0009 	sub.w	r0, r0, r9
 8008104:	1080      	asrs	r0, r0, #2
 8008106:	0146      	lsls	r6, r0, #5
 8008108:	6120      	str	r0, [r4, #16]
 800810a:	4618      	mov	r0, r3
 800810c:	f000 fb4c 	bl	80087a8 <__hi0bits>
 8008110:	1a30      	subs	r0, r6, r0
 8008112:	f8d8 6000 	ldr.w	r6, [r8]
 8008116:	42b0      	cmp	r0, r6
 8008118:	dd63      	ble.n	80081e2 <__gethex+0x286>
 800811a:	1b87      	subs	r7, r0, r6
 800811c:	4639      	mov	r1, r7
 800811e:	4620      	mov	r0, r4
 8008120:	f000 fef0 	bl	8008f04 <__any_on>
 8008124:	4682      	mov	sl, r0
 8008126:	b1a8      	cbz	r0, 8008154 <__gethex+0x1f8>
 8008128:	1e7b      	subs	r3, r7, #1
 800812a:	1159      	asrs	r1, r3, #5
 800812c:	f003 021f 	and.w	r2, r3, #31
 8008130:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008134:	f04f 0a01 	mov.w	sl, #1
 8008138:	fa0a f202 	lsl.w	r2, sl, r2
 800813c:	420a      	tst	r2, r1
 800813e:	d009      	beq.n	8008154 <__gethex+0x1f8>
 8008140:	4553      	cmp	r3, sl
 8008142:	dd05      	ble.n	8008150 <__gethex+0x1f4>
 8008144:	1eb9      	subs	r1, r7, #2
 8008146:	4620      	mov	r0, r4
 8008148:	f000 fedc 	bl	8008f04 <__any_on>
 800814c:	2800      	cmp	r0, #0
 800814e:	d145      	bne.n	80081dc <__gethex+0x280>
 8008150:	f04f 0a02 	mov.w	sl, #2
 8008154:	4639      	mov	r1, r7
 8008156:	4620      	mov	r0, r4
 8008158:	f7ff fe98 	bl	8007e8c <rshift>
 800815c:	443d      	add	r5, r7
 800815e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008162:	42ab      	cmp	r3, r5
 8008164:	da4c      	bge.n	8008200 <__gethex+0x2a4>
 8008166:	ee18 0a10 	vmov	r0, s16
 800816a:	4621      	mov	r1, r4
 800816c:	f000 fa6a 	bl	8008644 <_Bfree>
 8008170:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008172:	2300      	movs	r3, #0
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	27a3      	movs	r7, #163	; 0xa3
 8008178:	e785      	b.n	8008086 <__gethex+0x12a>
 800817a:	1e73      	subs	r3, r6, #1
 800817c:	9a05      	ldr	r2, [sp, #20]
 800817e:	9303      	str	r3, [sp, #12]
 8008180:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008184:	4293      	cmp	r3, r2
 8008186:	d019      	beq.n	80081bc <__gethex+0x260>
 8008188:	f1bb 0f20 	cmp.w	fp, #32
 800818c:	d107      	bne.n	800819e <__gethex+0x242>
 800818e:	9b02      	ldr	r3, [sp, #8]
 8008190:	9a00      	ldr	r2, [sp, #0]
 8008192:	f843 2b04 	str.w	r2, [r3], #4
 8008196:	9302      	str	r3, [sp, #8]
 8008198:	2300      	movs	r3, #0
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	469b      	mov	fp, r3
 800819e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80081a2:	f7ff fec5 	bl	8007f30 <__hexdig_fun>
 80081a6:	9b00      	ldr	r3, [sp, #0]
 80081a8:	f000 000f 	and.w	r0, r0, #15
 80081ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80081b0:	4303      	orrs	r3, r0
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	f10b 0b04 	add.w	fp, fp, #4
 80081b8:	9b03      	ldr	r3, [sp, #12]
 80081ba:	e00d      	b.n	80081d8 <__gethex+0x27c>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	9a06      	ldr	r2, [sp, #24]
 80081c0:	4413      	add	r3, r2
 80081c2:	42bb      	cmp	r3, r7
 80081c4:	d3e0      	bcc.n	8008188 <__gethex+0x22c>
 80081c6:	4618      	mov	r0, r3
 80081c8:	9901      	ldr	r1, [sp, #4]
 80081ca:	9307      	str	r3, [sp, #28]
 80081cc:	4652      	mov	r2, sl
 80081ce:	f001 f927 	bl	8009420 <strncmp>
 80081d2:	9b07      	ldr	r3, [sp, #28]
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d1d7      	bne.n	8008188 <__gethex+0x22c>
 80081d8:	461e      	mov	r6, r3
 80081da:	e78b      	b.n	80080f4 <__gethex+0x198>
 80081dc:	f04f 0a03 	mov.w	sl, #3
 80081e0:	e7b8      	b.n	8008154 <__gethex+0x1f8>
 80081e2:	da0a      	bge.n	80081fa <__gethex+0x29e>
 80081e4:	1a37      	subs	r7, r6, r0
 80081e6:	4621      	mov	r1, r4
 80081e8:	ee18 0a10 	vmov	r0, s16
 80081ec:	463a      	mov	r2, r7
 80081ee:	f000 fc45 	bl	8008a7c <__lshift>
 80081f2:	1bed      	subs	r5, r5, r7
 80081f4:	4604      	mov	r4, r0
 80081f6:	f100 0914 	add.w	r9, r0, #20
 80081fa:	f04f 0a00 	mov.w	sl, #0
 80081fe:	e7ae      	b.n	800815e <__gethex+0x202>
 8008200:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008204:	42a8      	cmp	r0, r5
 8008206:	dd72      	ble.n	80082ee <__gethex+0x392>
 8008208:	1b45      	subs	r5, r0, r5
 800820a:	42ae      	cmp	r6, r5
 800820c:	dc36      	bgt.n	800827c <__gethex+0x320>
 800820e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008212:	2b02      	cmp	r3, #2
 8008214:	d02a      	beq.n	800826c <__gethex+0x310>
 8008216:	2b03      	cmp	r3, #3
 8008218:	d02c      	beq.n	8008274 <__gethex+0x318>
 800821a:	2b01      	cmp	r3, #1
 800821c:	d11c      	bne.n	8008258 <__gethex+0x2fc>
 800821e:	42ae      	cmp	r6, r5
 8008220:	d11a      	bne.n	8008258 <__gethex+0x2fc>
 8008222:	2e01      	cmp	r6, #1
 8008224:	d112      	bne.n	800824c <__gethex+0x2f0>
 8008226:	9a04      	ldr	r2, [sp, #16]
 8008228:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	2301      	movs	r3, #1
 8008230:	6123      	str	r3, [r4, #16]
 8008232:	f8c9 3000 	str.w	r3, [r9]
 8008236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008238:	2762      	movs	r7, #98	; 0x62
 800823a:	601c      	str	r4, [r3, #0]
 800823c:	e723      	b.n	8008086 <__gethex+0x12a>
 800823e:	bf00      	nop
 8008240:	0800a2d0 	.word	0x0800a2d0
 8008244:	0800a258 	.word	0x0800a258
 8008248:	0800a269 	.word	0x0800a269
 800824c:	1e71      	subs	r1, r6, #1
 800824e:	4620      	mov	r0, r4
 8008250:	f000 fe58 	bl	8008f04 <__any_on>
 8008254:	2800      	cmp	r0, #0
 8008256:	d1e6      	bne.n	8008226 <__gethex+0x2ca>
 8008258:	ee18 0a10 	vmov	r0, s16
 800825c:	4621      	mov	r1, r4
 800825e:	f000 f9f1 	bl	8008644 <_Bfree>
 8008262:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008264:	2300      	movs	r3, #0
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	2750      	movs	r7, #80	; 0x50
 800826a:	e70c      	b.n	8008086 <__gethex+0x12a>
 800826c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1f2      	bne.n	8008258 <__gethex+0x2fc>
 8008272:	e7d8      	b.n	8008226 <__gethex+0x2ca>
 8008274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1d5      	bne.n	8008226 <__gethex+0x2ca>
 800827a:	e7ed      	b.n	8008258 <__gethex+0x2fc>
 800827c:	1e6f      	subs	r7, r5, #1
 800827e:	f1ba 0f00 	cmp.w	sl, #0
 8008282:	d131      	bne.n	80082e8 <__gethex+0x38c>
 8008284:	b127      	cbz	r7, 8008290 <__gethex+0x334>
 8008286:	4639      	mov	r1, r7
 8008288:	4620      	mov	r0, r4
 800828a:	f000 fe3b 	bl	8008f04 <__any_on>
 800828e:	4682      	mov	sl, r0
 8008290:	117b      	asrs	r3, r7, #5
 8008292:	2101      	movs	r1, #1
 8008294:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008298:	f007 071f 	and.w	r7, r7, #31
 800829c:	fa01 f707 	lsl.w	r7, r1, r7
 80082a0:	421f      	tst	r7, r3
 80082a2:	4629      	mov	r1, r5
 80082a4:	4620      	mov	r0, r4
 80082a6:	bf18      	it	ne
 80082a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80082ac:	1b76      	subs	r6, r6, r5
 80082ae:	f7ff fded 	bl	8007e8c <rshift>
 80082b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80082b6:	2702      	movs	r7, #2
 80082b8:	f1ba 0f00 	cmp.w	sl, #0
 80082bc:	d048      	beq.n	8008350 <__gethex+0x3f4>
 80082be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d015      	beq.n	80082f2 <__gethex+0x396>
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d017      	beq.n	80082fa <__gethex+0x39e>
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d109      	bne.n	80082e2 <__gethex+0x386>
 80082ce:	f01a 0f02 	tst.w	sl, #2
 80082d2:	d006      	beq.n	80082e2 <__gethex+0x386>
 80082d4:	f8d9 0000 	ldr.w	r0, [r9]
 80082d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80082dc:	f01a 0f01 	tst.w	sl, #1
 80082e0:	d10e      	bne.n	8008300 <__gethex+0x3a4>
 80082e2:	f047 0710 	orr.w	r7, r7, #16
 80082e6:	e033      	b.n	8008350 <__gethex+0x3f4>
 80082e8:	f04f 0a01 	mov.w	sl, #1
 80082ec:	e7d0      	b.n	8008290 <__gethex+0x334>
 80082ee:	2701      	movs	r7, #1
 80082f0:	e7e2      	b.n	80082b8 <__gethex+0x35c>
 80082f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082f4:	f1c3 0301 	rsb	r3, r3, #1
 80082f8:	9315      	str	r3, [sp, #84]	; 0x54
 80082fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d0f0      	beq.n	80082e2 <__gethex+0x386>
 8008300:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008304:	f104 0314 	add.w	r3, r4, #20
 8008308:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800830c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008310:	f04f 0c00 	mov.w	ip, #0
 8008314:	4618      	mov	r0, r3
 8008316:	f853 2b04 	ldr.w	r2, [r3], #4
 800831a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800831e:	d01c      	beq.n	800835a <__gethex+0x3fe>
 8008320:	3201      	adds	r2, #1
 8008322:	6002      	str	r2, [r0, #0]
 8008324:	2f02      	cmp	r7, #2
 8008326:	f104 0314 	add.w	r3, r4, #20
 800832a:	d13f      	bne.n	80083ac <__gethex+0x450>
 800832c:	f8d8 2000 	ldr.w	r2, [r8]
 8008330:	3a01      	subs	r2, #1
 8008332:	42b2      	cmp	r2, r6
 8008334:	d10a      	bne.n	800834c <__gethex+0x3f0>
 8008336:	1171      	asrs	r1, r6, #5
 8008338:	2201      	movs	r2, #1
 800833a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800833e:	f006 061f 	and.w	r6, r6, #31
 8008342:	fa02 f606 	lsl.w	r6, r2, r6
 8008346:	421e      	tst	r6, r3
 8008348:	bf18      	it	ne
 800834a:	4617      	movne	r7, r2
 800834c:	f047 0720 	orr.w	r7, r7, #32
 8008350:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008352:	601c      	str	r4, [r3, #0]
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	601d      	str	r5, [r3, #0]
 8008358:	e695      	b.n	8008086 <__gethex+0x12a>
 800835a:	4299      	cmp	r1, r3
 800835c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008360:	d8d8      	bhi.n	8008314 <__gethex+0x3b8>
 8008362:	68a3      	ldr	r3, [r4, #8]
 8008364:	459b      	cmp	fp, r3
 8008366:	db19      	blt.n	800839c <__gethex+0x440>
 8008368:	6861      	ldr	r1, [r4, #4]
 800836a:	ee18 0a10 	vmov	r0, s16
 800836e:	3101      	adds	r1, #1
 8008370:	f000 f928 	bl	80085c4 <_Balloc>
 8008374:	4681      	mov	r9, r0
 8008376:	b918      	cbnz	r0, 8008380 <__gethex+0x424>
 8008378:	4b1a      	ldr	r3, [pc, #104]	; (80083e4 <__gethex+0x488>)
 800837a:	4602      	mov	r2, r0
 800837c:	2184      	movs	r1, #132	; 0x84
 800837e:	e6a8      	b.n	80080d2 <__gethex+0x176>
 8008380:	6922      	ldr	r2, [r4, #16]
 8008382:	3202      	adds	r2, #2
 8008384:	f104 010c 	add.w	r1, r4, #12
 8008388:	0092      	lsls	r2, r2, #2
 800838a:	300c      	adds	r0, #12
 800838c:	f000 f90c 	bl	80085a8 <memcpy>
 8008390:	4621      	mov	r1, r4
 8008392:	ee18 0a10 	vmov	r0, s16
 8008396:	f000 f955 	bl	8008644 <_Bfree>
 800839a:	464c      	mov	r4, r9
 800839c:	6923      	ldr	r3, [r4, #16]
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083a4:	6122      	str	r2, [r4, #16]
 80083a6:	2201      	movs	r2, #1
 80083a8:	615a      	str	r2, [r3, #20]
 80083aa:	e7bb      	b.n	8008324 <__gethex+0x3c8>
 80083ac:	6922      	ldr	r2, [r4, #16]
 80083ae:	455a      	cmp	r2, fp
 80083b0:	dd0b      	ble.n	80083ca <__gethex+0x46e>
 80083b2:	2101      	movs	r1, #1
 80083b4:	4620      	mov	r0, r4
 80083b6:	f7ff fd69 	bl	8007e8c <rshift>
 80083ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083be:	3501      	adds	r5, #1
 80083c0:	42ab      	cmp	r3, r5
 80083c2:	f6ff aed0 	blt.w	8008166 <__gethex+0x20a>
 80083c6:	2701      	movs	r7, #1
 80083c8:	e7c0      	b.n	800834c <__gethex+0x3f0>
 80083ca:	f016 061f 	ands.w	r6, r6, #31
 80083ce:	d0fa      	beq.n	80083c6 <__gethex+0x46a>
 80083d0:	4453      	add	r3, sl
 80083d2:	f1c6 0620 	rsb	r6, r6, #32
 80083d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80083da:	f000 f9e5 	bl	80087a8 <__hi0bits>
 80083de:	42b0      	cmp	r0, r6
 80083e0:	dbe7      	blt.n	80083b2 <__gethex+0x456>
 80083e2:	e7f0      	b.n	80083c6 <__gethex+0x46a>
 80083e4:	0800a258 	.word	0x0800a258

080083e8 <L_shift>:
 80083e8:	f1c2 0208 	rsb	r2, r2, #8
 80083ec:	0092      	lsls	r2, r2, #2
 80083ee:	b570      	push	{r4, r5, r6, lr}
 80083f0:	f1c2 0620 	rsb	r6, r2, #32
 80083f4:	6843      	ldr	r3, [r0, #4]
 80083f6:	6804      	ldr	r4, [r0, #0]
 80083f8:	fa03 f506 	lsl.w	r5, r3, r6
 80083fc:	432c      	orrs	r4, r5
 80083fe:	40d3      	lsrs	r3, r2
 8008400:	6004      	str	r4, [r0, #0]
 8008402:	f840 3f04 	str.w	r3, [r0, #4]!
 8008406:	4288      	cmp	r0, r1
 8008408:	d3f4      	bcc.n	80083f4 <L_shift+0xc>
 800840a:	bd70      	pop	{r4, r5, r6, pc}

0800840c <__match>:
 800840c:	b530      	push	{r4, r5, lr}
 800840e:	6803      	ldr	r3, [r0, #0]
 8008410:	3301      	adds	r3, #1
 8008412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008416:	b914      	cbnz	r4, 800841e <__match+0x12>
 8008418:	6003      	str	r3, [r0, #0]
 800841a:	2001      	movs	r0, #1
 800841c:	bd30      	pop	{r4, r5, pc}
 800841e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008422:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008426:	2d19      	cmp	r5, #25
 8008428:	bf98      	it	ls
 800842a:	3220      	addls	r2, #32
 800842c:	42a2      	cmp	r2, r4
 800842e:	d0f0      	beq.n	8008412 <__match+0x6>
 8008430:	2000      	movs	r0, #0
 8008432:	e7f3      	b.n	800841c <__match+0x10>

08008434 <__hexnan>:
 8008434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	680b      	ldr	r3, [r1, #0]
 800843a:	115e      	asrs	r6, r3, #5
 800843c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008440:	f013 031f 	ands.w	r3, r3, #31
 8008444:	b087      	sub	sp, #28
 8008446:	bf18      	it	ne
 8008448:	3604      	addne	r6, #4
 800844a:	2500      	movs	r5, #0
 800844c:	1f37      	subs	r7, r6, #4
 800844e:	4690      	mov	r8, r2
 8008450:	6802      	ldr	r2, [r0, #0]
 8008452:	9301      	str	r3, [sp, #4]
 8008454:	4682      	mov	sl, r0
 8008456:	f846 5c04 	str.w	r5, [r6, #-4]
 800845a:	46b9      	mov	r9, r7
 800845c:	463c      	mov	r4, r7
 800845e:	9502      	str	r5, [sp, #8]
 8008460:	46ab      	mov	fp, r5
 8008462:	7851      	ldrb	r1, [r2, #1]
 8008464:	1c53      	adds	r3, r2, #1
 8008466:	9303      	str	r3, [sp, #12]
 8008468:	b341      	cbz	r1, 80084bc <__hexnan+0x88>
 800846a:	4608      	mov	r0, r1
 800846c:	9205      	str	r2, [sp, #20]
 800846e:	9104      	str	r1, [sp, #16]
 8008470:	f7ff fd5e 	bl	8007f30 <__hexdig_fun>
 8008474:	2800      	cmp	r0, #0
 8008476:	d14f      	bne.n	8008518 <__hexnan+0xe4>
 8008478:	9904      	ldr	r1, [sp, #16]
 800847a:	9a05      	ldr	r2, [sp, #20]
 800847c:	2920      	cmp	r1, #32
 800847e:	d818      	bhi.n	80084b2 <__hexnan+0x7e>
 8008480:	9b02      	ldr	r3, [sp, #8]
 8008482:	459b      	cmp	fp, r3
 8008484:	dd13      	ble.n	80084ae <__hexnan+0x7a>
 8008486:	454c      	cmp	r4, r9
 8008488:	d206      	bcs.n	8008498 <__hexnan+0x64>
 800848a:	2d07      	cmp	r5, #7
 800848c:	dc04      	bgt.n	8008498 <__hexnan+0x64>
 800848e:	462a      	mov	r2, r5
 8008490:	4649      	mov	r1, r9
 8008492:	4620      	mov	r0, r4
 8008494:	f7ff ffa8 	bl	80083e8 <L_shift>
 8008498:	4544      	cmp	r4, r8
 800849a:	d950      	bls.n	800853e <__hexnan+0x10a>
 800849c:	2300      	movs	r3, #0
 800849e:	f1a4 0904 	sub.w	r9, r4, #4
 80084a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80084a6:	f8cd b008 	str.w	fp, [sp, #8]
 80084aa:	464c      	mov	r4, r9
 80084ac:	461d      	mov	r5, r3
 80084ae:	9a03      	ldr	r2, [sp, #12]
 80084b0:	e7d7      	b.n	8008462 <__hexnan+0x2e>
 80084b2:	2929      	cmp	r1, #41	; 0x29
 80084b4:	d156      	bne.n	8008564 <__hexnan+0x130>
 80084b6:	3202      	adds	r2, #2
 80084b8:	f8ca 2000 	str.w	r2, [sl]
 80084bc:	f1bb 0f00 	cmp.w	fp, #0
 80084c0:	d050      	beq.n	8008564 <__hexnan+0x130>
 80084c2:	454c      	cmp	r4, r9
 80084c4:	d206      	bcs.n	80084d4 <__hexnan+0xa0>
 80084c6:	2d07      	cmp	r5, #7
 80084c8:	dc04      	bgt.n	80084d4 <__hexnan+0xa0>
 80084ca:	462a      	mov	r2, r5
 80084cc:	4649      	mov	r1, r9
 80084ce:	4620      	mov	r0, r4
 80084d0:	f7ff ff8a 	bl	80083e8 <L_shift>
 80084d4:	4544      	cmp	r4, r8
 80084d6:	d934      	bls.n	8008542 <__hexnan+0x10e>
 80084d8:	f1a8 0204 	sub.w	r2, r8, #4
 80084dc:	4623      	mov	r3, r4
 80084de:	f853 1b04 	ldr.w	r1, [r3], #4
 80084e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80084e6:	429f      	cmp	r7, r3
 80084e8:	d2f9      	bcs.n	80084de <__hexnan+0xaa>
 80084ea:	1b3b      	subs	r3, r7, r4
 80084ec:	f023 0303 	bic.w	r3, r3, #3
 80084f0:	3304      	adds	r3, #4
 80084f2:	3401      	adds	r4, #1
 80084f4:	3e03      	subs	r6, #3
 80084f6:	42b4      	cmp	r4, r6
 80084f8:	bf88      	it	hi
 80084fa:	2304      	movhi	r3, #4
 80084fc:	4443      	add	r3, r8
 80084fe:	2200      	movs	r2, #0
 8008500:	f843 2b04 	str.w	r2, [r3], #4
 8008504:	429f      	cmp	r7, r3
 8008506:	d2fb      	bcs.n	8008500 <__hexnan+0xcc>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	b91b      	cbnz	r3, 8008514 <__hexnan+0xe0>
 800850c:	4547      	cmp	r7, r8
 800850e:	d127      	bne.n	8008560 <__hexnan+0x12c>
 8008510:	2301      	movs	r3, #1
 8008512:	603b      	str	r3, [r7, #0]
 8008514:	2005      	movs	r0, #5
 8008516:	e026      	b.n	8008566 <__hexnan+0x132>
 8008518:	3501      	adds	r5, #1
 800851a:	2d08      	cmp	r5, #8
 800851c:	f10b 0b01 	add.w	fp, fp, #1
 8008520:	dd06      	ble.n	8008530 <__hexnan+0xfc>
 8008522:	4544      	cmp	r4, r8
 8008524:	d9c3      	bls.n	80084ae <__hexnan+0x7a>
 8008526:	2300      	movs	r3, #0
 8008528:	f844 3c04 	str.w	r3, [r4, #-4]
 800852c:	2501      	movs	r5, #1
 800852e:	3c04      	subs	r4, #4
 8008530:	6822      	ldr	r2, [r4, #0]
 8008532:	f000 000f 	and.w	r0, r0, #15
 8008536:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800853a:	6022      	str	r2, [r4, #0]
 800853c:	e7b7      	b.n	80084ae <__hexnan+0x7a>
 800853e:	2508      	movs	r5, #8
 8008540:	e7b5      	b.n	80084ae <__hexnan+0x7a>
 8008542:	9b01      	ldr	r3, [sp, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d0df      	beq.n	8008508 <__hexnan+0xd4>
 8008548:	f04f 32ff 	mov.w	r2, #4294967295
 800854c:	f1c3 0320 	rsb	r3, r3, #32
 8008550:	fa22 f303 	lsr.w	r3, r2, r3
 8008554:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008558:	401a      	ands	r2, r3
 800855a:	f846 2c04 	str.w	r2, [r6, #-4]
 800855e:	e7d3      	b.n	8008508 <__hexnan+0xd4>
 8008560:	3f04      	subs	r7, #4
 8008562:	e7d1      	b.n	8008508 <__hexnan+0xd4>
 8008564:	2004      	movs	r0, #4
 8008566:	b007      	add	sp, #28
 8008568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800856c <_localeconv_r>:
 800856c:	4800      	ldr	r0, [pc, #0]	; (8008570 <_localeconv_r+0x4>)
 800856e:	4770      	bx	lr
 8008570:	20000178 	.word	0x20000178

08008574 <malloc>:
 8008574:	4b02      	ldr	r3, [pc, #8]	; (8008580 <malloc+0xc>)
 8008576:	4601      	mov	r1, r0
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	f000 bd67 	b.w	800904c <_malloc_r>
 800857e:	bf00      	nop
 8008580:	20000020 	.word	0x20000020

08008584 <__ascii_mbtowc>:
 8008584:	b082      	sub	sp, #8
 8008586:	b901      	cbnz	r1, 800858a <__ascii_mbtowc+0x6>
 8008588:	a901      	add	r1, sp, #4
 800858a:	b142      	cbz	r2, 800859e <__ascii_mbtowc+0x1a>
 800858c:	b14b      	cbz	r3, 80085a2 <__ascii_mbtowc+0x1e>
 800858e:	7813      	ldrb	r3, [r2, #0]
 8008590:	600b      	str	r3, [r1, #0]
 8008592:	7812      	ldrb	r2, [r2, #0]
 8008594:	1e10      	subs	r0, r2, #0
 8008596:	bf18      	it	ne
 8008598:	2001      	movne	r0, #1
 800859a:	b002      	add	sp, #8
 800859c:	4770      	bx	lr
 800859e:	4610      	mov	r0, r2
 80085a0:	e7fb      	b.n	800859a <__ascii_mbtowc+0x16>
 80085a2:	f06f 0001 	mvn.w	r0, #1
 80085a6:	e7f8      	b.n	800859a <__ascii_mbtowc+0x16>

080085a8 <memcpy>:
 80085a8:	440a      	add	r2, r1
 80085aa:	4291      	cmp	r1, r2
 80085ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80085b0:	d100      	bne.n	80085b4 <memcpy+0xc>
 80085b2:	4770      	bx	lr
 80085b4:	b510      	push	{r4, lr}
 80085b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085be:	4291      	cmp	r1, r2
 80085c0:	d1f9      	bne.n	80085b6 <memcpy+0xe>
 80085c2:	bd10      	pop	{r4, pc}

080085c4 <_Balloc>:
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085c8:	4604      	mov	r4, r0
 80085ca:	460d      	mov	r5, r1
 80085cc:	b976      	cbnz	r6, 80085ec <_Balloc+0x28>
 80085ce:	2010      	movs	r0, #16
 80085d0:	f7ff ffd0 	bl	8008574 <malloc>
 80085d4:	4602      	mov	r2, r0
 80085d6:	6260      	str	r0, [r4, #36]	; 0x24
 80085d8:	b920      	cbnz	r0, 80085e4 <_Balloc+0x20>
 80085da:	4b18      	ldr	r3, [pc, #96]	; (800863c <_Balloc+0x78>)
 80085dc:	4818      	ldr	r0, [pc, #96]	; (8008640 <_Balloc+0x7c>)
 80085de:	2166      	movs	r1, #102	; 0x66
 80085e0:	f000 ff40 	bl	8009464 <__assert_func>
 80085e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085e8:	6006      	str	r6, [r0, #0]
 80085ea:	60c6      	str	r6, [r0, #12]
 80085ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085ee:	68f3      	ldr	r3, [r6, #12]
 80085f0:	b183      	cbz	r3, 8008614 <_Balloc+0x50>
 80085f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085fa:	b9b8      	cbnz	r0, 800862c <_Balloc+0x68>
 80085fc:	2101      	movs	r1, #1
 80085fe:	fa01 f605 	lsl.w	r6, r1, r5
 8008602:	1d72      	adds	r2, r6, #5
 8008604:	0092      	lsls	r2, r2, #2
 8008606:	4620      	mov	r0, r4
 8008608:	f000 fc9d 	bl	8008f46 <_calloc_r>
 800860c:	b160      	cbz	r0, 8008628 <_Balloc+0x64>
 800860e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008612:	e00e      	b.n	8008632 <_Balloc+0x6e>
 8008614:	2221      	movs	r2, #33	; 0x21
 8008616:	2104      	movs	r1, #4
 8008618:	4620      	mov	r0, r4
 800861a:	f000 fc94 	bl	8008f46 <_calloc_r>
 800861e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008620:	60f0      	str	r0, [r6, #12]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1e4      	bne.n	80085f2 <_Balloc+0x2e>
 8008628:	2000      	movs	r0, #0
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	6802      	ldr	r2, [r0, #0]
 800862e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008632:	2300      	movs	r3, #0
 8008634:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008638:	e7f7      	b.n	800862a <_Balloc+0x66>
 800863a:	bf00      	nop
 800863c:	0800a1e6 	.word	0x0800a1e6
 8008640:	0800a2e4 	.word	0x0800a2e4

08008644 <_Bfree>:
 8008644:	b570      	push	{r4, r5, r6, lr}
 8008646:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008648:	4605      	mov	r5, r0
 800864a:	460c      	mov	r4, r1
 800864c:	b976      	cbnz	r6, 800866c <_Bfree+0x28>
 800864e:	2010      	movs	r0, #16
 8008650:	f7ff ff90 	bl	8008574 <malloc>
 8008654:	4602      	mov	r2, r0
 8008656:	6268      	str	r0, [r5, #36]	; 0x24
 8008658:	b920      	cbnz	r0, 8008664 <_Bfree+0x20>
 800865a:	4b09      	ldr	r3, [pc, #36]	; (8008680 <_Bfree+0x3c>)
 800865c:	4809      	ldr	r0, [pc, #36]	; (8008684 <_Bfree+0x40>)
 800865e:	218a      	movs	r1, #138	; 0x8a
 8008660:	f000 ff00 	bl	8009464 <__assert_func>
 8008664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008668:	6006      	str	r6, [r0, #0]
 800866a:	60c6      	str	r6, [r0, #12]
 800866c:	b13c      	cbz	r4, 800867e <_Bfree+0x3a>
 800866e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008670:	6862      	ldr	r2, [r4, #4]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008678:	6021      	str	r1, [r4, #0]
 800867a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	0800a1e6 	.word	0x0800a1e6
 8008684:	0800a2e4 	.word	0x0800a2e4

08008688 <__multadd>:
 8008688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800868c:	690d      	ldr	r5, [r1, #16]
 800868e:	4607      	mov	r7, r0
 8008690:	460c      	mov	r4, r1
 8008692:	461e      	mov	r6, r3
 8008694:	f101 0c14 	add.w	ip, r1, #20
 8008698:	2000      	movs	r0, #0
 800869a:	f8dc 3000 	ldr.w	r3, [ip]
 800869e:	b299      	uxth	r1, r3
 80086a0:	fb02 6101 	mla	r1, r2, r1, r6
 80086a4:	0c1e      	lsrs	r6, r3, #16
 80086a6:	0c0b      	lsrs	r3, r1, #16
 80086a8:	fb02 3306 	mla	r3, r2, r6, r3
 80086ac:	b289      	uxth	r1, r1
 80086ae:	3001      	adds	r0, #1
 80086b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086b4:	4285      	cmp	r5, r0
 80086b6:	f84c 1b04 	str.w	r1, [ip], #4
 80086ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086be:	dcec      	bgt.n	800869a <__multadd+0x12>
 80086c0:	b30e      	cbz	r6, 8008706 <__multadd+0x7e>
 80086c2:	68a3      	ldr	r3, [r4, #8]
 80086c4:	42ab      	cmp	r3, r5
 80086c6:	dc19      	bgt.n	80086fc <__multadd+0x74>
 80086c8:	6861      	ldr	r1, [r4, #4]
 80086ca:	4638      	mov	r0, r7
 80086cc:	3101      	adds	r1, #1
 80086ce:	f7ff ff79 	bl	80085c4 <_Balloc>
 80086d2:	4680      	mov	r8, r0
 80086d4:	b928      	cbnz	r0, 80086e2 <__multadd+0x5a>
 80086d6:	4602      	mov	r2, r0
 80086d8:	4b0c      	ldr	r3, [pc, #48]	; (800870c <__multadd+0x84>)
 80086da:	480d      	ldr	r0, [pc, #52]	; (8008710 <__multadd+0x88>)
 80086dc:	21b5      	movs	r1, #181	; 0xb5
 80086de:	f000 fec1 	bl	8009464 <__assert_func>
 80086e2:	6922      	ldr	r2, [r4, #16]
 80086e4:	3202      	adds	r2, #2
 80086e6:	f104 010c 	add.w	r1, r4, #12
 80086ea:	0092      	lsls	r2, r2, #2
 80086ec:	300c      	adds	r0, #12
 80086ee:	f7ff ff5b 	bl	80085a8 <memcpy>
 80086f2:	4621      	mov	r1, r4
 80086f4:	4638      	mov	r0, r7
 80086f6:	f7ff ffa5 	bl	8008644 <_Bfree>
 80086fa:	4644      	mov	r4, r8
 80086fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008700:	3501      	adds	r5, #1
 8008702:	615e      	str	r6, [r3, #20]
 8008704:	6125      	str	r5, [r4, #16]
 8008706:	4620      	mov	r0, r4
 8008708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800870c:	0800a258 	.word	0x0800a258
 8008710:	0800a2e4 	.word	0x0800a2e4

08008714 <__s2b>:
 8008714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008718:	460c      	mov	r4, r1
 800871a:	4615      	mov	r5, r2
 800871c:	461f      	mov	r7, r3
 800871e:	2209      	movs	r2, #9
 8008720:	3308      	adds	r3, #8
 8008722:	4606      	mov	r6, r0
 8008724:	fb93 f3f2 	sdiv	r3, r3, r2
 8008728:	2100      	movs	r1, #0
 800872a:	2201      	movs	r2, #1
 800872c:	429a      	cmp	r2, r3
 800872e:	db09      	blt.n	8008744 <__s2b+0x30>
 8008730:	4630      	mov	r0, r6
 8008732:	f7ff ff47 	bl	80085c4 <_Balloc>
 8008736:	b940      	cbnz	r0, 800874a <__s2b+0x36>
 8008738:	4602      	mov	r2, r0
 800873a:	4b19      	ldr	r3, [pc, #100]	; (80087a0 <__s2b+0x8c>)
 800873c:	4819      	ldr	r0, [pc, #100]	; (80087a4 <__s2b+0x90>)
 800873e:	21ce      	movs	r1, #206	; 0xce
 8008740:	f000 fe90 	bl	8009464 <__assert_func>
 8008744:	0052      	lsls	r2, r2, #1
 8008746:	3101      	adds	r1, #1
 8008748:	e7f0      	b.n	800872c <__s2b+0x18>
 800874a:	9b08      	ldr	r3, [sp, #32]
 800874c:	6143      	str	r3, [r0, #20]
 800874e:	2d09      	cmp	r5, #9
 8008750:	f04f 0301 	mov.w	r3, #1
 8008754:	6103      	str	r3, [r0, #16]
 8008756:	dd16      	ble.n	8008786 <__s2b+0x72>
 8008758:	f104 0909 	add.w	r9, r4, #9
 800875c:	46c8      	mov	r8, r9
 800875e:	442c      	add	r4, r5
 8008760:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008764:	4601      	mov	r1, r0
 8008766:	3b30      	subs	r3, #48	; 0x30
 8008768:	220a      	movs	r2, #10
 800876a:	4630      	mov	r0, r6
 800876c:	f7ff ff8c 	bl	8008688 <__multadd>
 8008770:	45a0      	cmp	r8, r4
 8008772:	d1f5      	bne.n	8008760 <__s2b+0x4c>
 8008774:	f1a5 0408 	sub.w	r4, r5, #8
 8008778:	444c      	add	r4, r9
 800877a:	1b2d      	subs	r5, r5, r4
 800877c:	1963      	adds	r3, r4, r5
 800877e:	42bb      	cmp	r3, r7
 8008780:	db04      	blt.n	800878c <__s2b+0x78>
 8008782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008786:	340a      	adds	r4, #10
 8008788:	2509      	movs	r5, #9
 800878a:	e7f6      	b.n	800877a <__s2b+0x66>
 800878c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008790:	4601      	mov	r1, r0
 8008792:	3b30      	subs	r3, #48	; 0x30
 8008794:	220a      	movs	r2, #10
 8008796:	4630      	mov	r0, r6
 8008798:	f7ff ff76 	bl	8008688 <__multadd>
 800879c:	e7ee      	b.n	800877c <__s2b+0x68>
 800879e:	bf00      	nop
 80087a0:	0800a258 	.word	0x0800a258
 80087a4:	0800a2e4 	.word	0x0800a2e4

080087a8 <__hi0bits>:
 80087a8:	0c03      	lsrs	r3, r0, #16
 80087aa:	041b      	lsls	r3, r3, #16
 80087ac:	b9d3      	cbnz	r3, 80087e4 <__hi0bits+0x3c>
 80087ae:	0400      	lsls	r0, r0, #16
 80087b0:	2310      	movs	r3, #16
 80087b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80087b6:	bf04      	itt	eq
 80087b8:	0200      	lsleq	r0, r0, #8
 80087ba:	3308      	addeq	r3, #8
 80087bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80087c0:	bf04      	itt	eq
 80087c2:	0100      	lsleq	r0, r0, #4
 80087c4:	3304      	addeq	r3, #4
 80087c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80087ca:	bf04      	itt	eq
 80087cc:	0080      	lsleq	r0, r0, #2
 80087ce:	3302      	addeq	r3, #2
 80087d0:	2800      	cmp	r0, #0
 80087d2:	db05      	blt.n	80087e0 <__hi0bits+0x38>
 80087d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80087d8:	f103 0301 	add.w	r3, r3, #1
 80087dc:	bf08      	it	eq
 80087de:	2320      	moveq	r3, #32
 80087e0:	4618      	mov	r0, r3
 80087e2:	4770      	bx	lr
 80087e4:	2300      	movs	r3, #0
 80087e6:	e7e4      	b.n	80087b2 <__hi0bits+0xa>

080087e8 <__lo0bits>:
 80087e8:	6803      	ldr	r3, [r0, #0]
 80087ea:	f013 0207 	ands.w	r2, r3, #7
 80087ee:	4601      	mov	r1, r0
 80087f0:	d00b      	beq.n	800880a <__lo0bits+0x22>
 80087f2:	07da      	lsls	r2, r3, #31
 80087f4:	d423      	bmi.n	800883e <__lo0bits+0x56>
 80087f6:	0798      	lsls	r0, r3, #30
 80087f8:	bf49      	itett	mi
 80087fa:	085b      	lsrmi	r3, r3, #1
 80087fc:	089b      	lsrpl	r3, r3, #2
 80087fe:	2001      	movmi	r0, #1
 8008800:	600b      	strmi	r3, [r1, #0]
 8008802:	bf5c      	itt	pl
 8008804:	600b      	strpl	r3, [r1, #0]
 8008806:	2002      	movpl	r0, #2
 8008808:	4770      	bx	lr
 800880a:	b298      	uxth	r0, r3
 800880c:	b9a8      	cbnz	r0, 800883a <__lo0bits+0x52>
 800880e:	0c1b      	lsrs	r3, r3, #16
 8008810:	2010      	movs	r0, #16
 8008812:	b2da      	uxtb	r2, r3
 8008814:	b90a      	cbnz	r2, 800881a <__lo0bits+0x32>
 8008816:	3008      	adds	r0, #8
 8008818:	0a1b      	lsrs	r3, r3, #8
 800881a:	071a      	lsls	r2, r3, #28
 800881c:	bf04      	itt	eq
 800881e:	091b      	lsreq	r3, r3, #4
 8008820:	3004      	addeq	r0, #4
 8008822:	079a      	lsls	r2, r3, #30
 8008824:	bf04      	itt	eq
 8008826:	089b      	lsreq	r3, r3, #2
 8008828:	3002      	addeq	r0, #2
 800882a:	07da      	lsls	r2, r3, #31
 800882c:	d403      	bmi.n	8008836 <__lo0bits+0x4e>
 800882e:	085b      	lsrs	r3, r3, #1
 8008830:	f100 0001 	add.w	r0, r0, #1
 8008834:	d005      	beq.n	8008842 <__lo0bits+0x5a>
 8008836:	600b      	str	r3, [r1, #0]
 8008838:	4770      	bx	lr
 800883a:	4610      	mov	r0, r2
 800883c:	e7e9      	b.n	8008812 <__lo0bits+0x2a>
 800883e:	2000      	movs	r0, #0
 8008840:	4770      	bx	lr
 8008842:	2020      	movs	r0, #32
 8008844:	4770      	bx	lr
	...

08008848 <__i2b>:
 8008848:	b510      	push	{r4, lr}
 800884a:	460c      	mov	r4, r1
 800884c:	2101      	movs	r1, #1
 800884e:	f7ff feb9 	bl	80085c4 <_Balloc>
 8008852:	4602      	mov	r2, r0
 8008854:	b928      	cbnz	r0, 8008862 <__i2b+0x1a>
 8008856:	4b05      	ldr	r3, [pc, #20]	; (800886c <__i2b+0x24>)
 8008858:	4805      	ldr	r0, [pc, #20]	; (8008870 <__i2b+0x28>)
 800885a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800885e:	f000 fe01 	bl	8009464 <__assert_func>
 8008862:	2301      	movs	r3, #1
 8008864:	6144      	str	r4, [r0, #20]
 8008866:	6103      	str	r3, [r0, #16]
 8008868:	bd10      	pop	{r4, pc}
 800886a:	bf00      	nop
 800886c:	0800a258 	.word	0x0800a258
 8008870:	0800a2e4 	.word	0x0800a2e4

08008874 <__multiply>:
 8008874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008878:	4691      	mov	r9, r2
 800887a:	690a      	ldr	r2, [r1, #16]
 800887c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008880:	429a      	cmp	r2, r3
 8008882:	bfb8      	it	lt
 8008884:	460b      	movlt	r3, r1
 8008886:	460c      	mov	r4, r1
 8008888:	bfbc      	itt	lt
 800888a:	464c      	movlt	r4, r9
 800888c:	4699      	movlt	r9, r3
 800888e:	6927      	ldr	r7, [r4, #16]
 8008890:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008894:	68a3      	ldr	r3, [r4, #8]
 8008896:	6861      	ldr	r1, [r4, #4]
 8008898:	eb07 060a 	add.w	r6, r7, sl
 800889c:	42b3      	cmp	r3, r6
 800889e:	b085      	sub	sp, #20
 80088a0:	bfb8      	it	lt
 80088a2:	3101      	addlt	r1, #1
 80088a4:	f7ff fe8e 	bl	80085c4 <_Balloc>
 80088a8:	b930      	cbnz	r0, 80088b8 <__multiply+0x44>
 80088aa:	4602      	mov	r2, r0
 80088ac:	4b44      	ldr	r3, [pc, #272]	; (80089c0 <__multiply+0x14c>)
 80088ae:	4845      	ldr	r0, [pc, #276]	; (80089c4 <__multiply+0x150>)
 80088b0:	f240 115d 	movw	r1, #349	; 0x15d
 80088b4:	f000 fdd6 	bl	8009464 <__assert_func>
 80088b8:	f100 0514 	add.w	r5, r0, #20
 80088bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80088c0:	462b      	mov	r3, r5
 80088c2:	2200      	movs	r2, #0
 80088c4:	4543      	cmp	r3, r8
 80088c6:	d321      	bcc.n	800890c <__multiply+0x98>
 80088c8:	f104 0314 	add.w	r3, r4, #20
 80088cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80088d0:	f109 0314 	add.w	r3, r9, #20
 80088d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80088d8:	9202      	str	r2, [sp, #8]
 80088da:	1b3a      	subs	r2, r7, r4
 80088dc:	3a15      	subs	r2, #21
 80088de:	f022 0203 	bic.w	r2, r2, #3
 80088e2:	3204      	adds	r2, #4
 80088e4:	f104 0115 	add.w	r1, r4, #21
 80088e8:	428f      	cmp	r7, r1
 80088ea:	bf38      	it	cc
 80088ec:	2204      	movcc	r2, #4
 80088ee:	9201      	str	r2, [sp, #4]
 80088f0:	9a02      	ldr	r2, [sp, #8]
 80088f2:	9303      	str	r3, [sp, #12]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d80c      	bhi.n	8008912 <__multiply+0x9e>
 80088f8:	2e00      	cmp	r6, #0
 80088fa:	dd03      	ble.n	8008904 <__multiply+0x90>
 80088fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008900:	2b00      	cmp	r3, #0
 8008902:	d05a      	beq.n	80089ba <__multiply+0x146>
 8008904:	6106      	str	r6, [r0, #16]
 8008906:	b005      	add	sp, #20
 8008908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890c:	f843 2b04 	str.w	r2, [r3], #4
 8008910:	e7d8      	b.n	80088c4 <__multiply+0x50>
 8008912:	f8b3 a000 	ldrh.w	sl, [r3]
 8008916:	f1ba 0f00 	cmp.w	sl, #0
 800891a:	d024      	beq.n	8008966 <__multiply+0xf2>
 800891c:	f104 0e14 	add.w	lr, r4, #20
 8008920:	46a9      	mov	r9, r5
 8008922:	f04f 0c00 	mov.w	ip, #0
 8008926:	f85e 2b04 	ldr.w	r2, [lr], #4
 800892a:	f8d9 1000 	ldr.w	r1, [r9]
 800892e:	fa1f fb82 	uxth.w	fp, r2
 8008932:	b289      	uxth	r1, r1
 8008934:	fb0a 110b 	mla	r1, sl, fp, r1
 8008938:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800893c:	f8d9 2000 	ldr.w	r2, [r9]
 8008940:	4461      	add	r1, ip
 8008942:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008946:	fb0a c20b 	mla	r2, sl, fp, ip
 800894a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800894e:	b289      	uxth	r1, r1
 8008950:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008954:	4577      	cmp	r7, lr
 8008956:	f849 1b04 	str.w	r1, [r9], #4
 800895a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800895e:	d8e2      	bhi.n	8008926 <__multiply+0xb2>
 8008960:	9a01      	ldr	r2, [sp, #4]
 8008962:	f845 c002 	str.w	ip, [r5, r2]
 8008966:	9a03      	ldr	r2, [sp, #12]
 8008968:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800896c:	3304      	adds	r3, #4
 800896e:	f1b9 0f00 	cmp.w	r9, #0
 8008972:	d020      	beq.n	80089b6 <__multiply+0x142>
 8008974:	6829      	ldr	r1, [r5, #0]
 8008976:	f104 0c14 	add.w	ip, r4, #20
 800897a:	46ae      	mov	lr, r5
 800897c:	f04f 0a00 	mov.w	sl, #0
 8008980:	f8bc b000 	ldrh.w	fp, [ip]
 8008984:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008988:	fb09 220b 	mla	r2, r9, fp, r2
 800898c:	4492      	add	sl, r2
 800898e:	b289      	uxth	r1, r1
 8008990:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008994:	f84e 1b04 	str.w	r1, [lr], #4
 8008998:	f85c 2b04 	ldr.w	r2, [ip], #4
 800899c:	f8be 1000 	ldrh.w	r1, [lr]
 80089a0:	0c12      	lsrs	r2, r2, #16
 80089a2:	fb09 1102 	mla	r1, r9, r2, r1
 80089a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80089aa:	4567      	cmp	r7, ip
 80089ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089b0:	d8e6      	bhi.n	8008980 <__multiply+0x10c>
 80089b2:	9a01      	ldr	r2, [sp, #4]
 80089b4:	50a9      	str	r1, [r5, r2]
 80089b6:	3504      	adds	r5, #4
 80089b8:	e79a      	b.n	80088f0 <__multiply+0x7c>
 80089ba:	3e01      	subs	r6, #1
 80089bc:	e79c      	b.n	80088f8 <__multiply+0x84>
 80089be:	bf00      	nop
 80089c0:	0800a258 	.word	0x0800a258
 80089c4:	0800a2e4 	.word	0x0800a2e4

080089c8 <__pow5mult>:
 80089c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089cc:	4615      	mov	r5, r2
 80089ce:	f012 0203 	ands.w	r2, r2, #3
 80089d2:	4606      	mov	r6, r0
 80089d4:	460f      	mov	r7, r1
 80089d6:	d007      	beq.n	80089e8 <__pow5mult+0x20>
 80089d8:	4c25      	ldr	r4, [pc, #148]	; (8008a70 <__pow5mult+0xa8>)
 80089da:	3a01      	subs	r2, #1
 80089dc:	2300      	movs	r3, #0
 80089de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089e2:	f7ff fe51 	bl	8008688 <__multadd>
 80089e6:	4607      	mov	r7, r0
 80089e8:	10ad      	asrs	r5, r5, #2
 80089ea:	d03d      	beq.n	8008a68 <__pow5mult+0xa0>
 80089ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80089ee:	b97c      	cbnz	r4, 8008a10 <__pow5mult+0x48>
 80089f0:	2010      	movs	r0, #16
 80089f2:	f7ff fdbf 	bl	8008574 <malloc>
 80089f6:	4602      	mov	r2, r0
 80089f8:	6270      	str	r0, [r6, #36]	; 0x24
 80089fa:	b928      	cbnz	r0, 8008a08 <__pow5mult+0x40>
 80089fc:	4b1d      	ldr	r3, [pc, #116]	; (8008a74 <__pow5mult+0xac>)
 80089fe:	481e      	ldr	r0, [pc, #120]	; (8008a78 <__pow5mult+0xb0>)
 8008a00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a04:	f000 fd2e 	bl	8009464 <__assert_func>
 8008a08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a0c:	6004      	str	r4, [r0, #0]
 8008a0e:	60c4      	str	r4, [r0, #12]
 8008a10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a18:	b94c      	cbnz	r4, 8008a2e <__pow5mult+0x66>
 8008a1a:	f240 2171 	movw	r1, #625	; 0x271
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f7ff ff12 	bl	8008848 <__i2b>
 8008a24:	2300      	movs	r3, #0
 8008a26:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	6003      	str	r3, [r0, #0]
 8008a2e:	f04f 0900 	mov.w	r9, #0
 8008a32:	07eb      	lsls	r3, r5, #31
 8008a34:	d50a      	bpl.n	8008a4c <__pow5mult+0x84>
 8008a36:	4639      	mov	r1, r7
 8008a38:	4622      	mov	r2, r4
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	f7ff ff1a 	bl	8008874 <__multiply>
 8008a40:	4639      	mov	r1, r7
 8008a42:	4680      	mov	r8, r0
 8008a44:	4630      	mov	r0, r6
 8008a46:	f7ff fdfd 	bl	8008644 <_Bfree>
 8008a4a:	4647      	mov	r7, r8
 8008a4c:	106d      	asrs	r5, r5, #1
 8008a4e:	d00b      	beq.n	8008a68 <__pow5mult+0xa0>
 8008a50:	6820      	ldr	r0, [r4, #0]
 8008a52:	b938      	cbnz	r0, 8008a64 <__pow5mult+0x9c>
 8008a54:	4622      	mov	r2, r4
 8008a56:	4621      	mov	r1, r4
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f7ff ff0b 	bl	8008874 <__multiply>
 8008a5e:	6020      	str	r0, [r4, #0]
 8008a60:	f8c0 9000 	str.w	r9, [r0]
 8008a64:	4604      	mov	r4, r0
 8008a66:	e7e4      	b.n	8008a32 <__pow5mult+0x6a>
 8008a68:	4638      	mov	r0, r7
 8008a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a6e:	bf00      	nop
 8008a70:	0800a430 	.word	0x0800a430
 8008a74:	0800a1e6 	.word	0x0800a1e6
 8008a78:	0800a2e4 	.word	0x0800a2e4

08008a7c <__lshift>:
 8008a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a80:	460c      	mov	r4, r1
 8008a82:	6849      	ldr	r1, [r1, #4]
 8008a84:	6923      	ldr	r3, [r4, #16]
 8008a86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a8a:	68a3      	ldr	r3, [r4, #8]
 8008a8c:	4607      	mov	r7, r0
 8008a8e:	4691      	mov	r9, r2
 8008a90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a94:	f108 0601 	add.w	r6, r8, #1
 8008a98:	42b3      	cmp	r3, r6
 8008a9a:	db0b      	blt.n	8008ab4 <__lshift+0x38>
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	f7ff fd91 	bl	80085c4 <_Balloc>
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	b948      	cbnz	r0, 8008aba <__lshift+0x3e>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	4b2a      	ldr	r3, [pc, #168]	; (8008b54 <__lshift+0xd8>)
 8008aaa:	482b      	ldr	r0, [pc, #172]	; (8008b58 <__lshift+0xdc>)
 8008aac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ab0:	f000 fcd8 	bl	8009464 <__assert_func>
 8008ab4:	3101      	adds	r1, #1
 8008ab6:	005b      	lsls	r3, r3, #1
 8008ab8:	e7ee      	b.n	8008a98 <__lshift+0x1c>
 8008aba:	2300      	movs	r3, #0
 8008abc:	f100 0114 	add.w	r1, r0, #20
 8008ac0:	f100 0210 	add.w	r2, r0, #16
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	4553      	cmp	r3, sl
 8008ac8:	db37      	blt.n	8008b3a <__lshift+0xbe>
 8008aca:	6920      	ldr	r0, [r4, #16]
 8008acc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ad0:	f104 0314 	add.w	r3, r4, #20
 8008ad4:	f019 091f 	ands.w	r9, r9, #31
 8008ad8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008adc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ae0:	d02f      	beq.n	8008b42 <__lshift+0xc6>
 8008ae2:	f1c9 0e20 	rsb	lr, r9, #32
 8008ae6:	468a      	mov	sl, r1
 8008ae8:	f04f 0c00 	mov.w	ip, #0
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	fa02 f209 	lsl.w	r2, r2, r9
 8008af2:	ea42 020c 	orr.w	r2, r2, ip
 8008af6:	f84a 2b04 	str.w	r2, [sl], #4
 8008afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008afe:	4298      	cmp	r0, r3
 8008b00:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b04:	d8f2      	bhi.n	8008aec <__lshift+0x70>
 8008b06:	1b03      	subs	r3, r0, r4
 8008b08:	3b15      	subs	r3, #21
 8008b0a:	f023 0303 	bic.w	r3, r3, #3
 8008b0e:	3304      	adds	r3, #4
 8008b10:	f104 0215 	add.w	r2, r4, #21
 8008b14:	4290      	cmp	r0, r2
 8008b16:	bf38      	it	cc
 8008b18:	2304      	movcc	r3, #4
 8008b1a:	f841 c003 	str.w	ip, [r1, r3]
 8008b1e:	f1bc 0f00 	cmp.w	ip, #0
 8008b22:	d001      	beq.n	8008b28 <__lshift+0xac>
 8008b24:	f108 0602 	add.w	r6, r8, #2
 8008b28:	3e01      	subs	r6, #1
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	612e      	str	r6, [r5, #16]
 8008b2e:	4621      	mov	r1, r4
 8008b30:	f7ff fd88 	bl	8008644 <_Bfree>
 8008b34:	4628      	mov	r0, r5
 8008b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b3e:	3301      	adds	r3, #1
 8008b40:	e7c1      	b.n	8008ac6 <__lshift+0x4a>
 8008b42:	3904      	subs	r1, #4
 8008b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b48:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b4c:	4298      	cmp	r0, r3
 8008b4e:	d8f9      	bhi.n	8008b44 <__lshift+0xc8>
 8008b50:	e7ea      	b.n	8008b28 <__lshift+0xac>
 8008b52:	bf00      	nop
 8008b54:	0800a258 	.word	0x0800a258
 8008b58:	0800a2e4 	.word	0x0800a2e4

08008b5c <__mcmp>:
 8008b5c:	b530      	push	{r4, r5, lr}
 8008b5e:	6902      	ldr	r2, [r0, #16]
 8008b60:	690c      	ldr	r4, [r1, #16]
 8008b62:	1b12      	subs	r2, r2, r4
 8008b64:	d10e      	bne.n	8008b84 <__mcmp+0x28>
 8008b66:	f100 0314 	add.w	r3, r0, #20
 8008b6a:	3114      	adds	r1, #20
 8008b6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b7c:	42a5      	cmp	r5, r4
 8008b7e:	d003      	beq.n	8008b88 <__mcmp+0x2c>
 8008b80:	d305      	bcc.n	8008b8e <__mcmp+0x32>
 8008b82:	2201      	movs	r2, #1
 8008b84:	4610      	mov	r0, r2
 8008b86:	bd30      	pop	{r4, r5, pc}
 8008b88:	4283      	cmp	r3, r0
 8008b8a:	d3f3      	bcc.n	8008b74 <__mcmp+0x18>
 8008b8c:	e7fa      	b.n	8008b84 <__mcmp+0x28>
 8008b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b92:	e7f7      	b.n	8008b84 <__mcmp+0x28>

08008b94 <__mdiff>:
 8008b94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b98:	460c      	mov	r4, r1
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	4690      	mov	r8, r2
 8008ba2:	f7ff ffdb 	bl	8008b5c <__mcmp>
 8008ba6:	1e05      	subs	r5, r0, #0
 8008ba8:	d110      	bne.n	8008bcc <__mdiff+0x38>
 8008baa:	4629      	mov	r1, r5
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff fd09 	bl	80085c4 <_Balloc>
 8008bb2:	b930      	cbnz	r0, 8008bc2 <__mdiff+0x2e>
 8008bb4:	4b3a      	ldr	r3, [pc, #232]	; (8008ca0 <__mdiff+0x10c>)
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	f240 2132 	movw	r1, #562	; 0x232
 8008bbc:	4839      	ldr	r0, [pc, #228]	; (8008ca4 <__mdiff+0x110>)
 8008bbe:	f000 fc51 	bl	8009464 <__assert_func>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008bc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bcc:	bfa4      	itt	ge
 8008bce:	4643      	movge	r3, r8
 8008bd0:	46a0      	movge	r8, r4
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008bd8:	bfa6      	itte	ge
 8008bda:	461c      	movge	r4, r3
 8008bdc:	2500      	movge	r5, #0
 8008bde:	2501      	movlt	r5, #1
 8008be0:	f7ff fcf0 	bl	80085c4 <_Balloc>
 8008be4:	b920      	cbnz	r0, 8008bf0 <__mdiff+0x5c>
 8008be6:	4b2e      	ldr	r3, [pc, #184]	; (8008ca0 <__mdiff+0x10c>)
 8008be8:	4602      	mov	r2, r0
 8008bea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008bee:	e7e5      	b.n	8008bbc <__mdiff+0x28>
 8008bf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008bf4:	6926      	ldr	r6, [r4, #16]
 8008bf6:	60c5      	str	r5, [r0, #12]
 8008bf8:	f104 0914 	add.w	r9, r4, #20
 8008bfc:	f108 0514 	add.w	r5, r8, #20
 8008c00:	f100 0e14 	add.w	lr, r0, #20
 8008c04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c0c:	f108 0210 	add.w	r2, r8, #16
 8008c10:	46f2      	mov	sl, lr
 8008c12:	2100      	movs	r1, #0
 8008c14:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c1c:	fa1f f883 	uxth.w	r8, r3
 8008c20:	fa11 f18b 	uxtah	r1, r1, fp
 8008c24:	0c1b      	lsrs	r3, r3, #16
 8008c26:	eba1 0808 	sub.w	r8, r1, r8
 8008c2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c32:	fa1f f888 	uxth.w	r8, r8
 8008c36:	1419      	asrs	r1, r3, #16
 8008c38:	454e      	cmp	r6, r9
 8008c3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c3e:	f84a 3b04 	str.w	r3, [sl], #4
 8008c42:	d8e7      	bhi.n	8008c14 <__mdiff+0x80>
 8008c44:	1b33      	subs	r3, r6, r4
 8008c46:	3b15      	subs	r3, #21
 8008c48:	f023 0303 	bic.w	r3, r3, #3
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	3415      	adds	r4, #21
 8008c50:	42a6      	cmp	r6, r4
 8008c52:	bf38      	it	cc
 8008c54:	2304      	movcc	r3, #4
 8008c56:	441d      	add	r5, r3
 8008c58:	4473      	add	r3, lr
 8008c5a:	469e      	mov	lr, r3
 8008c5c:	462e      	mov	r6, r5
 8008c5e:	4566      	cmp	r6, ip
 8008c60:	d30e      	bcc.n	8008c80 <__mdiff+0xec>
 8008c62:	f10c 0203 	add.w	r2, ip, #3
 8008c66:	1b52      	subs	r2, r2, r5
 8008c68:	f022 0203 	bic.w	r2, r2, #3
 8008c6c:	3d03      	subs	r5, #3
 8008c6e:	45ac      	cmp	ip, r5
 8008c70:	bf38      	it	cc
 8008c72:	2200      	movcc	r2, #0
 8008c74:	441a      	add	r2, r3
 8008c76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008c7a:	b17b      	cbz	r3, 8008c9c <__mdiff+0x108>
 8008c7c:	6107      	str	r7, [r0, #16]
 8008c7e:	e7a3      	b.n	8008bc8 <__mdiff+0x34>
 8008c80:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c84:	fa11 f288 	uxtah	r2, r1, r8
 8008c88:	1414      	asrs	r4, r2, #16
 8008c8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c8e:	b292      	uxth	r2, r2
 8008c90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c94:	f84e 2b04 	str.w	r2, [lr], #4
 8008c98:	1421      	asrs	r1, r4, #16
 8008c9a:	e7e0      	b.n	8008c5e <__mdiff+0xca>
 8008c9c:	3f01      	subs	r7, #1
 8008c9e:	e7ea      	b.n	8008c76 <__mdiff+0xe2>
 8008ca0:	0800a258 	.word	0x0800a258
 8008ca4:	0800a2e4 	.word	0x0800a2e4

08008ca8 <__ulp>:
 8008ca8:	b082      	sub	sp, #8
 8008caa:	ed8d 0b00 	vstr	d0, [sp]
 8008cae:	9b01      	ldr	r3, [sp, #4]
 8008cb0:	4912      	ldr	r1, [pc, #72]	; (8008cfc <__ulp+0x54>)
 8008cb2:	4019      	ands	r1, r3
 8008cb4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008cb8:	2900      	cmp	r1, #0
 8008cba:	dd05      	ble.n	8008cc8 <__ulp+0x20>
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	ec43 2b10 	vmov	d0, r2, r3
 8008cc4:	b002      	add	sp, #8
 8008cc6:	4770      	bx	lr
 8008cc8:	4249      	negs	r1, r1
 8008cca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008cce:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008cd2:	f04f 0200 	mov.w	r2, #0
 8008cd6:	f04f 0300 	mov.w	r3, #0
 8008cda:	da04      	bge.n	8008ce6 <__ulp+0x3e>
 8008cdc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008ce0:	fa41 f300 	asr.w	r3, r1, r0
 8008ce4:	e7ec      	b.n	8008cc0 <__ulp+0x18>
 8008ce6:	f1a0 0114 	sub.w	r1, r0, #20
 8008cea:	291e      	cmp	r1, #30
 8008cec:	bfda      	itte	le
 8008cee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008cf2:	fa20 f101 	lsrle.w	r1, r0, r1
 8008cf6:	2101      	movgt	r1, #1
 8008cf8:	460a      	mov	r2, r1
 8008cfa:	e7e1      	b.n	8008cc0 <__ulp+0x18>
 8008cfc:	7ff00000 	.word	0x7ff00000

08008d00 <__b2d>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	6905      	ldr	r5, [r0, #16]
 8008d04:	f100 0714 	add.w	r7, r0, #20
 8008d08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008d0c:	1f2e      	subs	r6, r5, #4
 8008d0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008d12:	4620      	mov	r0, r4
 8008d14:	f7ff fd48 	bl	80087a8 <__hi0bits>
 8008d18:	f1c0 0320 	rsb	r3, r0, #32
 8008d1c:	280a      	cmp	r0, #10
 8008d1e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008d9c <__b2d+0x9c>
 8008d22:	600b      	str	r3, [r1, #0]
 8008d24:	dc14      	bgt.n	8008d50 <__b2d+0x50>
 8008d26:	f1c0 0e0b 	rsb	lr, r0, #11
 8008d2a:	fa24 f10e 	lsr.w	r1, r4, lr
 8008d2e:	42b7      	cmp	r7, r6
 8008d30:	ea41 030c 	orr.w	r3, r1, ip
 8008d34:	bf34      	ite	cc
 8008d36:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d3a:	2100      	movcs	r1, #0
 8008d3c:	3015      	adds	r0, #21
 8008d3e:	fa04 f000 	lsl.w	r0, r4, r0
 8008d42:	fa21 f10e 	lsr.w	r1, r1, lr
 8008d46:	ea40 0201 	orr.w	r2, r0, r1
 8008d4a:	ec43 2b10 	vmov	d0, r2, r3
 8008d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d50:	42b7      	cmp	r7, r6
 8008d52:	bf3a      	itte	cc
 8008d54:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d58:	f1a5 0608 	subcc.w	r6, r5, #8
 8008d5c:	2100      	movcs	r1, #0
 8008d5e:	380b      	subs	r0, #11
 8008d60:	d017      	beq.n	8008d92 <__b2d+0x92>
 8008d62:	f1c0 0c20 	rsb	ip, r0, #32
 8008d66:	fa04 f500 	lsl.w	r5, r4, r0
 8008d6a:	42be      	cmp	r6, r7
 8008d6c:	fa21 f40c 	lsr.w	r4, r1, ip
 8008d70:	ea45 0504 	orr.w	r5, r5, r4
 8008d74:	bf8c      	ite	hi
 8008d76:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008d7a:	2400      	movls	r4, #0
 8008d7c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008d80:	fa01 f000 	lsl.w	r0, r1, r0
 8008d84:	fa24 f40c 	lsr.w	r4, r4, ip
 8008d88:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d8c:	ea40 0204 	orr.w	r2, r0, r4
 8008d90:	e7db      	b.n	8008d4a <__b2d+0x4a>
 8008d92:	ea44 030c 	orr.w	r3, r4, ip
 8008d96:	460a      	mov	r2, r1
 8008d98:	e7d7      	b.n	8008d4a <__b2d+0x4a>
 8008d9a:	bf00      	nop
 8008d9c:	3ff00000 	.word	0x3ff00000

08008da0 <__d2b>:
 8008da0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008da4:	4689      	mov	r9, r1
 8008da6:	2101      	movs	r1, #1
 8008da8:	ec57 6b10 	vmov	r6, r7, d0
 8008dac:	4690      	mov	r8, r2
 8008dae:	f7ff fc09 	bl	80085c4 <_Balloc>
 8008db2:	4604      	mov	r4, r0
 8008db4:	b930      	cbnz	r0, 8008dc4 <__d2b+0x24>
 8008db6:	4602      	mov	r2, r0
 8008db8:	4b25      	ldr	r3, [pc, #148]	; (8008e50 <__d2b+0xb0>)
 8008dba:	4826      	ldr	r0, [pc, #152]	; (8008e54 <__d2b+0xb4>)
 8008dbc:	f240 310a 	movw	r1, #778	; 0x30a
 8008dc0:	f000 fb50 	bl	8009464 <__assert_func>
 8008dc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008dc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008dcc:	bb35      	cbnz	r5, 8008e1c <__d2b+0x7c>
 8008dce:	2e00      	cmp	r6, #0
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	d028      	beq.n	8008e26 <__d2b+0x86>
 8008dd4:	4668      	mov	r0, sp
 8008dd6:	9600      	str	r6, [sp, #0]
 8008dd8:	f7ff fd06 	bl	80087e8 <__lo0bits>
 8008ddc:	9900      	ldr	r1, [sp, #0]
 8008dde:	b300      	cbz	r0, 8008e22 <__d2b+0x82>
 8008de0:	9a01      	ldr	r2, [sp, #4]
 8008de2:	f1c0 0320 	rsb	r3, r0, #32
 8008de6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dea:	430b      	orrs	r3, r1
 8008dec:	40c2      	lsrs	r2, r0
 8008dee:	6163      	str	r3, [r4, #20]
 8008df0:	9201      	str	r2, [sp, #4]
 8008df2:	9b01      	ldr	r3, [sp, #4]
 8008df4:	61a3      	str	r3, [r4, #24]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	bf14      	ite	ne
 8008dfa:	2202      	movne	r2, #2
 8008dfc:	2201      	moveq	r2, #1
 8008dfe:	6122      	str	r2, [r4, #16]
 8008e00:	b1d5      	cbz	r5, 8008e38 <__d2b+0x98>
 8008e02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e06:	4405      	add	r5, r0
 8008e08:	f8c9 5000 	str.w	r5, [r9]
 8008e0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e10:	f8c8 0000 	str.w	r0, [r8]
 8008e14:	4620      	mov	r0, r4
 8008e16:	b003      	add	sp, #12
 8008e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e20:	e7d5      	b.n	8008dce <__d2b+0x2e>
 8008e22:	6161      	str	r1, [r4, #20]
 8008e24:	e7e5      	b.n	8008df2 <__d2b+0x52>
 8008e26:	a801      	add	r0, sp, #4
 8008e28:	f7ff fcde 	bl	80087e8 <__lo0bits>
 8008e2c:	9b01      	ldr	r3, [sp, #4]
 8008e2e:	6163      	str	r3, [r4, #20]
 8008e30:	2201      	movs	r2, #1
 8008e32:	6122      	str	r2, [r4, #16]
 8008e34:	3020      	adds	r0, #32
 8008e36:	e7e3      	b.n	8008e00 <__d2b+0x60>
 8008e38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e40:	f8c9 0000 	str.w	r0, [r9]
 8008e44:	6918      	ldr	r0, [r3, #16]
 8008e46:	f7ff fcaf 	bl	80087a8 <__hi0bits>
 8008e4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e4e:	e7df      	b.n	8008e10 <__d2b+0x70>
 8008e50:	0800a258 	.word	0x0800a258
 8008e54:	0800a2e4 	.word	0x0800a2e4

08008e58 <__ratio>:
 8008e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	4688      	mov	r8, r1
 8008e5e:	4669      	mov	r1, sp
 8008e60:	4681      	mov	r9, r0
 8008e62:	f7ff ff4d 	bl	8008d00 <__b2d>
 8008e66:	a901      	add	r1, sp, #4
 8008e68:	4640      	mov	r0, r8
 8008e6a:	ec55 4b10 	vmov	r4, r5, d0
 8008e6e:	f7ff ff47 	bl	8008d00 <__b2d>
 8008e72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008e7a:	eba3 0c02 	sub.w	ip, r3, r2
 8008e7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008e82:	1a9b      	subs	r3, r3, r2
 8008e84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008e88:	ec51 0b10 	vmov	r0, r1, d0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	bfd6      	itet	le
 8008e90:	460a      	movle	r2, r1
 8008e92:	462a      	movgt	r2, r5
 8008e94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e98:	468b      	mov	fp, r1
 8008e9a:	462f      	mov	r7, r5
 8008e9c:	bfd4      	ite	le
 8008e9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008ea2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	ee10 2a10 	vmov	r2, s0
 8008eac:	465b      	mov	r3, fp
 8008eae:	4639      	mov	r1, r7
 8008eb0:	f7f7 fcd4 	bl	800085c <__aeabi_ddiv>
 8008eb4:	ec41 0b10 	vmov	d0, r0, r1
 8008eb8:	b003      	add	sp, #12
 8008eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ebe <__copybits>:
 8008ebe:	3901      	subs	r1, #1
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	1149      	asrs	r1, r1, #5
 8008ec4:	6914      	ldr	r4, [r2, #16]
 8008ec6:	3101      	adds	r1, #1
 8008ec8:	f102 0314 	add.w	r3, r2, #20
 8008ecc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ed0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ed4:	1f05      	subs	r5, r0, #4
 8008ed6:	42a3      	cmp	r3, r4
 8008ed8:	d30c      	bcc.n	8008ef4 <__copybits+0x36>
 8008eda:	1aa3      	subs	r3, r4, r2
 8008edc:	3b11      	subs	r3, #17
 8008ede:	f023 0303 	bic.w	r3, r3, #3
 8008ee2:	3211      	adds	r2, #17
 8008ee4:	42a2      	cmp	r2, r4
 8008ee6:	bf88      	it	hi
 8008ee8:	2300      	movhi	r3, #0
 8008eea:	4418      	add	r0, r3
 8008eec:	2300      	movs	r3, #0
 8008eee:	4288      	cmp	r0, r1
 8008ef0:	d305      	bcc.n	8008efe <__copybits+0x40>
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
 8008ef4:	f853 6b04 	ldr.w	r6, [r3], #4
 8008ef8:	f845 6f04 	str.w	r6, [r5, #4]!
 8008efc:	e7eb      	b.n	8008ed6 <__copybits+0x18>
 8008efe:	f840 3b04 	str.w	r3, [r0], #4
 8008f02:	e7f4      	b.n	8008eee <__copybits+0x30>

08008f04 <__any_on>:
 8008f04:	f100 0214 	add.w	r2, r0, #20
 8008f08:	6900      	ldr	r0, [r0, #16]
 8008f0a:	114b      	asrs	r3, r1, #5
 8008f0c:	4298      	cmp	r0, r3
 8008f0e:	b510      	push	{r4, lr}
 8008f10:	db11      	blt.n	8008f36 <__any_on+0x32>
 8008f12:	dd0a      	ble.n	8008f2a <__any_on+0x26>
 8008f14:	f011 011f 	ands.w	r1, r1, #31
 8008f18:	d007      	beq.n	8008f2a <__any_on+0x26>
 8008f1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f1e:	fa24 f001 	lsr.w	r0, r4, r1
 8008f22:	fa00 f101 	lsl.w	r1, r0, r1
 8008f26:	428c      	cmp	r4, r1
 8008f28:	d10b      	bne.n	8008f42 <__any_on+0x3e>
 8008f2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d803      	bhi.n	8008f3a <__any_on+0x36>
 8008f32:	2000      	movs	r0, #0
 8008f34:	bd10      	pop	{r4, pc}
 8008f36:	4603      	mov	r3, r0
 8008f38:	e7f7      	b.n	8008f2a <__any_on+0x26>
 8008f3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f3e:	2900      	cmp	r1, #0
 8008f40:	d0f5      	beq.n	8008f2e <__any_on+0x2a>
 8008f42:	2001      	movs	r0, #1
 8008f44:	e7f6      	b.n	8008f34 <__any_on+0x30>

08008f46 <_calloc_r>:
 8008f46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f48:	fba1 2402 	umull	r2, r4, r1, r2
 8008f4c:	b94c      	cbnz	r4, 8008f62 <_calloc_r+0x1c>
 8008f4e:	4611      	mov	r1, r2
 8008f50:	9201      	str	r2, [sp, #4]
 8008f52:	f000 f87b 	bl	800904c <_malloc_r>
 8008f56:	9a01      	ldr	r2, [sp, #4]
 8008f58:	4605      	mov	r5, r0
 8008f5a:	b930      	cbnz	r0, 8008f6a <_calloc_r+0x24>
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	b003      	add	sp, #12
 8008f60:	bd30      	pop	{r4, r5, pc}
 8008f62:	220c      	movs	r2, #12
 8008f64:	6002      	str	r2, [r0, #0]
 8008f66:	2500      	movs	r5, #0
 8008f68:	e7f8      	b.n	8008f5c <_calloc_r+0x16>
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	f7fc fb8c 	bl	8005688 <memset>
 8008f70:	e7f4      	b.n	8008f5c <_calloc_r+0x16>
	...

08008f74 <_free_r>:
 8008f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f76:	2900      	cmp	r1, #0
 8008f78:	d044      	beq.n	8009004 <_free_r+0x90>
 8008f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f7e:	9001      	str	r0, [sp, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f1a1 0404 	sub.w	r4, r1, #4
 8008f86:	bfb8      	it	lt
 8008f88:	18e4      	addlt	r4, r4, r3
 8008f8a:	f000 fab5 	bl	80094f8 <__malloc_lock>
 8008f8e:	4a1e      	ldr	r2, [pc, #120]	; (8009008 <_free_r+0x94>)
 8008f90:	9801      	ldr	r0, [sp, #4]
 8008f92:	6813      	ldr	r3, [r2, #0]
 8008f94:	b933      	cbnz	r3, 8008fa4 <_free_r+0x30>
 8008f96:	6063      	str	r3, [r4, #4]
 8008f98:	6014      	str	r4, [r2, #0]
 8008f9a:	b003      	add	sp, #12
 8008f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fa0:	f000 bab0 	b.w	8009504 <__malloc_unlock>
 8008fa4:	42a3      	cmp	r3, r4
 8008fa6:	d908      	bls.n	8008fba <_free_r+0x46>
 8008fa8:	6825      	ldr	r5, [r4, #0]
 8008faa:	1961      	adds	r1, r4, r5
 8008fac:	428b      	cmp	r3, r1
 8008fae:	bf01      	itttt	eq
 8008fb0:	6819      	ldreq	r1, [r3, #0]
 8008fb2:	685b      	ldreq	r3, [r3, #4]
 8008fb4:	1949      	addeq	r1, r1, r5
 8008fb6:	6021      	streq	r1, [r4, #0]
 8008fb8:	e7ed      	b.n	8008f96 <_free_r+0x22>
 8008fba:	461a      	mov	r2, r3
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	b10b      	cbz	r3, 8008fc4 <_free_r+0x50>
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	d9fa      	bls.n	8008fba <_free_r+0x46>
 8008fc4:	6811      	ldr	r1, [r2, #0]
 8008fc6:	1855      	adds	r5, r2, r1
 8008fc8:	42a5      	cmp	r5, r4
 8008fca:	d10b      	bne.n	8008fe4 <_free_r+0x70>
 8008fcc:	6824      	ldr	r4, [r4, #0]
 8008fce:	4421      	add	r1, r4
 8008fd0:	1854      	adds	r4, r2, r1
 8008fd2:	42a3      	cmp	r3, r4
 8008fd4:	6011      	str	r1, [r2, #0]
 8008fd6:	d1e0      	bne.n	8008f9a <_free_r+0x26>
 8008fd8:	681c      	ldr	r4, [r3, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	6053      	str	r3, [r2, #4]
 8008fde:	4421      	add	r1, r4
 8008fe0:	6011      	str	r1, [r2, #0]
 8008fe2:	e7da      	b.n	8008f9a <_free_r+0x26>
 8008fe4:	d902      	bls.n	8008fec <_free_r+0x78>
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	6003      	str	r3, [r0, #0]
 8008fea:	e7d6      	b.n	8008f9a <_free_r+0x26>
 8008fec:	6825      	ldr	r5, [r4, #0]
 8008fee:	1961      	adds	r1, r4, r5
 8008ff0:	428b      	cmp	r3, r1
 8008ff2:	bf04      	itt	eq
 8008ff4:	6819      	ldreq	r1, [r3, #0]
 8008ff6:	685b      	ldreq	r3, [r3, #4]
 8008ff8:	6063      	str	r3, [r4, #4]
 8008ffa:	bf04      	itt	eq
 8008ffc:	1949      	addeq	r1, r1, r5
 8008ffe:	6021      	streq	r1, [r4, #0]
 8009000:	6054      	str	r4, [r2, #4]
 8009002:	e7ca      	b.n	8008f9a <_free_r+0x26>
 8009004:	b003      	add	sp, #12
 8009006:	bd30      	pop	{r4, r5, pc}
 8009008:	20000358 	.word	0x20000358

0800900c <sbrk_aligned>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	4e0e      	ldr	r6, [pc, #56]	; (8009048 <sbrk_aligned+0x3c>)
 8009010:	460c      	mov	r4, r1
 8009012:	6831      	ldr	r1, [r6, #0]
 8009014:	4605      	mov	r5, r0
 8009016:	b911      	cbnz	r1, 800901e <sbrk_aligned+0x12>
 8009018:	f000 f9f2 	bl	8009400 <_sbrk_r>
 800901c:	6030      	str	r0, [r6, #0]
 800901e:	4621      	mov	r1, r4
 8009020:	4628      	mov	r0, r5
 8009022:	f000 f9ed 	bl	8009400 <_sbrk_r>
 8009026:	1c43      	adds	r3, r0, #1
 8009028:	d00a      	beq.n	8009040 <sbrk_aligned+0x34>
 800902a:	1cc4      	adds	r4, r0, #3
 800902c:	f024 0403 	bic.w	r4, r4, #3
 8009030:	42a0      	cmp	r0, r4
 8009032:	d007      	beq.n	8009044 <sbrk_aligned+0x38>
 8009034:	1a21      	subs	r1, r4, r0
 8009036:	4628      	mov	r0, r5
 8009038:	f000 f9e2 	bl	8009400 <_sbrk_r>
 800903c:	3001      	adds	r0, #1
 800903e:	d101      	bne.n	8009044 <sbrk_aligned+0x38>
 8009040:	f04f 34ff 	mov.w	r4, #4294967295
 8009044:	4620      	mov	r0, r4
 8009046:	bd70      	pop	{r4, r5, r6, pc}
 8009048:	2000035c 	.word	0x2000035c

0800904c <_malloc_r>:
 800904c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009050:	1ccd      	adds	r5, r1, #3
 8009052:	f025 0503 	bic.w	r5, r5, #3
 8009056:	3508      	adds	r5, #8
 8009058:	2d0c      	cmp	r5, #12
 800905a:	bf38      	it	cc
 800905c:	250c      	movcc	r5, #12
 800905e:	2d00      	cmp	r5, #0
 8009060:	4607      	mov	r7, r0
 8009062:	db01      	blt.n	8009068 <_malloc_r+0x1c>
 8009064:	42a9      	cmp	r1, r5
 8009066:	d905      	bls.n	8009074 <_malloc_r+0x28>
 8009068:	230c      	movs	r3, #12
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	2600      	movs	r6, #0
 800906e:	4630      	mov	r0, r6
 8009070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009074:	4e2e      	ldr	r6, [pc, #184]	; (8009130 <_malloc_r+0xe4>)
 8009076:	f000 fa3f 	bl	80094f8 <__malloc_lock>
 800907a:	6833      	ldr	r3, [r6, #0]
 800907c:	461c      	mov	r4, r3
 800907e:	bb34      	cbnz	r4, 80090ce <_malloc_r+0x82>
 8009080:	4629      	mov	r1, r5
 8009082:	4638      	mov	r0, r7
 8009084:	f7ff ffc2 	bl	800900c <sbrk_aligned>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	4604      	mov	r4, r0
 800908c:	d14d      	bne.n	800912a <_malloc_r+0xde>
 800908e:	6834      	ldr	r4, [r6, #0]
 8009090:	4626      	mov	r6, r4
 8009092:	2e00      	cmp	r6, #0
 8009094:	d140      	bne.n	8009118 <_malloc_r+0xcc>
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	4631      	mov	r1, r6
 800909a:	4638      	mov	r0, r7
 800909c:	eb04 0803 	add.w	r8, r4, r3
 80090a0:	f000 f9ae 	bl	8009400 <_sbrk_r>
 80090a4:	4580      	cmp	r8, r0
 80090a6:	d13a      	bne.n	800911e <_malloc_r+0xd2>
 80090a8:	6821      	ldr	r1, [r4, #0]
 80090aa:	3503      	adds	r5, #3
 80090ac:	1a6d      	subs	r5, r5, r1
 80090ae:	f025 0503 	bic.w	r5, r5, #3
 80090b2:	3508      	adds	r5, #8
 80090b4:	2d0c      	cmp	r5, #12
 80090b6:	bf38      	it	cc
 80090b8:	250c      	movcc	r5, #12
 80090ba:	4629      	mov	r1, r5
 80090bc:	4638      	mov	r0, r7
 80090be:	f7ff ffa5 	bl	800900c <sbrk_aligned>
 80090c2:	3001      	adds	r0, #1
 80090c4:	d02b      	beq.n	800911e <_malloc_r+0xd2>
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	442b      	add	r3, r5
 80090ca:	6023      	str	r3, [r4, #0]
 80090cc:	e00e      	b.n	80090ec <_malloc_r+0xa0>
 80090ce:	6822      	ldr	r2, [r4, #0]
 80090d0:	1b52      	subs	r2, r2, r5
 80090d2:	d41e      	bmi.n	8009112 <_malloc_r+0xc6>
 80090d4:	2a0b      	cmp	r2, #11
 80090d6:	d916      	bls.n	8009106 <_malloc_r+0xba>
 80090d8:	1961      	adds	r1, r4, r5
 80090da:	42a3      	cmp	r3, r4
 80090dc:	6025      	str	r5, [r4, #0]
 80090de:	bf18      	it	ne
 80090e0:	6059      	strne	r1, [r3, #4]
 80090e2:	6863      	ldr	r3, [r4, #4]
 80090e4:	bf08      	it	eq
 80090e6:	6031      	streq	r1, [r6, #0]
 80090e8:	5162      	str	r2, [r4, r5]
 80090ea:	604b      	str	r3, [r1, #4]
 80090ec:	4638      	mov	r0, r7
 80090ee:	f104 060b 	add.w	r6, r4, #11
 80090f2:	f000 fa07 	bl	8009504 <__malloc_unlock>
 80090f6:	f026 0607 	bic.w	r6, r6, #7
 80090fa:	1d23      	adds	r3, r4, #4
 80090fc:	1af2      	subs	r2, r6, r3
 80090fe:	d0b6      	beq.n	800906e <_malloc_r+0x22>
 8009100:	1b9b      	subs	r3, r3, r6
 8009102:	50a3      	str	r3, [r4, r2]
 8009104:	e7b3      	b.n	800906e <_malloc_r+0x22>
 8009106:	6862      	ldr	r2, [r4, #4]
 8009108:	42a3      	cmp	r3, r4
 800910a:	bf0c      	ite	eq
 800910c:	6032      	streq	r2, [r6, #0]
 800910e:	605a      	strne	r2, [r3, #4]
 8009110:	e7ec      	b.n	80090ec <_malloc_r+0xa0>
 8009112:	4623      	mov	r3, r4
 8009114:	6864      	ldr	r4, [r4, #4]
 8009116:	e7b2      	b.n	800907e <_malloc_r+0x32>
 8009118:	4634      	mov	r4, r6
 800911a:	6876      	ldr	r6, [r6, #4]
 800911c:	e7b9      	b.n	8009092 <_malloc_r+0x46>
 800911e:	230c      	movs	r3, #12
 8009120:	603b      	str	r3, [r7, #0]
 8009122:	4638      	mov	r0, r7
 8009124:	f000 f9ee 	bl	8009504 <__malloc_unlock>
 8009128:	e7a1      	b.n	800906e <_malloc_r+0x22>
 800912a:	6025      	str	r5, [r4, #0]
 800912c:	e7de      	b.n	80090ec <_malloc_r+0xa0>
 800912e:	bf00      	nop
 8009130:	20000358 	.word	0x20000358

08009134 <__ssputs_r>:
 8009134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009138:	688e      	ldr	r6, [r1, #8]
 800913a:	429e      	cmp	r6, r3
 800913c:	4682      	mov	sl, r0
 800913e:	460c      	mov	r4, r1
 8009140:	4690      	mov	r8, r2
 8009142:	461f      	mov	r7, r3
 8009144:	d838      	bhi.n	80091b8 <__ssputs_r+0x84>
 8009146:	898a      	ldrh	r2, [r1, #12]
 8009148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800914c:	d032      	beq.n	80091b4 <__ssputs_r+0x80>
 800914e:	6825      	ldr	r5, [r4, #0]
 8009150:	6909      	ldr	r1, [r1, #16]
 8009152:	eba5 0901 	sub.w	r9, r5, r1
 8009156:	6965      	ldr	r5, [r4, #20]
 8009158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800915c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009160:	3301      	adds	r3, #1
 8009162:	444b      	add	r3, r9
 8009164:	106d      	asrs	r5, r5, #1
 8009166:	429d      	cmp	r5, r3
 8009168:	bf38      	it	cc
 800916a:	461d      	movcc	r5, r3
 800916c:	0553      	lsls	r3, r2, #21
 800916e:	d531      	bpl.n	80091d4 <__ssputs_r+0xa0>
 8009170:	4629      	mov	r1, r5
 8009172:	f7ff ff6b 	bl	800904c <_malloc_r>
 8009176:	4606      	mov	r6, r0
 8009178:	b950      	cbnz	r0, 8009190 <__ssputs_r+0x5c>
 800917a:	230c      	movs	r3, #12
 800917c:	f8ca 3000 	str.w	r3, [sl]
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009186:	81a3      	strh	r3, [r4, #12]
 8009188:	f04f 30ff 	mov.w	r0, #4294967295
 800918c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009190:	6921      	ldr	r1, [r4, #16]
 8009192:	464a      	mov	r2, r9
 8009194:	f7ff fa08 	bl	80085a8 <memcpy>
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800919e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a2:	81a3      	strh	r3, [r4, #12]
 80091a4:	6126      	str	r6, [r4, #16]
 80091a6:	6165      	str	r5, [r4, #20]
 80091a8:	444e      	add	r6, r9
 80091aa:	eba5 0509 	sub.w	r5, r5, r9
 80091ae:	6026      	str	r6, [r4, #0]
 80091b0:	60a5      	str	r5, [r4, #8]
 80091b2:	463e      	mov	r6, r7
 80091b4:	42be      	cmp	r6, r7
 80091b6:	d900      	bls.n	80091ba <__ssputs_r+0x86>
 80091b8:	463e      	mov	r6, r7
 80091ba:	6820      	ldr	r0, [r4, #0]
 80091bc:	4632      	mov	r2, r6
 80091be:	4641      	mov	r1, r8
 80091c0:	f000 f980 	bl	80094c4 <memmove>
 80091c4:	68a3      	ldr	r3, [r4, #8]
 80091c6:	1b9b      	subs	r3, r3, r6
 80091c8:	60a3      	str	r3, [r4, #8]
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	4433      	add	r3, r6
 80091ce:	6023      	str	r3, [r4, #0]
 80091d0:	2000      	movs	r0, #0
 80091d2:	e7db      	b.n	800918c <__ssputs_r+0x58>
 80091d4:	462a      	mov	r2, r5
 80091d6:	f000 f99b 	bl	8009510 <_realloc_r>
 80091da:	4606      	mov	r6, r0
 80091dc:	2800      	cmp	r0, #0
 80091de:	d1e1      	bne.n	80091a4 <__ssputs_r+0x70>
 80091e0:	6921      	ldr	r1, [r4, #16]
 80091e2:	4650      	mov	r0, sl
 80091e4:	f7ff fec6 	bl	8008f74 <_free_r>
 80091e8:	e7c7      	b.n	800917a <__ssputs_r+0x46>
	...

080091ec <_svfiprintf_r>:
 80091ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f0:	4698      	mov	r8, r3
 80091f2:	898b      	ldrh	r3, [r1, #12]
 80091f4:	061b      	lsls	r3, r3, #24
 80091f6:	b09d      	sub	sp, #116	; 0x74
 80091f8:	4607      	mov	r7, r0
 80091fa:	460d      	mov	r5, r1
 80091fc:	4614      	mov	r4, r2
 80091fe:	d50e      	bpl.n	800921e <_svfiprintf_r+0x32>
 8009200:	690b      	ldr	r3, [r1, #16]
 8009202:	b963      	cbnz	r3, 800921e <_svfiprintf_r+0x32>
 8009204:	2140      	movs	r1, #64	; 0x40
 8009206:	f7ff ff21 	bl	800904c <_malloc_r>
 800920a:	6028      	str	r0, [r5, #0]
 800920c:	6128      	str	r0, [r5, #16]
 800920e:	b920      	cbnz	r0, 800921a <_svfiprintf_r+0x2e>
 8009210:	230c      	movs	r3, #12
 8009212:	603b      	str	r3, [r7, #0]
 8009214:	f04f 30ff 	mov.w	r0, #4294967295
 8009218:	e0d1      	b.n	80093be <_svfiprintf_r+0x1d2>
 800921a:	2340      	movs	r3, #64	; 0x40
 800921c:	616b      	str	r3, [r5, #20]
 800921e:	2300      	movs	r3, #0
 8009220:	9309      	str	r3, [sp, #36]	; 0x24
 8009222:	2320      	movs	r3, #32
 8009224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009228:	f8cd 800c 	str.w	r8, [sp, #12]
 800922c:	2330      	movs	r3, #48	; 0x30
 800922e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093d8 <_svfiprintf_r+0x1ec>
 8009232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009236:	f04f 0901 	mov.w	r9, #1
 800923a:	4623      	mov	r3, r4
 800923c:	469a      	mov	sl, r3
 800923e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009242:	b10a      	cbz	r2, 8009248 <_svfiprintf_r+0x5c>
 8009244:	2a25      	cmp	r2, #37	; 0x25
 8009246:	d1f9      	bne.n	800923c <_svfiprintf_r+0x50>
 8009248:	ebba 0b04 	subs.w	fp, sl, r4
 800924c:	d00b      	beq.n	8009266 <_svfiprintf_r+0x7a>
 800924e:	465b      	mov	r3, fp
 8009250:	4622      	mov	r2, r4
 8009252:	4629      	mov	r1, r5
 8009254:	4638      	mov	r0, r7
 8009256:	f7ff ff6d 	bl	8009134 <__ssputs_r>
 800925a:	3001      	adds	r0, #1
 800925c:	f000 80aa 	beq.w	80093b4 <_svfiprintf_r+0x1c8>
 8009260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009262:	445a      	add	r2, fp
 8009264:	9209      	str	r2, [sp, #36]	; 0x24
 8009266:	f89a 3000 	ldrb.w	r3, [sl]
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 80a2 	beq.w	80093b4 <_svfiprintf_r+0x1c8>
 8009270:	2300      	movs	r3, #0
 8009272:	f04f 32ff 	mov.w	r2, #4294967295
 8009276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800927a:	f10a 0a01 	add.w	sl, sl, #1
 800927e:	9304      	str	r3, [sp, #16]
 8009280:	9307      	str	r3, [sp, #28]
 8009282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009286:	931a      	str	r3, [sp, #104]	; 0x68
 8009288:	4654      	mov	r4, sl
 800928a:	2205      	movs	r2, #5
 800928c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009290:	4851      	ldr	r0, [pc, #324]	; (80093d8 <_svfiprintf_r+0x1ec>)
 8009292:	f7f6 ffad 	bl	80001f0 <memchr>
 8009296:	9a04      	ldr	r2, [sp, #16]
 8009298:	b9d8      	cbnz	r0, 80092d2 <_svfiprintf_r+0xe6>
 800929a:	06d0      	lsls	r0, r2, #27
 800929c:	bf44      	itt	mi
 800929e:	2320      	movmi	r3, #32
 80092a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092a4:	0711      	lsls	r1, r2, #28
 80092a6:	bf44      	itt	mi
 80092a8:	232b      	movmi	r3, #43	; 0x2b
 80092aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ae:	f89a 3000 	ldrb.w	r3, [sl]
 80092b2:	2b2a      	cmp	r3, #42	; 0x2a
 80092b4:	d015      	beq.n	80092e2 <_svfiprintf_r+0xf6>
 80092b6:	9a07      	ldr	r2, [sp, #28]
 80092b8:	4654      	mov	r4, sl
 80092ba:	2000      	movs	r0, #0
 80092bc:	f04f 0c0a 	mov.w	ip, #10
 80092c0:	4621      	mov	r1, r4
 80092c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092c6:	3b30      	subs	r3, #48	; 0x30
 80092c8:	2b09      	cmp	r3, #9
 80092ca:	d94e      	bls.n	800936a <_svfiprintf_r+0x17e>
 80092cc:	b1b0      	cbz	r0, 80092fc <_svfiprintf_r+0x110>
 80092ce:	9207      	str	r2, [sp, #28]
 80092d0:	e014      	b.n	80092fc <_svfiprintf_r+0x110>
 80092d2:	eba0 0308 	sub.w	r3, r0, r8
 80092d6:	fa09 f303 	lsl.w	r3, r9, r3
 80092da:	4313      	orrs	r3, r2
 80092dc:	9304      	str	r3, [sp, #16]
 80092de:	46a2      	mov	sl, r4
 80092e0:	e7d2      	b.n	8009288 <_svfiprintf_r+0x9c>
 80092e2:	9b03      	ldr	r3, [sp, #12]
 80092e4:	1d19      	adds	r1, r3, #4
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	9103      	str	r1, [sp, #12]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	bfbb      	ittet	lt
 80092ee:	425b      	neglt	r3, r3
 80092f0:	f042 0202 	orrlt.w	r2, r2, #2
 80092f4:	9307      	strge	r3, [sp, #28]
 80092f6:	9307      	strlt	r3, [sp, #28]
 80092f8:	bfb8      	it	lt
 80092fa:	9204      	strlt	r2, [sp, #16]
 80092fc:	7823      	ldrb	r3, [r4, #0]
 80092fe:	2b2e      	cmp	r3, #46	; 0x2e
 8009300:	d10c      	bne.n	800931c <_svfiprintf_r+0x130>
 8009302:	7863      	ldrb	r3, [r4, #1]
 8009304:	2b2a      	cmp	r3, #42	; 0x2a
 8009306:	d135      	bne.n	8009374 <_svfiprintf_r+0x188>
 8009308:	9b03      	ldr	r3, [sp, #12]
 800930a:	1d1a      	adds	r2, r3, #4
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	9203      	str	r2, [sp, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	bfb8      	it	lt
 8009314:	f04f 33ff 	movlt.w	r3, #4294967295
 8009318:	3402      	adds	r4, #2
 800931a:	9305      	str	r3, [sp, #20]
 800931c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093e8 <_svfiprintf_r+0x1fc>
 8009320:	7821      	ldrb	r1, [r4, #0]
 8009322:	2203      	movs	r2, #3
 8009324:	4650      	mov	r0, sl
 8009326:	f7f6 ff63 	bl	80001f0 <memchr>
 800932a:	b140      	cbz	r0, 800933e <_svfiprintf_r+0x152>
 800932c:	2340      	movs	r3, #64	; 0x40
 800932e:	eba0 000a 	sub.w	r0, r0, sl
 8009332:	fa03 f000 	lsl.w	r0, r3, r0
 8009336:	9b04      	ldr	r3, [sp, #16]
 8009338:	4303      	orrs	r3, r0
 800933a:	3401      	adds	r4, #1
 800933c:	9304      	str	r3, [sp, #16]
 800933e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009342:	4826      	ldr	r0, [pc, #152]	; (80093dc <_svfiprintf_r+0x1f0>)
 8009344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009348:	2206      	movs	r2, #6
 800934a:	f7f6 ff51 	bl	80001f0 <memchr>
 800934e:	2800      	cmp	r0, #0
 8009350:	d038      	beq.n	80093c4 <_svfiprintf_r+0x1d8>
 8009352:	4b23      	ldr	r3, [pc, #140]	; (80093e0 <_svfiprintf_r+0x1f4>)
 8009354:	bb1b      	cbnz	r3, 800939e <_svfiprintf_r+0x1b2>
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	3307      	adds	r3, #7
 800935a:	f023 0307 	bic.w	r3, r3, #7
 800935e:	3308      	adds	r3, #8
 8009360:	9303      	str	r3, [sp, #12]
 8009362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009364:	4433      	add	r3, r6
 8009366:	9309      	str	r3, [sp, #36]	; 0x24
 8009368:	e767      	b.n	800923a <_svfiprintf_r+0x4e>
 800936a:	fb0c 3202 	mla	r2, ip, r2, r3
 800936e:	460c      	mov	r4, r1
 8009370:	2001      	movs	r0, #1
 8009372:	e7a5      	b.n	80092c0 <_svfiprintf_r+0xd4>
 8009374:	2300      	movs	r3, #0
 8009376:	3401      	adds	r4, #1
 8009378:	9305      	str	r3, [sp, #20]
 800937a:	4619      	mov	r1, r3
 800937c:	f04f 0c0a 	mov.w	ip, #10
 8009380:	4620      	mov	r0, r4
 8009382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009386:	3a30      	subs	r2, #48	; 0x30
 8009388:	2a09      	cmp	r2, #9
 800938a:	d903      	bls.n	8009394 <_svfiprintf_r+0x1a8>
 800938c:	2b00      	cmp	r3, #0
 800938e:	d0c5      	beq.n	800931c <_svfiprintf_r+0x130>
 8009390:	9105      	str	r1, [sp, #20]
 8009392:	e7c3      	b.n	800931c <_svfiprintf_r+0x130>
 8009394:	fb0c 2101 	mla	r1, ip, r1, r2
 8009398:	4604      	mov	r4, r0
 800939a:	2301      	movs	r3, #1
 800939c:	e7f0      	b.n	8009380 <_svfiprintf_r+0x194>
 800939e:	ab03      	add	r3, sp, #12
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	462a      	mov	r2, r5
 80093a4:	4b0f      	ldr	r3, [pc, #60]	; (80093e4 <_svfiprintf_r+0x1f8>)
 80093a6:	a904      	add	r1, sp, #16
 80093a8:	4638      	mov	r0, r7
 80093aa:	f7fc fa15 	bl	80057d8 <_printf_float>
 80093ae:	1c42      	adds	r2, r0, #1
 80093b0:	4606      	mov	r6, r0
 80093b2:	d1d6      	bne.n	8009362 <_svfiprintf_r+0x176>
 80093b4:	89ab      	ldrh	r3, [r5, #12]
 80093b6:	065b      	lsls	r3, r3, #25
 80093b8:	f53f af2c 	bmi.w	8009214 <_svfiprintf_r+0x28>
 80093bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093be:	b01d      	add	sp, #116	; 0x74
 80093c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c4:	ab03      	add	r3, sp, #12
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	462a      	mov	r2, r5
 80093ca:	4b06      	ldr	r3, [pc, #24]	; (80093e4 <_svfiprintf_r+0x1f8>)
 80093cc:	a904      	add	r1, sp, #16
 80093ce:	4638      	mov	r0, r7
 80093d0:	f7fc fca6 	bl	8005d20 <_printf_i>
 80093d4:	e7eb      	b.n	80093ae <_svfiprintf_r+0x1c2>
 80093d6:	bf00      	nop
 80093d8:	0800a43c 	.word	0x0800a43c
 80093dc:	0800a446 	.word	0x0800a446
 80093e0:	080057d9 	.word	0x080057d9
 80093e4:	08009135 	.word	0x08009135
 80093e8:	0800a442 	.word	0x0800a442
 80093ec:	00000000 	.word	0x00000000

080093f0 <nan>:
 80093f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80093f8 <nan+0x8>
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	00000000 	.word	0x00000000
 80093fc:	7ff80000 	.word	0x7ff80000

08009400 <_sbrk_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d06      	ldr	r5, [pc, #24]	; (800941c <_sbrk_r+0x1c>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	602b      	str	r3, [r5, #0]
 800940c:	f7f8 fa6e 	bl	80018ec <_sbrk>
 8009410:	1c43      	adds	r3, r0, #1
 8009412:	d102      	bne.n	800941a <_sbrk_r+0x1a>
 8009414:	682b      	ldr	r3, [r5, #0]
 8009416:	b103      	cbz	r3, 800941a <_sbrk_r+0x1a>
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	bd38      	pop	{r3, r4, r5, pc}
 800941c:	20000360 	.word	0x20000360

08009420 <strncmp>:
 8009420:	b510      	push	{r4, lr}
 8009422:	b17a      	cbz	r2, 8009444 <strncmp+0x24>
 8009424:	4603      	mov	r3, r0
 8009426:	3901      	subs	r1, #1
 8009428:	1884      	adds	r4, r0, r2
 800942a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800942e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009432:	4290      	cmp	r0, r2
 8009434:	d101      	bne.n	800943a <strncmp+0x1a>
 8009436:	42a3      	cmp	r3, r4
 8009438:	d101      	bne.n	800943e <strncmp+0x1e>
 800943a:	1a80      	subs	r0, r0, r2
 800943c:	bd10      	pop	{r4, pc}
 800943e:	2800      	cmp	r0, #0
 8009440:	d1f3      	bne.n	800942a <strncmp+0xa>
 8009442:	e7fa      	b.n	800943a <strncmp+0x1a>
 8009444:	4610      	mov	r0, r2
 8009446:	e7f9      	b.n	800943c <strncmp+0x1c>

08009448 <__ascii_wctomb>:
 8009448:	b149      	cbz	r1, 800945e <__ascii_wctomb+0x16>
 800944a:	2aff      	cmp	r2, #255	; 0xff
 800944c:	bf85      	ittet	hi
 800944e:	238a      	movhi	r3, #138	; 0x8a
 8009450:	6003      	strhi	r3, [r0, #0]
 8009452:	700a      	strbls	r2, [r1, #0]
 8009454:	f04f 30ff 	movhi.w	r0, #4294967295
 8009458:	bf98      	it	ls
 800945a:	2001      	movls	r0, #1
 800945c:	4770      	bx	lr
 800945e:	4608      	mov	r0, r1
 8009460:	4770      	bx	lr
	...

08009464 <__assert_func>:
 8009464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009466:	4614      	mov	r4, r2
 8009468:	461a      	mov	r2, r3
 800946a:	4b09      	ldr	r3, [pc, #36]	; (8009490 <__assert_func+0x2c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4605      	mov	r5, r0
 8009470:	68d8      	ldr	r0, [r3, #12]
 8009472:	b14c      	cbz	r4, 8009488 <__assert_func+0x24>
 8009474:	4b07      	ldr	r3, [pc, #28]	; (8009494 <__assert_func+0x30>)
 8009476:	9100      	str	r1, [sp, #0]
 8009478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800947c:	4906      	ldr	r1, [pc, #24]	; (8009498 <__assert_func+0x34>)
 800947e:	462b      	mov	r3, r5
 8009480:	f000 f80e 	bl	80094a0 <fiprintf>
 8009484:	f000 fa8c 	bl	80099a0 <abort>
 8009488:	4b04      	ldr	r3, [pc, #16]	; (800949c <__assert_func+0x38>)
 800948a:	461c      	mov	r4, r3
 800948c:	e7f3      	b.n	8009476 <__assert_func+0x12>
 800948e:	bf00      	nop
 8009490:	20000020 	.word	0x20000020
 8009494:	0800a44d 	.word	0x0800a44d
 8009498:	0800a45a 	.word	0x0800a45a
 800949c:	0800a488 	.word	0x0800a488

080094a0 <fiprintf>:
 80094a0:	b40e      	push	{r1, r2, r3}
 80094a2:	b503      	push	{r0, r1, lr}
 80094a4:	4601      	mov	r1, r0
 80094a6:	ab03      	add	r3, sp, #12
 80094a8:	4805      	ldr	r0, [pc, #20]	; (80094c0 <fiprintf+0x20>)
 80094aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ae:	6800      	ldr	r0, [r0, #0]
 80094b0:	9301      	str	r3, [sp, #4]
 80094b2:	f000 f885 	bl	80095c0 <_vfiprintf_r>
 80094b6:	b002      	add	sp, #8
 80094b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094bc:	b003      	add	sp, #12
 80094be:	4770      	bx	lr
 80094c0:	20000020 	.word	0x20000020

080094c4 <memmove>:
 80094c4:	4288      	cmp	r0, r1
 80094c6:	b510      	push	{r4, lr}
 80094c8:	eb01 0402 	add.w	r4, r1, r2
 80094cc:	d902      	bls.n	80094d4 <memmove+0x10>
 80094ce:	4284      	cmp	r4, r0
 80094d0:	4623      	mov	r3, r4
 80094d2:	d807      	bhi.n	80094e4 <memmove+0x20>
 80094d4:	1e43      	subs	r3, r0, #1
 80094d6:	42a1      	cmp	r1, r4
 80094d8:	d008      	beq.n	80094ec <memmove+0x28>
 80094da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094e2:	e7f8      	b.n	80094d6 <memmove+0x12>
 80094e4:	4402      	add	r2, r0
 80094e6:	4601      	mov	r1, r0
 80094e8:	428a      	cmp	r2, r1
 80094ea:	d100      	bne.n	80094ee <memmove+0x2a>
 80094ec:	bd10      	pop	{r4, pc}
 80094ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094f6:	e7f7      	b.n	80094e8 <memmove+0x24>

080094f8 <__malloc_lock>:
 80094f8:	4801      	ldr	r0, [pc, #4]	; (8009500 <__malloc_lock+0x8>)
 80094fa:	f000 bc11 	b.w	8009d20 <__retarget_lock_acquire_recursive>
 80094fe:	bf00      	nop
 8009500:	20000364 	.word	0x20000364

08009504 <__malloc_unlock>:
 8009504:	4801      	ldr	r0, [pc, #4]	; (800950c <__malloc_unlock+0x8>)
 8009506:	f000 bc0c 	b.w	8009d22 <__retarget_lock_release_recursive>
 800950a:	bf00      	nop
 800950c:	20000364 	.word	0x20000364

08009510 <_realloc_r>:
 8009510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009514:	4680      	mov	r8, r0
 8009516:	4614      	mov	r4, r2
 8009518:	460e      	mov	r6, r1
 800951a:	b921      	cbnz	r1, 8009526 <_realloc_r+0x16>
 800951c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009520:	4611      	mov	r1, r2
 8009522:	f7ff bd93 	b.w	800904c <_malloc_r>
 8009526:	b92a      	cbnz	r2, 8009534 <_realloc_r+0x24>
 8009528:	f7ff fd24 	bl	8008f74 <_free_r>
 800952c:	4625      	mov	r5, r4
 800952e:	4628      	mov	r0, r5
 8009530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009534:	f000 fc5c 	bl	8009df0 <_malloc_usable_size_r>
 8009538:	4284      	cmp	r4, r0
 800953a:	4607      	mov	r7, r0
 800953c:	d802      	bhi.n	8009544 <_realloc_r+0x34>
 800953e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009542:	d812      	bhi.n	800956a <_realloc_r+0x5a>
 8009544:	4621      	mov	r1, r4
 8009546:	4640      	mov	r0, r8
 8009548:	f7ff fd80 	bl	800904c <_malloc_r>
 800954c:	4605      	mov	r5, r0
 800954e:	2800      	cmp	r0, #0
 8009550:	d0ed      	beq.n	800952e <_realloc_r+0x1e>
 8009552:	42bc      	cmp	r4, r7
 8009554:	4622      	mov	r2, r4
 8009556:	4631      	mov	r1, r6
 8009558:	bf28      	it	cs
 800955a:	463a      	movcs	r2, r7
 800955c:	f7ff f824 	bl	80085a8 <memcpy>
 8009560:	4631      	mov	r1, r6
 8009562:	4640      	mov	r0, r8
 8009564:	f7ff fd06 	bl	8008f74 <_free_r>
 8009568:	e7e1      	b.n	800952e <_realloc_r+0x1e>
 800956a:	4635      	mov	r5, r6
 800956c:	e7df      	b.n	800952e <_realloc_r+0x1e>

0800956e <__sfputc_r>:
 800956e:	6893      	ldr	r3, [r2, #8]
 8009570:	3b01      	subs	r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	b410      	push	{r4}
 8009576:	6093      	str	r3, [r2, #8]
 8009578:	da08      	bge.n	800958c <__sfputc_r+0x1e>
 800957a:	6994      	ldr	r4, [r2, #24]
 800957c:	42a3      	cmp	r3, r4
 800957e:	db01      	blt.n	8009584 <__sfputc_r+0x16>
 8009580:	290a      	cmp	r1, #10
 8009582:	d103      	bne.n	800958c <__sfputc_r+0x1e>
 8009584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009588:	f000 b94a 	b.w	8009820 <__swbuf_r>
 800958c:	6813      	ldr	r3, [r2, #0]
 800958e:	1c58      	adds	r0, r3, #1
 8009590:	6010      	str	r0, [r2, #0]
 8009592:	7019      	strb	r1, [r3, #0]
 8009594:	4608      	mov	r0, r1
 8009596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800959a:	4770      	bx	lr

0800959c <__sfputs_r>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	4606      	mov	r6, r0
 80095a0:	460f      	mov	r7, r1
 80095a2:	4614      	mov	r4, r2
 80095a4:	18d5      	adds	r5, r2, r3
 80095a6:	42ac      	cmp	r4, r5
 80095a8:	d101      	bne.n	80095ae <__sfputs_r+0x12>
 80095aa:	2000      	movs	r0, #0
 80095ac:	e007      	b.n	80095be <__sfputs_r+0x22>
 80095ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b2:	463a      	mov	r2, r7
 80095b4:	4630      	mov	r0, r6
 80095b6:	f7ff ffda 	bl	800956e <__sfputc_r>
 80095ba:	1c43      	adds	r3, r0, #1
 80095bc:	d1f3      	bne.n	80095a6 <__sfputs_r+0xa>
 80095be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095c0 <_vfiprintf_r>:
 80095c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	460d      	mov	r5, r1
 80095c6:	b09d      	sub	sp, #116	; 0x74
 80095c8:	4614      	mov	r4, r2
 80095ca:	4698      	mov	r8, r3
 80095cc:	4606      	mov	r6, r0
 80095ce:	b118      	cbz	r0, 80095d8 <_vfiprintf_r+0x18>
 80095d0:	6983      	ldr	r3, [r0, #24]
 80095d2:	b90b      	cbnz	r3, 80095d8 <_vfiprintf_r+0x18>
 80095d4:	f000 fb06 	bl	8009be4 <__sinit>
 80095d8:	4b89      	ldr	r3, [pc, #548]	; (8009800 <_vfiprintf_r+0x240>)
 80095da:	429d      	cmp	r5, r3
 80095dc:	d11b      	bne.n	8009616 <_vfiprintf_r+0x56>
 80095de:	6875      	ldr	r5, [r6, #4]
 80095e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095e2:	07d9      	lsls	r1, r3, #31
 80095e4:	d405      	bmi.n	80095f2 <_vfiprintf_r+0x32>
 80095e6:	89ab      	ldrh	r3, [r5, #12]
 80095e8:	059a      	lsls	r2, r3, #22
 80095ea:	d402      	bmi.n	80095f2 <_vfiprintf_r+0x32>
 80095ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095ee:	f000 fb97 	bl	8009d20 <__retarget_lock_acquire_recursive>
 80095f2:	89ab      	ldrh	r3, [r5, #12]
 80095f4:	071b      	lsls	r3, r3, #28
 80095f6:	d501      	bpl.n	80095fc <_vfiprintf_r+0x3c>
 80095f8:	692b      	ldr	r3, [r5, #16]
 80095fa:	b9eb      	cbnz	r3, 8009638 <_vfiprintf_r+0x78>
 80095fc:	4629      	mov	r1, r5
 80095fe:	4630      	mov	r0, r6
 8009600:	f000 f960 	bl	80098c4 <__swsetup_r>
 8009604:	b1c0      	cbz	r0, 8009638 <_vfiprintf_r+0x78>
 8009606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009608:	07dc      	lsls	r4, r3, #31
 800960a:	d50e      	bpl.n	800962a <_vfiprintf_r+0x6a>
 800960c:	f04f 30ff 	mov.w	r0, #4294967295
 8009610:	b01d      	add	sp, #116	; 0x74
 8009612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009616:	4b7b      	ldr	r3, [pc, #492]	; (8009804 <_vfiprintf_r+0x244>)
 8009618:	429d      	cmp	r5, r3
 800961a:	d101      	bne.n	8009620 <_vfiprintf_r+0x60>
 800961c:	68b5      	ldr	r5, [r6, #8]
 800961e:	e7df      	b.n	80095e0 <_vfiprintf_r+0x20>
 8009620:	4b79      	ldr	r3, [pc, #484]	; (8009808 <_vfiprintf_r+0x248>)
 8009622:	429d      	cmp	r5, r3
 8009624:	bf08      	it	eq
 8009626:	68f5      	ldreq	r5, [r6, #12]
 8009628:	e7da      	b.n	80095e0 <_vfiprintf_r+0x20>
 800962a:	89ab      	ldrh	r3, [r5, #12]
 800962c:	0598      	lsls	r0, r3, #22
 800962e:	d4ed      	bmi.n	800960c <_vfiprintf_r+0x4c>
 8009630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009632:	f000 fb76 	bl	8009d22 <__retarget_lock_release_recursive>
 8009636:	e7e9      	b.n	800960c <_vfiprintf_r+0x4c>
 8009638:	2300      	movs	r3, #0
 800963a:	9309      	str	r3, [sp, #36]	; 0x24
 800963c:	2320      	movs	r3, #32
 800963e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009642:	f8cd 800c 	str.w	r8, [sp, #12]
 8009646:	2330      	movs	r3, #48	; 0x30
 8009648:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800980c <_vfiprintf_r+0x24c>
 800964c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009650:	f04f 0901 	mov.w	r9, #1
 8009654:	4623      	mov	r3, r4
 8009656:	469a      	mov	sl, r3
 8009658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800965c:	b10a      	cbz	r2, 8009662 <_vfiprintf_r+0xa2>
 800965e:	2a25      	cmp	r2, #37	; 0x25
 8009660:	d1f9      	bne.n	8009656 <_vfiprintf_r+0x96>
 8009662:	ebba 0b04 	subs.w	fp, sl, r4
 8009666:	d00b      	beq.n	8009680 <_vfiprintf_r+0xc0>
 8009668:	465b      	mov	r3, fp
 800966a:	4622      	mov	r2, r4
 800966c:	4629      	mov	r1, r5
 800966e:	4630      	mov	r0, r6
 8009670:	f7ff ff94 	bl	800959c <__sfputs_r>
 8009674:	3001      	adds	r0, #1
 8009676:	f000 80aa 	beq.w	80097ce <_vfiprintf_r+0x20e>
 800967a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800967c:	445a      	add	r2, fp
 800967e:	9209      	str	r2, [sp, #36]	; 0x24
 8009680:	f89a 3000 	ldrb.w	r3, [sl]
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 80a2 	beq.w	80097ce <_vfiprintf_r+0x20e>
 800968a:	2300      	movs	r3, #0
 800968c:	f04f 32ff 	mov.w	r2, #4294967295
 8009690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009694:	f10a 0a01 	add.w	sl, sl, #1
 8009698:	9304      	str	r3, [sp, #16]
 800969a:	9307      	str	r3, [sp, #28]
 800969c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096a0:	931a      	str	r3, [sp, #104]	; 0x68
 80096a2:	4654      	mov	r4, sl
 80096a4:	2205      	movs	r2, #5
 80096a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096aa:	4858      	ldr	r0, [pc, #352]	; (800980c <_vfiprintf_r+0x24c>)
 80096ac:	f7f6 fda0 	bl	80001f0 <memchr>
 80096b0:	9a04      	ldr	r2, [sp, #16]
 80096b2:	b9d8      	cbnz	r0, 80096ec <_vfiprintf_r+0x12c>
 80096b4:	06d1      	lsls	r1, r2, #27
 80096b6:	bf44      	itt	mi
 80096b8:	2320      	movmi	r3, #32
 80096ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096be:	0713      	lsls	r3, r2, #28
 80096c0:	bf44      	itt	mi
 80096c2:	232b      	movmi	r3, #43	; 0x2b
 80096c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c8:	f89a 3000 	ldrb.w	r3, [sl]
 80096cc:	2b2a      	cmp	r3, #42	; 0x2a
 80096ce:	d015      	beq.n	80096fc <_vfiprintf_r+0x13c>
 80096d0:	9a07      	ldr	r2, [sp, #28]
 80096d2:	4654      	mov	r4, sl
 80096d4:	2000      	movs	r0, #0
 80096d6:	f04f 0c0a 	mov.w	ip, #10
 80096da:	4621      	mov	r1, r4
 80096dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096e0:	3b30      	subs	r3, #48	; 0x30
 80096e2:	2b09      	cmp	r3, #9
 80096e4:	d94e      	bls.n	8009784 <_vfiprintf_r+0x1c4>
 80096e6:	b1b0      	cbz	r0, 8009716 <_vfiprintf_r+0x156>
 80096e8:	9207      	str	r2, [sp, #28]
 80096ea:	e014      	b.n	8009716 <_vfiprintf_r+0x156>
 80096ec:	eba0 0308 	sub.w	r3, r0, r8
 80096f0:	fa09 f303 	lsl.w	r3, r9, r3
 80096f4:	4313      	orrs	r3, r2
 80096f6:	9304      	str	r3, [sp, #16]
 80096f8:	46a2      	mov	sl, r4
 80096fa:	e7d2      	b.n	80096a2 <_vfiprintf_r+0xe2>
 80096fc:	9b03      	ldr	r3, [sp, #12]
 80096fe:	1d19      	adds	r1, r3, #4
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	9103      	str	r1, [sp, #12]
 8009704:	2b00      	cmp	r3, #0
 8009706:	bfbb      	ittet	lt
 8009708:	425b      	neglt	r3, r3
 800970a:	f042 0202 	orrlt.w	r2, r2, #2
 800970e:	9307      	strge	r3, [sp, #28]
 8009710:	9307      	strlt	r3, [sp, #28]
 8009712:	bfb8      	it	lt
 8009714:	9204      	strlt	r2, [sp, #16]
 8009716:	7823      	ldrb	r3, [r4, #0]
 8009718:	2b2e      	cmp	r3, #46	; 0x2e
 800971a:	d10c      	bne.n	8009736 <_vfiprintf_r+0x176>
 800971c:	7863      	ldrb	r3, [r4, #1]
 800971e:	2b2a      	cmp	r3, #42	; 0x2a
 8009720:	d135      	bne.n	800978e <_vfiprintf_r+0x1ce>
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	1d1a      	adds	r2, r3, #4
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	9203      	str	r2, [sp, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	bfb8      	it	lt
 800972e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009732:	3402      	adds	r4, #2
 8009734:	9305      	str	r3, [sp, #20]
 8009736:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800981c <_vfiprintf_r+0x25c>
 800973a:	7821      	ldrb	r1, [r4, #0]
 800973c:	2203      	movs	r2, #3
 800973e:	4650      	mov	r0, sl
 8009740:	f7f6 fd56 	bl	80001f0 <memchr>
 8009744:	b140      	cbz	r0, 8009758 <_vfiprintf_r+0x198>
 8009746:	2340      	movs	r3, #64	; 0x40
 8009748:	eba0 000a 	sub.w	r0, r0, sl
 800974c:	fa03 f000 	lsl.w	r0, r3, r0
 8009750:	9b04      	ldr	r3, [sp, #16]
 8009752:	4303      	orrs	r3, r0
 8009754:	3401      	adds	r4, #1
 8009756:	9304      	str	r3, [sp, #16]
 8009758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975c:	482c      	ldr	r0, [pc, #176]	; (8009810 <_vfiprintf_r+0x250>)
 800975e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009762:	2206      	movs	r2, #6
 8009764:	f7f6 fd44 	bl	80001f0 <memchr>
 8009768:	2800      	cmp	r0, #0
 800976a:	d03f      	beq.n	80097ec <_vfiprintf_r+0x22c>
 800976c:	4b29      	ldr	r3, [pc, #164]	; (8009814 <_vfiprintf_r+0x254>)
 800976e:	bb1b      	cbnz	r3, 80097b8 <_vfiprintf_r+0x1f8>
 8009770:	9b03      	ldr	r3, [sp, #12]
 8009772:	3307      	adds	r3, #7
 8009774:	f023 0307 	bic.w	r3, r3, #7
 8009778:	3308      	adds	r3, #8
 800977a:	9303      	str	r3, [sp, #12]
 800977c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977e:	443b      	add	r3, r7
 8009780:	9309      	str	r3, [sp, #36]	; 0x24
 8009782:	e767      	b.n	8009654 <_vfiprintf_r+0x94>
 8009784:	fb0c 3202 	mla	r2, ip, r2, r3
 8009788:	460c      	mov	r4, r1
 800978a:	2001      	movs	r0, #1
 800978c:	e7a5      	b.n	80096da <_vfiprintf_r+0x11a>
 800978e:	2300      	movs	r3, #0
 8009790:	3401      	adds	r4, #1
 8009792:	9305      	str	r3, [sp, #20]
 8009794:	4619      	mov	r1, r3
 8009796:	f04f 0c0a 	mov.w	ip, #10
 800979a:	4620      	mov	r0, r4
 800979c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097a0:	3a30      	subs	r2, #48	; 0x30
 80097a2:	2a09      	cmp	r2, #9
 80097a4:	d903      	bls.n	80097ae <_vfiprintf_r+0x1ee>
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d0c5      	beq.n	8009736 <_vfiprintf_r+0x176>
 80097aa:	9105      	str	r1, [sp, #20]
 80097ac:	e7c3      	b.n	8009736 <_vfiprintf_r+0x176>
 80097ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80097b2:	4604      	mov	r4, r0
 80097b4:	2301      	movs	r3, #1
 80097b6:	e7f0      	b.n	800979a <_vfiprintf_r+0x1da>
 80097b8:	ab03      	add	r3, sp, #12
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	462a      	mov	r2, r5
 80097be:	4b16      	ldr	r3, [pc, #88]	; (8009818 <_vfiprintf_r+0x258>)
 80097c0:	a904      	add	r1, sp, #16
 80097c2:	4630      	mov	r0, r6
 80097c4:	f7fc f808 	bl	80057d8 <_printf_float>
 80097c8:	4607      	mov	r7, r0
 80097ca:	1c78      	adds	r0, r7, #1
 80097cc:	d1d6      	bne.n	800977c <_vfiprintf_r+0x1bc>
 80097ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d0:	07d9      	lsls	r1, r3, #31
 80097d2:	d405      	bmi.n	80097e0 <_vfiprintf_r+0x220>
 80097d4:	89ab      	ldrh	r3, [r5, #12]
 80097d6:	059a      	lsls	r2, r3, #22
 80097d8:	d402      	bmi.n	80097e0 <_vfiprintf_r+0x220>
 80097da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097dc:	f000 faa1 	bl	8009d22 <__retarget_lock_release_recursive>
 80097e0:	89ab      	ldrh	r3, [r5, #12]
 80097e2:	065b      	lsls	r3, r3, #25
 80097e4:	f53f af12 	bmi.w	800960c <_vfiprintf_r+0x4c>
 80097e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ea:	e711      	b.n	8009610 <_vfiprintf_r+0x50>
 80097ec:	ab03      	add	r3, sp, #12
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	462a      	mov	r2, r5
 80097f2:	4b09      	ldr	r3, [pc, #36]	; (8009818 <_vfiprintf_r+0x258>)
 80097f4:	a904      	add	r1, sp, #16
 80097f6:	4630      	mov	r0, r6
 80097f8:	f7fc fa92 	bl	8005d20 <_printf_i>
 80097fc:	e7e4      	b.n	80097c8 <_vfiprintf_r+0x208>
 80097fe:	bf00      	nop
 8009800:	0800a4ac 	.word	0x0800a4ac
 8009804:	0800a4cc 	.word	0x0800a4cc
 8009808:	0800a48c 	.word	0x0800a48c
 800980c:	0800a43c 	.word	0x0800a43c
 8009810:	0800a446 	.word	0x0800a446
 8009814:	080057d9 	.word	0x080057d9
 8009818:	0800959d 	.word	0x0800959d
 800981c:	0800a442 	.word	0x0800a442

08009820 <__swbuf_r>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	460e      	mov	r6, r1
 8009824:	4614      	mov	r4, r2
 8009826:	4605      	mov	r5, r0
 8009828:	b118      	cbz	r0, 8009832 <__swbuf_r+0x12>
 800982a:	6983      	ldr	r3, [r0, #24]
 800982c:	b90b      	cbnz	r3, 8009832 <__swbuf_r+0x12>
 800982e:	f000 f9d9 	bl	8009be4 <__sinit>
 8009832:	4b21      	ldr	r3, [pc, #132]	; (80098b8 <__swbuf_r+0x98>)
 8009834:	429c      	cmp	r4, r3
 8009836:	d12b      	bne.n	8009890 <__swbuf_r+0x70>
 8009838:	686c      	ldr	r4, [r5, #4]
 800983a:	69a3      	ldr	r3, [r4, #24]
 800983c:	60a3      	str	r3, [r4, #8]
 800983e:	89a3      	ldrh	r3, [r4, #12]
 8009840:	071a      	lsls	r2, r3, #28
 8009842:	d52f      	bpl.n	80098a4 <__swbuf_r+0x84>
 8009844:	6923      	ldr	r3, [r4, #16]
 8009846:	b36b      	cbz	r3, 80098a4 <__swbuf_r+0x84>
 8009848:	6923      	ldr	r3, [r4, #16]
 800984a:	6820      	ldr	r0, [r4, #0]
 800984c:	1ac0      	subs	r0, r0, r3
 800984e:	6963      	ldr	r3, [r4, #20]
 8009850:	b2f6      	uxtb	r6, r6
 8009852:	4283      	cmp	r3, r0
 8009854:	4637      	mov	r7, r6
 8009856:	dc04      	bgt.n	8009862 <__swbuf_r+0x42>
 8009858:	4621      	mov	r1, r4
 800985a:	4628      	mov	r0, r5
 800985c:	f000 f92e 	bl	8009abc <_fflush_r>
 8009860:	bb30      	cbnz	r0, 80098b0 <__swbuf_r+0x90>
 8009862:	68a3      	ldr	r3, [r4, #8]
 8009864:	3b01      	subs	r3, #1
 8009866:	60a3      	str	r3, [r4, #8]
 8009868:	6823      	ldr	r3, [r4, #0]
 800986a:	1c5a      	adds	r2, r3, #1
 800986c:	6022      	str	r2, [r4, #0]
 800986e:	701e      	strb	r6, [r3, #0]
 8009870:	6963      	ldr	r3, [r4, #20]
 8009872:	3001      	adds	r0, #1
 8009874:	4283      	cmp	r3, r0
 8009876:	d004      	beq.n	8009882 <__swbuf_r+0x62>
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	07db      	lsls	r3, r3, #31
 800987c:	d506      	bpl.n	800988c <__swbuf_r+0x6c>
 800987e:	2e0a      	cmp	r6, #10
 8009880:	d104      	bne.n	800988c <__swbuf_r+0x6c>
 8009882:	4621      	mov	r1, r4
 8009884:	4628      	mov	r0, r5
 8009886:	f000 f919 	bl	8009abc <_fflush_r>
 800988a:	b988      	cbnz	r0, 80098b0 <__swbuf_r+0x90>
 800988c:	4638      	mov	r0, r7
 800988e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009890:	4b0a      	ldr	r3, [pc, #40]	; (80098bc <__swbuf_r+0x9c>)
 8009892:	429c      	cmp	r4, r3
 8009894:	d101      	bne.n	800989a <__swbuf_r+0x7a>
 8009896:	68ac      	ldr	r4, [r5, #8]
 8009898:	e7cf      	b.n	800983a <__swbuf_r+0x1a>
 800989a:	4b09      	ldr	r3, [pc, #36]	; (80098c0 <__swbuf_r+0xa0>)
 800989c:	429c      	cmp	r4, r3
 800989e:	bf08      	it	eq
 80098a0:	68ec      	ldreq	r4, [r5, #12]
 80098a2:	e7ca      	b.n	800983a <__swbuf_r+0x1a>
 80098a4:	4621      	mov	r1, r4
 80098a6:	4628      	mov	r0, r5
 80098a8:	f000 f80c 	bl	80098c4 <__swsetup_r>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d0cb      	beq.n	8009848 <__swbuf_r+0x28>
 80098b0:	f04f 37ff 	mov.w	r7, #4294967295
 80098b4:	e7ea      	b.n	800988c <__swbuf_r+0x6c>
 80098b6:	bf00      	nop
 80098b8:	0800a4ac 	.word	0x0800a4ac
 80098bc:	0800a4cc 	.word	0x0800a4cc
 80098c0:	0800a48c 	.word	0x0800a48c

080098c4 <__swsetup_r>:
 80098c4:	4b32      	ldr	r3, [pc, #200]	; (8009990 <__swsetup_r+0xcc>)
 80098c6:	b570      	push	{r4, r5, r6, lr}
 80098c8:	681d      	ldr	r5, [r3, #0]
 80098ca:	4606      	mov	r6, r0
 80098cc:	460c      	mov	r4, r1
 80098ce:	b125      	cbz	r5, 80098da <__swsetup_r+0x16>
 80098d0:	69ab      	ldr	r3, [r5, #24]
 80098d2:	b913      	cbnz	r3, 80098da <__swsetup_r+0x16>
 80098d4:	4628      	mov	r0, r5
 80098d6:	f000 f985 	bl	8009be4 <__sinit>
 80098da:	4b2e      	ldr	r3, [pc, #184]	; (8009994 <__swsetup_r+0xd0>)
 80098dc:	429c      	cmp	r4, r3
 80098de:	d10f      	bne.n	8009900 <__swsetup_r+0x3c>
 80098e0:	686c      	ldr	r4, [r5, #4]
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098e8:	0719      	lsls	r1, r3, #28
 80098ea:	d42c      	bmi.n	8009946 <__swsetup_r+0x82>
 80098ec:	06dd      	lsls	r5, r3, #27
 80098ee:	d411      	bmi.n	8009914 <__swsetup_r+0x50>
 80098f0:	2309      	movs	r3, #9
 80098f2:	6033      	str	r3, [r6, #0]
 80098f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098f8:	81a3      	strh	r3, [r4, #12]
 80098fa:	f04f 30ff 	mov.w	r0, #4294967295
 80098fe:	e03e      	b.n	800997e <__swsetup_r+0xba>
 8009900:	4b25      	ldr	r3, [pc, #148]	; (8009998 <__swsetup_r+0xd4>)
 8009902:	429c      	cmp	r4, r3
 8009904:	d101      	bne.n	800990a <__swsetup_r+0x46>
 8009906:	68ac      	ldr	r4, [r5, #8]
 8009908:	e7eb      	b.n	80098e2 <__swsetup_r+0x1e>
 800990a:	4b24      	ldr	r3, [pc, #144]	; (800999c <__swsetup_r+0xd8>)
 800990c:	429c      	cmp	r4, r3
 800990e:	bf08      	it	eq
 8009910:	68ec      	ldreq	r4, [r5, #12]
 8009912:	e7e6      	b.n	80098e2 <__swsetup_r+0x1e>
 8009914:	0758      	lsls	r0, r3, #29
 8009916:	d512      	bpl.n	800993e <__swsetup_r+0x7a>
 8009918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800991a:	b141      	cbz	r1, 800992e <__swsetup_r+0x6a>
 800991c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009920:	4299      	cmp	r1, r3
 8009922:	d002      	beq.n	800992a <__swsetup_r+0x66>
 8009924:	4630      	mov	r0, r6
 8009926:	f7ff fb25 	bl	8008f74 <_free_r>
 800992a:	2300      	movs	r3, #0
 800992c:	6363      	str	r3, [r4, #52]	; 0x34
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	2300      	movs	r3, #0
 8009938:	6063      	str	r3, [r4, #4]
 800993a:	6923      	ldr	r3, [r4, #16]
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	f043 0308 	orr.w	r3, r3, #8
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	6923      	ldr	r3, [r4, #16]
 8009948:	b94b      	cbnz	r3, 800995e <__swsetup_r+0x9a>
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009954:	d003      	beq.n	800995e <__swsetup_r+0x9a>
 8009956:	4621      	mov	r1, r4
 8009958:	4630      	mov	r0, r6
 800995a:	f000 fa09 	bl	8009d70 <__smakebuf_r>
 800995e:	89a0      	ldrh	r0, [r4, #12]
 8009960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009964:	f010 0301 	ands.w	r3, r0, #1
 8009968:	d00a      	beq.n	8009980 <__swsetup_r+0xbc>
 800996a:	2300      	movs	r3, #0
 800996c:	60a3      	str	r3, [r4, #8]
 800996e:	6963      	ldr	r3, [r4, #20]
 8009970:	425b      	negs	r3, r3
 8009972:	61a3      	str	r3, [r4, #24]
 8009974:	6923      	ldr	r3, [r4, #16]
 8009976:	b943      	cbnz	r3, 800998a <__swsetup_r+0xc6>
 8009978:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800997c:	d1ba      	bne.n	80098f4 <__swsetup_r+0x30>
 800997e:	bd70      	pop	{r4, r5, r6, pc}
 8009980:	0781      	lsls	r1, r0, #30
 8009982:	bf58      	it	pl
 8009984:	6963      	ldrpl	r3, [r4, #20]
 8009986:	60a3      	str	r3, [r4, #8]
 8009988:	e7f4      	b.n	8009974 <__swsetup_r+0xb0>
 800998a:	2000      	movs	r0, #0
 800998c:	e7f7      	b.n	800997e <__swsetup_r+0xba>
 800998e:	bf00      	nop
 8009990:	20000020 	.word	0x20000020
 8009994:	0800a4ac 	.word	0x0800a4ac
 8009998:	0800a4cc 	.word	0x0800a4cc
 800999c:	0800a48c 	.word	0x0800a48c

080099a0 <abort>:
 80099a0:	b508      	push	{r3, lr}
 80099a2:	2006      	movs	r0, #6
 80099a4:	f000 fa54 	bl	8009e50 <raise>
 80099a8:	2001      	movs	r0, #1
 80099aa:	f7f7 ff27 	bl	80017fc <_exit>
	...

080099b0 <__sflush_r>:
 80099b0:	898a      	ldrh	r2, [r1, #12]
 80099b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b6:	4605      	mov	r5, r0
 80099b8:	0710      	lsls	r0, r2, #28
 80099ba:	460c      	mov	r4, r1
 80099bc:	d458      	bmi.n	8009a70 <__sflush_r+0xc0>
 80099be:	684b      	ldr	r3, [r1, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dc05      	bgt.n	80099d0 <__sflush_r+0x20>
 80099c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	dc02      	bgt.n	80099d0 <__sflush_r+0x20>
 80099ca:	2000      	movs	r0, #0
 80099cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099d2:	2e00      	cmp	r6, #0
 80099d4:	d0f9      	beq.n	80099ca <__sflush_r+0x1a>
 80099d6:	2300      	movs	r3, #0
 80099d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099dc:	682f      	ldr	r7, [r5, #0]
 80099de:	602b      	str	r3, [r5, #0]
 80099e0:	d032      	beq.n	8009a48 <__sflush_r+0x98>
 80099e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	075a      	lsls	r2, r3, #29
 80099e8:	d505      	bpl.n	80099f6 <__sflush_r+0x46>
 80099ea:	6863      	ldr	r3, [r4, #4]
 80099ec:	1ac0      	subs	r0, r0, r3
 80099ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099f0:	b10b      	cbz	r3, 80099f6 <__sflush_r+0x46>
 80099f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099f4:	1ac0      	subs	r0, r0, r3
 80099f6:	2300      	movs	r3, #0
 80099f8:	4602      	mov	r2, r0
 80099fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099fc:	6a21      	ldr	r1, [r4, #32]
 80099fe:	4628      	mov	r0, r5
 8009a00:	47b0      	blx	r6
 8009a02:	1c43      	adds	r3, r0, #1
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	d106      	bne.n	8009a16 <__sflush_r+0x66>
 8009a08:	6829      	ldr	r1, [r5, #0]
 8009a0a:	291d      	cmp	r1, #29
 8009a0c:	d82c      	bhi.n	8009a68 <__sflush_r+0xb8>
 8009a0e:	4a2a      	ldr	r2, [pc, #168]	; (8009ab8 <__sflush_r+0x108>)
 8009a10:	40ca      	lsrs	r2, r1
 8009a12:	07d6      	lsls	r6, r2, #31
 8009a14:	d528      	bpl.n	8009a68 <__sflush_r+0xb8>
 8009a16:	2200      	movs	r2, #0
 8009a18:	6062      	str	r2, [r4, #4]
 8009a1a:	04d9      	lsls	r1, r3, #19
 8009a1c:	6922      	ldr	r2, [r4, #16]
 8009a1e:	6022      	str	r2, [r4, #0]
 8009a20:	d504      	bpl.n	8009a2c <__sflush_r+0x7c>
 8009a22:	1c42      	adds	r2, r0, #1
 8009a24:	d101      	bne.n	8009a2a <__sflush_r+0x7a>
 8009a26:	682b      	ldr	r3, [r5, #0]
 8009a28:	b903      	cbnz	r3, 8009a2c <__sflush_r+0x7c>
 8009a2a:	6560      	str	r0, [r4, #84]	; 0x54
 8009a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a2e:	602f      	str	r7, [r5, #0]
 8009a30:	2900      	cmp	r1, #0
 8009a32:	d0ca      	beq.n	80099ca <__sflush_r+0x1a>
 8009a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a38:	4299      	cmp	r1, r3
 8009a3a:	d002      	beq.n	8009a42 <__sflush_r+0x92>
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	f7ff fa99 	bl	8008f74 <_free_r>
 8009a42:	2000      	movs	r0, #0
 8009a44:	6360      	str	r0, [r4, #52]	; 0x34
 8009a46:	e7c1      	b.n	80099cc <__sflush_r+0x1c>
 8009a48:	6a21      	ldr	r1, [r4, #32]
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	47b0      	blx	r6
 8009a50:	1c41      	adds	r1, r0, #1
 8009a52:	d1c7      	bne.n	80099e4 <__sflush_r+0x34>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0c4      	beq.n	80099e4 <__sflush_r+0x34>
 8009a5a:	2b1d      	cmp	r3, #29
 8009a5c:	d001      	beq.n	8009a62 <__sflush_r+0xb2>
 8009a5e:	2b16      	cmp	r3, #22
 8009a60:	d101      	bne.n	8009a66 <__sflush_r+0xb6>
 8009a62:	602f      	str	r7, [r5, #0]
 8009a64:	e7b1      	b.n	80099ca <__sflush_r+0x1a>
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a6c:	81a3      	strh	r3, [r4, #12]
 8009a6e:	e7ad      	b.n	80099cc <__sflush_r+0x1c>
 8009a70:	690f      	ldr	r7, [r1, #16]
 8009a72:	2f00      	cmp	r7, #0
 8009a74:	d0a9      	beq.n	80099ca <__sflush_r+0x1a>
 8009a76:	0793      	lsls	r3, r2, #30
 8009a78:	680e      	ldr	r6, [r1, #0]
 8009a7a:	bf08      	it	eq
 8009a7c:	694b      	ldreq	r3, [r1, #20]
 8009a7e:	600f      	str	r7, [r1, #0]
 8009a80:	bf18      	it	ne
 8009a82:	2300      	movne	r3, #0
 8009a84:	eba6 0807 	sub.w	r8, r6, r7
 8009a88:	608b      	str	r3, [r1, #8]
 8009a8a:	f1b8 0f00 	cmp.w	r8, #0
 8009a8e:	dd9c      	ble.n	80099ca <__sflush_r+0x1a>
 8009a90:	6a21      	ldr	r1, [r4, #32]
 8009a92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a94:	4643      	mov	r3, r8
 8009a96:	463a      	mov	r2, r7
 8009a98:	4628      	mov	r0, r5
 8009a9a:	47b0      	blx	r6
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	dc06      	bgt.n	8009aae <__sflush_r+0xfe>
 8009aa0:	89a3      	ldrh	r3, [r4, #12]
 8009aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa6:	81a3      	strh	r3, [r4, #12]
 8009aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aac:	e78e      	b.n	80099cc <__sflush_r+0x1c>
 8009aae:	4407      	add	r7, r0
 8009ab0:	eba8 0800 	sub.w	r8, r8, r0
 8009ab4:	e7e9      	b.n	8009a8a <__sflush_r+0xda>
 8009ab6:	bf00      	nop
 8009ab8:	20400001 	.word	0x20400001

08009abc <_fflush_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	690b      	ldr	r3, [r1, #16]
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	b913      	cbnz	r3, 8009acc <_fflush_r+0x10>
 8009ac6:	2500      	movs	r5, #0
 8009ac8:	4628      	mov	r0, r5
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	b118      	cbz	r0, 8009ad6 <_fflush_r+0x1a>
 8009ace:	6983      	ldr	r3, [r0, #24]
 8009ad0:	b90b      	cbnz	r3, 8009ad6 <_fflush_r+0x1a>
 8009ad2:	f000 f887 	bl	8009be4 <__sinit>
 8009ad6:	4b14      	ldr	r3, [pc, #80]	; (8009b28 <_fflush_r+0x6c>)
 8009ad8:	429c      	cmp	r4, r3
 8009ada:	d11b      	bne.n	8009b14 <_fflush_r+0x58>
 8009adc:	686c      	ldr	r4, [r5, #4]
 8009ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d0ef      	beq.n	8009ac6 <_fflush_r+0xa>
 8009ae6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ae8:	07d0      	lsls	r0, r2, #31
 8009aea:	d404      	bmi.n	8009af6 <_fflush_r+0x3a>
 8009aec:	0599      	lsls	r1, r3, #22
 8009aee:	d402      	bmi.n	8009af6 <_fflush_r+0x3a>
 8009af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009af2:	f000 f915 	bl	8009d20 <__retarget_lock_acquire_recursive>
 8009af6:	4628      	mov	r0, r5
 8009af8:	4621      	mov	r1, r4
 8009afa:	f7ff ff59 	bl	80099b0 <__sflush_r>
 8009afe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b00:	07da      	lsls	r2, r3, #31
 8009b02:	4605      	mov	r5, r0
 8009b04:	d4e0      	bmi.n	8009ac8 <_fflush_r+0xc>
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	059b      	lsls	r3, r3, #22
 8009b0a:	d4dd      	bmi.n	8009ac8 <_fflush_r+0xc>
 8009b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b0e:	f000 f908 	bl	8009d22 <__retarget_lock_release_recursive>
 8009b12:	e7d9      	b.n	8009ac8 <_fflush_r+0xc>
 8009b14:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <_fflush_r+0x70>)
 8009b16:	429c      	cmp	r4, r3
 8009b18:	d101      	bne.n	8009b1e <_fflush_r+0x62>
 8009b1a:	68ac      	ldr	r4, [r5, #8]
 8009b1c:	e7df      	b.n	8009ade <_fflush_r+0x22>
 8009b1e:	4b04      	ldr	r3, [pc, #16]	; (8009b30 <_fflush_r+0x74>)
 8009b20:	429c      	cmp	r4, r3
 8009b22:	bf08      	it	eq
 8009b24:	68ec      	ldreq	r4, [r5, #12]
 8009b26:	e7da      	b.n	8009ade <_fflush_r+0x22>
 8009b28:	0800a4ac 	.word	0x0800a4ac
 8009b2c:	0800a4cc 	.word	0x0800a4cc
 8009b30:	0800a48c 	.word	0x0800a48c

08009b34 <std>:
 8009b34:	2300      	movs	r3, #0
 8009b36:	b510      	push	{r4, lr}
 8009b38:	4604      	mov	r4, r0
 8009b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b42:	6083      	str	r3, [r0, #8]
 8009b44:	8181      	strh	r1, [r0, #12]
 8009b46:	6643      	str	r3, [r0, #100]	; 0x64
 8009b48:	81c2      	strh	r2, [r0, #14]
 8009b4a:	6183      	str	r3, [r0, #24]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	2208      	movs	r2, #8
 8009b50:	305c      	adds	r0, #92	; 0x5c
 8009b52:	f7fb fd99 	bl	8005688 <memset>
 8009b56:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <std+0x38>)
 8009b58:	6263      	str	r3, [r4, #36]	; 0x24
 8009b5a:	4b05      	ldr	r3, [pc, #20]	; (8009b70 <std+0x3c>)
 8009b5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b5e:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <std+0x40>)
 8009b60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b62:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <std+0x44>)
 8009b64:	6224      	str	r4, [r4, #32]
 8009b66:	6323      	str	r3, [r4, #48]	; 0x30
 8009b68:	bd10      	pop	{r4, pc}
 8009b6a:	bf00      	nop
 8009b6c:	08009e89 	.word	0x08009e89
 8009b70:	08009eab 	.word	0x08009eab
 8009b74:	08009ee3 	.word	0x08009ee3
 8009b78:	08009f07 	.word	0x08009f07

08009b7c <_cleanup_r>:
 8009b7c:	4901      	ldr	r1, [pc, #4]	; (8009b84 <_cleanup_r+0x8>)
 8009b7e:	f000 b8af 	b.w	8009ce0 <_fwalk_reent>
 8009b82:	bf00      	nop
 8009b84:	08009abd 	.word	0x08009abd

08009b88 <__sfmoreglue>:
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	2268      	movs	r2, #104	; 0x68
 8009b8c:	1e4d      	subs	r5, r1, #1
 8009b8e:	4355      	muls	r5, r2
 8009b90:	460e      	mov	r6, r1
 8009b92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b96:	f7ff fa59 	bl	800904c <_malloc_r>
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	b140      	cbz	r0, 8009bb0 <__sfmoreglue+0x28>
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	e9c0 1600 	strd	r1, r6, [r0]
 8009ba4:	300c      	adds	r0, #12
 8009ba6:	60a0      	str	r0, [r4, #8]
 8009ba8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bac:	f7fb fd6c 	bl	8005688 <memset>
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}

08009bb4 <__sfp_lock_acquire>:
 8009bb4:	4801      	ldr	r0, [pc, #4]	; (8009bbc <__sfp_lock_acquire+0x8>)
 8009bb6:	f000 b8b3 	b.w	8009d20 <__retarget_lock_acquire_recursive>
 8009bba:	bf00      	nop
 8009bbc:	20000365 	.word	0x20000365

08009bc0 <__sfp_lock_release>:
 8009bc0:	4801      	ldr	r0, [pc, #4]	; (8009bc8 <__sfp_lock_release+0x8>)
 8009bc2:	f000 b8ae 	b.w	8009d22 <__retarget_lock_release_recursive>
 8009bc6:	bf00      	nop
 8009bc8:	20000365 	.word	0x20000365

08009bcc <__sinit_lock_acquire>:
 8009bcc:	4801      	ldr	r0, [pc, #4]	; (8009bd4 <__sinit_lock_acquire+0x8>)
 8009bce:	f000 b8a7 	b.w	8009d20 <__retarget_lock_acquire_recursive>
 8009bd2:	bf00      	nop
 8009bd4:	20000366 	.word	0x20000366

08009bd8 <__sinit_lock_release>:
 8009bd8:	4801      	ldr	r0, [pc, #4]	; (8009be0 <__sinit_lock_release+0x8>)
 8009bda:	f000 b8a2 	b.w	8009d22 <__retarget_lock_release_recursive>
 8009bde:	bf00      	nop
 8009be0:	20000366 	.word	0x20000366

08009be4 <__sinit>:
 8009be4:	b510      	push	{r4, lr}
 8009be6:	4604      	mov	r4, r0
 8009be8:	f7ff fff0 	bl	8009bcc <__sinit_lock_acquire>
 8009bec:	69a3      	ldr	r3, [r4, #24]
 8009bee:	b11b      	cbz	r3, 8009bf8 <__sinit+0x14>
 8009bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf4:	f7ff bff0 	b.w	8009bd8 <__sinit_lock_release>
 8009bf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bfc:	6523      	str	r3, [r4, #80]	; 0x50
 8009bfe:	4b13      	ldr	r3, [pc, #76]	; (8009c4c <__sinit+0x68>)
 8009c00:	4a13      	ldr	r2, [pc, #76]	; (8009c50 <__sinit+0x6c>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c06:	42a3      	cmp	r3, r4
 8009c08:	bf04      	itt	eq
 8009c0a:	2301      	moveq	r3, #1
 8009c0c:	61a3      	streq	r3, [r4, #24]
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f000 f820 	bl	8009c54 <__sfp>
 8009c14:	6060      	str	r0, [r4, #4]
 8009c16:	4620      	mov	r0, r4
 8009c18:	f000 f81c 	bl	8009c54 <__sfp>
 8009c1c:	60a0      	str	r0, [r4, #8]
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f000 f818 	bl	8009c54 <__sfp>
 8009c24:	2200      	movs	r2, #0
 8009c26:	60e0      	str	r0, [r4, #12]
 8009c28:	2104      	movs	r1, #4
 8009c2a:	6860      	ldr	r0, [r4, #4]
 8009c2c:	f7ff ff82 	bl	8009b34 <std>
 8009c30:	68a0      	ldr	r0, [r4, #8]
 8009c32:	2201      	movs	r2, #1
 8009c34:	2109      	movs	r1, #9
 8009c36:	f7ff ff7d 	bl	8009b34 <std>
 8009c3a:	68e0      	ldr	r0, [r4, #12]
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	2112      	movs	r1, #18
 8009c40:	f7ff ff78 	bl	8009b34 <std>
 8009c44:	2301      	movs	r3, #1
 8009c46:	61a3      	str	r3, [r4, #24]
 8009c48:	e7d2      	b.n	8009bf0 <__sinit+0xc>
 8009c4a:	bf00      	nop
 8009c4c:	0800a044 	.word	0x0800a044
 8009c50:	08009b7d 	.word	0x08009b7d

08009c54 <__sfp>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	4607      	mov	r7, r0
 8009c58:	f7ff ffac 	bl	8009bb4 <__sfp_lock_acquire>
 8009c5c:	4b1e      	ldr	r3, [pc, #120]	; (8009cd8 <__sfp+0x84>)
 8009c5e:	681e      	ldr	r6, [r3, #0]
 8009c60:	69b3      	ldr	r3, [r6, #24]
 8009c62:	b913      	cbnz	r3, 8009c6a <__sfp+0x16>
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7ff ffbd 	bl	8009be4 <__sinit>
 8009c6a:	3648      	adds	r6, #72	; 0x48
 8009c6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	d503      	bpl.n	8009c7c <__sfp+0x28>
 8009c74:	6833      	ldr	r3, [r6, #0]
 8009c76:	b30b      	cbz	r3, 8009cbc <__sfp+0x68>
 8009c78:	6836      	ldr	r6, [r6, #0]
 8009c7a:	e7f7      	b.n	8009c6c <__sfp+0x18>
 8009c7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c80:	b9d5      	cbnz	r5, 8009cb8 <__sfp+0x64>
 8009c82:	4b16      	ldr	r3, [pc, #88]	; (8009cdc <__sfp+0x88>)
 8009c84:	60e3      	str	r3, [r4, #12]
 8009c86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c8a:	6665      	str	r5, [r4, #100]	; 0x64
 8009c8c:	f000 f847 	bl	8009d1e <__retarget_lock_init_recursive>
 8009c90:	f7ff ff96 	bl	8009bc0 <__sfp_lock_release>
 8009c94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c9c:	6025      	str	r5, [r4, #0]
 8009c9e:	61a5      	str	r5, [r4, #24]
 8009ca0:	2208      	movs	r2, #8
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ca8:	f7fb fcee 	bl	8005688 <memset>
 8009cac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cb8:	3468      	adds	r4, #104	; 0x68
 8009cba:	e7d9      	b.n	8009c70 <__sfp+0x1c>
 8009cbc:	2104      	movs	r1, #4
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	f7ff ff62 	bl	8009b88 <__sfmoreglue>
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	6030      	str	r0, [r6, #0]
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d1d5      	bne.n	8009c78 <__sfp+0x24>
 8009ccc:	f7ff ff78 	bl	8009bc0 <__sfp_lock_release>
 8009cd0:	230c      	movs	r3, #12
 8009cd2:	603b      	str	r3, [r7, #0]
 8009cd4:	e7ee      	b.n	8009cb4 <__sfp+0x60>
 8009cd6:	bf00      	nop
 8009cd8:	0800a044 	.word	0x0800a044
 8009cdc:	ffff0001 	.word	0xffff0001

08009ce0 <_fwalk_reent>:
 8009ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce4:	4606      	mov	r6, r0
 8009ce6:	4688      	mov	r8, r1
 8009ce8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cec:	2700      	movs	r7, #0
 8009cee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cf2:	f1b9 0901 	subs.w	r9, r9, #1
 8009cf6:	d505      	bpl.n	8009d04 <_fwalk_reent+0x24>
 8009cf8:	6824      	ldr	r4, [r4, #0]
 8009cfa:	2c00      	cmp	r4, #0
 8009cfc:	d1f7      	bne.n	8009cee <_fwalk_reent+0xe>
 8009cfe:	4638      	mov	r0, r7
 8009d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d04:	89ab      	ldrh	r3, [r5, #12]
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d907      	bls.n	8009d1a <_fwalk_reent+0x3a>
 8009d0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	d003      	beq.n	8009d1a <_fwalk_reent+0x3a>
 8009d12:	4629      	mov	r1, r5
 8009d14:	4630      	mov	r0, r6
 8009d16:	47c0      	blx	r8
 8009d18:	4307      	orrs	r7, r0
 8009d1a:	3568      	adds	r5, #104	; 0x68
 8009d1c:	e7e9      	b.n	8009cf2 <_fwalk_reent+0x12>

08009d1e <__retarget_lock_init_recursive>:
 8009d1e:	4770      	bx	lr

08009d20 <__retarget_lock_acquire_recursive>:
 8009d20:	4770      	bx	lr

08009d22 <__retarget_lock_release_recursive>:
 8009d22:	4770      	bx	lr

08009d24 <__swhatbuf_r>:
 8009d24:	b570      	push	{r4, r5, r6, lr}
 8009d26:	460e      	mov	r6, r1
 8009d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d2c:	2900      	cmp	r1, #0
 8009d2e:	b096      	sub	sp, #88	; 0x58
 8009d30:	4614      	mov	r4, r2
 8009d32:	461d      	mov	r5, r3
 8009d34:	da08      	bge.n	8009d48 <__swhatbuf_r+0x24>
 8009d36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	602a      	str	r2, [r5, #0]
 8009d3e:	061a      	lsls	r2, r3, #24
 8009d40:	d410      	bmi.n	8009d64 <__swhatbuf_r+0x40>
 8009d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d46:	e00e      	b.n	8009d66 <__swhatbuf_r+0x42>
 8009d48:	466a      	mov	r2, sp
 8009d4a:	f000 f903 	bl	8009f54 <_fstat_r>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	dbf1      	blt.n	8009d36 <__swhatbuf_r+0x12>
 8009d52:	9a01      	ldr	r2, [sp, #4]
 8009d54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d5c:	425a      	negs	r2, r3
 8009d5e:	415a      	adcs	r2, r3
 8009d60:	602a      	str	r2, [r5, #0]
 8009d62:	e7ee      	b.n	8009d42 <__swhatbuf_r+0x1e>
 8009d64:	2340      	movs	r3, #64	; 0x40
 8009d66:	2000      	movs	r0, #0
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	b016      	add	sp, #88	; 0x58
 8009d6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d70 <__smakebuf_r>:
 8009d70:	898b      	ldrh	r3, [r1, #12]
 8009d72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d74:	079d      	lsls	r5, r3, #30
 8009d76:	4606      	mov	r6, r0
 8009d78:	460c      	mov	r4, r1
 8009d7a:	d507      	bpl.n	8009d8c <__smakebuf_r+0x1c>
 8009d7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	6123      	str	r3, [r4, #16]
 8009d84:	2301      	movs	r3, #1
 8009d86:	6163      	str	r3, [r4, #20]
 8009d88:	b002      	add	sp, #8
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	ab01      	add	r3, sp, #4
 8009d8e:	466a      	mov	r2, sp
 8009d90:	f7ff ffc8 	bl	8009d24 <__swhatbuf_r>
 8009d94:	9900      	ldr	r1, [sp, #0]
 8009d96:	4605      	mov	r5, r0
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f7ff f957 	bl	800904c <_malloc_r>
 8009d9e:	b948      	cbnz	r0, 8009db4 <__smakebuf_r+0x44>
 8009da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009da4:	059a      	lsls	r2, r3, #22
 8009da6:	d4ef      	bmi.n	8009d88 <__smakebuf_r+0x18>
 8009da8:	f023 0303 	bic.w	r3, r3, #3
 8009dac:	f043 0302 	orr.w	r3, r3, #2
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	e7e3      	b.n	8009d7c <__smakebuf_r+0xc>
 8009db4:	4b0d      	ldr	r3, [pc, #52]	; (8009dec <__smakebuf_r+0x7c>)
 8009db6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	6020      	str	r0, [r4, #0]
 8009dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dc0:	81a3      	strh	r3, [r4, #12]
 8009dc2:	9b00      	ldr	r3, [sp, #0]
 8009dc4:	6163      	str	r3, [r4, #20]
 8009dc6:	9b01      	ldr	r3, [sp, #4]
 8009dc8:	6120      	str	r0, [r4, #16]
 8009dca:	b15b      	cbz	r3, 8009de4 <__smakebuf_r+0x74>
 8009dcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	f000 f8d1 	bl	8009f78 <_isatty_r>
 8009dd6:	b128      	cbz	r0, 8009de4 <__smakebuf_r+0x74>
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	f023 0303 	bic.w	r3, r3, #3
 8009dde:	f043 0301 	orr.w	r3, r3, #1
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	89a0      	ldrh	r0, [r4, #12]
 8009de6:	4305      	orrs	r5, r0
 8009de8:	81a5      	strh	r5, [r4, #12]
 8009dea:	e7cd      	b.n	8009d88 <__smakebuf_r+0x18>
 8009dec:	08009b7d 	.word	0x08009b7d

08009df0 <_malloc_usable_size_r>:
 8009df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009df4:	1f18      	subs	r0, r3, #4
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	bfbc      	itt	lt
 8009dfa:	580b      	ldrlt	r3, [r1, r0]
 8009dfc:	18c0      	addlt	r0, r0, r3
 8009dfe:	4770      	bx	lr

08009e00 <_raise_r>:
 8009e00:	291f      	cmp	r1, #31
 8009e02:	b538      	push	{r3, r4, r5, lr}
 8009e04:	4604      	mov	r4, r0
 8009e06:	460d      	mov	r5, r1
 8009e08:	d904      	bls.n	8009e14 <_raise_r+0x14>
 8009e0a:	2316      	movs	r3, #22
 8009e0c:	6003      	str	r3, [r0, #0]
 8009e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e16:	b112      	cbz	r2, 8009e1e <_raise_r+0x1e>
 8009e18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e1c:	b94b      	cbnz	r3, 8009e32 <_raise_r+0x32>
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f000 f830 	bl	8009e84 <_getpid_r>
 8009e24:	462a      	mov	r2, r5
 8009e26:	4601      	mov	r1, r0
 8009e28:	4620      	mov	r0, r4
 8009e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e2e:	f000 b817 	b.w	8009e60 <_kill_r>
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d00a      	beq.n	8009e4c <_raise_r+0x4c>
 8009e36:	1c59      	adds	r1, r3, #1
 8009e38:	d103      	bne.n	8009e42 <_raise_r+0x42>
 8009e3a:	2316      	movs	r3, #22
 8009e3c:	6003      	str	r3, [r0, #0]
 8009e3e:	2001      	movs	r0, #1
 8009e40:	e7e7      	b.n	8009e12 <_raise_r+0x12>
 8009e42:	2400      	movs	r4, #0
 8009e44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e48:	4628      	mov	r0, r5
 8009e4a:	4798      	blx	r3
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	e7e0      	b.n	8009e12 <_raise_r+0x12>

08009e50 <raise>:
 8009e50:	4b02      	ldr	r3, [pc, #8]	; (8009e5c <raise+0xc>)
 8009e52:	4601      	mov	r1, r0
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	f7ff bfd3 	b.w	8009e00 <_raise_r>
 8009e5a:	bf00      	nop
 8009e5c:	20000020 	.word	0x20000020

08009e60 <_kill_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d07      	ldr	r5, [pc, #28]	; (8009e80 <_kill_r+0x20>)
 8009e64:	2300      	movs	r3, #0
 8009e66:	4604      	mov	r4, r0
 8009e68:	4608      	mov	r0, r1
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	602b      	str	r3, [r5, #0]
 8009e6e:	f7f7 fcb5 	bl	80017dc <_kill>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	d102      	bne.n	8009e7c <_kill_r+0x1c>
 8009e76:	682b      	ldr	r3, [r5, #0]
 8009e78:	b103      	cbz	r3, 8009e7c <_kill_r+0x1c>
 8009e7a:	6023      	str	r3, [r4, #0]
 8009e7c:	bd38      	pop	{r3, r4, r5, pc}
 8009e7e:	bf00      	nop
 8009e80:	20000360 	.word	0x20000360

08009e84 <_getpid_r>:
 8009e84:	f7f7 bca2 	b.w	80017cc <_getpid>

08009e88 <__sread>:
 8009e88:	b510      	push	{r4, lr}
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e90:	f000 f894 	bl	8009fbc <_read_r>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	bfab      	itete	ge
 8009e98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e9c:	181b      	addge	r3, r3, r0
 8009e9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ea2:	bfac      	ite	ge
 8009ea4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ea6:	81a3      	strhlt	r3, [r4, #12]
 8009ea8:	bd10      	pop	{r4, pc}

08009eaa <__swrite>:
 8009eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eae:	461f      	mov	r7, r3
 8009eb0:	898b      	ldrh	r3, [r1, #12]
 8009eb2:	05db      	lsls	r3, r3, #23
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	4616      	mov	r6, r2
 8009eba:	d505      	bpl.n	8009ec8 <__swrite+0x1e>
 8009ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f000 f868 	bl	8009f98 <_lseek_r>
 8009ec8:	89a3      	ldrh	r3, [r4, #12]
 8009eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ed2:	81a3      	strh	r3, [r4, #12]
 8009ed4:	4632      	mov	r2, r6
 8009ed6:	463b      	mov	r3, r7
 8009ed8:	4628      	mov	r0, r5
 8009eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ede:	f000 b817 	b.w	8009f10 <_write_r>

08009ee2 <__sseek>:
 8009ee2:	b510      	push	{r4, lr}
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eea:	f000 f855 	bl	8009f98 <_lseek_r>
 8009eee:	1c43      	adds	r3, r0, #1
 8009ef0:	89a3      	ldrh	r3, [r4, #12]
 8009ef2:	bf15      	itete	ne
 8009ef4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009efa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009efe:	81a3      	strheq	r3, [r4, #12]
 8009f00:	bf18      	it	ne
 8009f02:	81a3      	strhne	r3, [r4, #12]
 8009f04:	bd10      	pop	{r4, pc}

08009f06 <__sclose>:
 8009f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f0a:	f000 b813 	b.w	8009f34 <_close_r>
	...

08009f10 <_write_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4d07      	ldr	r5, [pc, #28]	; (8009f30 <_write_r+0x20>)
 8009f14:	4604      	mov	r4, r0
 8009f16:	4608      	mov	r0, r1
 8009f18:	4611      	mov	r1, r2
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	602a      	str	r2, [r5, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	f7f7 fc93 	bl	800184a <_write>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d102      	bne.n	8009f2e <_write_r+0x1e>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	b103      	cbz	r3, 8009f2e <_write_r+0x1e>
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	20000360 	.word	0x20000360

08009f34 <_close_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d06      	ldr	r5, [pc, #24]	; (8009f50 <_close_r+0x1c>)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	602b      	str	r3, [r5, #0]
 8009f40:	f7f7 fc9f 	bl	8001882 <_close>
 8009f44:	1c43      	adds	r3, r0, #1
 8009f46:	d102      	bne.n	8009f4e <_close_r+0x1a>
 8009f48:	682b      	ldr	r3, [r5, #0]
 8009f4a:	b103      	cbz	r3, 8009f4e <_close_r+0x1a>
 8009f4c:	6023      	str	r3, [r4, #0]
 8009f4e:	bd38      	pop	{r3, r4, r5, pc}
 8009f50:	20000360 	.word	0x20000360

08009f54 <_fstat_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	4d07      	ldr	r5, [pc, #28]	; (8009f74 <_fstat_r+0x20>)
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	4608      	mov	r0, r1
 8009f5e:	4611      	mov	r1, r2
 8009f60:	602b      	str	r3, [r5, #0]
 8009f62:	f7f7 fc9a 	bl	800189a <_fstat>
 8009f66:	1c43      	adds	r3, r0, #1
 8009f68:	d102      	bne.n	8009f70 <_fstat_r+0x1c>
 8009f6a:	682b      	ldr	r3, [r5, #0]
 8009f6c:	b103      	cbz	r3, 8009f70 <_fstat_r+0x1c>
 8009f6e:	6023      	str	r3, [r4, #0]
 8009f70:	bd38      	pop	{r3, r4, r5, pc}
 8009f72:	bf00      	nop
 8009f74:	20000360 	.word	0x20000360

08009f78 <_isatty_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4d06      	ldr	r5, [pc, #24]	; (8009f94 <_isatty_r+0x1c>)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4608      	mov	r0, r1
 8009f82:	602b      	str	r3, [r5, #0]
 8009f84:	f7f7 fc99 	bl	80018ba <_isatty>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d102      	bne.n	8009f92 <_isatty_r+0x1a>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	b103      	cbz	r3, 8009f92 <_isatty_r+0x1a>
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	20000360 	.word	0x20000360

08009f98 <_lseek_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	4d07      	ldr	r5, [pc, #28]	; (8009fb8 <_lseek_r+0x20>)
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	4608      	mov	r0, r1
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	602a      	str	r2, [r5, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	f7f7 fc92 	bl	80018d0 <_lseek>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d102      	bne.n	8009fb6 <_lseek_r+0x1e>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	b103      	cbz	r3, 8009fb6 <_lseek_r+0x1e>
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	20000360 	.word	0x20000360

08009fbc <_read_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4d07      	ldr	r5, [pc, #28]	; (8009fdc <_read_r+0x20>)
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	602a      	str	r2, [r5, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f7f7 fc20 	bl	8001810 <_read>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_read_r+0x1e>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_read_r+0x1e>
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	20000360 	.word	0x20000360

08009fe0 <_init>:
 8009fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe2:	bf00      	nop
 8009fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fe6:	bc08      	pop	{r3}
 8009fe8:	469e      	mov	lr, r3
 8009fea:	4770      	bx	lr

08009fec <_fini>:
 8009fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fee:	bf00      	nop
 8009ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ff2:	bc08      	pop	{r3}
 8009ff4:	469e      	mov	lr, r3
 8009ff6:	4770      	bx	lr
