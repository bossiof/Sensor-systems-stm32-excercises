
hw_7B_I2C_LIS2DE_ALL_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800b850  0800b850  0001b850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd44  0800bd44  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd44  0800bd44  0001bd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd4c  0800bd4c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd4c  0800bd4c  0001bd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd50  0800bd50  0001bd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800bd54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200001f0  0800bf44  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  0800bf44  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f60  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c3  00000000  00000000  00031180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00033248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  000341f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017409  00000000  00000000  000350f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011df4  00000000  00000000  0004c501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009132e  00000000  00000000  0005e2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005960  00000000  00000000  000ef674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b838 	.word	0x0800b838

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800b838 	.word	0x0800b838

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]

	if (htim == &htim10) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a0c      	ldr	r2, [pc, #48]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d111      	bne.n	800103c <HAL_TIM_PeriodElapsedCallback+0x34>

		HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADDRESS, &LIS2DE_X, 1, 50);
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b299      	uxth	r1, r3
 800101e:	2332      	movs	r3, #50	; 0x32
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	4a09      	ldr	r2, [pc, #36]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001026:	480a      	ldr	r0, [pc, #40]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001028:	f001 fd9e 	bl	8002b68 <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive_DMA(&hi2c1, LIS2DE_ADDRESS, LIS2DE_BUF, LIS2DE_BUF_SIZE);
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b299      	uxth	r1, r3
 8001032:	2305      	movs	r3, #5
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001038:	f001 fe94 	bl	8002d64 <HAL_I2C_Master_Receive_DMA>

	}

}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200002c0 	.word	0x200002c0
 8001048:	20000000 	.word	0x20000000
 800104c:	2000000e 	.word	0x2000000e
 8001050:	2000020c 	.word	0x2000020c
 8001054:	200003ac 	.word	0x200003ac

08001058 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001058:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800105c:	b09c      	sub	sp, #112	; 0x70
 800105e:	af06      	add	r7, sp, #24
 8001060:	6078      	str	r0, [r7, #4]

	int8_t accelerometer_x_raw = LIS2DE_BUF[0];
 8001062:	4b37      	ldr	r3, [pc, #220]	; (8001140 <HAL_I2C_MasterRxCpltCallback+0xe8>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	int8_t accelerometer_y_raw = LIS2DE_BUF[2];
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <HAL_I2C_MasterRxCpltCallback+0xe8>)
 800106c:	789b      	ldrb	r3, [r3, #2]
 800106e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	int8_t accelerometer_z_raw = LIS2DE_BUF[4];
 8001072:	4b33      	ldr	r3, [pc, #204]	; (8001140 <HAL_I2C_MasterRxCpltCallback+0xe8>)
 8001074:	791b      	ldrb	r3, [r3, #4]
 8001076:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	float accelerometer_x = accelerometer_x_raw / 64.0;
 800107a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa58 	bl	8000534 <__aeabi_i2d>
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <HAL_I2C_MasterRxCpltCallback+0xec>)
 800108a:	f7ff fbe7 	bl	800085c <__aeabi_ddiv>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f7ff fdaf 	bl	8000bf8 <__aeabi_d2f>
 800109a:	4603      	mov	r3, r0
 800109c:	653b      	str	r3, [r7, #80]	; 0x50
	float accelerometer_y = accelerometer_y_raw / 64.0;
 800109e:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa46 	bl	8000534 <__aeabi_i2d>
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <HAL_I2C_MasterRxCpltCallback+0xec>)
 80010ae:	f7ff fbd5 	bl	800085c <__aeabi_ddiv>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fd9d 	bl	8000bf8 <__aeabi_d2f>
 80010be:	4603      	mov	r3, r0
 80010c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	float accelerometer_z = accelerometer_z_raw / 64.0;
 80010c2:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa34 	bl	8000534 <__aeabi_i2d>
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_I2C_MasterRxCpltCallback+0xec>)
 80010d2:	f7ff fbc3 	bl	800085c <__aeabi_ddiv>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fd8b 	bl	8000bf8 <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	64bb      	str	r3, [r7, #72]	; 0x48

	char string[64];

	snprintf(string, sizeof(string), "-> x: %+.2f g | y: %+.2f g | z: %+.2f g\r\n", accelerometer_x, accelerometer_y, accelerometer_z);
 80010e6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80010e8:	f7ff fa36 	bl	8000558 <__aeabi_f2d>
 80010ec:	4604      	mov	r4, r0
 80010ee:	460d      	mov	r5, r1
 80010f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80010f2:	f7ff fa31 	bl	8000558 <__aeabi_f2d>
 80010f6:	4680      	mov	r8, r0
 80010f8:	4689      	mov	r9, r1
 80010fa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80010fc:	f7ff fa2c 	bl	8000558 <__aeabi_f2d>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	f107 0008 	add.w	r0, r7, #8
 8001108:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800110c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001110:	e9cd 4500 	strd	r4, r5, [sp]
 8001114:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <HAL_I2C_MasterRxCpltCallback+0xf0>)
 8001116:	2140      	movs	r1, #64	; 0x40
 8001118:	f006 fd6a 	bl	8007bf0 <sniprintf>

	HAL_UART_Transmit_DMA(&huart2, (uint8_t *)string, strlen(string));
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f85d 	bl	80001e0 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	b29a      	uxth	r2, r3
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4619      	mov	r1, r3
 8001130:	4806      	ldr	r0, [pc, #24]	; (800114c <HAL_I2C_MasterRxCpltCallback+0xf4>)
 8001132:	f004 fe8f 	bl	8005e54 <HAL_UART_Transmit_DMA>

}
 8001136:	bf00      	nop
 8001138:	3758      	adds	r7, #88	; 0x58
 800113a:	46bd      	mov	sp, r7
 800113c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001140:	200003ac 	.word	0x200003ac
 8001144:	40500000 	.word	0x40500000
 8001148:	0800b850 	.word	0x0800b850
 800114c:	20000308 	.word	0x20000308

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f000 fc85 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115a:	f000 f839 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115e:	f000 f947 	bl	80013f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001162:	f000 f91d 	bl	80013a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001166:	f000 f8f1 	bl	800134c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800116a:	f000 f89d 	bl	80012a8 <MX_I2C1_Init>
  MX_TIM10_Init();
 800116e:	f000 f8c9 	bl	8001304 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADDRESS, LIS2DE_CTRL_1, sizeof(LIS2DE_CTRL_1), 50);
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <main+0x68>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b299      	uxth	r1, r3
 8001178:	2332      	movs	r3, #50	; 0x32
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2302      	movs	r3, #2
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <main+0x6c>)
 8001180:	480f      	ldr	r0, [pc, #60]	; (80011c0 <main+0x70>)
 8001182:	f001 fcf1 	bl	8002b68 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADDRESS, LIS2DE_CTRL_2, sizeof(LIS2DE_CTRL_2), 50);
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <main+0x68>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b299      	uxth	r1, r3
 800118c:	2332      	movs	r3, #50	; 0x32
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2302      	movs	r3, #2
 8001192:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <main+0x74>)
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <main+0x70>)
 8001196:	f001 fce7 	bl	8002b68 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, LIS2DE_ADDRESS, LIS2DE_CTRL_4, sizeof(LIS2DE_CTRL_4), 50);
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <main+0x68>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b299      	uxth	r1, r3
 80011a0:	2332      	movs	r3, #50	; 0x32
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2302      	movs	r3, #2
 80011a6:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <main+0x78>)
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <main+0x70>)
 80011aa:	f001 fcdd 	bl	8002b68 <HAL_I2C_Master_Transmit>

  HAL_TIM_Base_Start_IT(&htim10);
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <main+0x7c>)
 80011b0:	f004 fbdc 	bl	800596c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <main+0x64>
 80011b6:	bf00      	nop
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004
 80011c0:	2000020c 	.word	0x2000020c
 80011c4:	20000008 	.word	0x20000008
 80011c8:	2000000c 	.word	0x2000000c
 80011cc:	200002c0 	.word	0x200002c0

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b094      	sub	sp, #80	; 0x50
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	2230      	movs	r2, #48	; 0x30
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f005 fe7e 	bl	8006ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <SystemClock_Config+0xd0>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	4a28      	ldr	r2, [pc, #160]	; (80012a0 <SystemClock_Config+0xd0>)
 80011fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001202:	6413      	str	r3, [r2, #64]	; 0x40
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <SystemClock_Config+0xd0>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <SystemClock_Config+0xd4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800121c:	4a21      	ldr	r2, [pc, #132]	; (80012a4 <SystemClock_Config+0xd4>)
 800121e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <SystemClock_Config+0xd4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001230:	2302      	movs	r3, #2
 8001232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001234:	2301      	movs	r3, #1
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001238:	2310      	movs	r3, #16
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123c:	2302      	movs	r3, #2
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001240:	2300      	movs	r3, #0
 8001242:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001244:	2310      	movs	r3, #16
 8001246:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001248:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800124c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800124e:	2304      	movs	r3, #4
 8001250:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001252:	2307      	movs	r3, #7
 8001254:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fe9e 	bl	8004f9c <HAL_RCC_OscConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001266:	f000 f931 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126a:	230f      	movs	r3, #15
 800126c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126e:	2302      	movs	r3, #2
 8001270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2102      	movs	r1, #2
 8001286:	4618      	mov	r0, r3
 8001288:	f004 f900 	bl	800548c <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001292:	f000 f91b 	bl	80014cc <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3750      	adds	r7, #80	; 0x50
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40007000 	.word	0x40007000

080012a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012ae:	4a13      	ldr	r2, [pc, #76]	; (80012fc <MX_I2C1_Init+0x54>)
 80012b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <MX_I2C1_Init+0x58>)
 80012b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_I2C1_Init+0x50>)
 80012e6:	f001 fafb 	bl	80028e0 <HAL_I2C_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f0:	f000 f8ec 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000020c 	.word	0x2000020c
 80012fc:	40005400 	.word	0x40005400
 8001300:	000186a0 	.word	0x000186a0

08001304 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_TIM10_Init+0x40>)
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <MX_TIM10_Init+0x44>)
 800130c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <MX_TIM10_Init+0x40>)
 8001310:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001314:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <MX_TIM10_Init+0x40>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_TIM10_Init+0x40>)
 800131e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001322:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <MX_TIM10_Init+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_TIM10_Init+0x40>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_TIM10_Init+0x40>)
 8001332:	f004 facb 	bl	80058cc <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800133c:	f000 f8c6 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200002c0 	.word	0x200002c0
 8001348:	40014400 	.word	0x40014400

0800134c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_USART2_UART_Init+0x50>)
 8001354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_USART2_UART_Init+0x4c>)
 8001384:	f004 fd18 	bl	8005db8 <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800138e:	f000 f89d 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000308 	.word	0x20000308
 800139c:	40004400 	.word	0x40004400

080013a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_DMA_Init+0x4c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <MX_DMA_Init+0x4c>)
 80013b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MX_DMA_Init+0x4c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	200b      	movs	r0, #11
 80013c8:	f000 fc99 	bl	8001cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013cc:	200b      	movs	r0, #11
 80013ce:	f000 fcb2 	bl	8001d36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	2011      	movs	r0, #17
 80013d8:	f000 fc91 	bl	8001cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013dc:	2011      	movs	r0, #17
 80013de:	f000 fcaa 	bl	8001d36 <HAL_NVIC_EnableIRQ>

}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a2c      	ldr	r2, [pc, #176]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800142c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2120      	movs	r1, #32
 800147a:	4812      	ldr	r0, [pc, #72]	; (80014c4 <MX_GPIO_Init+0xd4>)
 800147c:	f001 fa16 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001486:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	480c      	ldr	r0, [pc, #48]	; (80014c8 <MX_GPIO_Init+0xd8>)
 8001498:	f001 f884 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800149c:	2320      	movs	r3, #32
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_GPIO_Init+0xd4>)
 80014b4:	f001 f876 	bl	80025a4 <HAL_GPIO_Init>

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	; 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020800 	.word	0x40020800

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>
	...

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_MspInit+0x4c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_MspInit+0x4c>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_MspInit+0x4c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_MspInit+0x4c>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_MspInit+0x4c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001516:	2007      	movs	r0, #7
 8001518:	f000 fbe6 	bl	8001ce8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a39      	ldr	r2, [pc, #228]	; (800162c <HAL_I2C_MspInit+0x104>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d16b      	bne.n	8001622 <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <HAL_I2C_MspInit+0x108>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a37      	ldr	r2, [pc, #220]	; (8001630 <HAL_I2C_MspInit+0x108>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b35      	ldr	r3, [pc, #212]	; (8001630 <HAL_I2C_MspInit+0x108>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001566:	f44f 7340 	mov.w	r3, #768	; 0x300
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156c:	2312      	movs	r3, #18
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001578:	2304      	movs	r3, #4
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	482c      	ldr	r0, [pc, #176]	; (8001634 <HAL_I2C_MspInit+0x10c>)
 8001584:	f001 f80e 	bl	80025a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <HAL_I2C_MspInit+0x108>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	4a27      	ldr	r2, [pc, #156]	; (8001630 <HAL_I2C_MspInit+0x108>)
 8001592:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
 8001598:	4b25      	ldr	r3, [pc, #148]	; (8001630 <HAL_I2C_MspInit+0x108>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80015a4:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_I2C_MspInit+0x110>)
 80015a6:	4a25      	ldr	r2, [pc, #148]	; (800163c <HAL_I2C_MspInit+0x114>)
 80015a8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015aa:	4b23      	ldr	r3, [pc, #140]	; (8001638 <HAL_I2C_MspInit+0x110>)
 80015ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015b0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <HAL_I2C_MspInit+0x110>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <HAL_I2C_MspInit+0x110>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015be:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <HAL_I2C_MspInit+0x110>)
 80015c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <HAL_I2C_MspInit+0x110>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_I2C_MspInit+0x110>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_I2C_MspInit+0x110>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <HAL_I2C_MspInit+0x110>)
 80015da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015de:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_I2C_MspInit+0x110>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80015e6:	4814      	ldr	r0, [pc, #80]	; (8001638 <HAL_I2C_MspInit+0x110>)
 80015e8:	f000 fbc0 	bl	8001d6c <HAL_DMA_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80015f2:	f7ff ff6b 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_I2C_MspInit+0x110>)
 80015fa:	639a      	str	r2, [r3, #56]	; 0x38
 80015fc:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <HAL_I2C_MspInit+0x110>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	201f      	movs	r0, #31
 8001608:	f000 fb79 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800160c:	201f      	movs	r0, #31
 800160e:	f000 fb92 	bl	8001d36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2020      	movs	r0, #32
 8001618:	f000 fb71 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800161c:	2020      	movs	r0, #32
 800161e:	f000 fb8a 	bl	8001d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40005400 	.word	0x40005400
 8001630:	40023800 	.word	0x40023800
 8001634:	40020400 	.word	0x40020400
 8001638:	20000260 	.word	0x20000260
 800163c:	40026010 	.word	0x40026010

08001640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <HAL_TIM_Base_MspInit+0x48>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d115      	bne.n	800167e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_TIM_Base_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a0c      	ldr	r2, [pc, #48]	; (800168c <HAL_TIM_Base_MspInit+0x4c>)
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_TIM_Base_MspInit+0x4c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	2019      	movs	r0, #25
 8001674:	f000 fb43 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001678:	2019      	movs	r0, #25
 800167a:	f000 fb5c 	bl	8001d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40014400 	.word	0x40014400
 800168c:	40023800 	.word	0x40023800

08001690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a34      	ldr	r2, [pc, #208]	; (8001780 <HAL_UART_MspInit+0xf0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d162      	bne.n	8001778 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b33      	ldr	r3, [pc, #204]	; (8001784 <HAL_UART_MspInit+0xf4>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a32      	ldr	r2, [pc, #200]	; (8001784 <HAL_UART_MspInit+0xf4>)
 80016bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b30      	ldr	r3, [pc, #192]	; (8001784 <HAL_UART_MspInit+0xf4>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <HAL_UART_MspInit+0xf4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a2b      	ldr	r2, [pc, #172]	; (8001784 <HAL_UART_MspInit+0xf4>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <HAL_UART_MspInit+0xf4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ea:	230c      	movs	r3, #12
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fa:	2307      	movs	r3, #7
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4820      	ldr	r0, [pc, #128]	; (8001788 <HAL_UART_MspInit+0xf8>)
 8001706:	f000 ff4d 	bl	80025a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_UART_MspInit+0xfc>)
 800170c:	4a20      	ldr	r2, [pc, #128]	; (8001790 <HAL_UART_MspInit+0x100>)
 800170e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001710:	4b1e      	ldr	r3, [pc, #120]	; (800178c <HAL_UART_MspInit+0xfc>)
 8001712:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001716:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001718:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_UART_MspInit+0xfc>)
 800171a:	2240      	movs	r2, #64	; 0x40
 800171c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_UART_MspInit+0xfc>)
 8001720:	2200      	movs	r2, #0
 8001722:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_UART_MspInit+0xfc>)
 8001726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_UART_MspInit+0xfc>)
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_UART_MspInit+0xfc>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_UART_MspInit+0xfc>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <HAL_UART_MspInit+0xfc>)
 8001740:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001744:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_UART_MspInit+0xfc>)
 8001748:	2200      	movs	r2, #0
 800174a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800174c:	480f      	ldr	r0, [pc, #60]	; (800178c <HAL_UART_MspInit+0xfc>)
 800174e:	f000 fb0d 	bl	8001d6c <HAL_DMA_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001758:	f7ff feb8 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <HAL_UART_MspInit+0xfc>)
 8001760:	635a      	str	r2, [r3, #52]	; 0x34
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_UART_MspInit+0xfc>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	2026      	movs	r0, #38	; 0x26
 800176e:	f000 fac6 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001772:	2026      	movs	r0, #38	; 0x26
 8001774:	f000 fadf 	bl	8001d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	; 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40004400 	.word	0x40004400
 8001784:	40023800 	.word	0x40023800
 8001788:	40020000 	.word	0x40020000
 800178c:	2000034c 	.word	0x2000034c
 8001790:	400260a0 	.word	0x400260a0

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e0:	f000 f992 	bl	8001b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <DMA1_Stream0_IRQHandler+0x10>)
 80017ee:	f000 fc55 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000260 	.word	0x20000260

080017fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <DMA1_Stream6_IRQHandler+0x10>)
 8001802:	f000 fc4b 	bl	800209c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000034c 	.word	0x2000034c

08001810 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001816:	f004 f90b 	bl	8005a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200002c0 	.word	0x200002c0

08001824 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <I2C1_EV_IRQHandler+0x10>)
 800182a:	f001 fbcb 	bl	8002fc4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000020c 	.word	0x2000020c

08001838 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <I2C1_ER_IRQHandler+0x10>)
 800183e:	f001 fd32 	bl	80032a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000020c 	.word	0x2000020c

0800184c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <USART2_IRQHandler+0x10>)
 8001852:	f004 fb7d 	bl	8005f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000308 	.word	0x20000308

08001860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	return 1;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_kill>:

int _kill(int pid, int sig)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800187a:	f005 fb07 	bl	8006e8c <__errno>
 800187e:	4603      	mov	r3, r0
 8001880:	2216      	movs	r2, #22
 8001882:	601a      	str	r2, [r3, #0]
	return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_exit>:

void _exit (int status)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffe7 	bl	8001870 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018a2:	e7fe      	b.n	80018a2 <_exit+0x12>

080018a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e00a      	b.n	80018cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018b6:	f3af 8000 	nop.w
 80018ba:	4601      	mov	r1, r0
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60ba      	str	r2, [r7, #8]
 80018c2:	b2ca      	uxtb	r2, r1
 80018c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf0      	blt.n	80018b6 <_read+0x12>
	}

return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e009      	b.n	8001904 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbf1      	blt.n	80018f0 <_write+0x12>
	}
	return len;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_close>:

int _close(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
	return -1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193e:	605a      	str	r2, [r3, #4]
	return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_isatty>:

int _isatty(int file)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
	return 1;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
	return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001988:	4a14      	ldr	r2, [pc, #80]	; (80019dc <_sbrk+0x5c>)
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <_sbrk+0x60>)
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <_sbrk+0x64>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <_sbrk+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d207      	bcs.n	80019c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b0:	f005 fa6c 	bl	8006e8c <__errno>
 80019b4:	4603      	mov	r3, r0
 80019b6:	220c      	movs	r2, #12
 80019b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	e009      	b.n	80019d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <_sbrk+0x64>)
 80019d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20018000 	.word	0x20018000
 80019e0:	00000400 	.word	0x00000400
 80019e4:	200003b4 	.word	0x200003b4
 80019e8:	200003d0 	.word	0x200003d0

080019ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <SystemInit+0x20>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <SystemInit+0x20>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a16:	490e      	ldr	r1, [pc, #56]	; (8001a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a18:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a2c:	4c0b      	ldr	r4, [pc, #44]	; (8001a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a3a:	f7ff ffd7 	bl	80019ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f005 fa2b 	bl	8006e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a42:	f7ff fb85 	bl	8001150 <main>
  bx  lr    
 8001a46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a50:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001a54:	0800bd54 	.word	0x0800bd54
  ldr r2, =_sbss
 8001a58:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001a5c:	200003cc 	.word	0x200003cc

08001a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_Init+0x40>)
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_Init+0x40>)
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_Init+0x40>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f92b 	bl	8001ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f000 f808 	bl	8001aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff fd1e 	bl	80014d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x54>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_InitTick+0x58>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f943 	bl	8001d52 <HAL_SYSTICK_Config>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00e      	b.n	8001af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d80a      	bhi.n	8001af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f000 f90b 	bl	8001cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae8:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <HAL_InitTick+0x5c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000010 	.word	0x20000010
 8001b00:	20000018 	.word	0x20000018
 8001b04:	20000014 	.word	0x20000014

08001b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x20>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x24>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <HAL_IncTick+0x24>)
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000018 	.word	0x20000018
 8001b2c:	200003b8 	.word	0x200003b8

08001b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return uwTick;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_GetTick+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	200003b8 	.word	0x200003b8

08001b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 0307 	and.w	r3, r3, #7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db0b      	blt.n	8001bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	f003 021f 	and.w	r2, r3, #31
 8001bc4:	4907      	ldr	r1, [pc, #28]	; (8001be4 <__NVIC_EnableIRQ+0x38>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2001      	movs	r0, #1
 8001bce:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	490c      	ldr	r1, [pc, #48]	; (8001c34 <__NVIC_SetPriority+0x4c>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4908      	ldr	r1, [pc, #32]	; (8001c38 <__NVIC_SetPriority+0x50>)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	bf28      	it	cs
 8001c5a:	2304      	movcs	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b03      	subs	r3, #3
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	4313      	orrs	r3, r2
         );
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	; 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb4:	d301      	bcc.n	8001cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00f      	b.n	8001cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <SysTick_Config+0x40>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f7ff ff8e 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <SysTick_Config+0x40>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd2:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <SysTick_Config+0x40>)
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	e000e010 	.word	0xe000e010

08001ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff29 	bl	8001b48 <__NVIC_SetPriorityGrouping>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d10:	f7ff ff3e 	bl	8001b90 <__NVIC_GetPriorityGrouping>
 8001d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	6978      	ldr	r0, [r7, #20]
 8001d1c:	f7ff ff8e 	bl	8001c3c <NVIC_EncodePriority>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff5d 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff31 	bl	8001bac <__NVIC_EnableIRQ>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ffa2 	bl	8001ca4 <SysTick_Config>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff feda 	bl	8001b30 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e099      	b.n	8001ebc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da8:	e00f      	b.n	8001dca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001daa:	f7ff fec1 	bl	8001b30 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d908      	bls.n	8001dca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e078      	b.n	8001ebc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1e8      	bne.n	8001daa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_DMA_Init+0x158>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d107      	bne.n	8001e34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f023 0307 	bic.w	r3, r3, #7
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d117      	bne.n	8001e8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00e      	beq.n	8001e8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fb1b 	bl	80024ac <DMA_CheckFifoParam>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2240      	movs	r2, #64	; 0x40
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e016      	b.n	8001ebc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fad2 	bl	8002440 <DMA_CalcBaseAndBitshift>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	223f      	movs	r2, #63	; 0x3f
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	f010803f 	.word	0xf010803f

08001ec8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_DMA_Start_IT+0x26>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e040      	b.n	8001f70 <HAL_DMA_Start_IT+0xa8>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d12f      	bne.n	8001f62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2202      	movs	r2, #2
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 fa64 	bl	80023e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	223f      	movs	r2, #63	; 0x3f
 8001f22:	409a      	lsls	r2, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0216 	orr.w	r2, r2, #22
 8001f36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0208 	orr.w	r2, r2, #8
 8001f4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e005      	b.n	8001f6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f86:	f7ff fdd3 	bl	8001b30 <HAL_GetTick>
 8001f8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d008      	beq.n	8001faa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e052      	b.n	8002050 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0216 	bic.w	r2, r2, #22
 8001fb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <HAL_DMA_Abort+0x62>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0208 	bic.w	r2, r2, #8
 8001fe8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffa:	e013      	b.n	8002024 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ffc:	f7ff fd98 	bl	8001b30 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b05      	cmp	r3, #5
 8002008:	d90c      	bls.n	8002024 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2203      	movs	r2, #3
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e015      	b.n	8002050 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e4      	bne.n	8001ffc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	223f      	movs	r2, #63	; 0x3f
 8002038:	409a      	lsls	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d004      	beq.n	8002076 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e00c      	b.n	8002090 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2205      	movs	r2, #5
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020a8:	4b8e      	ldr	r3, [pc, #568]	; (80022e4 <HAL_DMA_IRQHandler+0x248>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a8e      	ldr	r2, [pc, #568]	; (80022e8 <HAL_DMA_IRQHandler+0x24c>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0a9b      	lsrs	r3, r3, #10
 80020b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	2208      	movs	r2, #8
 80020c8:	409a      	lsls	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d01a      	beq.n	8002108 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0204 	bic.w	r2, r2, #4
 80020ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	2208      	movs	r2, #8
 80020f6:	409a      	lsls	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2201      	movs	r2, #1
 800210e:	409a      	lsls	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d012      	beq.n	800213e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	2201      	movs	r2, #1
 800212c:	409a      	lsls	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	f043 0202 	orr.w	r2, r3, #2
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2204      	movs	r2, #4
 8002144:	409a      	lsls	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d012      	beq.n	8002174 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00b      	beq.n	8002174 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	2204      	movs	r2, #4
 8002162:	409a      	lsls	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	f043 0204 	orr.w	r2, r3, #4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	2210      	movs	r2, #16
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d043      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d03c      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	2210      	movs	r2, #16
 8002198:	409a      	lsls	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d018      	beq.n	80021de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d108      	bne.n	80021cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d024      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
 80021ca:	e01f      	b.n	800220c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01b      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
 80021dc:	e016      	b.n	800220c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0208 	bic.w	r2, r2, #8
 80021fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	2220      	movs	r2, #32
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 808f 	beq.w	800233c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8087 	beq.w	800233c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	2220      	movs	r2, #32
 8002234:	409a      	lsls	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b05      	cmp	r3, #5
 8002244:	d136      	bne.n	80022b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0216 	bic.w	r2, r2, #22
 8002254:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002264:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d103      	bne.n	8002276 <HAL_DMA_IRQHandler+0x1da>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0208 	bic.w	r2, r2, #8
 8002284:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	223f      	movs	r2, #63	; 0x3f
 800228c:	409a      	lsls	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d07e      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	4798      	blx	r3
        }
        return;
 80022b2:	e079      	b.n	80023a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d01d      	beq.n	80022fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10d      	bne.n	80022ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d031      	beq.n	800233c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
 80022e0:	e02c      	b.n	800233c <HAL_DMA_IRQHandler+0x2a0>
 80022e2:	bf00      	nop
 80022e4:	20000010 	.word	0x20000010
 80022e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d023      	beq.n	800233c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4798      	blx	r3
 80022fc:	e01e      	b.n	800233c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10f      	bne.n	800232c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0210 	bic.w	r2, r2, #16
 800231a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002340:	2b00      	cmp	r3, #0
 8002342:	d032      	beq.n	80023aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d022      	beq.n	8002396 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2205      	movs	r2, #5
 8002354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	3301      	adds	r3, #1
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	429a      	cmp	r2, r3
 8002372:	d307      	bcc.n	8002384 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f2      	bne.n	8002368 <HAL_DMA_IRQHandler+0x2cc>
 8002382:	e000      	b.n	8002386 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002384:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	4798      	blx	r3
 80023a6:	e000      	b.n	80023aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80023a8:	bf00      	nop
    }
  }
}
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023be:	b2db      	uxtb	r3, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002400:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b40      	cmp	r3, #64	; 0x40
 8002410:	d108      	bne.n	8002424 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002422:	e007      	b.n	8002434 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	60da      	str	r2, [r3, #12]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	3b10      	subs	r3, #16
 8002450:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <DMA_CalcBaseAndBitshift+0x64>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800245a:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <DMA_CalcBaseAndBitshift+0x68>)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d909      	bls.n	8002482 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002476:	f023 0303 	bic.w	r3, r3, #3
 800247a:	1d1a      	adds	r2, r3, #4
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	659a      	str	r2, [r3, #88]	; 0x58
 8002480:	e007      	b.n	8002492 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800248a:	f023 0303 	bic.w	r3, r3, #3
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	aaaaaaab 	.word	0xaaaaaaab
 80024a8:	0800b894 	.word	0x0800b894

080024ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d11f      	bne.n	8002506 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d856      	bhi.n	800257a <DMA_CheckFifoParam+0xce>
 80024cc:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <DMA_CheckFifoParam+0x28>)
 80024ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d2:	bf00      	nop
 80024d4:	080024e5 	.word	0x080024e5
 80024d8:	080024f7 	.word	0x080024f7
 80024dc:	080024e5 	.word	0x080024e5
 80024e0:	0800257b 	.word	0x0800257b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d046      	beq.n	800257e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f4:	e043      	b.n	800257e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024fe:	d140      	bne.n	8002582 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002504:	e03d      	b.n	8002582 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250e:	d121      	bne.n	8002554 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d837      	bhi.n	8002586 <DMA_CheckFifoParam+0xda>
 8002516:	a201      	add	r2, pc, #4	; (adr r2, 800251c <DMA_CheckFifoParam+0x70>)
 8002518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251c:	0800252d 	.word	0x0800252d
 8002520:	08002533 	.word	0x08002533
 8002524:	0800252d 	.word	0x0800252d
 8002528:	08002545 	.word	0x08002545
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
      break;
 8002530:	e030      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d025      	beq.n	800258a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002542:	e022      	b.n	800258a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800254c:	d11f      	bne.n	800258e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002552:	e01c      	b.n	800258e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d903      	bls.n	8002562 <DMA_CheckFifoParam+0xb6>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d003      	beq.n	8002568 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002560:	e018      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
      break;
 8002566:	e015      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00e      	beq.n	8002592 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      break;
 8002578:	e00b      	b.n	8002592 <DMA_CheckFifoParam+0xe6>
      break;
 800257a:	bf00      	nop
 800257c:	e00a      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 800257e:	bf00      	nop
 8002580:	e008      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 8002582:	bf00      	nop
 8002584:	e006      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 8002586:	bf00      	nop
 8002588:	e004      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 800258a:	bf00      	nop
 800258c:	e002      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;   
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 8002592:	bf00      	nop
    }
  } 
  
  return status; 
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop

080025a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	e159      	b.n	8002874 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	429a      	cmp	r2, r3
 80025da:	f040 8148 	bne.w	800286e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d005      	beq.n	80025f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d130      	bne.n	8002658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 0201 	and.w	r2, r3, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b03      	cmp	r3, #3
 8002662:	d017      	beq.n	8002694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d123      	bne.n	80026e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	08da      	lsrs	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3208      	adds	r2, #8
 80026a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	220f      	movs	r2, #15
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	08da      	lsrs	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3208      	adds	r2, #8
 80026e2:	69b9      	ldr	r1, [r7, #24]
 80026e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0203 	and.w	r2, r3, #3
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80a2 	beq.w	800286e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b57      	ldr	r3, [pc, #348]	; (800288c <HAL_GPIO_Init+0x2e8>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a56      	ldr	r2, [pc, #344]	; (800288c <HAL_GPIO_Init+0x2e8>)
 8002734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b54      	ldr	r3, [pc, #336]	; (800288c <HAL_GPIO_Init+0x2e8>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002746:	4a52      	ldr	r2, [pc, #328]	; (8002890 <HAL_GPIO_Init+0x2ec>)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	220f      	movs	r2, #15
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a49      	ldr	r2, [pc, #292]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d019      	beq.n	80027a6 <HAL_GPIO_Init+0x202>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a48      	ldr	r2, [pc, #288]	; (8002898 <HAL_GPIO_Init+0x2f4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d013      	beq.n	80027a2 <HAL_GPIO_Init+0x1fe>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a47      	ldr	r2, [pc, #284]	; (800289c <HAL_GPIO_Init+0x2f8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00d      	beq.n	800279e <HAL_GPIO_Init+0x1fa>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a46      	ldr	r2, [pc, #280]	; (80028a0 <HAL_GPIO_Init+0x2fc>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d007      	beq.n	800279a <HAL_GPIO_Init+0x1f6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a45      	ldr	r2, [pc, #276]	; (80028a4 <HAL_GPIO_Init+0x300>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d101      	bne.n	8002796 <HAL_GPIO_Init+0x1f2>
 8002792:	2304      	movs	r3, #4
 8002794:	e008      	b.n	80027a8 <HAL_GPIO_Init+0x204>
 8002796:	2307      	movs	r3, #7
 8002798:	e006      	b.n	80027a8 <HAL_GPIO_Init+0x204>
 800279a:	2303      	movs	r3, #3
 800279c:	e004      	b.n	80027a8 <HAL_GPIO_Init+0x204>
 800279e:	2302      	movs	r3, #2
 80027a0:	e002      	b.n	80027a8 <HAL_GPIO_Init+0x204>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_GPIO_Init+0x204>
 80027a6:	2300      	movs	r3, #0
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	f002 0203 	and.w	r2, r2, #3
 80027ae:	0092      	lsls	r2, r2, #2
 80027b0:	4093      	lsls	r3, r2
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027b8:	4935      	ldr	r1, [pc, #212]	; (8002890 <HAL_GPIO_Init+0x2ec>)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	3302      	adds	r3, #2
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027c6:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <HAL_GPIO_Init+0x304>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ea:	4a2f      	ldr	r2, [pc, #188]	; (80028a8 <HAL_GPIO_Init+0x304>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f0:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <HAL_GPIO_Init+0x304>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002814:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <HAL_GPIO_Init+0x304>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800281a:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <HAL_GPIO_Init+0x304>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800283e:	4a1a      	ldr	r2, [pc, #104]	; (80028a8 <HAL_GPIO_Init+0x304>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002844:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <HAL_GPIO_Init+0x304>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002868:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <HAL_GPIO_Init+0x304>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3301      	adds	r3, #1
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2b0f      	cmp	r3, #15
 8002878:	f67f aea2 	bls.w	80025c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3724      	adds	r7, #36	; 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	40013800 	.word	0x40013800
 8002894:	40020000 	.word	0x40020000
 8002898:	40020400 	.word	0x40020400
 800289c:	40020800 	.word	0x40020800
 80028a0:	40020c00 	.word	0x40020c00
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40013c00 	.word	0x40013c00

080028ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]
 80028b8:	4613      	mov	r3, r2
 80028ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028bc:	787b      	ldrb	r3, [r7, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c8:	e003      	b.n	80028d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ca:	887b      	ldrh	r3, [r7, #2]
 80028cc:	041a      	lsls	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	619a      	str	r2, [r3, #24]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e12b      	b.n	8002b4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe fe0e 	bl	8001528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2224      	movs	r2, #36	; 0x24
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002932:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002942:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002944:	f002 ff9a 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8002948:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4a81      	ldr	r2, [pc, #516]	; (8002b54 <HAL_I2C_Init+0x274>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d807      	bhi.n	8002964 <HAL_I2C_Init+0x84>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a80      	ldr	r2, [pc, #512]	; (8002b58 <HAL_I2C_Init+0x278>)
 8002958:	4293      	cmp	r3, r2
 800295a:	bf94      	ite	ls
 800295c:	2301      	movls	r3, #1
 800295e:	2300      	movhi	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	e006      	b.n	8002972 <HAL_I2C_Init+0x92>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4a7d      	ldr	r2, [pc, #500]	; (8002b5c <HAL_I2C_Init+0x27c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	bf94      	ite	ls
 800296c:	2301      	movls	r3, #1
 800296e:	2300      	movhi	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0e7      	b.n	8002b4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a78      	ldr	r2, [pc, #480]	; (8002b60 <HAL_I2C_Init+0x280>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	0c9b      	lsrs	r3, r3, #18
 8002984:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4a6a      	ldr	r2, [pc, #424]	; (8002b54 <HAL_I2C_Init+0x274>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d802      	bhi.n	80029b4 <HAL_I2C_Init+0xd4>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	3301      	adds	r3, #1
 80029b2:	e009      	b.n	80029c8 <HAL_I2C_Init+0xe8>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	4a69      	ldr	r2, [pc, #420]	; (8002b64 <HAL_I2C_Init+0x284>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	099b      	lsrs	r3, r3, #6
 80029c6:	3301      	adds	r3, #1
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	430b      	orrs	r3, r1
 80029ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	495c      	ldr	r1, [pc, #368]	; (8002b54 <HAL_I2C_Init+0x274>)
 80029e4:	428b      	cmp	r3, r1
 80029e6:	d819      	bhi.n	8002a1c <HAL_I2C_Init+0x13c>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1e59      	subs	r1, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f6:	1c59      	adds	r1, r3, #1
 80029f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029fc:	400b      	ands	r3, r1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_I2C_Init+0x138>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1e59      	subs	r1, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a10:	3301      	adds	r3, #1
 8002a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a16:	e051      	b.n	8002abc <HAL_I2C_Init+0x1dc>
 8002a18:	2304      	movs	r3, #4
 8002a1a:	e04f      	b.n	8002abc <HAL_I2C_Init+0x1dc>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d111      	bne.n	8002a48 <HAL_I2C_Init+0x168>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1e58      	subs	r0, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	440b      	add	r3, r1
 8002a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a36:	3301      	adds	r3, #1
 8002a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e012      	b.n	8002a6e <HAL_I2C_Init+0x18e>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1e58      	subs	r0, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	0099      	lsls	r1, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_Init+0x196>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e022      	b.n	8002abc <HAL_I2C_Init+0x1dc>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10e      	bne.n	8002a9c <HAL_I2C_Init+0x1bc>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1e58      	subs	r0, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	440b      	add	r3, r1
 8002a8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a9a:	e00f      	b.n	8002abc <HAL_I2C_Init+0x1dc>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1e58      	subs	r0, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	0099      	lsls	r1, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	6809      	ldr	r1, [r1, #0]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69da      	ldr	r2, [r3, #28]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6911      	ldr	r1, [r2, #16]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68d2      	ldr	r2, [r2, #12]
 8002af6:	4311      	orrs	r1, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	000186a0 	.word	0x000186a0
 8002b58:	001e847f 	.word	0x001e847f
 8002b5c:	003d08ff 	.word	0x003d08ff
 8002b60:	431bde83 	.word	0x431bde83
 8002b64:	10624dd3 	.word	0x10624dd3

08002b68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	461a      	mov	r2, r3
 8002b74:	460b      	mov	r3, r1
 8002b76:	817b      	strh	r3, [r7, #10]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b7c:	f7fe ffd8 	bl	8001b30 <HAL_GetTick>
 8002b80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	f040 80e0 	bne.w	8002d50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2319      	movs	r3, #25
 8002b96:	2201      	movs	r2, #1
 8002b98:	4970      	ldr	r1, [pc, #448]	; (8002d5c <HAL_I2C_Master_Transmit+0x1f4>)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f002 f82a 	bl	8004bf4 <I2C_WaitOnFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e0d3      	b.n	8002d52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_I2C_Master_Transmit+0x50>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e0cc      	b.n	8002d52 <HAL_I2C_Master_Transmit+0x1ea>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d007      	beq.n	8002bde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0201 	orr.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2221      	movs	r2, #33	; 0x21
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2210      	movs	r2, #16
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	893a      	ldrh	r2, [r7, #8]
 8002c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4a50      	ldr	r2, [pc, #320]	; (8002d60 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c20:	8979      	ldrh	r1, [r7, #10]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	6a3a      	ldr	r2, [r7, #32]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f001 fda8 	bl	800477c <I2C_MasterRequestWrite>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e08d      	b.n	8002d52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c4c:	e066      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	6a39      	ldr	r1, [r7, #32]
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f002 f8a4 	bl	8004da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00d      	beq.n	8002c7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d107      	bne.n	8002c76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e06b      	b.n	8002d52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_I2C_Master_Transmit+0x188>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d017      	beq.n	8002cf0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	781a      	ldrb	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	6a39      	ldr	r1, [r7, #32]
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f002 f894 	bl	8004e22 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00d      	beq.n	8002d1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d107      	bne.n	8002d18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e01a      	b.n	8002d52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d194      	bne.n	8002c4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e000      	b.n	8002d52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d50:	2302      	movs	r3, #2
  }
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	00100002 	.word	0x00100002
 8002d60:	ffff0000 	.word	0xffff0000

08002d64 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	460b      	mov	r3, r1
 8002d72:	817b      	strh	r3, [r7, #10]
 8002d74:	4613      	mov	r3, r2
 8002d76:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	f040 810d 	bne.w	8002fa4 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d8a:	4b89      	ldr	r3, [pc, #548]	; (8002fb0 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	08db      	lsrs	r3, r3, #3
 8002d90:	4a88      	ldr	r2, [pc, #544]	; (8002fb4 <HAL_I2C_Master_Receive_DMA+0x250>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	0a1a      	lsrs	r2, r3, #8
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009a      	lsls	r2, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d116      	bne.n	8002dde <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f043 0220 	orr.w	r2, r3, #32
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0e3      	b.n	8002fa6 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d0db      	beq.n	8002da4 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_I2C_Master_Receive_DMA+0x96>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e0d5      	b.n	8002fa6 <HAL_I2C_Master_Receive_DMA+0x242>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d007      	beq.n	8002e20 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2222      	movs	r2, #34	; 0x22
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	893a      	ldrh	r2, [r7, #8]
 8002e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a56      	ldr	r2, [pc, #344]	; (8002fb8 <HAL_I2C_Master_Receive_DMA+0x254>)
 8002e60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002e62:	897a      	ldrh	r2, [r7, #10]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d07b      	beq.n	8002f68 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d02a      	beq.n	8002ece <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	4a4f      	ldr	r2, [pc, #316]	; (8002fbc <HAL_I2C_Master_Receive_DMA+0x258>)
 8002e7e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	4a4e      	ldr	r2, [pc, #312]	; (8002fc0 <HAL_I2C_Master_Receive_DMA+0x25c>)
 8002e86:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	2200      	movs	r2, #0
 8002e96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3310      	adds	r3, #16
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebe:	f7ff f803 	bl	8001ec8 <HAL_DMA_Start_IT>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d139      	bne.n	8002f40 <HAL_I2C_Master_Receive_DMA+0x1dc>
 8002ecc:	e013      	b.n	8002ef6 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e057      	b.n	8002fa6 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f04:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f14:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f2c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	e02f      	b.n	8002fa0 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f043 0210 	orr.w	r2, r3, #16
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e01e      	b.n	8002fa6 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002f7e:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f9e:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	e000      	b.n	8002fa6 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8002fa4:	2302      	movs	r3, #2
  }
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000010 	.word	0x20000010
 8002fb4:	14f8b589 	.word	0x14f8b589
 8002fb8:	ffff0000 	.word	0xffff0000
 8002fbc:	08004881 	.word	0x08004881
 8002fc0:	08004a2b 	.word	0x08004a2b

08002fc4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d003      	beq.n	8002ffc <HAL_I2C_EV_IRQHandler+0x38>
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	f040 80c1 	bne.w	800317e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10d      	bne.n	8003032 <HAL_I2C_EV_IRQHandler+0x6e>
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800301c:	d003      	beq.n	8003026 <HAL_I2C_EV_IRQHandler+0x62>
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003024:	d101      	bne.n	800302a <HAL_I2C_EV_IRQHandler+0x66>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_I2C_EV_IRQHandler+0x68>
 800302a:	2300      	movs	r3, #0
 800302c:	2b01      	cmp	r3, #1
 800302e:	f000 8132 	beq.w	8003296 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00c      	beq.n	8003056 <HAL_I2C_EV_IRQHandler+0x92>
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	0a5b      	lsrs	r3, r3, #9
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d006      	beq.n	8003056 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f001 ff8c 	bl	8004f66 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fd79 	bl	8003b46 <I2C_Master_SB>
 8003054:	e092      	b.n	800317c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	08db      	lsrs	r3, r3, #3
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_I2C_EV_IRQHandler+0xb2>
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	0a5b      	lsrs	r3, r3, #9
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fdef 	bl	8003c52 <I2C_Master_ADD10>
 8003074:	e082      	b.n	800317c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	085b      	lsrs	r3, r3, #1
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <HAL_I2C_EV_IRQHandler+0xd2>
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	0a5b      	lsrs	r3, r3, #9
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fe09 	bl	8003ca6 <I2C_Master_ADDR>
 8003094:	e072      	b.n	800317c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	089b      	lsrs	r3, r3, #2
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d03b      	beq.n	800311a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b0:	f000 80f3 	beq.w	800329a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	09db      	lsrs	r3, r3, #7
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00f      	beq.n	80030e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	0a9b      	lsrs	r3, r3, #10
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d103      	bne.n	80030e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f9e9 	bl	80034b0 <I2C_MasterTransmit_TXE>
 80030de:	e04d      	b.n	800317c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80d6 	beq.w	800329a <HAL_I2C_EV_IRQHandler+0x2d6>
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	0a5b      	lsrs	r3, r3, #9
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80cf 	beq.w	800329a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030fc:	7bbb      	ldrb	r3, [r7, #14]
 80030fe:	2b21      	cmp	r3, #33	; 0x21
 8003100:	d103      	bne.n	800310a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fa70 	bl	80035e8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003108:	e0c7      	b.n	800329a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	f040 80c4 	bne.w	800329a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fade 	bl	80036d4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003118:	e0bf      	b.n	800329a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003128:	f000 80b7 	beq.w	800329a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	099b      	lsrs	r3, r3, #6
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00f      	beq.n	8003158 <HAL_I2C_EV_IRQHandler+0x194>
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	0a9b      	lsrs	r3, r3, #10
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d009      	beq.n	8003158 <HAL_I2C_EV_IRQHandler+0x194>
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d103      	bne.n	8003158 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fb53 	bl	80037fc <I2C_MasterReceive_RXNE>
 8003156:	e011      	b.n	800317c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 809a 	beq.w	800329a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	0a5b      	lsrs	r3, r3, #9
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8093 	beq.w	800329a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fbfc 	bl	8003972 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800317a:	e08e      	b.n	800329a <HAL_I2C_EV_IRQHandler+0x2d6>
 800317c:	e08d      	b.n	800329a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d004      	beq.n	8003190 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	e007      	b.n	80031a0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d012      	beq.n	80031d2 <HAL_I2C_EV_IRQHandler+0x20e>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	0a5b      	lsrs	r3, r3, #9
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00c      	beq.n	80031d2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031c8:	69b9      	ldr	r1, [r7, #24]
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 ffba 	bl	8004144 <I2C_Slave_ADDR>
 80031d0:	e066      	b.n	80032a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <HAL_I2C_EV_IRQHandler+0x22e>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	0a5b      	lsrs	r3, r3, #9
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fff4 	bl	80041d8 <I2C_Slave_STOPF>
 80031f0:	e056      	b.n	80032a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031f2:	7bbb      	ldrb	r3, [r7, #14]
 80031f4:	2b21      	cmp	r3, #33	; 0x21
 80031f6:	d002      	beq.n	80031fe <HAL_I2C_EV_IRQHandler+0x23a>
 80031f8:	7bbb      	ldrb	r3, [r7, #14]
 80031fa:	2b29      	cmp	r3, #41	; 0x29
 80031fc:	d125      	bne.n	800324a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	09db      	lsrs	r3, r3, #7
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00f      	beq.n	800322a <HAL_I2C_EV_IRQHandler+0x266>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	0a9b      	lsrs	r3, r3, #10
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_I2C_EV_IRQHandler+0x266>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fed0 	bl	8003fc8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003228:	e039      	b.n	800329e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d033      	beq.n	800329e <HAL_I2C_EV_IRQHandler+0x2da>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	0a5b      	lsrs	r3, r3, #9
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d02d      	beq.n	800329e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fefd 	bl	8004042 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003248:	e029      	b.n	800329e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	099b      	lsrs	r3, r3, #6
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00f      	beq.n	8003276 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	0a9b      	lsrs	r3, r3, #10
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	089b      	lsrs	r3, r3, #2
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d103      	bne.n	8003276 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 ff08 	bl	8004084 <I2C_SlaveReceive_RXNE>
 8003274:	e014      	b.n	80032a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00e      	beq.n	80032a0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	0a5b      	lsrs	r3, r3, #9
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 ff36 	bl	8004100 <I2C_SlaveReceive_BTF>
 8003294:	e004      	b.n	80032a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003296:	bf00      	nop
 8003298:	e002      	b.n	80032a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800329e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b08a      	sub	sp, #40	; 0x28
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80032be:	2300      	movs	r3, #0
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00e      	beq.n	80032f4 <HAL_I2C_ER_IRQHandler+0x4e>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032f2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	0a5b      	lsrs	r3, r3, #9
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <HAL_I2C_ER_IRQHandler+0x78>
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	0a1b      	lsrs	r3, r3, #8
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800331c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	0a9b      	lsrs	r3, r3, #10
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d03f      	beq.n	80033aa <HAL_I2C_ER_IRQHandler+0x104>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d039      	beq.n	80033aa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003336:	7efb      	ldrb	r3, [r7, #27]
 8003338:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333e:	b29b      	uxth	r3, r3
 8003340:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003350:	7ebb      	ldrb	r3, [r7, #26]
 8003352:	2b20      	cmp	r3, #32
 8003354:	d112      	bne.n	800337c <HAL_I2C_ER_IRQHandler+0xd6>
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10f      	bne.n	800337c <HAL_I2C_ER_IRQHandler+0xd6>
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	2b21      	cmp	r3, #33	; 0x21
 8003360:	d008      	beq.n	8003374 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003362:	7cfb      	ldrb	r3, [r7, #19]
 8003364:	2b29      	cmp	r3, #41	; 0x29
 8003366:	d005      	beq.n	8003374 <HAL_I2C_ER_IRQHandler+0xce>
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	2b28      	cmp	r3, #40	; 0x28
 800336c:	d106      	bne.n	800337c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b21      	cmp	r3, #33	; 0x21
 8003372:	d103      	bne.n	800337c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f001 f85f 	bl	8004438 <I2C_Slave_AF>
 800337a:	e016      	b.n	80033aa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003384:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	f043 0304 	orr.w	r3, r3, #4
 800338c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800338e:	7efb      	ldrb	r3, [r7, #27]
 8003390:	2b10      	cmp	r3, #16
 8003392:	d002      	beq.n	800339a <HAL_I2C_ER_IRQHandler+0xf4>
 8003394:	7efb      	ldrb	r3, [r7, #27]
 8003396:	2b40      	cmp	r3, #64	; 0x40
 8003398:	d107      	bne.n	80033aa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	0adb      	lsrs	r3, r3, #11
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00e      	beq.n	80033d4 <HAL_I2C_ER_IRQHandler+0x12e>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	0a1b      	lsrs	r3, r3, #8
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	f043 0308 	orr.w	r3, r3, #8
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80033d2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f001 f896 	bl	8004518 <I2C_ITError>
  }
}
 80033ec:	bf00      	nop
 80033ee:	3728      	adds	r7, #40	; 0x28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
 800343c:	4613      	mov	r3, r2
 800343e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d150      	bne.n	8003578 <I2C_MasterTransmit_TXE+0xc8>
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	2b21      	cmp	r3, #33	; 0x21
 80034da:	d14d      	bne.n	8003578 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d01d      	beq.n	800351e <I2C_MasterTransmit_TXE+0x6e>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d01a      	beq.n	800351e <I2C_MasterTransmit_TXE+0x6e>
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034ee:	d016      	beq.n	800351e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034fe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2211      	movs	r2, #17
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ff6c 	bl	80033f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800351c:	e060      	b.n	80035e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800352c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	d107      	bne.n	8003568 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ff7d 	bl	8003460 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003566:	e03b      	b.n	80035e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff ff3f 	bl	80033f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003576:	e033      	b.n	80035e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b21      	cmp	r3, #33	; 0x21
 800357c:	d005      	beq.n	800358a <I2C_MasterTransmit_TXE+0xda>
 800357e:	7bbb      	ldrb	r3, [r7, #14]
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d12d      	bne.n	80035e0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b22      	cmp	r3, #34	; 0x22
 8003588:	d12a      	bne.n	80035e0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d108      	bne.n	80035a6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80035a4:	e01c      	b.n	80035e0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b40      	cmp	r3, #64	; 0x40
 80035b0:	d103      	bne.n	80035ba <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f88e 	bl	80036d4 <I2C_MemoryTransmit_TXE_BTF>
}
 80035b8:	e012      	b.n	80035e0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	781a      	ldrb	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035de:	e7ff      	b.n	80035e0 <I2C_MasterTransmit_TXE+0x130>
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b21      	cmp	r3, #33	; 0x21
 8003600:	d164      	bne.n	80036cc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d012      	beq.n	8003632 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	781a      	ldrb	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003630:	e04c      	b.n	80036cc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b08      	cmp	r3, #8
 8003636:	d01d      	beq.n	8003674 <I2C_MasterTransmit_BTF+0x8c>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b20      	cmp	r3, #32
 800363c:	d01a      	beq.n	8003674 <I2C_MasterTransmit_BTF+0x8c>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003644:	d016      	beq.n	8003674 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003654:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2211      	movs	r2, #17
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff fec1 	bl	80033f4 <HAL_I2C_MasterTxCpltCallback>
}
 8003672:	e02b      	b.n	80036cc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003682:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003692:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b40      	cmp	r3, #64	; 0x40
 80036ac:	d107      	bne.n	80036be <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff fed2 	bl	8003460 <HAL_I2C_MemTxCpltCallback>
}
 80036bc:	e006      	b.n	80036cc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff fe94 	bl	80033f4 <HAL_I2C_MasterTxCpltCallback>
}
 80036cc:	bf00      	nop
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d11d      	bne.n	8003728 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d10b      	bne.n	800370c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003704:	1c9a      	adds	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800370a:	e073      	b.n	80037f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003710:	b29b      	uxth	r3, r3
 8003712:	121b      	asrs	r3, r3, #8
 8003714:	b2da      	uxtb	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003726:	e065      	b.n	80037f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372c:	2b01      	cmp	r3, #1
 800372e:	d10b      	bne.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003734:	b2da      	uxtb	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003746:	e055      	b.n	80037f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374c:	2b02      	cmp	r3, #2
 800374e:	d151      	bne.n	80037f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b22      	cmp	r3, #34	; 0x22
 8003754:	d10d      	bne.n	8003772 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003764:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003770:	e040      	b.n	80037f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d015      	beq.n	80037a8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b21      	cmp	r3, #33	; 0x21
 8003780:	d112      	bne.n	80037a8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	781a      	ldrb	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037a6:	e025      	b.n	80037f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d120      	bne.n	80037f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	2b21      	cmp	r3, #33	; 0x21
 80037b6:	d11d      	bne.n	80037f4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037c6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff fe36 	bl	8003460 <HAL_I2C_MemTxCpltCallback>
}
 80037f4:	bf00      	nop
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b22      	cmp	r3, #34	; 0x22
 800380e:	f040 80ac 	bne.w	800396a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d921      	bls.n	8003864 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b03      	cmp	r3, #3
 800384e:	f040 808c 	bne.w	800396a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003860:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003862:	e082      	b.n	800396a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	2b02      	cmp	r3, #2
 800386a:	d075      	beq.n	8003958 <I2C_MasterReceive_RXNE+0x15c>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d002      	beq.n	8003878 <I2C_MasterReceive_RXNE+0x7c>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d16f      	bne.n	8003958 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f001 fb13 	bl	8004ea4 <I2C_WaitOnSTOPRequestThroughIT>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d142      	bne.n	800390a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003892:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038a2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b40      	cmp	r3, #64	; 0x40
 80038dc:	d10a      	bne.n	80038f4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fdc1 	bl	8003474 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038f2:	e03a      	b.n	800396a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2212      	movs	r2, #18
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd fba8 	bl	8001058 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003908:	e02f      	b.n	800396a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003918:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff fd99 	bl	8003488 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003956:	e008      	b.n	800396a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003966:	605a      	str	r2, [r3, #4]
}
 8003968:	e7ff      	b.n	800396a <I2C_MasterReceive_RXNE+0x16e>
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b04      	cmp	r3, #4
 8003988:	d11b      	bne.n	80039c2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003998:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80039c0:	e0bd      	b.n	8003b3e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d129      	bne.n	8003a20 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039da:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d00a      	beq.n	80039f8 <I2C_MasterReceive_BTF+0x86>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d007      	beq.n	80039f8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a1e:	e08e      	b.n	8003b3e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d176      	bne.n	8003b18 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d002      	beq.n	8003a36 <I2C_MasterReceive_BTF+0xc4>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d108      	bne.n	8003a48 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	e019      	b.n	8003a7c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d002      	beq.n	8003a54 <I2C_MasterReceive_BTF+0xe2>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d108      	bne.n	8003a66 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	e00a      	b.n	8003a7c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d007      	beq.n	8003a7c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ad6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d10a      	bne.n	8003b02 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fcba 	bl	8003474 <HAL_I2C_MemRxCpltCallback>
}
 8003b00:	e01d      	b.n	8003b3e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2212      	movs	r2, #18
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7fd faa1 	bl	8001058 <HAL_I2C_MasterRxCpltCallback>
}
 8003b16:	e012      	b.n	8003b3e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d117      	bne.n	8003b8a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	461a      	mov	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b72:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b74:	e067      	b.n	8003c46 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	611a      	str	r2, [r3, #16]
}
 8003b88:	e05d      	b.n	8003c46 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b92:	d133      	bne.n	8003bfc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b21      	cmp	r3, #33	; 0x21
 8003b9e:	d109      	bne.n	8003bb4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bb0:	611a      	str	r2, [r3, #16]
 8003bb2:	e008      	b.n	8003bc6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <I2C_Master_SB+0x92>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d108      	bne.n	8003bea <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d032      	beq.n	8003c46 <I2C_Master_SB+0x100>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d02d      	beq.n	8003c46 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf8:	605a      	str	r2, [r3, #4]
}
 8003bfa:	e024      	b.n	8003c46 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10e      	bne.n	8003c22 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	11db      	asrs	r3, r3, #7
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f003 0306 	and.w	r3, r3, #6
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f063 030f 	orn	r3, r3, #15
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	611a      	str	r2, [r3, #16]
}
 8003c20:	e011      	b.n	8003c46 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d10d      	bne.n	8003c46 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	11db      	asrs	r3, r3, #7
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f003 0306 	and.w	r3, r3, #6
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f063 030e 	orn	r3, r3, #14
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	611a      	str	r2, [r3, #16]
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <I2C_Master_ADD10+0x26>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d108      	bne.n	8003c8a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00c      	beq.n	8003c9a <I2C_Master_ADD10+0x48>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c98:	605a      	str	r2, [r3, #4]
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b091      	sub	sp, #68	; 0x44
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b22      	cmp	r3, #34	; 0x22
 8003cce:	f040 8169 	bne.w	8003fa4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10f      	bne.n	8003cfa <I2C_Master_ADDR+0x54>
 8003cda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d10b      	bne.n	8003cfa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	633b      	str	r3, [r7, #48]	; 0x30
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	e160      	b.n	8003fbc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d11d      	bne.n	8003d3e <I2C_Master_ADDR+0x98>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d0a:	d118      	bne.n	8003d3e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d30:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	651a      	str	r2, [r3, #80]	; 0x50
 8003d3c:	e13e      	b.n	8003fbc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d113      	bne.n	8003d70 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e115      	b.n	8003f9c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	f040 808a 	bne.w	8003e90 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d82:	d137      	bne.n	8003df4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d92:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da2:	d113      	bne.n	8003dcc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db4:	2300      	movs	r3, #0
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	e0e7      	b.n	8003f9c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dcc:	2300      	movs	r3, #0
 8003dce:	623b      	str	r3, [r7, #32]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	623b      	str	r3, [r7, #32]
 8003de0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e0d3      	b.n	8003f9c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d02e      	beq.n	8003e58 <I2C_Master_ADDR+0x1b2>
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d02b      	beq.n	8003e58 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e02:	2b12      	cmp	r3, #18
 8003e04:	d102      	bne.n	8003e0c <I2C_Master_ADDR+0x166>
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d125      	bne.n	8003e58 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d00e      	beq.n	8003e30 <I2C_Master_ADDR+0x18a>
 8003e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d00b      	beq.n	8003e30 <I2C_Master_ADDR+0x18a>
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d008      	beq.n	8003e30 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e007      	b.n	8003e40 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e3e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e40:	2300      	movs	r3, #0
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	61fb      	str	r3, [r7, #28]
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	e0a1      	b.n	8003f9c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e66:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e085      	b.n	8003f9c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d14d      	bne.n	8003f36 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d016      	beq.n	8003ece <I2C_Master_ADDR+0x228>
 8003ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d013      	beq.n	8003ece <I2C_Master_ADDR+0x228>
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d010      	beq.n	8003ece <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eba:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e007      	b.n	8003ede <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003edc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eec:	d117      	bne.n	8003f1e <I2C_Master_ADDR+0x278>
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ef4:	d00b      	beq.n	8003f0e <I2C_Master_ADDR+0x268>
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d008      	beq.n	8003f0e <I2C_Master_ADDR+0x268>
 8003efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d005      	beq.n	8003f0e <I2C_Master_ADDR+0x268>
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	2b10      	cmp	r3, #16
 8003f06:	d002      	beq.n	8003f0e <I2C_Master_ADDR+0x268>
 8003f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d107      	bne.n	8003f1e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f1c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	e032      	b.n	8003f9c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f44:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f54:	d117      	bne.n	8003f86 <I2C_Master_ADDR+0x2e0>
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f5c:	d00b      	beq.n	8003f76 <I2C_Master_ADDR+0x2d0>
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d008      	beq.n	8003f76 <I2C_Master_ADDR+0x2d0>
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d005      	beq.n	8003f76 <I2C_Master_ADDR+0x2d0>
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6c:	2b10      	cmp	r3, #16
 8003f6e:	d002      	beq.n	8003f76 <I2C_Master_ADDR+0x2d0>
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d107      	bne.n	8003f86 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f84:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003fa2:	e00b      	b.n	8003fbc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
}
 8003fba:	e7ff      	b.n	8003fbc <I2C_Master_ADDR+0x316>
 8003fbc:	bf00      	nop
 8003fbe:	3744      	adds	r7, #68	; 0x44
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d02b      	beq.n	800403a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	781a      	ldrb	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d114      	bne.n	800403a <I2C_SlaveTransmit_TXE+0x72>
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	2b29      	cmp	r3, #41	; 0x29
 8004014:	d111      	bne.n	800403a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004024:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2221      	movs	r2, #33	; 0x21
 800402a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2228      	movs	r2, #40	; 0x28
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff f9e7 	bl	8003408 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d011      	beq.n	8004078 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	781a      	ldrb	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004092:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d02c      	beq.n	80040f8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d114      	bne.n	80040f8 <I2C_SlaveReceive_RXNE+0x74>
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	2b2a      	cmp	r3, #42	; 0x2a
 80040d2:	d111      	bne.n	80040f8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2222      	movs	r2, #34	; 0x22
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2228      	movs	r2, #40	; 0x28
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff f992 	bl	800341c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040f8:	bf00      	nop
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d012      	beq.n	8004138 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800415e:	2b28      	cmp	r3, #40	; 0x28
 8004160:	d127      	bne.n	80041b2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004170:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	089b      	lsrs	r3, r3, #2
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	09db      	lsrs	r3, r3, #7
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	81bb      	strh	r3, [r7, #12]
 8004194:	e002      	b.n	800419c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80041a4:	89ba      	ldrh	r2, [r7, #12]
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	4619      	mov	r1, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff f940 	bl	8003430 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041b0:	e00e      	b.n	80041d0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b2:	2300      	movs	r3, #0
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041f6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041f8:	2300      	movs	r3, #0
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004224:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004234:	d172      	bne.n	800431c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b22      	cmp	r3, #34	; 0x22
 800423a:	d002      	beq.n	8004242 <I2C_Slave_STOPF+0x6a>
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b2a      	cmp	r3, #42	; 0x2a
 8004240:	d135      	bne.n	80042ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	b29a      	uxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f043 0204 	orr.w	r2, r3, #4
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004274:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe f898 	bl	80023b0 <HAL_DMA_GetState>
 8004280:	4603      	mov	r3, r0
 8004282:	2b01      	cmp	r3, #1
 8004284:	d049      	beq.n	800431a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	4a69      	ldr	r2, [pc, #420]	; (8004430 <I2C_Slave_STOPF+0x258>)
 800428c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	4618      	mov	r0, r3
 8004294:	f7fd fee0 	bl	8002058 <HAL_DMA_Abort_IT>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d03d      	beq.n	800431a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042a8:	4610      	mov	r0, r2
 80042aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042ac:	e035      	b.n	800431a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f043 0204 	orr.w	r2, r3, #4
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fe f862 	bl	80023b0 <HAL_DMA_GetState>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d014      	beq.n	800431c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	4a4e      	ldr	r2, [pc, #312]	; (8004430 <I2C_Slave_STOPF+0x258>)
 80042f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fd feaa 	bl	8002058 <HAL_DMA_Abort_IT>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d008      	beq.n	800431c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004314:	4610      	mov	r0, r2
 8004316:	4798      	blx	r3
 8004318:	e000      	b.n	800431c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800431a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d03e      	beq.n	80043a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b04      	cmp	r3, #4
 8004332:	d112      	bne.n	800435a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b40      	cmp	r3, #64	; 0x40
 8004366:	d112      	bne.n	800438e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f043 0204 	orr.w	r2, r3, #4
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f8b3 	bl	8004518 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80043b2:	e039      	b.n	8004428 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	2b2a      	cmp	r3, #42	; 0x2a
 80043b8:	d109      	bne.n	80043ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2228      	movs	r2, #40	; 0x28
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff f827 	bl	800341c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b28      	cmp	r3, #40	; 0x28
 80043d8:	d111      	bne.n	80043fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a15      	ldr	r2, [pc, #84]	; (8004434 <I2C_Slave_STOPF+0x25c>)
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff f828 	bl	800344c <HAL_I2C_ListenCpltCallback>
}
 80043fc:	e014      	b.n	8004428 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	2b22      	cmp	r3, #34	; 0x22
 8004404:	d002      	beq.n	800440c <I2C_Slave_STOPF+0x234>
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	2b22      	cmp	r3, #34	; 0x22
 800440a:	d10d      	bne.n	8004428 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fe fffa 	bl	800341c <HAL_I2C_SlaveRxCpltCallback>
}
 8004428:	bf00      	nop
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	08004aa5 	.word	0x08004aa5
 8004434:	ffff0000 	.word	0xffff0000

08004438 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004446:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b08      	cmp	r3, #8
 8004452:	d002      	beq.n	800445a <I2C_Slave_AF+0x22>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b20      	cmp	r3, #32
 8004458:	d129      	bne.n	80044ae <I2C_Slave_AF+0x76>
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	2b28      	cmp	r3, #40	; 0x28
 800445e:	d126      	bne.n	80044ae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a2c      	ldr	r2, [pc, #176]	; (8004514 <I2C_Slave_AF+0xdc>)
 8004464:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004474:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800447e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fe ffd0 	bl	800344c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80044ac:	e02e      	b.n	800450c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b21      	cmp	r3, #33	; 0x21
 80044b2:	d126      	bne.n	8004502 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a17      	ldr	r2, [pc, #92]	; (8004514 <I2C_Slave_AF+0xdc>)
 80044b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2221      	movs	r2, #33	; 0x21
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044de:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044e8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fe ff84 	bl	8003408 <HAL_I2C_SlaveTxCpltCallback>
}
 8004500:	e004      	b.n	800450c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800450a:	615a      	str	r2, [r3, #20]
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	ffff0000 	.word	0xffff0000

08004518 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004526:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800452e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004530:	7bbb      	ldrb	r3, [r7, #14]
 8004532:	2b10      	cmp	r3, #16
 8004534:	d002      	beq.n	800453c <I2C_ITError+0x24>
 8004536:	7bbb      	ldrb	r3, [r7, #14]
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d10a      	bne.n	8004552 <I2C_ITError+0x3a>
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b22      	cmp	r3, #34	; 0x22
 8004540:	d107      	bne.n	8004552 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004550:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004558:	2b28      	cmp	r3, #40	; 0x28
 800455a:	d107      	bne.n	800456c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2228      	movs	r2, #40	; 0x28
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800456a:	e015      	b.n	8004598 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457a:	d00a      	beq.n	8004592 <I2C_ITError+0x7a>
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b60      	cmp	r3, #96	; 0x60
 8004580:	d007      	beq.n	8004592 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a6:	d162      	bne.n	800466e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d020      	beq.n	8004608 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	4a6a      	ldr	r2, [pc, #424]	; (8004774 <I2C_ITError+0x25c>)
 80045cc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd fd40 	bl	8002058 <HAL_DMA_Abort_IT>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 8089 	beq.w	80046f2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0201 	bic.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004602:	4610      	mov	r0, r2
 8004604:	4798      	blx	r3
 8004606:	e074      	b.n	80046f2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	4a59      	ldr	r2, [pc, #356]	; (8004774 <I2C_ITError+0x25c>)
 800460e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	4618      	mov	r0, r3
 8004616:	f7fd fd1f 	bl	8002058 <HAL_DMA_Abort_IT>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d068      	beq.n	80046f2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	d10b      	bne.n	8004646 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004668:	4610      	mov	r0, r2
 800466a:	4798      	blx	r3
 800466c:	e041      	b.n	80046f2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b60      	cmp	r3, #96	; 0x60
 8004678:	d125      	bne.n	80046c6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	d10b      	bne.n	80046ae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fe feec 	bl	800349c <HAL_I2C_AbortCpltCallback>
 80046c4:	e015      	b.n	80046f2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b40      	cmp	r3, #64	; 0x40
 80046d2:	d10b      	bne.n	80046ec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7fe fecb 	bl	8003488 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10e      	bne.n	8004720 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004712:	2b00      	cmp	r3, #0
 8004714:	d104      	bne.n	8004720 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800471c:	2b00      	cmp	r3, #0
 800471e:	d007      	beq.n	8004730 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800472e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004736:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b04      	cmp	r3, #4
 8004742:	d113      	bne.n	800476c <I2C_ITError+0x254>
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b28      	cmp	r3, #40	; 0x28
 8004748:	d110      	bne.n	800476c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a0a      	ldr	r2, [pc, #40]	; (8004778 <I2C_ITError+0x260>)
 800474e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fe fe70 	bl	800344c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	08004aa5 	.word	0x08004aa5
 8004778:	ffff0000 	.word	0xffff0000

0800477c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	460b      	mov	r3, r1
 800478a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d006      	beq.n	80047a6 <I2C_MasterRequestWrite+0x2a>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d003      	beq.n	80047a6 <I2C_MasterRequestWrite+0x2a>
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047a4:	d108      	bne.n	80047b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e00b      	b.n	80047d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	2b12      	cmp	r3, #18
 80047be:	d107      	bne.n	80047d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 fa09 	bl	8004bf4 <I2C_WaitOnFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00d      	beq.n	8004804 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f6:	d103      	bne.n	8004800 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e035      	b.n	8004870 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800480c:	d108      	bne.n	8004820 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800480e:	897b      	ldrh	r3, [r7, #10]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800481c:	611a      	str	r2, [r3, #16]
 800481e:	e01b      	b.n	8004858 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004820:	897b      	ldrh	r3, [r7, #10]
 8004822:	11db      	asrs	r3, r3, #7
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f003 0306 	and.w	r3, r3, #6
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f063 030f 	orn	r3, r3, #15
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	490e      	ldr	r1, [pc, #56]	; (8004878 <I2C_MasterRequestWrite+0xfc>)
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fa2f 	bl	8004ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e010      	b.n	8004870 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800484e:	897b      	ldrh	r3, [r7, #10]
 8004850:	b2da      	uxtb	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	4907      	ldr	r1, [pc, #28]	; (800487c <I2C_MasterRequestWrite+0x100>)
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fa1f 	bl	8004ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	00010008 	.word	0x00010008
 800487c:	00010002 	.word	0x00010002

08004880 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004894:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800489c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048b2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c0:	2200      	movs	r2, #0
 80048c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	2200      	movs	r2, #0
 80048d2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80048d4:	7cfb      	ldrb	r3, [r7, #19]
 80048d6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80048da:	2b21      	cmp	r3, #33	; 0x21
 80048dc:	d007      	beq.n	80048ee <I2C_DMAXferCplt+0x6e>
 80048de:	7cfb      	ldrb	r3, [r7, #19]
 80048e0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80048e4:	2b22      	cmp	r3, #34	; 0x22
 80048e6:	d131      	bne.n	800494c <I2C_DMAXferCplt+0xcc>
 80048e8:	7cbb      	ldrb	r3, [r7, #18]
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d12e      	bne.n	800494c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048fc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2200      	movs	r2, #0
 8004902:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004904:	7cfb      	ldrb	r3, [r7, #19]
 8004906:	2b29      	cmp	r3, #41	; 0x29
 8004908:	d10a      	bne.n	8004920 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2221      	movs	r2, #33	; 0x21
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2228      	movs	r2, #40	; 0x28
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004918:	6978      	ldr	r0, [r7, #20]
 800491a:	f7fe fd75 	bl	8003408 <HAL_I2C_SlaveTxCpltCallback>
 800491e:	e00c      	b.n	800493a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004920:	7cfb      	ldrb	r3, [r7, #19]
 8004922:	2b2a      	cmp	r3, #42	; 0x2a
 8004924:	d109      	bne.n	800493a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2222      	movs	r2, #34	; 0x22
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2228      	movs	r2, #40	; 0x28
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004934:	6978      	ldr	r0, [r7, #20]
 8004936:	f7fe fd71 	bl	800341c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004948:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800494a:	e06a      	b.n	8004a22 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d064      	beq.n	8004a22 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b01      	cmp	r3, #1
 8004960:	d107      	bne.n	8004972 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004970:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004980:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004988:	d009      	beq.n	800499e <I2C_DMAXferCplt+0x11e>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d006      	beq.n	800499e <I2C_DMAXferCplt+0x11e>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004996:	d002      	beq.n	800499e <I2C_DMAXferCplt+0x11e>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b20      	cmp	r3, #32
 800499c:	d107      	bne.n	80049ae <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049bc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049cc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2200      	movs	r2, #0
 80049d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80049dc:	6978      	ldr	r0, [r7, #20]
 80049de:	f7fe fd53 	bl	8003488 <HAL_I2C_ErrorCallback>
}
 80049e2:	e01e      	b.n	8004a22 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d10a      	bne.n	8004a0e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004a06:	6978      	ldr	r0, [r7, #20]
 8004a08:	f7fe fd34 	bl	8003474 <HAL_I2C_MemRxCpltCallback>
}
 8004a0c:	e009      	b.n	8004a22 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2212      	movs	r2, #18
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a1c:	6978      	ldr	r0, [r7, #20]
 8004a1e:	f7fc fb1b 	bl	8001058 <HAL_I2C_MasterRxCpltCallback>
}
 8004a22:	bf00      	nop
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a44:	2200      	movs	r2, #0
 8004a46:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	2200      	movs	r2, #0
 8004a56:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7fd fcb7 	bl	80023cc <HAL_DMA_GetError>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d01b      	beq.n	8004a9c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a72:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f043 0210 	orr.w	r2, r3, #16
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7fe fcf6 	bl	8003488 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004abe:	4b4b      	ldr	r3, [pc, #300]	; (8004bec <I2C_DMAAbort+0x148>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	08db      	lsrs	r3, r3, #3
 8004ac4:	4a4a      	ldr	r2, [pc, #296]	; (8004bf0 <I2C_DMAAbort+0x14c>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	0a1a      	lsrs	r2, r3, #8
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	00da      	lsls	r2, r3, #3
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004aea:	e00a      	b.n	8004b02 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b00:	d0ea      	beq.n	8004ad8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0e:	2200      	movs	r2, #0
 8004b10:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	2200      	movs	r2, #0
 8004b20:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b30:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2200      	movs	r2, #0
 8004b36:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b44:	2200      	movs	r2, #0
 8004b46:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	2200      	movs	r2, #0
 8004b56:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b60      	cmp	r3, #96	; 0x60
 8004b72:	d10e      	bne.n	8004b92 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2200      	movs	r2, #0
 8004b88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b8a:	6978      	ldr	r0, [r7, #20]
 8004b8c:	f7fe fc86 	bl	800349c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b90:	e027      	b.n	8004be2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b92:	7cfb      	ldrb	r3, [r7, #19]
 8004b94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b98:	2b28      	cmp	r3, #40	; 0x28
 8004b9a:	d117      	bne.n	8004bcc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2228      	movs	r2, #40	; 0x28
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bca:	e007      	b.n	8004bdc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004bdc:	6978      	ldr	r0, [r7, #20]
 8004bde:	f7fe fc53 	bl	8003488 <HAL_I2C_ErrorCallback>
}
 8004be2:	bf00      	nop
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000010 	.word	0x20000010
 8004bf0:	14f8b589 	.word	0x14f8b589

08004bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c04:	e025      	b.n	8004c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d021      	beq.n	8004c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0e:	f7fc ff8f 	bl	8001b30 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d116      	bne.n	8004c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f043 0220 	orr.w	r2, r3, #32
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e023      	b.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	0c1b      	lsrs	r3, r3, #16
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d10d      	bne.n	8004c78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	43da      	mvns	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4013      	ands	r3, r2
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bf0c      	ite	eq
 8004c6e:	2301      	moveq	r3, #1
 8004c70:	2300      	movne	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	461a      	mov	r2, r3
 8004c76:	e00c      	b.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	43da      	mvns	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4013      	ands	r3, r2
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bf0c      	ite	eq
 8004c8a:	2301      	moveq	r3, #1
 8004c8c:	2300      	movne	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d0b6      	beq.n	8004c06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cb0:	e051      	b.n	8004d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc0:	d123      	bne.n	8004d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	f043 0204 	orr.w	r2, r3, #4
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e046      	b.n	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d021      	beq.n	8004d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d12:	f7fc ff0d 	bl	8001b30 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d302      	bcc.n	8004d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d116      	bne.n	8004d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f043 0220 	orr.w	r2, r3, #32
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e020      	b.n	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	0c1b      	lsrs	r3, r3, #16
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d10c      	bne.n	8004d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	43da      	mvns	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	e00b      	b.n	8004d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	43da      	mvns	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4013      	ands	r3, r2
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d18d      	bne.n	8004cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dac:	e02d      	b.n	8004e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f8aa 	bl	8004f08 <I2C_IsAcknowledgeFailed>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e02d      	b.n	8004e1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d021      	beq.n	8004e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7fc feb3 	bl	8001b30 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d116      	bne.n	8004e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	f043 0220 	orr.w	r2, r3, #32
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e007      	b.n	8004e1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e14:	2b80      	cmp	r3, #128	; 0x80
 8004e16:	d1ca      	bne.n	8004dae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e2e:	e02d      	b.n	8004e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f869 	bl	8004f08 <I2C_IsAcknowledgeFailed>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e02d      	b.n	8004e9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d021      	beq.n	8004e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e48:	f7fc fe72 	bl	8001b30 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d302      	bcc.n	8004e5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d116      	bne.n	8004e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	f043 0220 	orr.w	r2, r3, #32
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e007      	b.n	8004e9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d1ca      	bne.n	8004e30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004eb0:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	08db      	lsrs	r3, r3, #3
 8004eb6:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebc:	0a1a      	lsrs	r2, r3, #8
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f043 0220 	orr.w	r2, r3, #32
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e008      	b.n	8004ef4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef0:	d0e9      	beq.n	8004ec6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	20000010 	.word	0x20000010
 8004f04:	14f8b589 	.word	0x14f8b589

08004f08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1e:	d11b      	bne.n	8004f58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	f043 0204 	orr.w	r2, r3, #4
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004f76:	d103      	bne.n	8004f80 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f7e:	e007      	b.n	8004f90 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f88:	d102      	bne.n	8004f90 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e267      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d075      	beq.n	80050a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fba:	4b88      	ldr	r3, [pc, #544]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d00c      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fc6:	4b85      	ldr	r3, [pc, #532]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d112      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fd2:	4b82      	ldr	r3, [pc, #520]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fde:	d10b      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe0:	4b7e      	ldr	r3, [pc, #504]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d05b      	beq.n	80050a4 <HAL_RCC_OscConfig+0x108>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d157      	bne.n	80050a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e242      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005000:	d106      	bne.n	8005010 <HAL_RCC_OscConfig+0x74>
 8005002:	4b76      	ldr	r3, [pc, #472]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a75      	ldr	r2, [pc, #468]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8005008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	e01d      	b.n	800504c <HAL_RCC_OscConfig+0xb0>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005018:	d10c      	bne.n	8005034 <HAL_RCC_OscConfig+0x98>
 800501a:	4b70      	ldr	r3, [pc, #448]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a6f      	ldr	r2, [pc, #444]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8005020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	4b6d      	ldr	r3, [pc, #436]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a6c      	ldr	r2, [pc, #432]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 800502c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	e00b      	b.n	800504c <HAL_RCC_OscConfig+0xb0>
 8005034:	4b69      	ldr	r3, [pc, #420]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a68      	ldr	r2, [pc, #416]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 800503a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	4b66      	ldr	r3, [pc, #408]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a65      	ldr	r2, [pc, #404]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8005046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800504a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d013      	beq.n	800507c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005054:	f7fc fd6c 	bl	8001b30 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800505c:	f7fc fd68 	bl	8001b30 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b64      	cmp	r3, #100	; 0x64
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e207      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506e:	4b5b      	ldr	r3, [pc, #364]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0xc0>
 800507a:	e014      	b.n	80050a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507c:	f7fc fd58 	bl	8001b30 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005084:	f7fc fd54 	bl	8001b30 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b64      	cmp	r3, #100	; 0x64
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e1f3      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005096:	4b51      	ldr	r3, [pc, #324]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0xe8>
 80050a2:	e000      	b.n	80050a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d063      	beq.n	800517a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050b2:	4b4a      	ldr	r3, [pc, #296]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00b      	beq.n	80050d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050be:	4b47      	ldr	r3, [pc, #284]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d11c      	bne.n	8005104 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ca:	4b44      	ldr	r3, [pc, #272]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d116      	bne.n	8005104 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050d6:	4b41      	ldr	r3, [pc, #260]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <HAL_RCC_OscConfig+0x152>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d001      	beq.n	80050ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e1c7      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ee:	4b3b      	ldr	r3, [pc, #236]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	4937      	ldr	r1, [pc, #220]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005102:	e03a      	b.n	800517a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d020      	beq.n	800514e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800510c:	4b34      	ldr	r3, [pc, #208]	; (80051e0 <HAL_RCC_OscConfig+0x244>)
 800510e:	2201      	movs	r2, #1
 8005110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005112:	f7fc fd0d 	bl	8001b30 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800511a:	f7fc fd09 	bl	8001b30 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e1a8      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800512c:	4b2b      	ldr	r3, [pc, #172]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005138:	4b28      	ldr	r3, [pc, #160]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	4925      	ldr	r1, [pc, #148]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8005148:	4313      	orrs	r3, r2
 800514a:	600b      	str	r3, [r1, #0]
 800514c:	e015      	b.n	800517a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800514e:	4b24      	ldr	r3, [pc, #144]	; (80051e0 <HAL_RCC_OscConfig+0x244>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005154:	f7fc fcec 	bl	8001b30 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800515c:	f7fc fce8 	bl	8001b30 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e187      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516e:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d036      	beq.n	80051f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d016      	beq.n	80051bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800518e:	4b15      	ldr	r3, [pc, #84]	; (80051e4 <HAL_RCC_OscConfig+0x248>)
 8005190:	2201      	movs	r2, #1
 8005192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005194:	f7fc fccc 	bl	8001b30 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800519c:	f7fc fcc8 	bl	8001b30 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e167      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ae:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_RCC_OscConfig+0x240>)
 80051b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f0      	beq.n	800519c <HAL_RCC_OscConfig+0x200>
 80051ba:	e01b      	b.n	80051f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051bc:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <HAL_RCC_OscConfig+0x248>)
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c2:	f7fc fcb5 	bl	8001b30 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c8:	e00e      	b.n	80051e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ca:	f7fc fcb1 	bl	8001b30 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d907      	bls.n	80051e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e150      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
 80051dc:	40023800 	.word	0x40023800
 80051e0:	42470000 	.word	0x42470000
 80051e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e8:	4b88      	ldr	r3, [pc, #544]	; (800540c <HAL_RCC_OscConfig+0x470>)
 80051ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1ea      	bne.n	80051ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8097 	beq.w	8005330 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005202:	2300      	movs	r3, #0
 8005204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005206:	4b81      	ldr	r3, [pc, #516]	; (800540c <HAL_RCC_OscConfig+0x470>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10f      	bne.n	8005232 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	60bb      	str	r3, [r7, #8]
 8005216:	4b7d      	ldr	r3, [pc, #500]	; (800540c <HAL_RCC_OscConfig+0x470>)
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	4a7c      	ldr	r2, [pc, #496]	; (800540c <HAL_RCC_OscConfig+0x470>)
 800521c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005220:	6413      	str	r3, [r2, #64]	; 0x40
 8005222:	4b7a      	ldr	r3, [pc, #488]	; (800540c <HAL_RCC_OscConfig+0x470>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522a:	60bb      	str	r3, [r7, #8]
 800522c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800522e:	2301      	movs	r3, #1
 8005230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005232:	4b77      	ldr	r3, [pc, #476]	; (8005410 <HAL_RCC_OscConfig+0x474>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523a:	2b00      	cmp	r3, #0
 800523c:	d118      	bne.n	8005270 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800523e:	4b74      	ldr	r3, [pc, #464]	; (8005410 <HAL_RCC_OscConfig+0x474>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a73      	ldr	r2, [pc, #460]	; (8005410 <HAL_RCC_OscConfig+0x474>)
 8005244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800524a:	f7fc fc71 	bl	8001b30 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005252:	f7fc fc6d 	bl	8001b30 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e10c      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005264:	4b6a      	ldr	r3, [pc, #424]	; (8005410 <HAL_RCC_OscConfig+0x474>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d106      	bne.n	8005286 <HAL_RCC_OscConfig+0x2ea>
 8005278:	4b64      	ldr	r3, [pc, #400]	; (800540c <HAL_RCC_OscConfig+0x470>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527c:	4a63      	ldr	r2, [pc, #396]	; (800540c <HAL_RCC_OscConfig+0x470>)
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	6713      	str	r3, [r2, #112]	; 0x70
 8005284:	e01c      	b.n	80052c0 <HAL_RCC_OscConfig+0x324>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b05      	cmp	r3, #5
 800528c:	d10c      	bne.n	80052a8 <HAL_RCC_OscConfig+0x30c>
 800528e:	4b5f      	ldr	r3, [pc, #380]	; (800540c <HAL_RCC_OscConfig+0x470>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	4a5e      	ldr	r2, [pc, #376]	; (800540c <HAL_RCC_OscConfig+0x470>)
 8005294:	f043 0304 	orr.w	r3, r3, #4
 8005298:	6713      	str	r3, [r2, #112]	; 0x70
 800529a:	4b5c      	ldr	r3, [pc, #368]	; (800540c <HAL_RCC_OscConfig+0x470>)
 800529c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529e:	4a5b      	ldr	r2, [pc, #364]	; (800540c <HAL_RCC_OscConfig+0x470>)
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	6713      	str	r3, [r2, #112]	; 0x70
 80052a6:	e00b      	b.n	80052c0 <HAL_RCC_OscConfig+0x324>
 80052a8:	4b58      	ldr	r3, [pc, #352]	; (800540c <HAL_RCC_OscConfig+0x470>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ac:	4a57      	ldr	r2, [pc, #348]	; (800540c <HAL_RCC_OscConfig+0x470>)
 80052ae:	f023 0301 	bic.w	r3, r3, #1
 80052b2:	6713      	str	r3, [r2, #112]	; 0x70
 80052b4:	4b55      	ldr	r3, [pc, #340]	; (800540c <HAL_RCC_OscConfig+0x470>)
 80052b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b8:	4a54      	ldr	r2, [pc, #336]	; (800540c <HAL_RCC_OscConfig+0x470>)
 80052ba:	f023 0304 	bic.w	r3, r3, #4
 80052be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d015      	beq.n	80052f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c8:	f7fc fc32 	bl	8001b30 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ce:	e00a      	b.n	80052e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052d0:	f7fc fc2e 	bl	8001b30 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f241 3288 	movw	r2, #5000	; 0x1388
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e0cb      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e6:	4b49      	ldr	r3, [pc, #292]	; (800540c <HAL_RCC_OscConfig+0x470>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0ee      	beq.n	80052d0 <HAL_RCC_OscConfig+0x334>
 80052f2:	e014      	b.n	800531e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f4:	f7fc fc1c 	bl	8001b30 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052fa:	e00a      	b.n	8005312 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052fc:	f7fc fc18 	bl	8001b30 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	f241 3288 	movw	r2, #5000	; 0x1388
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e0b5      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005312:	4b3e      	ldr	r3, [pc, #248]	; (800540c <HAL_RCC_OscConfig+0x470>)
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1ee      	bne.n	80052fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800531e:	7dfb      	ldrb	r3, [r7, #23]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d105      	bne.n	8005330 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005324:	4b39      	ldr	r3, [pc, #228]	; (800540c <HAL_RCC_OscConfig+0x470>)
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	4a38      	ldr	r2, [pc, #224]	; (800540c <HAL_RCC_OscConfig+0x470>)
 800532a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800532e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 80a1 	beq.w	800547c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800533a:	4b34      	ldr	r3, [pc, #208]	; (800540c <HAL_RCC_OscConfig+0x470>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
 8005342:	2b08      	cmp	r3, #8
 8005344:	d05c      	beq.n	8005400 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b02      	cmp	r3, #2
 800534c:	d141      	bne.n	80053d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534e:	4b31      	ldr	r3, [pc, #196]	; (8005414 <HAL_RCC_OscConfig+0x478>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005354:	f7fc fbec 	bl	8001b30 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800535c:	f7fc fbe8 	bl	8001b30 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e087      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536e:	4b27      	ldr	r3, [pc, #156]	; (800540c <HAL_RCC_OscConfig+0x470>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	019b      	lsls	r3, r3, #6
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	085b      	lsrs	r3, r3, #1
 8005392:	3b01      	subs	r3, #1
 8005394:	041b      	lsls	r3, r3, #16
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	061b      	lsls	r3, r3, #24
 800539e:	491b      	ldr	r1, [pc, #108]	; (800540c <HAL_RCC_OscConfig+0x470>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053a4:	4b1b      	ldr	r3, [pc, #108]	; (8005414 <HAL_RCC_OscConfig+0x478>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053aa:	f7fc fbc1 	bl	8001b30 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b0:	e008      	b.n	80053c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053b2:	f7fc fbbd 	bl	8001b30 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e05c      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c4:	4b11      	ldr	r3, [pc, #68]	; (800540c <HAL_RCC_OscConfig+0x470>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0f0      	beq.n	80053b2 <HAL_RCC_OscConfig+0x416>
 80053d0:	e054      	b.n	800547c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <HAL_RCC_OscConfig+0x478>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d8:	f7fc fbaa 	bl	8001b30 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e0:	f7fc fba6 	bl	8001b30 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e045      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f2:	4b06      	ldr	r3, [pc, #24]	; (800540c <HAL_RCC_OscConfig+0x470>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f0      	bne.n	80053e0 <HAL_RCC_OscConfig+0x444>
 80053fe:	e03d      	b.n	800547c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d107      	bne.n	8005418 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e038      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
 800540c:	40023800 	.word	0x40023800
 8005410:	40007000 	.word	0x40007000
 8005414:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005418:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <HAL_RCC_OscConfig+0x4ec>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d028      	beq.n	8005478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005430:	429a      	cmp	r2, r3
 8005432:	d121      	bne.n	8005478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800543e:	429a      	cmp	r2, r3
 8005440:	d11a      	bne.n	8005478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005448:	4013      	ands	r3, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800544e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005450:	4293      	cmp	r3, r2
 8005452:	d111      	bne.n	8005478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	085b      	lsrs	r3, r3, #1
 8005460:	3b01      	subs	r3, #1
 8005462:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005464:	429a      	cmp	r2, r3
 8005466:	d107      	bne.n	8005478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005472:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005474:	429a      	cmp	r2, r3
 8005476:	d001      	beq.n	800547c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40023800 	.word	0x40023800

0800548c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0cc      	b.n	800563a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054a0:	4b68      	ldr	r3, [pc, #416]	; (8005644 <HAL_RCC_ClockConfig+0x1b8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d90c      	bls.n	80054c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b65      	ldr	r3, [pc, #404]	; (8005644 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b63      	ldr	r3, [pc, #396]	; (8005644 <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0b8      	b.n	800563a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d020      	beq.n	8005516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054e0:	4b59      	ldr	r3, [pc, #356]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	4a58      	ldr	r2, [pc, #352]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d005      	beq.n	8005504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054f8:	4b53      	ldr	r3, [pc, #332]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	4a52      	ldr	r2, [pc, #328]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005504:	4b50      	ldr	r3, [pc, #320]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	494d      	ldr	r1, [pc, #308]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 8005512:	4313      	orrs	r3, r2
 8005514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d044      	beq.n	80055ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d107      	bne.n	800553a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552a:	4b47      	ldr	r3, [pc, #284]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d119      	bne.n	800556a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e07f      	b.n	800563a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d003      	beq.n	800554a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005546:	2b03      	cmp	r3, #3
 8005548:	d107      	bne.n	800555a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800554a:	4b3f      	ldr	r3, [pc, #252]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e06f      	b.n	800563a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555a:	4b3b      	ldr	r3, [pc, #236]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e067      	b.n	800563a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800556a:	4b37      	ldr	r3, [pc, #220]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f023 0203 	bic.w	r2, r3, #3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4934      	ldr	r1, [pc, #208]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 8005578:	4313      	orrs	r3, r2
 800557a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800557c:	f7fc fad8 	bl	8001b30 <HAL_GetTick>
 8005580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005582:	e00a      	b.n	800559a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005584:	f7fc fad4 	bl	8001b30 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e04f      	b.n	800563a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559a:	4b2b      	ldr	r3, [pc, #172]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 020c 	and.w	r2, r3, #12
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d1eb      	bne.n	8005584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055ac:	4b25      	ldr	r3, [pc, #148]	; (8005644 <HAL_RCC_ClockConfig+0x1b8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d20c      	bcs.n	80055d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ba:	4b22      	ldr	r3, [pc, #136]	; (8005644 <HAL_RCC_ClockConfig+0x1b8>)
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055c2:	4b20      	ldr	r3, [pc, #128]	; (8005644 <HAL_RCC_ClockConfig+0x1b8>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d001      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e032      	b.n	800563a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d008      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055e0:	4b19      	ldr	r3, [pc, #100]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	4916      	ldr	r1, [pc, #88]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055fe:	4b12      	ldr	r3, [pc, #72]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	490e      	ldr	r1, [pc, #56]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 800560e:	4313      	orrs	r3, r2
 8005610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005612:	f000 f821 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 8005616:	4602      	mov	r2, r0
 8005618:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	091b      	lsrs	r3, r3, #4
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	490a      	ldr	r1, [pc, #40]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 8005624:	5ccb      	ldrb	r3, [r1, r3]
 8005626:	fa22 f303 	lsr.w	r3, r2, r3
 800562a:	4a09      	ldr	r2, [pc, #36]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 800562c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800562e:	4b09      	ldr	r3, [pc, #36]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f7fc fa38 	bl	8001aa8 <HAL_InitTick>

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40023c00 	.word	0x40023c00
 8005648:	40023800 	.word	0x40023800
 800564c:	0800b87c 	.word	0x0800b87c
 8005650:	20000010 	.word	0x20000010
 8005654:	20000014 	.word	0x20000014

08005658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800565c:	b094      	sub	sp, #80	; 0x50
 800565e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	647b      	str	r3, [r7, #68]	; 0x44
 8005664:	2300      	movs	r3, #0
 8005666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005668:	2300      	movs	r3, #0
 800566a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005670:	4b79      	ldr	r3, [pc, #484]	; (8005858 <HAL_RCC_GetSysClockFreq+0x200>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 030c 	and.w	r3, r3, #12
 8005678:	2b08      	cmp	r3, #8
 800567a:	d00d      	beq.n	8005698 <HAL_RCC_GetSysClockFreq+0x40>
 800567c:	2b08      	cmp	r3, #8
 800567e:	f200 80e1 	bhi.w	8005844 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <HAL_RCC_GetSysClockFreq+0x34>
 8005686:	2b04      	cmp	r3, #4
 8005688:	d003      	beq.n	8005692 <HAL_RCC_GetSysClockFreq+0x3a>
 800568a:	e0db      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800568c:	4b73      	ldr	r3, [pc, #460]	; (800585c <HAL_RCC_GetSysClockFreq+0x204>)
 800568e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005690:	e0db      	b.n	800584a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005692:	4b73      	ldr	r3, [pc, #460]	; (8005860 <HAL_RCC_GetSysClockFreq+0x208>)
 8005694:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005696:	e0d8      	b.n	800584a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005698:	4b6f      	ldr	r3, [pc, #444]	; (8005858 <HAL_RCC_GetSysClockFreq+0x200>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056a2:	4b6d      	ldr	r3, [pc, #436]	; (8005858 <HAL_RCC_GetSysClockFreq+0x200>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d063      	beq.n	8005776 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056ae:	4b6a      	ldr	r3, [pc, #424]	; (8005858 <HAL_RCC_GetSysClockFreq+0x200>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	099b      	lsrs	r3, r3, #6
 80056b4:	2200      	movs	r2, #0
 80056b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80056b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c0:	633b      	str	r3, [r7, #48]	; 0x30
 80056c2:	2300      	movs	r3, #0
 80056c4:	637b      	str	r3, [r7, #52]	; 0x34
 80056c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056ca:	4622      	mov	r2, r4
 80056cc:	462b      	mov	r3, r5
 80056ce:	f04f 0000 	mov.w	r0, #0
 80056d2:	f04f 0100 	mov.w	r1, #0
 80056d6:	0159      	lsls	r1, r3, #5
 80056d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056dc:	0150      	lsls	r0, r2, #5
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4621      	mov	r1, r4
 80056e4:	1a51      	subs	r1, r2, r1
 80056e6:	6139      	str	r1, [r7, #16]
 80056e8:	4629      	mov	r1, r5
 80056ea:	eb63 0301 	sbc.w	r3, r3, r1
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056fc:	4659      	mov	r1, fp
 80056fe:	018b      	lsls	r3, r1, #6
 8005700:	4651      	mov	r1, sl
 8005702:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005706:	4651      	mov	r1, sl
 8005708:	018a      	lsls	r2, r1, #6
 800570a:	4651      	mov	r1, sl
 800570c:	ebb2 0801 	subs.w	r8, r2, r1
 8005710:	4659      	mov	r1, fp
 8005712:	eb63 0901 	sbc.w	r9, r3, r1
 8005716:	f04f 0200 	mov.w	r2, #0
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800572a:	4690      	mov	r8, r2
 800572c:	4699      	mov	r9, r3
 800572e:	4623      	mov	r3, r4
 8005730:	eb18 0303 	adds.w	r3, r8, r3
 8005734:	60bb      	str	r3, [r7, #8]
 8005736:	462b      	mov	r3, r5
 8005738:	eb49 0303 	adc.w	r3, r9, r3
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800574a:	4629      	mov	r1, r5
 800574c:	024b      	lsls	r3, r1, #9
 800574e:	4621      	mov	r1, r4
 8005750:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005754:	4621      	mov	r1, r4
 8005756:	024a      	lsls	r2, r1, #9
 8005758:	4610      	mov	r0, r2
 800575a:	4619      	mov	r1, r3
 800575c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800575e:	2200      	movs	r2, #0
 8005760:	62bb      	str	r3, [r7, #40]	; 0x28
 8005762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005764:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005768:	f7fb fa96 	bl	8000c98 <__aeabi_uldivmod>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4613      	mov	r3, r2
 8005772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005774:	e058      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005776:	4b38      	ldr	r3, [pc, #224]	; (8005858 <HAL_RCC_GetSysClockFreq+0x200>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	099b      	lsrs	r3, r3, #6
 800577c:	2200      	movs	r2, #0
 800577e:	4618      	mov	r0, r3
 8005780:	4611      	mov	r1, r2
 8005782:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005786:	623b      	str	r3, [r7, #32]
 8005788:	2300      	movs	r3, #0
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
 800578c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005790:	4642      	mov	r2, r8
 8005792:	464b      	mov	r3, r9
 8005794:	f04f 0000 	mov.w	r0, #0
 8005798:	f04f 0100 	mov.w	r1, #0
 800579c:	0159      	lsls	r1, r3, #5
 800579e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057a2:	0150      	lsls	r0, r2, #5
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4641      	mov	r1, r8
 80057aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80057ae:	4649      	mov	r1, r9
 80057b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057c8:	ebb2 040a 	subs.w	r4, r2, sl
 80057cc:	eb63 050b 	sbc.w	r5, r3, fp
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	00eb      	lsls	r3, r5, #3
 80057da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057de:	00e2      	lsls	r2, r4, #3
 80057e0:	4614      	mov	r4, r2
 80057e2:	461d      	mov	r5, r3
 80057e4:	4643      	mov	r3, r8
 80057e6:	18e3      	adds	r3, r4, r3
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	464b      	mov	r3, r9
 80057ec:	eb45 0303 	adc.w	r3, r5, r3
 80057f0:	607b      	str	r3, [r7, #4]
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057fe:	4629      	mov	r1, r5
 8005800:	028b      	lsls	r3, r1, #10
 8005802:	4621      	mov	r1, r4
 8005804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005808:	4621      	mov	r1, r4
 800580a:	028a      	lsls	r2, r1, #10
 800580c:	4610      	mov	r0, r2
 800580e:	4619      	mov	r1, r3
 8005810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005812:	2200      	movs	r2, #0
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	61fa      	str	r2, [r7, #28]
 8005818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800581c:	f7fb fa3c 	bl	8000c98 <__aeabi_uldivmod>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4613      	mov	r3, r2
 8005826:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005828:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <HAL_RCC_GetSysClockFreq+0x200>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	0c1b      	lsrs	r3, r3, #16
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	3301      	adds	r3, #1
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800583a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005842:	e002      	b.n	800584a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <HAL_RCC_GetSysClockFreq+0x204>)
 8005846:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800584a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800584c:	4618      	mov	r0, r3
 800584e:	3750      	adds	r7, #80	; 0x50
 8005850:	46bd      	mov	sp, r7
 8005852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005856:	bf00      	nop
 8005858:	40023800 	.word	0x40023800
 800585c:	00f42400 	.word	0x00f42400
 8005860:	007a1200 	.word	0x007a1200

08005864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005868:	4b03      	ldr	r3, [pc, #12]	; (8005878 <HAL_RCC_GetHCLKFreq+0x14>)
 800586a:	681b      	ldr	r3, [r3, #0]
}
 800586c:	4618      	mov	r0, r3
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20000010 	.word	0x20000010

0800587c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005880:	f7ff fff0 	bl	8005864 <HAL_RCC_GetHCLKFreq>
 8005884:	4602      	mov	r2, r0
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	0a9b      	lsrs	r3, r3, #10
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	4903      	ldr	r1, [pc, #12]	; (80058a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005892:	5ccb      	ldrb	r3, [r1, r3]
 8005894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005898:	4618      	mov	r0, r3
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40023800 	.word	0x40023800
 80058a0:	0800b88c 	.word	0x0800b88c

080058a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058a8:	f7ff ffdc 	bl	8005864 <HAL_RCC_GetHCLKFreq>
 80058ac:	4602      	mov	r2, r0
 80058ae:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	0b5b      	lsrs	r3, r3, #13
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	4903      	ldr	r1, [pc, #12]	; (80058c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058ba:	5ccb      	ldrb	r3, [r1, r3]
 80058bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40023800 	.word	0x40023800
 80058c8:	0800b88c 	.word	0x0800b88c

080058cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e041      	b.n	8005962 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d106      	bne.n	80058f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fb fea4 	bl	8001640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3304      	adds	r3, #4
 8005908:	4619      	mov	r1, r3
 800590a:	4610      	mov	r0, r2
 800590c:	f000 f9c0 	bl	8005c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b01      	cmp	r3, #1
 800597e:	d001      	beq.n	8005984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e044      	b.n	8005a0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1e      	ldr	r2, [pc, #120]	; (8005a1c <HAL_TIM_Base_Start_IT+0xb0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d018      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x6c>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ae:	d013      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x6c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1a      	ldr	r2, [pc, #104]	; (8005a20 <HAL_TIM_Base_Start_IT+0xb4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00e      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x6c>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <HAL_TIM_Base_Start_IT+0xb8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d009      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x6c>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a17      	ldr	r2, [pc, #92]	; (8005a28 <HAL_TIM_Base_Start_IT+0xbc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d004      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0x6c>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a16      	ldr	r2, [pc, #88]	; (8005a2c <HAL_TIM_Base_Start_IT+0xc0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d111      	bne.n	80059fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b06      	cmp	r3, #6
 80059e8:	d010      	beq.n	8005a0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 0201 	orr.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fa:	e007      	b.n	8005a0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40010000 	.word	0x40010000
 8005a20:	40000400 	.word	0x40000400
 8005a24:	40000800 	.word	0x40000800
 8005a28:	40000c00 	.word	0x40000c00
 8005a2c:	40014000 	.word	0x40014000

08005a30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d122      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d11b      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0202 	mvn.w	r2, #2
 8005a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f8ee 	bl	8005c54 <HAL_TIM_IC_CaptureCallback>
 8005a78:	e005      	b.n	8005a86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f8e0 	bl	8005c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f8f1 	bl	8005c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d122      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d11b      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0204 	mvn.w	r2, #4
 8005ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f8c4 	bl	8005c54 <HAL_TIM_IC_CaptureCallback>
 8005acc:	e005      	b.n	8005ada <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f8b6 	bl	8005c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f8c7 	bl	8005c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d122      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d11b      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0208 	mvn.w	r2, #8
 8005b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2204      	movs	r2, #4
 8005b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f89a 	bl	8005c54 <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f88c 	bl	8005c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f89d 	bl	8005c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 0310 	and.w	r3, r3, #16
 8005b3e:	2b10      	cmp	r3, #16
 8005b40:	d122      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b10      	cmp	r3, #16
 8005b4e:	d11b      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0210 	mvn.w	r2, #16
 8005b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2208      	movs	r2, #8
 8005b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f870 	bl	8005c54 <HAL_TIM_IC_CaptureCallback>
 8005b74:	e005      	b.n	8005b82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f862 	bl	8005c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f873 	bl	8005c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d10e      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d107      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0201 	mvn.w	r2, #1
 8005bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fb fa2a 	bl	8001008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bbe:	2b80      	cmp	r3, #128	; 0x80
 8005bc0:	d10e      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bcc:	2b80      	cmp	r3, #128	; 0x80
 8005bce:	d107      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f8e2 	bl	8005da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bea:	2b40      	cmp	r3, #64	; 0x40
 8005bec:	d10e      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf8:	2b40      	cmp	r3, #64	; 0x40
 8005bfa:	d107      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f838 	bl	8005c7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	d10e      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d107      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0220 	mvn.w	r2, #32
 8005c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f8ac 	bl	8005d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c38:	bf00      	nop
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a34      	ldr	r2, [pc, #208]	; (8005d74 <TIM_Base_SetConfig+0xe4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00f      	beq.n	8005cc8 <TIM_Base_SetConfig+0x38>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cae:	d00b      	beq.n	8005cc8 <TIM_Base_SetConfig+0x38>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a31      	ldr	r2, [pc, #196]	; (8005d78 <TIM_Base_SetConfig+0xe8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d007      	beq.n	8005cc8 <TIM_Base_SetConfig+0x38>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a30      	ldr	r2, [pc, #192]	; (8005d7c <TIM_Base_SetConfig+0xec>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_Base_SetConfig+0x38>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a2f      	ldr	r2, [pc, #188]	; (8005d80 <TIM_Base_SetConfig+0xf0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d108      	bne.n	8005cda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a25      	ldr	r2, [pc, #148]	; (8005d74 <TIM_Base_SetConfig+0xe4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d01b      	beq.n	8005d1a <TIM_Base_SetConfig+0x8a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce8:	d017      	beq.n	8005d1a <TIM_Base_SetConfig+0x8a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a22      	ldr	r2, [pc, #136]	; (8005d78 <TIM_Base_SetConfig+0xe8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d013      	beq.n	8005d1a <TIM_Base_SetConfig+0x8a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a21      	ldr	r2, [pc, #132]	; (8005d7c <TIM_Base_SetConfig+0xec>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00f      	beq.n	8005d1a <TIM_Base_SetConfig+0x8a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a20      	ldr	r2, [pc, #128]	; (8005d80 <TIM_Base_SetConfig+0xf0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00b      	beq.n	8005d1a <TIM_Base_SetConfig+0x8a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a1f      	ldr	r2, [pc, #124]	; (8005d84 <TIM_Base_SetConfig+0xf4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d007      	beq.n	8005d1a <TIM_Base_SetConfig+0x8a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a1e      	ldr	r2, [pc, #120]	; (8005d88 <TIM_Base_SetConfig+0xf8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d003      	beq.n	8005d1a <TIM_Base_SetConfig+0x8a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <TIM_Base_SetConfig+0xfc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d108      	bne.n	8005d2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a08      	ldr	r2, [pc, #32]	; (8005d74 <TIM_Base_SetConfig+0xe4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d103      	bne.n	8005d60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	615a      	str	r2, [r3, #20]
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40014400 	.word	0x40014400
 8005d8c:	40014800 	.word	0x40014800

08005d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e03f      	b.n	8005e4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fb fc56 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2224      	movs	r2, #36	; 0x24
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fdd1 	bl	80069a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695a      	ldr	r2, [r3, #20]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08c      	sub	sp, #48	; 0x30
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d165      	bne.n	8005f3a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <HAL_UART_Transmit_DMA+0x26>
 8005e74:	88fb      	ldrh	r3, [r7, #6]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e05e      	b.n	8005f3c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_UART_Transmit_DMA+0x38>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e057      	b.n	8005f3c <HAL_UART_Transmit_DMA+0xe8>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	88fa      	ldrh	r2, [r7, #6]
 8005e9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	88fa      	ldrh	r2, [r7, #6]
 8005ea4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2221      	movs	r2, #33	; 0x21
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb8:	4a22      	ldr	r2, [pc, #136]	; (8005f44 <HAL_UART_Transmit_DMA+0xf0>)
 8005eba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec0:	4a21      	ldr	r2, [pc, #132]	; (8005f48 <HAL_UART_Transmit_DMA+0xf4>)
 8005ec2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec8:	4a20      	ldr	r2, [pc, #128]	; (8005f4c <HAL_UART_Transmit_DMA+0xf8>)
 8005eca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005ed4:	f107 0308 	add.w	r3, r7, #8
 8005ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee0:	6819      	ldr	r1, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	461a      	mov	r2, r3
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	f7fb ffec 	bl	8001ec8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ef8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3314      	adds	r3, #20
 8005f08:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	617b      	str	r3, [r7, #20]
   return(result);
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3314      	adds	r3, #20
 8005f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f22:	627a      	str	r2, [r7, #36]	; 0x24
 8005f24:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	6a39      	ldr	r1, [r7, #32]
 8005f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e5      	bne.n	8005f02 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	e000      	b.n	8005f3c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005f3a:	2302      	movs	r3, #2
  }
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3730      	adds	r7, #48	; 0x30
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	080064d5 	.word	0x080064d5
 8005f48:	0800656f 	.word	0x0800656f
 8005f4c:	0800658b 	.word	0x0800658b

08005f50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b0ba      	sub	sp, #232	; 0xe8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10f      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d009      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x66>
 8005fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fc3c 	bl	800682c <UART_Receive_IT>
      return;
 8005fb4:	e256      	b.n	8006464 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 80de 	beq.w	800617c <HAL_UART_IRQHandler+0x22c>
 8005fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80d1 	beq.w	800617c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <HAL_UART_IRQHandler+0xae>
 8005fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	f043 0201 	orr.w	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <HAL_UART_IRQHandler+0xd2>
 800600a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	f043 0202 	orr.w	r2, r3, #2
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <HAL_UART_IRQHandler+0xf6>
 800602e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	f043 0204 	orr.w	r2, r3, #4
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b00      	cmp	r3, #0
 8006050:	d011      	beq.n	8006076 <HAL_UART_IRQHandler+0x126>
 8006052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d105      	bne.n	800606a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800605e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d005      	beq.n	8006076 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f043 0208 	orr.w	r2, r3, #8
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 81ed 	beq.w	800645a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d008      	beq.n	800609e <HAL_UART_IRQHandler+0x14e>
 800608c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fbc7 	bl	800682c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a8:	2b40      	cmp	r3, #64	; 0x40
 80060aa:	bf0c      	ite	eq
 80060ac:	2301      	moveq	r3, #1
 80060ae:	2300      	movne	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	f003 0308 	and.w	r3, r3, #8
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d103      	bne.n	80060ca <HAL_UART_IRQHandler+0x17a>
 80060c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d04f      	beq.n	800616a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 facf 	bl	800666e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060da:	2b40      	cmp	r3, #64	; 0x40
 80060dc:	d141      	bne.n	8006162 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3314      	adds	r3, #20
 80060e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80060f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3314      	adds	r3, #20
 8006106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800610a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800610e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1d9      	bne.n	80060de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	2b00      	cmp	r3, #0
 8006130:	d013      	beq.n	800615a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	4a7d      	ldr	r2, [pc, #500]	; (800632c <HAL_UART_IRQHandler+0x3dc>)
 8006138:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	4618      	mov	r0, r3
 8006140:	f7fb ff8a 	bl	8002058 <HAL_DMA_Abort_IT>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d016      	beq.n	8006178 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006154:	4610      	mov	r0, r2
 8006156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006158:	e00e      	b.n	8006178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f9a4 	bl	80064a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006160:	e00a      	b.n	8006178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f9a0 	bl	80064a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006168:	e006      	b.n	8006178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f99c 	bl	80064a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006176:	e170      	b.n	800645a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006178:	bf00      	nop
    return;
 800617a:	e16e      	b.n	800645a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	2b01      	cmp	r3, #1
 8006182:	f040 814a 	bne.w	800641a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618a:	f003 0310 	and.w	r3, r3, #16
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 8143 	beq.w	800641a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 813c 	beq.w	800641a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061a2:	2300      	movs	r3, #0
 80061a4:	60bb      	str	r3, [r7, #8]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60bb      	str	r3, [r7, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	60bb      	str	r3, [r7, #8]
 80061b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	f040 80b4 	bne.w	8006330 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8140 	beq.w	800645e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061e6:	429a      	cmp	r2, r3
 80061e8:	f080 8139 	bcs.w	800645e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061fe:	f000 8088 	beq.w	8006312 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	330c      	adds	r3, #12
 8006208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006218:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800621c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	330c      	adds	r3, #12
 800622a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800622e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006236:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800623a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1d9      	bne.n	8006202 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3314      	adds	r3, #20
 8006254:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800625e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006260:	f023 0301 	bic.w	r3, r3, #1
 8006264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3314      	adds	r3, #20
 800626e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006272:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006276:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800627a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800627e:	e841 2300 	strex	r3, r2, [r1]
 8006282:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1e1      	bne.n	800624e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3314      	adds	r3, #20
 8006290:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006294:	e853 3f00 	ldrex	r3, [r3]
 8006298:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800629a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800629c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3314      	adds	r3, #20
 80062aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e3      	bne.n	800628a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	330c      	adds	r3, #12
 80062d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e2:	f023 0310 	bic.w	r3, r3, #16
 80062e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	330c      	adds	r3, #12
 80062f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80062f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80062f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e3      	bne.n	80062d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630c:	4618      	mov	r0, r3
 800630e:	f7fb fe33 	bl	8001f78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800631a:	b29b      	uxth	r3, r3
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	b29b      	uxth	r3, r3
 8006320:	4619      	mov	r1, r3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f8ca 	bl	80064bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006328:	e099      	b.n	800645e <HAL_UART_IRQHandler+0x50e>
 800632a:	bf00      	nop
 800632c:	08006735 	.word	0x08006735
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006338:	b29b      	uxth	r3, r3
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 808b 	beq.w	8006462 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800634c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8086 	beq.w	8006462 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	330c      	adds	r3, #12
 800635c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006368:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800636c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	330c      	adds	r3, #12
 8006376:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800637a:	647a      	str	r2, [r7, #68]	; 0x44
 800637c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006380:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e3      	bne.n	8006356 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3314      	adds	r3, #20
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	623b      	str	r3, [r7, #32]
   return(result);
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3314      	adds	r3, #20
 80063ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063b2:	633a      	str	r2, [r7, #48]	; 0x30
 80063b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e3      	bne.n	800638e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	330c      	adds	r3, #12
 80063da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0310 	bic.w	r3, r3, #16
 80063ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	330c      	adds	r3, #12
 80063f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80063f8:	61fa      	str	r2, [r7, #28]
 80063fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	69b9      	ldr	r1, [r7, #24]
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	617b      	str	r3, [r7, #20]
   return(result);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e3      	bne.n	80063d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800640c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f852 	bl	80064bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006418:	e023      	b.n	8006462 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800641a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <HAL_UART_IRQHandler+0x4ea>
 8006426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800642a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f992 	bl	800675c <UART_Transmit_IT>
    return;
 8006438:	e014      	b.n	8006464 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800643a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00e      	beq.n	8006464 <HAL_UART_IRQHandler+0x514>
 8006446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800644a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d008      	beq.n	8006464 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f9d2 	bl	80067fc <UART_EndTransmit_IT>
    return;
 8006458:	e004      	b.n	8006464 <HAL_UART_IRQHandler+0x514>
    return;
 800645a:	bf00      	nop
 800645c:	e002      	b.n	8006464 <HAL_UART_IRQHandler+0x514>
      return;
 800645e:	bf00      	nop
 8006460:	e000      	b.n	8006464 <HAL_UART_IRQHandler+0x514>
      return;
 8006462:	bf00      	nop
  }
}
 8006464:	37e8      	adds	r7, #232	; 0xe8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop

0800646c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b090      	sub	sp, #64	; 0x40
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d137      	bne.n	8006560 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80064f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f2:	2200      	movs	r2, #0
 80064f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3314      	adds	r3, #20
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	623b      	str	r3, [r7, #32]
   return(result);
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800650c:	63bb      	str	r3, [r7, #56]	; 0x38
 800650e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3314      	adds	r3, #20
 8006514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006516:	633a      	str	r2, [r7, #48]	; 0x30
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800651c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651e:	e841 2300 	strex	r3, r2, [r1]
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1e5      	bne.n	80064f6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800652a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	60fb      	str	r3, [r7, #12]
   return(result);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006540:	637b      	str	r3, [r7, #52]	; 0x34
 8006542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	330c      	adds	r3, #12
 8006548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800654a:	61fa      	str	r2, [r7, #28]
 800654c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	69b9      	ldr	r1, [r7, #24]
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	617b      	str	r3, [r7, #20]
   return(result);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e5      	bne.n	800652a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800655e:	e002      	b.n	8006566 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006560:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006562:	f7ff ff83 	bl	800646c <HAL_UART_TxCpltCallback>
}
 8006566:	bf00      	nop
 8006568:	3740      	adds	r7, #64	; 0x40
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b084      	sub	sp, #16
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f7ff ff7f 	bl	8006480 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006582:	bf00      	nop
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a6:	2b80      	cmp	r3, #128	; 0x80
 80065a8:	bf0c      	ite	eq
 80065aa:	2301      	moveq	r3, #1
 80065ac:	2300      	movne	r3, #0
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b21      	cmp	r3, #33	; 0x21
 80065bc:	d108      	bne.n	80065d0 <UART_DMAError+0x46>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2200      	movs	r2, #0
 80065c8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80065ca:	68b8      	ldr	r0, [r7, #8]
 80065cc:	f000 f827 	bl	800661e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	bf0c      	ite	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	2300      	movne	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b22      	cmp	r3, #34	; 0x22
 80065f0:	d108      	bne.n	8006604 <UART_DMAError+0x7a>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d005      	beq.n	8006604 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2200      	movs	r2, #0
 80065fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80065fe:	68b8      	ldr	r0, [r7, #8]
 8006600:	f000 f835 	bl	800666e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	f043 0210 	orr.w	r2, r3, #16
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006610:	68b8      	ldr	r0, [r7, #8]
 8006612:	f7ff ff49 	bl	80064a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006616:	bf00      	nop
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800661e:	b480      	push	{r7}
 8006620:	b089      	sub	sp, #36	; 0x24
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	330c      	adds	r3, #12
 800662c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	60bb      	str	r3, [r7, #8]
   return(result);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800663c:	61fb      	str	r3, [r7, #28]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	69fa      	ldr	r2, [r7, #28]
 8006646:	61ba      	str	r2, [r7, #24]
 8006648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	6979      	ldr	r1, [r7, #20]
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	613b      	str	r3, [r7, #16]
   return(result);
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e5      	bne.n	8006626 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006662:	bf00      	nop
 8006664:	3724      	adds	r7, #36	; 0x24
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800666e:	b480      	push	{r7}
 8006670:	b095      	sub	sp, #84	; 0x54
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	330c      	adds	r3, #12
 800667c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800668c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	330c      	adds	r3, #12
 8006694:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006696:	643a      	str	r2, [r7, #64]	; 0x40
 8006698:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800669c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e5      	bne.n	8006676 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3314      	adds	r3, #20
 80066b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	f023 0301 	bic.w	r3, r3, #1
 80066c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3314      	adds	r3, #20
 80066c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e5      	bne.n	80066aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d119      	bne.n	800671a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	330c      	adds	r3, #12
 80066ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	e853 3f00 	ldrex	r3, [r3]
 80066f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f023 0310 	bic.w	r3, r3, #16
 80066fc:	647b      	str	r3, [r7, #68]	; 0x44
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	330c      	adds	r3, #12
 8006704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006706:	61ba      	str	r2, [r7, #24]
 8006708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6979      	ldr	r1, [r7, #20]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	613b      	str	r3, [r7, #16]
   return(result);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e5      	bne.n	80066e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006728:	bf00      	nop
 800672a:	3754      	adds	r7, #84	; 0x54
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006740:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f7ff feaa 	bl	80064a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006754:	bf00      	nop
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b21      	cmp	r3, #33	; 0x21
 800676e:	d13e      	bne.n	80067ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006778:	d114      	bne.n	80067a4 <UART_Transmit_IT+0x48>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d110      	bne.n	80067a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	461a      	mov	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006796:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	1c9a      	adds	r2, r3, #2
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	621a      	str	r2, [r3, #32]
 80067a2:	e008      	b.n	80067b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	1c59      	adds	r1, r3, #1
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6211      	str	r1, [r2, #32]
 80067ae:	781a      	ldrb	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29b      	uxth	r3, r3
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	4619      	mov	r1, r3
 80067c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10f      	bne.n	80067ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68da      	ldr	r2, [r3, #12]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e000      	b.n	80067f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067ee:	2302      	movs	r3, #2
  }
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006812:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff fe25 	bl	800646c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08c      	sub	sp, #48	; 0x30
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b22      	cmp	r3, #34	; 0x22
 800683e:	f040 80ab 	bne.w	8006998 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684a:	d117      	bne.n	800687c <UART_Receive_IT+0x50>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d113      	bne.n	800687c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006854:	2300      	movs	r3, #0
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	b29b      	uxth	r3, r3
 8006866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686a:	b29a      	uxth	r2, r3
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006874:	1c9a      	adds	r2, r3, #2
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	629a      	str	r2, [r3, #40]	; 0x28
 800687a:	e026      	b.n	80068ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006882:	2300      	movs	r3, #0
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688e:	d007      	beq.n	80068a0 <UART_Receive_IT+0x74>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10a      	bne.n	80068ae <UART_Receive_IT+0x82>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d106      	bne.n	80068ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	701a      	strb	r2, [r3, #0]
 80068ac:	e008      	b.n	80068c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	4619      	mov	r1, r3
 80068d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d15a      	bne.n	8006994 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0220 	bic.w	r2, r2, #32
 80068ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68da      	ldr	r2, [r3, #12]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695a      	ldr	r2, [r3, #20]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0201 	bic.w	r2, r2, #1
 800690c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	2b01      	cmp	r3, #1
 800691c:	d135      	bne.n	800698a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	330c      	adds	r3, #12
 800692a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	613b      	str	r3, [r7, #16]
   return(result);
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f023 0310 	bic.w	r3, r3, #16
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	330c      	adds	r3, #12
 8006942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006944:	623a      	str	r2, [r7, #32]
 8006946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	69f9      	ldr	r1, [r7, #28]
 800694a:	6a3a      	ldr	r2, [r7, #32]
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	61bb      	str	r3, [r7, #24]
   return(result);
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e5      	bne.n	8006924 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0310 	and.w	r3, r3, #16
 8006962:	2b10      	cmp	r3, #16
 8006964:	d10a      	bne.n	800697c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7ff fd9a 	bl	80064bc <HAL_UARTEx_RxEventCallback>
 8006988:	e002      	b.n	8006990 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff fd82 	bl	8006494 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	e002      	b.n	800699a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	e000      	b.n	800699a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006998:	2302      	movs	r3, #2
  }
}
 800699a:	4618      	mov	r0, r3
 800699c:	3730      	adds	r7, #48	; 0x30
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a8:	b0c0      	sub	sp, #256	; 0x100
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c0:	68d9      	ldr	r1, [r3, #12]
 80069c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	ea40 0301 	orr.w	r3, r0, r1
 80069cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	431a      	orrs	r2, r3
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069fc:	f021 010c 	bic.w	r1, r1, #12
 8006a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1e:	6999      	ldr	r1, [r3, #24]
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	ea40 0301 	orr.w	r3, r0, r1
 8006a2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b8f      	ldr	r3, [pc, #572]	; (8006c70 <UART_SetConfig+0x2cc>)
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d005      	beq.n	8006a44 <UART_SetConfig+0xa0>
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	4b8d      	ldr	r3, [pc, #564]	; (8006c74 <UART_SetConfig+0x2d0>)
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d104      	bne.n	8006a4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a44:	f7fe ff2e 	bl	80058a4 <HAL_RCC_GetPCLK2Freq>
 8006a48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a4c:	e003      	b.n	8006a56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a4e:	f7fe ff15 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8006a52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a60:	f040 810c 	bne.w	8006c7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a76:	4622      	mov	r2, r4
 8006a78:	462b      	mov	r3, r5
 8006a7a:	1891      	adds	r1, r2, r2
 8006a7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a7e:	415b      	adcs	r3, r3
 8006a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a86:	4621      	mov	r1, r4
 8006a88:	eb12 0801 	adds.w	r8, r2, r1
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	eb43 0901 	adc.w	r9, r3, r1
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006aa6:	4690      	mov	r8, r2
 8006aa8:	4699      	mov	r9, r3
 8006aaa:	4623      	mov	r3, r4
 8006aac:	eb18 0303 	adds.w	r3, r8, r3
 8006ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	eb49 0303 	adc.w	r3, r9, r3
 8006aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006aca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ace:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	18db      	adds	r3, r3, r3
 8006ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8006ad8:	4613      	mov	r3, r2
 8006ada:	eb42 0303 	adc.w	r3, r2, r3
 8006ade:	657b      	str	r3, [r7, #84]	; 0x54
 8006ae0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ae4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ae8:	f7fa f8d6 	bl	8000c98 <__aeabi_uldivmod>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4b61      	ldr	r3, [pc, #388]	; (8006c78 <UART_SetConfig+0x2d4>)
 8006af2:	fba3 2302 	umull	r2, r3, r3, r2
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	011c      	lsls	r4, r3, #4
 8006afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	464b      	mov	r3, r9
 8006b10:	1891      	adds	r1, r2, r2
 8006b12:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b14:	415b      	adcs	r3, r3
 8006b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	eb12 0a01 	adds.w	sl, r2, r1
 8006b22:	4649      	mov	r1, r9
 8006b24:	eb43 0b01 	adc.w	fp, r3, r1
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b3c:	4692      	mov	sl, r2
 8006b3e:	469b      	mov	fp, r3
 8006b40:	4643      	mov	r3, r8
 8006b42:	eb1a 0303 	adds.w	r3, sl, r3
 8006b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b4a:	464b      	mov	r3, r9
 8006b4c:	eb4b 0303 	adc.w	r3, fp, r3
 8006b50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	18db      	adds	r3, r3, r3
 8006b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b6e:	4613      	mov	r3, r2
 8006b70:	eb42 0303 	adc.w	r3, r2, r3
 8006b74:	647b      	str	r3, [r7, #68]	; 0x44
 8006b76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b7e:	f7fa f88b 	bl	8000c98 <__aeabi_uldivmod>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4611      	mov	r1, r2
 8006b88:	4b3b      	ldr	r3, [pc, #236]	; (8006c78 <UART_SetConfig+0x2d4>)
 8006b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	2264      	movs	r2, #100	; 0x64
 8006b92:	fb02 f303 	mul.w	r3, r2, r3
 8006b96:	1acb      	subs	r3, r1, r3
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b9e:	4b36      	ldr	r3, [pc, #216]	; (8006c78 <UART_SetConfig+0x2d4>)
 8006ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bac:	441c      	add	r4, r3
 8006bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006bbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	464b      	mov	r3, r9
 8006bc4:	1891      	adds	r1, r2, r2
 8006bc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bc8:	415b      	adcs	r3, r3
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bd0:	4641      	mov	r1, r8
 8006bd2:	1851      	adds	r1, r2, r1
 8006bd4:	6339      	str	r1, [r7, #48]	; 0x30
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	414b      	adcs	r3, r1
 8006bda:	637b      	str	r3, [r7, #52]	; 0x34
 8006bdc:	f04f 0200 	mov.w	r2, #0
 8006be0:	f04f 0300 	mov.w	r3, #0
 8006be4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006be8:	4659      	mov	r1, fp
 8006bea:	00cb      	lsls	r3, r1, #3
 8006bec:	4651      	mov	r1, sl
 8006bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bf2:	4651      	mov	r1, sl
 8006bf4:	00ca      	lsls	r2, r1, #3
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	4642      	mov	r2, r8
 8006bfe:	189b      	adds	r3, r3, r2
 8006c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c04:	464b      	mov	r3, r9
 8006c06:	460a      	mov	r2, r1
 8006c08:	eb42 0303 	adc.w	r3, r2, r3
 8006c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c24:	460b      	mov	r3, r1
 8006c26:	18db      	adds	r3, r3, r3
 8006c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	eb42 0303 	adc.w	r3, r2, r3
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c3a:	f7fa f82d 	bl	8000c98 <__aeabi_uldivmod>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4b0d      	ldr	r3, [pc, #52]	; (8006c78 <UART_SetConfig+0x2d4>)
 8006c44:	fba3 1302 	umull	r1, r3, r3, r2
 8006c48:	095b      	lsrs	r3, r3, #5
 8006c4a:	2164      	movs	r1, #100	; 0x64
 8006c4c:	fb01 f303 	mul.w	r3, r1, r3
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	3332      	adds	r3, #50	; 0x32
 8006c56:	4a08      	ldr	r2, [pc, #32]	; (8006c78 <UART_SetConfig+0x2d4>)
 8006c58:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	f003 0207 	and.w	r2, r3, #7
 8006c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4422      	add	r2, r4
 8006c6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c6c:	e105      	b.n	8006e7a <UART_SetConfig+0x4d6>
 8006c6e:	bf00      	nop
 8006c70:	40011000 	.word	0x40011000
 8006c74:	40011400 	.word	0x40011400
 8006c78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c8e:	4642      	mov	r2, r8
 8006c90:	464b      	mov	r3, r9
 8006c92:	1891      	adds	r1, r2, r2
 8006c94:	6239      	str	r1, [r7, #32]
 8006c96:	415b      	adcs	r3, r3
 8006c98:	627b      	str	r3, [r7, #36]	; 0x24
 8006c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c9e:	4641      	mov	r1, r8
 8006ca0:	1854      	adds	r4, r2, r1
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	eb43 0501 	adc.w	r5, r3, r1
 8006ca8:	f04f 0200 	mov.w	r2, #0
 8006cac:	f04f 0300 	mov.w	r3, #0
 8006cb0:	00eb      	lsls	r3, r5, #3
 8006cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cb6:	00e2      	lsls	r2, r4, #3
 8006cb8:	4614      	mov	r4, r2
 8006cba:	461d      	mov	r5, r3
 8006cbc:	4643      	mov	r3, r8
 8006cbe:	18e3      	adds	r3, r4, r3
 8006cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cc4:	464b      	mov	r3, r9
 8006cc6:	eb45 0303 	adc.w	r3, r5, r3
 8006cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cea:	4629      	mov	r1, r5
 8006cec:	008b      	lsls	r3, r1, #2
 8006cee:	4621      	mov	r1, r4
 8006cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	008a      	lsls	r2, r1, #2
 8006cf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006cfc:	f7f9 ffcc 	bl	8000c98 <__aeabi_uldivmod>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	4b60      	ldr	r3, [pc, #384]	; (8006e88 <UART_SetConfig+0x4e4>)
 8006d06:	fba3 2302 	umull	r2, r3, r3, r2
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	011c      	lsls	r4, r3, #4
 8006d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d20:	4642      	mov	r2, r8
 8006d22:	464b      	mov	r3, r9
 8006d24:	1891      	adds	r1, r2, r2
 8006d26:	61b9      	str	r1, [r7, #24]
 8006d28:	415b      	adcs	r3, r3
 8006d2a:	61fb      	str	r3, [r7, #28]
 8006d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d30:	4641      	mov	r1, r8
 8006d32:	1851      	adds	r1, r2, r1
 8006d34:	6139      	str	r1, [r7, #16]
 8006d36:	4649      	mov	r1, r9
 8006d38:	414b      	adcs	r3, r1
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	f04f 0300 	mov.w	r3, #0
 8006d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d48:	4659      	mov	r1, fp
 8006d4a:	00cb      	lsls	r3, r1, #3
 8006d4c:	4651      	mov	r1, sl
 8006d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d52:	4651      	mov	r1, sl
 8006d54:	00ca      	lsls	r2, r1, #3
 8006d56:	4610      	mov	r0, r2
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	189b      	adds	r3, r3, r2
 8006d60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d64:	464b      	mov	r3, r9
 8006d66:	460a      	mov	r2, r1
 8006d68:	eb42 0303 	adc.w	r3, r2, r3
 8006d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d88:	4649      	mov	r1, r9
 8006d8a:	008b      	lsls	r3, r1, #2
 8006d8c:	4641      	mov	r1, r8
 8006d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d92:	4641      	mov	r1, r8
 8006d94:	008a      	lsls	r2, r1, #2
 8006d96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d9a:	f7f9 ff7d 	bl	8000c98 <__aeabi_uldivmod>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4b39      	ldr	r3, [pc, #228]	; (8006e88 <UART_SetConfig+0x4e4>)
 8006da4:	fba3 1302 	umull	r1, r3, r3, r2
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	2164      	movs	r1, #100	; 0x64
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	3332      	adds	r3, #50	; 0x32
 8006db6:	4a34      	ldr	r2, [pc, #208]	; (8006e88 <UART_SetConfig+0x4e4>)
 8006db8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dc2:	441c      	add	r4, r3
 8006dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dc8:	2200      	movs	r2, #0
 8006dca:	673b      	str	r3, [r7, #112]	; 0x70
 8006dcc:	677a      	str	r2, [r7, #116]	; 0x74
 8006dce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006dd2:	4642      	mov	r2, r8
 8006dd4:	464b      	mov	r3, r9
 8006dd6:	1891      	adds	r1, r2, r2
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	415b      	adcs	r3, r3
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006de2:	4641      	mov	r1, r8
 8006de4:	1851      	adds	r1, r2, r1
 8006de6:	6039      	str	r1, [r7, #0]
 8006de8:	4649      	mov	r1, r9
 8006dea:	414b      	adcs	r3, r1
 8006dec:	607b      	str	r3, [r7, #4]
 8006dee:	f04f 0200 	mov.w	r2, #0
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006dfa:	4659      	mov	r1, fp
 8006dfc:	00cb      	lsls	r3, r1, #3
 8006dfe:	4651      	mov	r1, sl
 8006e00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e04:	4651      	mov	r1, sl
 8006e06:	00ca      	lsls	r2, r1, #3
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	4642      	mov	r2, r8
 8006e10:	189b      	adds	r3, r3, r2
 8006e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e14:	464b      	mov	r3, r9
 8006e16:	460a      	mov	r2, r1
 8006e18:	eb42 0303 	adc.w	r3, r2, r3
 8006e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	663b      	str	r3, [r7, #96]	; 0x60
 8006e28:	667a      	str	r2, [r7, #100]	; 0x64
 8006e2a:	f04f 0200 	mov.w	r2, #0
 8006e2e:	f04f 0300 	mov.w	r3, #0
 8006e32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e36:	4649      	mov	r1, r9
 8006e38:	008b      	lsls	r3, r1, #2
 8006e3a:	4641      	mov	r1, r8
 8006e3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e40:	4641      	mov	r1, r8
 8006e42:	008a      	lsls	r2, r1, #2
 8006e44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e48:	f7f9 ff26 	bl	8000c98 <__aeabi_uldivmod>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4b0d      	ldr	r3, [pc, #52]	; (8006e88 <UART_SetConfig+0x4e4>)
 8006e52:	fba3 1302 	umull	r1, r3, r3, r2
 8006e56:	095b      	lsrs	r3, r3, #5
 8006e58:	2164      	movs	r1, #100	; 0x64
 8006e5a:	fb01 f303 	mul.w	r3, r1, r3
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	011b      	lsls	r3, r3, #4
 8006e62:	3332      	adds	r3, #50	; 0x32
 8006e64:	4a08      	ldr	r2, [pc, #32]	; (8006e88 <UART_SetConfig+0x4e4>)
 8006e66:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6a:	095b      	lsrs	r3, r3, #5
 8006e6c:	f003 020f 	and.w	r2, r3, #15
 8006e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4422      	add	r2, r4
 8006e78:	609a      	str	r2, [r3, #8]
}
 8006e7a:	bf00      	nop
 8006e7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e80:	46bd      	mov	sp, r7
 8006e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e86:	bf00      	nop
 8006e88:	51eb851f 	.word	0x51eb851f

08006e8c <__errno>:
 8006e8c:	4b01      	ldr	r3, [pc, #4]	; (8006e94 <__errno+0x8>)
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	2000001c 	.word	0x2000001c

08006e98 <__libc_init_array>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	4d0d      	ldr	r5, [pc, #52]	; (8006ed0 <__libc_init_array+0x38>)
 8006e9c:	4c0d      	ldr	r4, [pc, #52]	; (8006ed4 <__libc_init_array+0x3c>)
 8006e9e:	1b64      	subs	r4, r4, r5
 8006ea0:	10a4      	asrs	r4, r4, #2
 8006ea2:	2600      	movs	r6, #0
 8006ea4:	42a6      	cmp	r6, r4
 8006ea6:	d109      	bne.n	8006ebc <__libc_init_array+0x24>
 8006ea8:	4d0b      	ldr	r5, [pc, #44]	; (8006ed8 <__libc_init_array+0x40>)
 8006eaa:	4c0c      	ldr	r4, [pc, #48]	; (8006edc <__libc_init_array+0x44>)
 8006eac:	f004 fcc4 	bl	800b838 <_init>
 8006eb0:	1b64      	subs	r4, r4, r5
 8006eb2:	10a4      	asrs	r4, r4, #2
 8006eb4:	2600      	movs	r6, #0
 8006eb6:	42a6      	cmp	r6, r4
 8006eb8:	d105      	bne.n	8006ec6 <__libc_init_array+0x2e>
 8006eba:	bd70      	pop	{r4, r5, r6, pc}
 8006ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec0:	4798      	blx	r3
 8006ec2:	3601      	adds	r6, #1
 8006ec4:	e7ee      	b.n	8006ea4 <__libc_init_array+0xc>
 8006ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eca:	4798      	blx	r3
 8006ecc:	3601      	adds	r6, #1
 8006ece:	e7f2      	b.n	8006eb6 <__libc_init_array+0x1e>
 8006ed0:	0800bd4c 	.word	0x0800bd4c
 8006ed4:	0800bd4c 	.word	0x0800bd4c
 8006ed8:	0800bd4c 	.word	0x0800bd4c
 8006edc:	0800bd50 	.word	0x0800bd50

08006ee0 <memset>:
 8006ee0:	4402      	add	r2, r0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d100      	bne.n	8006eea <memset+0xa>
 8006ee8:	4770      	bx	lr
 8006eea:	f803 1b01 	strb.w	r1, [r3], #1
 8006eee:	e7f9      	b.n	8006ee4 <memset+0x4>

08006ef0 <__cvt>:
 8006ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef4:	ec55 4b10 	vmov	r4, r5, d0
 8006ef8:	2d00      	cmp	r5, #0
 8006efa:	460e      	mov	r6, r1
 8006efc:	4619      	mov	r1, r3
 8006efe:	462b      	mov	r3, r5
 8006f00:	bfbb      	ittet	lt
 8006f02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f06:	461d      	movlt	r5, r3
 8006f08:	2300      	movge	r3, #0
 8006f0a:	232d      	movlt	r3, #45	; 0x2d
 8006f0c:	700b      	strb	r3, [r1, #0]
 8006f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f14:	4691      	mov	r9, r2
 8006f16:	f023 0820 	bic.w	r8, r3, #32
 8006f1a:	bfbc      	itt	lt
 8006f1c:	4622      	movlt	r2, r4
 8006f1e:	4614      	movlt	r4, r2
 8006f20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f24:	d005      	beq.n	8006f32 <__cvt+0x42>
 8006f26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f2a:	d100      	bne.n	8006f2e <__cvt+0x3e>
 8006f2c:	3601      	adds	r6, #1
 8006f2e:	2102      	movs	r1, #2
 8006f30:	e000      	b.n	8006f34 <__cvt+0x44>
 8006f32:	2103      	movs	r1, #3
 8006f34:	ab03      	add	r3, sp, #12
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	ab02      	add	r3, sp, #8
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	ec45 4b10 	vmov	d0, r4, r5
 8006f40:	4653      	mov	r3, sl
 8006f42:	4632      	mov	r2, r6
 8006f44:	f001 fde0 	bl	8008b08 <_dtoa_r>
 8006f48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f4c:	4607      	mov	r7, r0
 8006f4e:	d102      	bne.n	8006f56 <__cvt+0x66>
 8006f50:	f019 0f01 	tst.w	r9, #1
 8006f54:	d022      	beq.n	8006f9c <__cvt+0xac>
 8006f56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f5a:	eb07 0906 	add.w	r9, r7, r6
 8006f5e:	d110      	bne.n	8006f82 <__cvt+0x92>
 8006f60:	783b      	ldrb	r3, [r7, #0]
 8006f62:	2b30      	cmp	r3, #48	; 0x30
 8006f64:	d10a      	bne.n	8006f7c <__cvt+0x8c>
 8006f66:	2200      	movs	r2, #0
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	f7f9 fdb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f72:	b918      	cbnz	r0, 8006f7c <__cvt+0x8c>
 8006f74:	f1c6 0601 	rsb	r6, r6, #1
 8006f78:	f8ca 6000 	str.w	r6, [sl]
 8006f7c:	f8da 3000 	ldr.w	r3, [sl]
 8006f80:	4499      	add	r9, r3
 8006f82:	2200      	movs	r2, #0
 8006f84:	2300      	movs	r3, #0
 8006f86:	4620      	mov	r0, r4
 8006f88:	4629      	mov	r1, r5
 8006f8a:	f7f9 fda5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f8e:	b108      	cbz	r0, 8006f94 <__cvt+0xa4>
 8006f90:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f94:	2230      	movs	r2, #48	; 0x30
 8006f96:	9b03      	ldr	r3, [sp, #12]
 8006f98:	454b      	cmp	r3, r9
 8006f9a:	d307      	bcc.n	8006fac <__cvt+0xbc>
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fa0:	1bdb      	subs	r3, r3, r7
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	b004      	add	sp, #16
 8006fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fac:	1c59      	adds	r1, r3, #1
 8006fae:	9103      	str	r1, [sp, #12]
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	e7f0      	b.n	8006f96 <__cvt+0xa6>

08006fb4 <__exponent>:
 8006fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	bfb8      	it	lt
 8006fbc:	4249      	neglt	r1, r1
 8006fbe:	f803 2b02 	strb.w	r2, [r3], #2
 8006fc2:	bfb4      	ite	lt
 8006fc4:	222d      	movlt	r2, #45	; 0x2d
 8006fc6:	222b      	movge	r2, #43	; 0x2b
 8006fc8:	2909      	cmp	r1, #9
 8006fca:	7042      	strb	r2, [r0, #1]
 8006fcc:	dd2a      	ble.n	8007024 <__exponent+0x70>
 8006fce:	f10d 0407 	add.w	r4, sp, #7
 8006fd2:	46a4      	mov	ip, r4
 8006fd4:	270a      	movs	r7, #10
 8006fd6:	46a6      	mov	lr, r4
 8006fd8:	460a      	mov	r2, r1
 8006fda:	fb91 f6f7 	sdiv	r6, r1, r7
 8006fde:	fb07 1516 	mls	r5, r7, r6, r1
 8006fe2:	3530      	adds	r5, #48	; 0x30
 8006fe4:	2a63      	cmp	r2, #99	; 0x63
 8006fe6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006fea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006fee:	4631      	mov	r1, r6
 8006ff0:	dcf1      	bgt.n	8006fd6 <__exponent+0x22>
 8006ff2:	3130      	adds	r1, #48	; 0x30
 8006ff4:	f1ae 0502 	sub.w	r5, lr, #2
 8006ff8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ffc:	1c44      	adds	r4, r0, #1
 8006ffe:	4629      	mov	r1, r5
 8007000:	4561      	cmp	r1, ip
 8007002:	d30a      	bcc.n	800701a <__exponent+0x66>
 8007004:	f10d 0209 	add.w	r2, sp, #9
 8007008:	eba2 020e 	sub.w	r2, r2, lr
 800700c:	4565      	cmp	r5, ip
 800700e:	bf88      	it	hi
 8007010:	2200      	movhi	r2, #0
 8007012:	4413      	add	r3, r2
 8007014:	1a18      	subs	r0, r3, r0
 8007016:	b003      	add	sp, #12
 8007018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800701a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800701e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007022:	e7ed      	b.n	8007000 <__exponent+0x4c>
 8007024:	2330      	movs	r3, #48	; 0x30
 8007026:	3130      	adds	r1, #48	; 0x30
 8007028:	7083      	strb	r3, [r0, #2]
 800702a:	70c1      	strb	r1, [r0, #3]
 800702c:	1d03      	adds	r3, r0, #4
 800702e:	e7f1      	b.n	8007014 <__exponent+0x60>

08007030 <_printf_float>:
 8007030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007034:	ed2d 8b02 	vpush	{d8}
 8007038:	b08d      	sub	sp, #52	; 0x34
 800703a:	460c      	mov	r4, r1
 800703c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007040:	4616      	mov	r6, r2
 8007042:	461f      	mov	r7, r3
 8007044:	4605      	mov	r5, r0
 8007046:	f002 febd 	bl	8009dc4 <_localeconv_r>
 800704a:	f8d0 a000 	ldr.w	sl, [r0]
 800704e:	4650      	mov	r0, sl
 8007050:	f7f9 f8c6 	bl	80001e0 <strlen>
 8007054:	2300      	movs	r3, #0
 8007056:	930a      	str	r3, [sp, #40]	; 0x28
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	9305      	str	r3, [sp, #20]
 800705c:	f8d8 3000 	ldr.w	r3, [r8]
 8007060:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007064:	3307      	adds	r3, #7
 8007066:	f023 0307 	bic.w	r3, r3, #7
 800706a:	f103 0208 	add.w	r2, r3, #8
 800706e:	f8c8 2000 	str.w	r2, [r8]
 8007072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007076:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800707a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800707e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007082:	9307      	str	r3, [sp, #28]
 8007084:	f8cd 8018 	str.w	r8, [sp, #24]
 8007088:	ee08 0a10 	vmov	s16, r0
 800708c:	4b9f      	ldr	r3, [pc, #636]	; (800730c <_printf_float+0x2dc>)
 800708e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007092:	f04f 32ff 	mov.w	r2, #4294967295
 8007096:	f7f9 fd51 	bl	8000b3c <__aeabi_dcmpun>
 800709a:	bb88      	cbnz	r0, 8007100 <_printf_float+0xd0>
 800709c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070a0:	4b9a      	ldr	r3, [pc, #616]	; (800730c <_printf_float+0x2dc>)
 80070a2:	f04f 32ff 	mov.w	r2, #4294967295
 80070a6:	f7f9 fd2b 	bl	8000b00 <__aeabi_dcmple>
 80070aa:	bb48      	cbnz	r0, 8007100 <_printf_float+0xd0>
 80070ac:	2200      	movs	r2, #0
 80070ae:	2300      	movs	r3, #0
 80070b0:	4640      	mov	r0, r8
 80070b2:	4649      	mov	r1, r9
 80070b4:	f7f9 fd1a 	bl	8000aec <__aeabi_dcmplt>
 80070b8:	b110      	cbz	r0, 80070c0 <_printf_float+0x90>
 80070ba:	232d      	movs	r3, #45	; 0x2d
 80070bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c0:	4b93      	ldr	r3, [pc, #588]	; (8007310 <_printf_float+0x2e0>)
 80070c2:	4894      	ldr	r0, [pc, #592]	; (8007314 <_printf_float+0x2e4>)
 80070c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070c8:	bf94      	ite	ls
 80070ca:	4698      	movls	r8, r3
 80070cc:	4680      	movhi	r8, r0
 80070ce:	2303      	movs	r3, #3
 80070d0:	6123      	str	r3, [r4, #16]
 80070d2:	9b05      	ldr	r3, [sp, #20]
 80070d4:	f023 0204 	bic.w	r2, r3, #4
 80070d8:	6022      	str	r2, [r4, #0]
 80070da:	f04f 0900 	mov.w	r9, #0
 80070de:	9700      	str	r7, [sp, #0]
 80070e0:	4633      	mov	r3, r6
 80070e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80070e4:	4621      	mov	r1, r4
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 f9d8 	bl	800749c <_printf_common>
 80070ec:	3001      	adds	r0, #1
 80070ee:	f040 8090 	bne.w	8007212 <_printf_float+0x1e2>
 80070f2:	f04f 30ff 	mov.w	r0, #4294967295
 80070f6:	b00d      	add	sp, #52	; 0x34
 80070f8:	ecbd 8b02 	vpop	{d8}
 80070fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007100:	4642      	mov	r2, r8
 8007102:	464b      	mov	r3, r9
 8007104:	4640      	mov	r0, r8
 8007106:	4649      	mov	r1, r9
 8007108:	f7f9 fd18 	bl	8000b3c <__aeabi_dcmpun>
 800710c:	b140      	cbz	r0, 8007120 <_printf_float+0xf0>
 800710e:	464b      	mov	r3, r9
 8007110:	2b00      	cmp	r3, #0
 8007112:	bfbc      	itt	lt
 8007114:	232d      	movlt	r3, #45	; 0x2d
 8007116:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800711a:	487f      	ldr	r0, [pc, #508]	; (8007318 <_printf_float+0x2e8>)
 800711c:	4b7f      	ldr	r3, [pc, #508]	; (800731c <_printf_float+0x2ec>)
 800711e:	e7d1      	b.n	80070c4 <_printf_float+0x94>
 8007120:	6863      	ldr	r3, [r4, #4]
 8007122:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007126:	9206      	str	r2, [sp, #24]
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	d13f      	bne.n	80071ac <_printf_float+0x17c>
 800712c:	2306      	movs	r3, #6
 800712e:	6063      	str	r3, [r4, #4]
 8007130:	9b05      	ldr	r3, [sp, #20]
 8007132:	6861      	ldr	r1, [r4, #4]
 8007134:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007138:	2300      	movs	r3, #0
 800713a:	9303      	str	r3, [sp, #12]
 800713c:	ab0a      	add	r3, sp, #40	; 0x28
 800713e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007142:	ab09      	add	r3, sp, #36	; 0x24
 8007144:	ec49 8b10 	vmov	d0, r8, r9
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	6022      	str	r2, [r4, #0]
 800714c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007150:	4628      	mov	r0, r5
 8007152:	f7ff fecd 	bl	8006ef0 <__cvt>
 8007156:	9b06      	ldr	r3, [sp, #24]
 8007158:	9909      	ldr	r1, [sp, #36]	; 0x24
 800715a:	2b47      	cmp	r3, #71	; 0x47
 800715c:	4680      	mov	r8, r0
 800715e:	d108      	bne.n	8007172 <_printf_float+0x142>
 8007160:	1cc8      	adds	r0, r1, #3
 8007162:	db02      	blt.n	800716a <_printf_float+0x13a>
 8007164:	6863      	ldr	r3, [r4, #4]
 8007166:	4299      	cmp	r1, r3
 8007168:	dd41      	ble.n	80071ee <_printf_float+0x1be>
 800716a:	f1ab 0b02 	sub.w	fp, fp, #2
 800716e:	fa5f fb8b 	uxtb.w	fp, fp
 8007172:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007176:	d820      	bhi.n	80071ba <_printf_float+0x18a>
 8007178:	3901      	subs	r1, #1
 800717a:	465a      	mov	r2, fp
 800717c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007180:	9109      	str	r1, [sp, #36]	; 0x24
 8007182:	f7ff ff17 	bl	8006fb4 <__exponent>
 8007186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007188:	1813      	adds	r3, r2, r0
 800718a:	2a01      	cmp	r2, #1
 800718c:	4681      	mov	r9, r0
 800718e:	6123      	str	r3, [r4, #16]
 8007190:	dc02      	bgt.n	8007198 <_printf_float+0x168>
 8007192:	6822      	ldr	r2, [r4, #0]
 8007194:	07d2      	lsls	r2, r2, #31
 8007196:	d501      	bpl.n	800719c <_printf_float+0x16c>
 8007198:	3301      	adds	r3, #1
 800719a:	6123      	str	r3, [r4, #16]
 800719c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d09c      	beq.n	80070de <_printf_float+0xae>
 80071a4:	232d      	movs	r3, #45	; 0x2d
 80071a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071aa:	e798      	b.n	80070de <_printf_float+0xae>
 80071ac:	9a06      	ldr	r2, [sp, #24]
 80071ae:	2a47      	cmp	r2, #71	; 0x47
 80071b0:	d1be      	bne.n	8007130 <_printf_float+0x100>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1bc      	bne.n	8007130 <_printf_float+0x100>
 80071b6:	2301      	movs	r3, #1
 80071b8:	e7b9      	b.n	800712e <_printf_float+0xfe>
 80071ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80071be:	d118      	bne.n	80071f2 <_printf_float+0x1c2>
 80071c0:	2900      	cmp	r1, #0
 80071c2:	6863      	ldr	r3, [r4, #4]
 80071c4:	dd0b      	ble.n	80071de <_printf_float+0x1ae>
 80071c6:	6121      	str	r1, [r4, #16]
 80071c8:	b913      	cbnz	r3, 80071d0 <_printf_float+0x1a0>
 80071ca:	6822      	ldr	r2, [r4, #0]
 80071cc:	07d0      	lsls	r0, r2, #31
 80071ce:	d502      	bpl.n	80071d6 <_printf_float+0x1a6>
 80071d0:	3301      	adds	r3, #1
 80071d2:	440b      	add	r3, r1
 80071d4:	6123      	str	r3, [r4, #16]
 80071d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80071d8:	f04f 0900 	mov.w	r9, #0
 80071dc:	e7de      	b.n	800719c <_printf_float+0x16c>
 80071de:	b913      	cbnz	r3, 80071e6 <_printf_float+0x1b6>
 80071e0:	6822      	ldr	r2, [r4, #0]
 80071e2:	07d2      	lsls	r2, r2, #31
 80071e4:	d501      	bpl.n	80071ea <_printf_float+0x1ba>
 80071e6:	3302      	adds	r3, #2
 80071e8:	e7f4      	b.n	80071d4 <_printf_float+0x1a4>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e7f2      	b.n	80071d4 <_printf_float+0x1a4>
 80071ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80071f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f4:	4299      	cmp	r1, r3
 80071f6:	db05      	blt.n	8007204 <_printf_float+0x1d4>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	6121      	str	r1, [r4, #16]
 80071fc:	07d8      	lsls	r0, r3, #31
 80071fe:	d5ea      	bpl.n	80071d6 <_printf_float+0x1a6>
 8007200:	1c4b      	adds	r3, r1, #1
 8007202:	e7e7      	b.n	80071d4 <_printf_float+0x1a4>
 8007204:	2900      	cmp	r1, #0
 8007206:	bfd4      	ite	le
 8007208:	f1c1 0202 	rsble	r2, r1, #2
 800720c:	2201      	movgt	r2, #1
 800720e:	4413      	add	r3, r2
 8007210:	e7e0      	b.n	80071d4 <_printf_float+0x1a4>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	055a      	lsls	r2, r3, #21
 8007216:	d407      	bmi.n	8007228 <_printf_float+0x1f8>
 8007218:	6923      	ldr	r3, [r4, #16]
 800721a:	4642      	mov	r2, r8
 800721c:	4631      	mov	r1, r6
 800721e:	4628      	mov	r0, r5
 8007220:	47b8      	blx	r7
 8007222:	3001      	adds	r0, #1
 8007224:	d12c      	bne.n	8007280 <_printf_float+0x250>
 8007226:	e764      	b.n	80070f2 <_printf_float+0xc2>
 8007228:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800722c:	f240 80e0 	bls.w	80073f0 <_printf_float+0x3c0>
 8007230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007234:	2200      	movs	r2, #0
 8007236:	2300      	movs	r3, #0
 8007238:	f7f9 fc4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800723c:	2800      	cmp	r0, #0
 800723e:	d034      	beq.n	80072aa <_printf_float+0x27a>
 8007240:	4a37      	ldr	r2, [pc, #220]	; (8007320 <_printf_float+0x2f0>)
 8007242:	2301      	movs	r3, #1
 8007244:	4631      	mov	r1, r6
 8007246:	4628      	mov	r0, r5
 8007248:	47b8      	blx	r7
 800724a:	3001      	adds	r0, #1
 800724c:	f43f af51 	beq.w	80070f2 <_printf_float+0xc2>
 8007250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007254:	429a      	cmp	r2, r3
 8007256:	db02      	blt.n	800725e <_printf_float+0x22e>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	07d8      	lsls	r0, r3, #31
 800725c:	d510      	bpl.n	8007280 <_printf_float+0x250>
 800725e:	ee18 3a10 	vmov	r3, s16
 8007262:	4652      	mov	r2, sl
 8007264:	4631      	mov	r1, r6
 8007266:	4628      	mov	r0, r5
 8007268:	47b8      	blx	r7
 800726a:	3001      	adds	r0, #1
 800726c:	f43f af41 	beq.w	80070f2 <_printf_float+0xc2>
 8007270:	f04f 0800 	mov.w	r8, #0
 8007274:	f104 091a 	add.w	r9, r4, #26
 8007278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800727a:	3b01      	subs	r3, #1
 800727c:	4543      	cmp	r3, r8
 800727e:	dc09      	bgt.n	8007294 <_printf_float+0x264>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	079b      	lsls	r3, r3, #30
 8007284:	f100 8105 	bmi.w	8007492 <_printf_float+0x462>
 8007288:	68e0      	ldr	r0, [r4, #12]
 800728a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800728c:	4298      	cmp	r0, r3
 800728e:	bfb8      	it	lt
 8007290:	4618      	movlt	r0, r3
 8007292:	e730      	b.n	80070f6 <_printf_float+0xc6>
 8007294:	2301      	movs	r3, #1
 8007296:	464a      	mov	r2, r9
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	47b8      	blx	r7
 800729e:	3001      	adds	r0, #1
 80072a0:	f43f af27 	beq.w	80070f2 <_printf_float+0xc2>
 80072a4:	f108 0801 	add.w	r8, r8, #1
 80072a8:	e7e6      	b.n	8007278 <_printf_float+0x248>
 80072aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dc39      	bgt.n	8007324 <_printf_float+0x2f4>
 80072b0:	4a1b      	ldr	r2, [pc, #108]	; (8007320 <_printf_float+0x2f0>)
 80072b2:	2301      	movs	r3, #1
 80072b4:	4631      	mov	r1, r6
 80072b6:	4628      	mov	r0, r5
 80072b8:	47b8      	blx	r7
 80072ba:	3001      	adds	r0, #1
 80072bc:	f43f af19 	beq.w	80070f2 <_printf_float+0xc2>
 80072c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072c4:	4313      	orrs	r3, r2
 80072c6:	d102      	bne.n	80072ce <_printf_float+0x29e>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	07d9      	lsls	r1, r3, #31
 80072cc:	d5d8      	bpl.n	8007280 <_printf_float+0x250>
 80072ce:	ee18 3a10 	vmov	r3, s16
 80072d2:	4652      	mov	r2, sl
 80072d4:	4631      	mov	r1, r6
 80072d6:	4628      	mov	r0, r5
 80072d8:	47b8      	blx	r7
 80072da:	3001      	adds	r0, #1
 80072dc:	f43f af09 	beq.w	80070f2 <_printf_float+0xc2>
 80072e0:	f04f 0900 	mov.w	r9, #0
 80072e4:	f104 0a1a 	add.w	sl, r4, #26
 80072e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ea:	425b      	negs	r3, r3
 80072ec:	454b      	cmp	r3, r9
 80072ee:	dc01      	bgt.n	80072f4 <_printf_float+0x2c4>
 80072f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f2:	e792      	b.n	800721a <_printf_float+0x1ea>
 80072f4:	2301      	movs	r3, #1
 80072f6:	4652      	mov	r2, sl
 80072f8:	4631      	mov	r1, r6
 80072fa:	4628      	mov	r0, r5
 80072fc:	47b8      	blx	r7
 80072fe:	3001      	adds	r0, #1
 8007300:	f43f aef7 	beq.w	80070f2 <_printf_float+0xc2>
 8007304:	f109 0901 	add.w	r9, r9, #1
 8007308:	e7ee      	b.n	80072e8 <_printf_float+0x2b8>
 800730a:	bf00      	nop
 800730c:	7fefffff 	.word	0x7fefffff
 8007310:	0800b8a0 	.word	0x0800b8a0
 8007314:	0800b8a4 	.word	0x0800b8a4
 8007318:	0800b8ac 	.word	0x0800b8ac
 800731c:	0800b8a8 	.word	0x0800b8a8
 8007320:	0800b8b0 	.word	0x0800b8b0
 8007324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007326:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007328:	429a      	cmp	r2, r3
 800732a:	bfa8      	it	ge
 800732c:	461a      	movge	r2, r3
 800732e:	2a00      	cmp	r2, #0
 8007330:	4691      	mov	r9, r2
 8007332:	dc37      	bgt.n	80073a4 <_printf_float+0x374>
 8007334:	f04f 0b00 	mov.w	fp, #0
 8007338:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800733c:	f104 021a 	add.w	r2, r4, #26
 8007340:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007342:	9305      	str	r3, [sp, #20]
 8007344:	eba3 0309 	sub.w	r3, r3, r9
 8007348:	455b      	cmp	r3, fp
 800734a:	dc33      	bgt.n	80073b4 <_printf_float+0x384>
 800734c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007350:	429a      	cmp	r2, r3
 8007352:	db3b      	blt.n	80073cc <_printf_float+0x39c>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	07da      	lsls	r2, r3, #31
 8007358:	d438      	bmi.n	80073cc <_printf_float+0x39c>
 800735a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735c:	9a05      	ldr	r2, [sp, #20]
 800735e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007360:	1a9a      	subs	r2, r3, r2
 8007362:	eba3 0901 	sub.w	r9, r3, r1
 8007366:	4591      	cmp	r9, r2
 8007368:	bfa8      	it	ge
 800736a:	4691      	movge	r9, r2
 800736c:	f1b9 0f00 	cmp.w	r9, #0
 8007370:	dc35      	bgt.n	80073de <_printf_float+0x3ae>
 8007372:	f04f 0800 	mov.w	r8, #0
 8007376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800737a:	f104 0a1a 	add.w	sl, r4, #26
 800737e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007382:	1a9b      	subs	r3, r3, r2
 8007384:	eba3 0309 	sub.w	r3, r3, r9
 8007388:	4543      	cmp	r3, r8
 800738a:	f77f af79 	ble.w	8007280 <_printf_float+0x250>
 800738e:	2301      	movs	r3, #1
 8007390:	4652      	mov	r2, sl
 8007392:	4631      	mov	r1, r6
 8007394:	4628      	mov	r0, r5
 8007396:	47b8      	blx	r7
 8007398:	3001      	adds	r0, #1
 800739a:	f43f aeaa 	beq.w	80070f2 <_printf_float+0xc2>
 800739e:	f108 0801 	add.w	r8, r8, #1
 80073a2:	e7ec      	b.n	800737e <_printf_float+0x34e>
 80073a4:	4613      	mov	r3, r2
 80073a6:	4631      	mov	r1, r6
 80073a8:	4642      	mov	r2, r8
 80073aa:	4628      	mov	r0, r5
 80073ac:	47b8      	blx	r7
 80073ae:	3001      	adds	r0, #1
 80073b0:	d1c0      	bne.n	8007334 <_printf_float+0x304>
 80073b2:	e69e      	b.n	80070f2 <_printf_float+0xc2>
 80073b4:	2301      	movs	r3, #1
 80073b6:	4631      	mov	r1, r6
 80073b8:	4628      	mov	r0, r5
 80073ba:	9205      	str	r2, [sp, #20]
 80073bc:	47b8      	blx	r7
 80073be:	3001      	adds	r0, #1
 80073c0:	f43f ae97 	beq.w	80070f2 <_printf_float+0xc2>
 80073c4:	9a05      	ldr	r2, [sp, #20]
 80073c6:	f10b 0b01 	add.w	fp, fp, #1
 80073ca:	e7b9      	b.n	8007340 <_printf_float+0x310>
 80073cc:	ee18 3a10 	vmov	r3, s16
 80073d0:	4652      	mov	r2, sl
 80073d2:	4631      	mov	r1, r6
 80073d4:	4628      	mov	r0, r5
 80073d6:	47b8      	blx	r7
 80073d8:	3001      	adds	r0, #1
 80073da:	d1be      	bne.n	800735a <_printf_float+0x32a>
 80073dc:	e689      	b.n	80070f2 <_printf_float+0xc2>
 80073de:	9a05      	ldr	r2, [sp, #20]
 80073e0:	464b      	mov	r3, r9
 80073e2:	4442      	add	r2, r8
 80073e4:	4631      	mov	r1, r6
 80073e6:	4628      	mov	r0, r5
 80073e8:	47b8      	blx	r7
 80073ea:	3001      	adds	r0, #1
 80073ec:	d1c1      	bne.n	8007372 <_printf_float+0x342>
 80073ee:	e680      	b.n	80070f2 <_printf_float+0xc2>
 80073f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073f2:	2a01      	cmp	r2, #1
 80073f4:	dc01      	bgt.n	80073fa <_printf_float+0x3ca>
 80073f6:	07db      	lsls	r3, r3, #31
 80073f8:	d538      	bpl.n	800746c <_printf_float+0x43c>
 80073fa:	2301      	movs	r3, #1
 80073fc:	4642      	mov	r2, r8
 80073fe:	4631      	mov	r1, r6
 8007400:	4628      	mov	r0, r5
 8007402:	47b8      	blx	r7
 8007404:	3001      	adds	r0, #1
 8007406:	f43f ae74 	beq.w	80070f2 <_printf_float+0xc2>
 800740a:	ee18 3a10 	vmov	r3, s16
 800740e:	4652      	mov	r2, sl
 8007410:	4631      	mov	r1, r6
 8007412:	4628      	mov	r0, r5
 8007414:	47b8      	blx	r7
 8007416:	3001      	adds	r0, #1
 8007418:	f43f ae6b 	beq.w	80070f2 <_printf_float+0xc2>
 800741c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007420:	2200      	movs	r2, #0
 8007422:	2300      	movs	r3, #0
 8007424:	f7f9 fb58 	bl	8000ad8 <__aeabi_dcmpeq>
 8007428:	b9d8      	cbnz	r0, 8007462 <_printf_float+0x432>
 800742a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800742c:	f108 0201 	add.w	r2, r8, #1
 8007430:	3b01      	subs	r3, #1
 8007432:	4631      	mov	r1, r6
 8007434:	4628      	mov	r0, r5
 8007436:	47b8      	blx	r7
 8007438:	3001      	adds	r0, #1
 800743a:	d10e      	bne.n	800745a <_printf_float+0x42a>
 800743c:	e659      	b.n	80070f2 <_printf_float+0xc2>
 800743e:	2301      	movs	r3, #1
 8007440:	4652      	mov	r2, sl
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	f43f ae52 	beq.w	80070f2 <_printf_float+0xc2>
 800744e:	f108 0801 	add.w	r8, r8, #1
 8007452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007454:	3b01      	subs	r3, #1
 8007456:	4543      	cmp	r3, r8
 8007458:	dcf1      	bgt.n	800743e <_printf_float+0x40e>
 800745a:	464b      	mov	r3, r9
 800745c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007460:	e6dc      	b.n	800721c <_printf_float+0x1ec>
 8007462:	f04f 0800 	mov.w	r8, #0
 8007466:	f104 0a1a 	add.w	sl, r4, #26
 800746a:	e7f2      	b.n	8007452 <_printf_float+0x422>
 800746c:	2301      	movs	r3, #1
 800746e:	4642      	mov	r2, r8
 8007470:	e7df      	b.n	8007432 <_printf_float+0x402>
 8007472:	2301      	movs	r3, #1
 8007474:	464a      	mov	r2, r9
 8007476:	4631      	mov	r1, r6
 8007478:	4628      	mov	r0, r5
 800747a:	47b8      	blx	r7
 800747c:	3001      	adds	r0, #1
 800747e:	f43f ae38 	beq.w	80070f2 <_printf_float+0xc2>
 8007482:	f108 0801 	add.w	r8, r8, #1
 8007486:	68e3      	ldr	r3, [r4, #12]
 8007488:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800748a:	1a5b      	subs	r3, r3, r1
 800748c:	4543      	cmp	r3, r8
 800748e:	dcf0      	bgt.n	8007472 <_printf_float+0x442>
 8007490:	e6fa      	b.n	8007288 <_printf_float+0x258>
 8007492:	f04f 0800 	mov.w	r8, #0
 8007496:	f104 0919 	add.w	r9, r4, #25
 800749a:	e7f4      	b.n	8007486 <_printf_float+0x456>

0800749c <_printf_common>:
 800749c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a0:	4616      	mov	r6, r2
 80074a2:	4699      	mov	r9, r3
 80074a4:	688a      	ldr	r2, [r1, #8]
 80074a6:	690b      	ldr	r3, [r1, #16]
 80074a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074ac:	4293      	cmp	r3, r2
 80074ae:	bfb8      	it	lt
 80074b0:	4613      	movlt	r3, r2
 80074b2:	6033      	str	r3, [r6, #0]
 80074b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074b8:	4607      	mov	r7, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	b10a      	cbz	r2, 80074c2 <_printf_common+0x26>
 80074be:	3301      	adds	r3, #1
 80074c0:	6033      	str	r3, [r6, #0]
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	0699      	lsls	r1, r3, #26
 80074c6:	bf42      	ittt	mi
 80074c8:	6833      	ldrmi	r3, [r6, #0]
 80074ca:	3302      	addmi	r3, #2
 80074cc:	6033      	strmi	r3, [r6, #0]
 80074ce:	6825      	ldr	r5, [r4, #0]
 80074d0:	f015 0506 	ands.w	r5, r5, #6
 80074d4:	d106      	bne.n	80074e4 <_printf_common+0x48>
 80074d6:	f104 0a19 	add.w	sl, r4, #25
 80074da:	68e3      	ldr	r3, [r4, #12]
 80074dc:	6832      	ldr	r2, [r6, #0]
 80074de:	1a9b      	subs	r3, r3, r2
 80074e0:	42ab      	cmp	r3, r5
 80074e2:	dc26      	bgt.n	8007532 <_printf_common+0x96>
 80074e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074e8:	1e13      	subs	r3, r2, #0
 80074ea:	6822      	ldr	r2, [r4, #0]
 80074ec:	bf18      	it	ne
 80074ee:	2301      	movne	r3, #1
 80074f0:	0692      	lsls	r2, r2, #26
 80074f2:	d42b      	bmi.n	800754c <_printf_common+0xb0>
 80074f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074f8:	4649      	mov	r1, r9
 80074fa:	4638      	mov	r0, r7
 80074fc:	47c0      	blx	r8
 80074fe:	3001      	adds	r0, #1
 8007500:	d01e      	beq.n	8007540 <_printf_common+0xa4>
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	68e5      	ldr	r5, [r4, #12]
 8007506:	6832      	ldr	r2, [r6, #0]
 8007508:	f003 0306 	and.w	r3, r3, #6
 800750c:	2b04      	cmp	r3, #4
 800750e:	bf08      	it	eq
 8007510:	1aad      	subeq	r5, r5, r2
 8007512:	68a3      	ldr	r3, [r4, #8]
 8007514:	6922      	ldr	r2, [r4, #16]
 8007516:	bf0c      	ite	eq
 8007518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800751c:	2500      	movne	r5, #0
 800751e:	4293      	cmp	r3, r2
 8007520:	bfc4      	itt	gt
 8007522:	1a9b      	subgt	r3, r3, r2
 8007524:	18ed      	addgt	r5, r5, r3
 8007526:	2600      	movs	r6, #0
 8007528:	341a      	adds	r4, #26
 800752a:	42b5      	cmp	r5, r6
 800752c:	d11a      	bne.n	8007564 <_printf_common+0xc8>
 800752e:	2000      	movs	r0, #0
 8007530:	e008      	b.n	8007544 <_printf_common+0xa8>
 8007532:	2301      	movs	r3, #1
 8007534:	4652      	mov	r2, sl
 8007536:	4649      	mov	r1, r9
 8007538:	4638      	mov	r0, r7
 800753a:	47c0      	blx	r8
 800753c:	3001      	adds	r0, #1
 800753e:	d103      	bne.n	8007548 <_printf_common+0xac>
 8007540:	f04f 30ff 	mov.w	r0, #4294967295
 8007544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007548:	3501      	adds	r5, #1
 800754a:	e7c6      	b.n	80074da <_printf_common+0x3e>
 800754c:	18e1      	adds	r1, r4, r3
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	2030      	movs	r0, #48	; 0x30
 8007552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007556:	4422      	add	r2, r4
 8007558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800755c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007560:	3302      	adds	r3, #2
 8007562:	e7c7      	b.n	80074f4 <_printf_common+0x58>
 8007564:	2301      	movs	r3, #1
 8007566:	4622      	mov	r2, r4
 8007568:	4649      	mov	r1, r9
 800756a:	4638      	mov	r0, r7
 800756c:	47c0      	blx	r8
 800756e:	3001      	adds	r0, #1
 8007570:	d0e6      	beq.n	8007540 <_printf_common+0xa4>
 8007572:	3601      	adds	r6, #1
 8007574:	e7d9      	b.n	800752a <_printf_common+0x8e>
	...

08007578 <_printf_i>:
 8007578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800757c:	7e0f      	ldrb	r7, [r1, #24]
 800757e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007580:	2f78      	cmp	r7, #120	; 0x78
 8007582:	4691      	mov	r9, r2
 8007584:	4680      	mov	r8, r0
 8007586:	460c      	mov	r4, r1
 8007588:	469a      	mov	sl, r3
 800758a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800758e:	d807      	bhi.n	80075a0 <_printf_i+0x28>
 8007590:	2f62      	cmp	r7, #98	; 0x62
 8007592:	d80a      	bhi.n	80075aa <_printf_i+0x32>
 8007594:	2f00      	cmp	r7, #0
 8007596:	f000 80d8 	beq.w	800774a <_printf_i+0x1d2>
 800759a:	2f58      	cmp	r7, #88	; 0x58
 800759c:	f000 80a3 	beq.w	80076e6 <_printf_i+0x16e>
 80075a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075a8:	e03a      	b.n	8007620 <_printf_i+0xa8>
 80075aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075ae:	2b15      	cmp	r3, #21
 80075b0:	d8f6      	bhi.n	80075a0 <_printf_i+0x28>
 80075b2:	a101      	add	r1, pc, #4	; (adr r1, 80075b8 <_printf_i+0x40>)
 80075b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075b8:	08007611 	.word	0x08007611
 80075bc:	08007625 	.word	0x08007625
 80075c0:	080075a1 	.word	0x080075a1
 80075c4:	080075a1 	.word	0x080075a1
 80075c8:	080075a1 	.word	0x080075a1
 80075cc:	080075a1 	.word	0x080075a1
 80075d0:	08007625 	.word	0x08007625
 80075d4:	080075a1 	.word	0x080075a1
 80075d8:	080075a1 	.word	0x080075a1
 80075dc:	080075a1 	.word	0x080075a1
 80075e0:	080075a1 	.word	0x080075a1
 80075e4:	08007731 	.word	0x08007731
 80075e8:	08007655 	.word	0x08007655
 80075ec:	08007713 	.word	0x08007713
 80075f0:	080075a1 	.word	0x080075a1
 80075f4:	080075a1 	.word	0x080075a1
 80075f8:	08007753 	.word	0x08007753
 80075fc:	080075a1 	.word	0x080075a1
 8007600:	08007655 	.word	0x08007655
 8007604:	080075a1 	.word	0x080075a1
 8007608:	080075a1 	.word	0x080075a1
 800760c:	0800771b 	.word	0x0800771b
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	1d1a      	adds	r2, r3, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	602a      	str	r2, [r5, #0]
 8007618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800761c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007620:	2301      	movs	r3, #1
 8007622:	e0a3      	b.n	800776c <_printf_i+0x1f4>
 8007624:	6820      	ldr	r0, [r4, #0]
 8007626:	6829      	ldr	r1, [r5, #0]
 8007628:	0606      	lsls	r6, r0, #24
 800762a:	f101 0304 	add.w	r3, r1, #4
 800762e:	d50a      	bpl.n	8007646 <_printf_i+0xce>
 8007630:	680e      	ldr	r6, [r1, #0]
 8007632:	602b      	str	r3, [r5, #0]
 8007634:	2e00      	cmp	r6, #0
 8007636:	da03      	bge.n	8007640 <_printf_i+0xc8>
 8007638:	232d      	movs	r3, #45	; 0x2d
 800763a:	4276      	negs	r6, r6
 800763c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007640:	485e      	ldr	r0, [pc, #376]	; (80077bc <_printf_i+0x244>)
 8007642:	230a      	movs	r3, #10
 8007644:	e019      	b.n	800767a <_printf_i+0x102>
 8007646:	680e      	ldr	r6, [r1, #0]
 8007648:	602b      	str	r3, [r5, #0]
 800764a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800764e:	bf18      	it	ne
 8007650:	b236      	sxthne	r6, r6
 8007652:	e7ef      	b.n	8007634 <_printf_i+0xbc>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	6820      	ldr	r0, [r4, #0]
 8007658:	1d19      	adds	r1, r3, #4
 800765a:	6029      	str	r1, [r5, #0]
 800765c:	0601      	lsls	r1, r0, #24
 800765e:	d501      	bpl.n	8007664 <_printf_i+0xec>
 8007660:	681e      	ldr	r6, [r3, #0]
 8007662:	e002      	b.n	800766a <_printf_i+0xf2>
 8007664:	0646      	lsls	r6, r0, #25
 8007666:	d5fb      	bpl.n	8007660 <_printf_i+0xe8>
 8007668:	881e      	ldrh	r6, [r3, #0]
 800766a:	4854      	ldr	r0, [pc, #336]	; (80077bc <_printf_i+0x244>)
 800766c:	2f6f      	cmp	r7, #111	; 0x6f
 800766e:	bf0c      	ite	eq
 8007670:	2308      	moveq	r3, #8
 8007672:	230a      	movne	r3, #10
 8007674:	2100      	movs	r1, #0
 8007676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800767a:	6865      	ldr	r5, [r4, #4]
 800767c:	60a5      	str	r5, [r4, #8]
 800767e:	2d00      	cmp	r5, #0
 8007680:	bfa2      	ittt	ge
 8007682:	6821      	ldrge	r1, [r4, #0]
 8007684:	f021 0104 	bicge.w	r1, r1, #4
 8007688:	6021      	strge	r1, [r4, #0]
 800768a:	b90e      	cbnz	r6, 8007690 <_printf_i+0x118>
 800768c:	2d00      	cmp	r5, #0
 800768e:	d04d      	beq.n	800772c <_printf_i+0x1b4>
 8007690:	4615      	mov	r5, r2
 8007692:	fbb6 f1f3 	udiv	r1, r6, r3
 8007696:	fb03 6711 	mls	r7, r3, r1, r6
 800769a:	5dc7      	ldrb	r7, [r0, r7]
 800769c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076a0:	4637      	mov	r7, r6
 80076a2:	42bb      	cmp	r3, r7
 80076a4:	460e      	mov	r6, r1
 80076a6:	d9f4      	bls.n	8007692 <_printf_i+0x11a>
 80076a8:	2b08      	cmp	r3, #8
 80076aa:	d10b      	bne.n	80076c4 <_printf_i+0x14c>
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	07de      	lsls	r6, r3, #31
 80076b0:	d508      	bpl.n	80076c4 <_printf_i+0x14c>
 80076b2:	6923      	ldr	r3, [r4, #16]
 80076b4:	6861      	ldr	r1, [r4, #4]
 80076b6:	4299      	cmp	r1, r3
 80076b8:	bfde      	ittt	le
 80076ba:	2330      	movle	r3, #48	; 0x30
 80076bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076c4:	1b52      	subs	r2, r2, r5
 80076c6:	6122      	str	r2, [r4, #16]
 80076c8:	f8cd a000 	str.w	sl, [sp]
 80076cc:	464b      	mov	r3, r9
 80076ce:	aa03      	add	r2, sp, #12
 80076d0:	4621      	mov	r1, r4
 80076d2:	4640      	mov	r0, r8
 80076d4:	f7ff fee2 	bl	800749c <_printf_common>
 80076d8:	3001      	adds	r0, #1
 80076da:	d14c      	bne.n	8007776 <_printf_i+0x1fe>
 80076dc:	f04f 30ff 	mov.w	r0, #4294967295
 80076e0:	b004      	add	sp, #16
 80076e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e6:	4835      	ldr	r0, [pc, #212]	; (80077bc <_printf_i+0x244>)
 80076e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80076ec:	6829      	ldr	r1, [r5, #0]
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80076f4:	6029      	str	r1, [r5, #0]
 80076f6:	061d      	lsls	r5, r3, #24
 80076f8:	d514      	bpl.n	8007724 <_printf_i+0x1ac>
 80076fa:	07df      	lsls	r7, r3, #31
 80076fc:	bf44      	itt	mi
 80076fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007702:	6023      	strmi	r3, [r4, #0]
 8007704:	b91e      	cbnz	r6, 800770e <_printf_i+0x196>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	f023 0320 	bic.w	r3, r3, #32
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	2310      	movs	r3, #16
 8007710:	e7b0      	b.n	8007674 <_printf_i+0xfc>
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	f043 0320 	orr.w	r3, r3, #32
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	2378      	movs	r3, #120	; 0x78
 800771c:	4828      	ldr	r0, [pc, #160]	; (80077c0 <_printf_i+0x248>)
 800771e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007722:	e7e3      	b.n	80076ec <_printf_i+0x174>
 8007724:	0659      	lsls	r1, r3, #25
 8007726:	bf48      	it	mi
 8007728:	b2b6      	uxthmi	r6, r6
 800772a:	e7e6      	b.n	80076fa <_printf_i+0x182>
 800772c:	4615      	mov	r5, r2
 800772e:	e7bb      	b.n	80076a8 <_printf_i+0x130>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	6826      	ldr	r6, [r4, #0]
 8007734:	6961      	ldr	r1, [r4, #20]
 8007736:	1d18      	adds	r0, r3, #4
 8007738:	6028      	str	r0, [r5, #0]
 800773a:	0635      	lsls	r5, r6, #24
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	d501      	bpl.n	8007744 <_printf_i+0x1cc>
 8007740:	6019      	str	r1, [r3, #0]
 8007742:	e002      	b.n	800774a <_printf_i+0x1d2>
 8007744:	0670      	lsls	r0, r6, #25
 8007746:	d5fb      	bpl.n	8007740 <_printf_i+0x1c8>
 8007748:	8019      	strh	r1, [r3, #0]
 800774a:	2300      	movs	r3, #0
 800774c:	6123      	str	r3, [r4, #16]
 800774e:	4615      	mov	r5, r2
 8007750:	e7ba      	b.n	80076c8 <_printf_i+0x150>
 8007752:	682b      	ldr	r3, [r5, #0]
 8007754:	1d1a      	adds	r2, r3, #4
 8007756:	602a      	str	r2, [r5, #0]
 8007758:	681d      	ldr	r5, [r3, #0]
 800775a:	6862      	ldr	r2, [r4, #4]
 800775c:	2100      	movs	r1, #0
 800775e:	4628      	mov	r0, r5
 8007760:	f7f8 fd46 	bl	80001f0 <memchr>
 8007764:	b108      	cbz	r0, 800776a <_printf_i+0x1f2>
 8007766:	1b40      	subs	r0, r0, r5
 8007768:	6060      	str	r0, [r4, #4]
 800776a:	6863      	ldr	r3, [r4, #4]
 800776c:	6123      	str	r3, [r4, #16]
 800776e:	2300      	movs	r3, #0
 8007770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007774:	e7a8      	b.n	80076c8 <_printf_i+0x150>
 8007776:	6923      	ldr	r3, [r4, #16]
 8007778:	462a      	mov	r2, r5
 800777a:	4649      	mov	r1, r9
 800777c:	4640      	mov	r0, r8
 800777e:	47d0      	blx	sl
 8007780:	3001      	adds	r0, #1
 8007782:	d0ab      	beq.n	80076dc <_printf_i+0x164>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	079b      	lsls	r3, r3, #30
 8007788:	d413      	bmi.n	80077b2 <_printf_i+0x23a>
 800778a:	68e0      	ldr	r0, [r4, #12]
 800778c:	9b03      	ldr	r3, [sp, #12]
 800778e:	4298      	cmp	r0, r3
 8007790:	bfb8      	it	lt
 8007792:	4618      	movlt	r0, r3
 8007794:	e7a4      	b.n	80076e0 <_printf_i+0x168>
 8007796:	2301      	movs	r3, #1
 8007798:	4632      	mov	r2, r6
 800779a:	4649      	mov	r1, r9
 800779c:	4640      	mov	r0, r8
 800779e:	47d0      	blx	sl
 80077a0:	3001      	adds	r0, #1
 80077a2:	d09b      	beq.n	80076dc <_printf_i+0x164>
 80077a4:	3501      	adds	r5, #1
 80077a6:	68e3      	ldr	r3, [r4, #12]
 80077a8:	9903      	ldr	r1, [sp, #12]
 80077aa:	1a5b      	subs	r3, r3, r1
 80077ac:	42ab      	cmp	r3, r5
 80077ae:	dcf2      	bgt.n	8007796 <_printf_i+0x21e>
 80077b0:	e7eb      	b.n	800778a <_printf_i+0x212>
 80077b2:	2500      	movs	r5, #0
 80077b4:	f104 0619 	add.w	r6, r4, #25
 80077b8:	e7f5      	b.n	80077a6 <_printf_i+0x22e>
 80077ba:	bf00      	nop
 80077bc:	0800b8b2 	.word	0x0800b8b2
 80077c0:	0800b8c3 	.word	0x0800b8c3

080077c4 <_scanf_float>:
 80077c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c8:	b087      	sub	sp, #28
 80077ca:	4617      	mov	r7, r2
 80077cc:	9303      	str	r3, [sp, #12]
 80077ce:	688b      	ldr	r3, [r1, #8]
 80077d0:	1e5a      	subs	r2, r3, #1
 80077d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80077d6:	bf83      	ittte	hi
 80077d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80077dc:	195b      	addhi	r3, r3, r5
 80077de:	9302      	strhi	r3, [sp, #8]
 80077e0:	2300      	movls	r3, #0
 80077e2:	bf86      	itte	hi
 80077e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80077e8:	608b      	strhi	r3, [r1, #8]
 80077ea:	9302      	strls	r3, [sp, #8]
 80077ec:	680b      	ldr	r3, [r1, #0]
 80077ee:	468b      	mov	fp, r1
 80077f0:	2500      	movs	r5, #0
 80077f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80077f6:	f84b 3b1c 	str.w	r3, [fp], #28
 80077fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80077fe:	4680      	mov	r8, r0
 8007800:	460c      	mov	r4, r1
 8007802:	465e      	mov	r6, fp
 8007804:	46aa      	mov	sl, r5
 8007806:	46a9      	mov	r9, r5
 8007808:	9501      	str	r5, [sp, #4]
 800780a:	68a2      	ldr	r2, [r4, #8]
 800780c:	b152      	cbz	r2, 8007824 <_scanf_float+0x60>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	2b4e      	cmp	r3, #78	; 0x4e
 8007814:	d864      	bhi.n	80078e0 <_scanf_float+0x11c>
 8007816:	2b40      	cmp	r3, #64	; 0x40
 8007818:	d83c      	bhi.n	8007894 <_scanf_float+0xd0>
 800781a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800781e:	b2c8      	uxtb	r0, r1
 8007820:	280e      	cmp	r0, #14
 8007822:	d93a      	bls.n	800789a <_scanf_float+0xd6>
 8007824:	f1b9 0f00 	cmp.w	r9, #0
 8007828:	d003      	beq.n	8007832 <_scanf_float+0x6e>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007836:	f1ba 0f01 	cmp.w	sl, #1
 800783a:	f200 8113 	bhi.w	8007a64 <_scanf_float+0x2a0>
 800783e:	455e      	cmp	r6, fp
 8007840:	f200 8105 	bhi.w	8007a4e <_scanf_float+0x28a>
 8007844:	2501      	movs	r5, #1
 8007846:	4628      	mov	r0, r5
 8007848:	b007      	add	sp, #28
 800784a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800784e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007852:	2a0d      	cmp	r2, #13
 8007854:	d8e6      	bhi.n	8007824 <_scanf_float+0x60>
 8007856:	a101      	add	r1, pc, #4	; (adr r1, 800785c <_scanf_float+0x98>)
 8007858:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800785c:	0800799b 	.word	0x0800799b
 8007860:	08007825 	.word	0x08007825
 8007864:	08007825 	.word	0x08007825
 8007868:	08007825 	.word	0x08007825
 800786c:	080079fb 	.word	0x080079fb
 8007870:	080079d3 	.word	0x080079d3
 8007874:	08007825 	.word	0x08007825
 8007878:	08007825 	.word	0x08007825
 800787c:	080079a9 	.word	0x080079a9
 8007880:	08007825 	.word	0x08007825
 8007884:	08007825 	.word	0x08007825
 8007888:	08007825 	.word	0x08007825
 800788c:	08007825 	.word	0x08007825
 8007890:	08007961 	.word	0x08007961
 8007894:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007898:	e7db      	b.n	8007852 <_scanf_float+0x8e>
 800789a:	290e      	cmp	r1, #14
 800789c:	d8c2      	bhi.n	8007824 <_scanf_float+0x60>
 800789e:	a001      	add	r0, pc, #4	; (adr r0, 80078a4 <_scanf_float+0xe0>)
 80078a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80078a4:	08007953 	.word	0x08007953
 80078a8:	08007825 	.word	0x08007825
 80078ac:	08007953 	.word	0x08007953
 80078b0:	080079e7 	.word	0x080079e7
 80078b4:	08007825 	.word	0x08007825
 80078b8:	08007901 	.word	0x08007901
 80078bc:	0800793d 	.word	0x0800793d
 80078c0:	0800793d 	.word	0x0800793d
 80078c4:	0800793d 	.word	0x0800793d
 80078c8:	0800793d 	.word	0x0800793d
 80078cc:	0800793d 	.word	0x0800793d
 80078d0:	0800793d 	.word	0x0800793d
 80078d4:	0800793d 	.word	0x0800793d
 80078d8:	0800793d 	.word	0x0800793d
 80078dc:	0800793d 	.word	0x0800793d
 80078e0:	2b6e      	cmp	r3, #110	; 0x6e
 80078e2:	d809      	bhi.n	80078f8 <_scanf_float+0x134>
 80078e4:	2b60      	cmp	r3, #96	; 0x60
 80078e6:	d8b2      	bhi.n	800784e <_scanf_float+0x8a>
 80078e8:	2b54      	cmp	r3, #84	; 0x54
 80078ea:	d077      	beq.n	80079dc <_scanf_float+0x218>
 80078ec:	2b59      	cmp	r3, #89	; 0x59
 80078ee:	d199      	bne.n	8007824 <_scanf_float+0x60>
 80078f0:	2d07      	cmp	r5, #7
 80078f2:	d197      	bne.n	8007824 <_scanf_float+0x60>
 80078f4:	2508      	movs	r5, #8
 80078f6:	e029      	b.n	800794c <_scanf_float+0x188>
 80078f8:	2b74      	cmp	r3, #116	; 0x74
 80078fa:	d06f      	beq.n	80079dc <_scanf_float+0x218>
 80078fc:	2b79      	cmp	r3, #121	; 0x79
 80078fe:	e7f6      	b.n	80078ee <_scanf_float+0x12a>
 8007900:	6821      	ldr	r1, [r4, #0]
 8007902:	05c8      	lsls	r0, r1, #23
 8007904:	d51a      	bpl.n	800793c <_scanf_float+0x178>
 8007906:	9b02      	ldr	r3, [sp, #8]
 8007908:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800790c:	6021      	str	r1, [r4, #0]
 800790e:	f109 0901 	add.w	r9, r9, #1
 8007912:	b11b      	cbz	r3, 800791c <_scanf_float+0x158>
 8007914:	3b01      	subs	r3, #1
 8007916:	3201      	adds	r2, #1
 8007918:	9302      	str	r3, [sp, #8]
 800791a:	60a2      	str	r2, [r4, #8]
 800791c:	68a3      	ldr	r3, [r4, #8]
 800791e:	3b01      	subs	r3, #1
 8007920:	60a3      	str	r3, [r4, #8]
 8007922:	6923      	ldr	r3, [r4, #16]
 8007924:	3301      	adds	r3, #1
 8007926:	6123      	str	r3, [r4, #16]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3b01      	subs	r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	607b      	str	r3, [r7, #4]
 8007930:	f340 8084 	ble.w	8007a3c <_scanf_float+0x278>
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	3301      	adds	r3, #1
 8007938:	603b      	str	r3, [r7, #0]
 800793a:	e766      	b.n	800780a <_scanf_float+0x46>
 800793c:	eb1a 0f05 	cmn.w	sl, r5
 8007940:	f47f af70 	bne.w	8007824 <_scanf_float+0x60>
 8007944:	6822      	ldr	r2, [r4, #0]
 8007946:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800794a:	6022      	str	r2, [r4, #0]
 800794c:	f806 3b01 	strb.w	r3, [r6], #1
 8007950:	e7e4      	b.n	800791c <_scanf_float+0x158>
 8007952:	6822      	ldr	r2, [r4, #0]
 8007954:	0610      	lsls	r0, r2, #24
 8007956:	f57f af65 	bpl.w	8007824 <_scanf_float+0x60>
 800795a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800795e:	e7f4      	b.n	800794a <_scanf_float+0x186>
 8007960:	f1ba 0f00 	cmp.w	sl, #0
 8007964:	d10e      	bne.n	8007984 <_scanf_float+0x1c0>
 8007966:	f1b9 0f00 	cmp.w	r9, #0
 800796a:	d10e      	bne.n	800798a <_scanf_float+0x1c6>
 800796c:	6822      	ldr	r2, [r4, #0]
 800796e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007972:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007976:	d108      	bne.n	800798a <_scanf_float+0x1c6>
 8007978:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800797c:	6022      	str	r2, [r4, #0]
 800797e:	f04f 0a01 	mov.w	sl, #1
 8007982:	e7e3      	b.n	800794c <_scanf_float+0x188>
 8007984:	f1ba 0f02 	cmp.w	sl, #2
 8007988:	d055      	beq.n	8007a36 <_scanf_float+0x272>
 800798a:	2d01      	cmp	r5, #1
 800798c:	d002      	beq.n	8007994 <_scanf_float+0x1d0>
 800798e:	2d04      	cmp	r5, #4
 8007990:	f47f af48 	bne.w	8007824 <_scanf_float+0x60>
 8007994:	3501      	adds	r5, #1
 8007996:	b2ed      	uxtb	r5, r5
 8007998:	e7d8      	b.n	800794c <_scanf_float+0x188>
 800799a:	f1ba 0f01 	cmp.w	sl, #1
 800799e:	f47f af41 	bne.w	8007824 <_scanf_float+0x60>
 80079a2:	f04f 0a02 	mov.w	sl, #2
 80079a6:	e7d1      	b.n	800794c <_scanf_float+0x188>
 80079a8:	b97d      	cbnz	r5, 80079ca <_scanf_float+0x206>
 80079aa:	f1b9 0f00 	cmp.w	r9, #0
 80079ae:	f47f af3c 	bne.w	800782a <_scanf_float+0x66>
 80079b2:	6822      	ldr	r2, [r4, #0]
 80079b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80079b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80079bc:	f47f af39 	bne.w	8007832 <_scanf_float+0x6e>
 80079c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079c4:	6022      	str	r2, [r4, #0]
 80079c6:	2501      	movs	r5, #1
 80079c8:	e7c0      	b.n	800794c <_scanf_float+0x188>
 80079ca:	2d03      	cmp	r5, #3
 80079cc:	d0e2      	beq.n	8007994 <_scanf_float+0x1d0>
 80079ce:	2d05      	cmp	r5, #5
 80079d0:	e7de      	b.n	8007990 <_scanf_float+0x1cc>
 80079d2:	2d02      	cmp	r5, #2
 80079d4:	f47f af26 	bne.w	8007824 <_scanf_float+0x60>
 80079d8:	2503      	movs	r5, #3
 80079da:	e7b7      	b.n	800794c <_scanf_float+0x188>
 80079dc:	2d06      	cmp	r5, #6
 80079de:	f47f af21 	bne.w	8007824 <_scanf_float+0x60>
 80079e2:	2507      	movs	r5, #7
 80079e4:	e7b2      	b.n	800794c <_scanf_float+0x188>
 80079e6:	6822      	ldr	r2, [r4, #0]
 80079e8:	0591      	lsls	r1, r2, #22
 80079ea:	f57f af1b 	bpl.w	8007824 <_scanf_float+0x60>
 80079ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80079f2:	6022      	str	r2, [r4, #0]
 80079f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80079f8:	e7a8      	b.n	800794c <_scanf_float+0x188>
 80079fa:	6822      	ldr	r2, [r4, #0]
 80079fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007a00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007a04:	d006      	beq.n	8007a14 <_scanf_float+0x250>
 8007a06:	0550      	lsls	r0, r2, #21
 8007a08:	f57f af0c 	bpl.w	8007824 <_scanf_float+0x60>
 8007a0c:	f1b9 0f00 	cmp.w	r9, #0
 8007a10:	f43f af0f 	beq.w	8007832 <_scanf_float+0x6e>
 8007a14:	0591      	lsls	r1, r2, #22
 8007a16:	bf58      	it	pl
 8007a18:	9901      	ldrpl	r1, [sp, #4]
 8007a1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a1e:	bf58      	it	pl
 8007a20:	eba9 0101 	subpl.w	r1, r9, r1
 8007a24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007a28:	bf58      	it	pl
 8007a2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a2e:	6022      	str	r2, [r4, #0]
 8007a30:	f04f 0900 	mov.w	r9, #0
 8007a34:	e78a      	b.n	800794c <_scanf_float+0x188>
 8007a36:	f04f 0a03 	mov.w	sl, #3
 8007a3a:	e787      	b.n	800794c <_scanf_float+0x188>
 8007a3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a40:	4639      	mov	r1, r7
 8007a42:	4640      	mov	r0, r8
 8007a44:	4798      	blx	r3
 8007a46:	2800      	cmp	r0, #0
 8007a48:	f43f aedf 	beq.w	800780a <_scanf_float+0x46>
 8007a4c:	e6ea      	b.n	8007824 <_scanf_float+0x60>
 8007a4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a56:	463a      	mov	r2, r7
 8007a58:	4640      	mov	r0, r8
 8007a5a:	4798      	blx	r3
 8007a5c:	6923      	ldr	r3, [r4, #16]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	6123      	str	r3, [r4, #16]
 8007a62:	e6ec      	b.n	800783e <_scanf_float+0x7a>
 8007a64:	1e6b      	subs	r3, r5, #1
 8007a66:	2b06      	cmp	r3, #6
 8007a68:	d825      	bhi.n	8007ab6 <_scanf_float+0x2f2>
 8007a6a:	2d02      	cmp	r5, #2
 8007a6c:	d836      	bhi.n	8007adc <_scanf_float+0x318>
 8007a6e:	455e      	cmp	r6, fp
 8007a70:	f67f aee8 	bls.w	8007844 <_scanf_float+0x80>
 8007a74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a7c:	463a      	mov	r2, r7
 8007a7e:	4640      	mov	r0, r8
 8007a80:	4798      	blx	r3
 8007a82:	6923      	ldr	r3, [r4, #16]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	6123      	str	r3, [r4, #16]
 8007a88:	e7f1      	b.n	8007a6e <_scanf_float+0x2aa>
 8007a8a:	9802      	ldr	r0, [sp, #8]
 8007a8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007a94:	9002      	str	r0, [sp, #8]
 8007a96:	463a      	mov	r2, r7
 8007a98:	4640      	mov	r0, r8
 8007a9a:	4798      	blx	r3
 8007a9c:	6923      	ldr	r3, [r4, #16]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	6123      	str	r3, [r4, #16]
 8007aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007aa6:	fa5f fa8a 	uxtb.w	sl, sl
 8007aaa:	f1ba 0f02 	cmp.w	sl, #2
 8007aae:	d1ec      	bne.n	8007a8a <_scanf_float+0x2c6>
 8007ab0:	3d03      	subs	r5, #3
 8007ab2:	b2ed      	uxtb	r5, r5
 8007ab4:	1b76      	subs	r6, r6, r5
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	05da      	lsls	r2, r3, #23
 8007aba:	d52f      	bpl.n	8007b1c <_scanf_float+0x358>
 8007abc:	055b      	lsls	r3, r3, #21
 8007abe:	d510      	bpl.n	8007ae2 <_scanf_float+0x31e>
 8007ac0:	455e      	cmp	r6, fp
 8007ac2:	f67f aebf 	bls.w	8007844 <_scanf_float+0x80>
 8007ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007aca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ace:	463a      	mov	r2, r7
 8007ad0:	4640      	mov	r0, r8
 8007ad2:	4798      	blx	r3
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	6123      	str	r3, [r4, #16]
 8007ada:	e7f1      	b.n	8007ac0 <_scanf_float+0x2fc>
 8007adc:	46aa      	mov	sl, r5
 8007ade:	9602      	str	r6, [sp, #8]
 8007ae0:	e7df      	b.n	8007aa2 <_scanf_float+0x2de>
 8007ae2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007ae6:	6923      	ldr	r3, [r4, #16]
 8007ae8:	2965      	cmp	r1, #101	; 0x65
 8007aea:	f103 33ff 	add.w	r3, r3, #4294967295
 8007aee:	f106 35ff 	add.w	r5, r6, #4294967295
 8007af2:	6123      	str	r3, [r4, #16]
 8007af4:	d00c      	beq.n	8007b10 <_scanf_float+0x34c>
 8007af6:	2945      	cmp	r1, #69	; 0x45
 8007af8:	d00a      	beq.n	8007b10 <_scanf_float+0x34c>
 8007afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007afe:	463a      	mov	r2, r7
 8007b00:	4640      	mov	r0, r8
 8007b02:	4798      	blx	r3
 8007b04:	6923      	ldr	r3, [r4, #16]
 8007b06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	1eb5      	subs	r5, r6, #2
 8007b0e:	6123      	str	r3, [r4, #16]
 8007b10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b14:	463a      	mov	r2, r7
 8007b16:	4640      	mov	r0, r8
 8007b18:	4798      	blx	r3
 8007b1a:	462e      	mov	r6, r5
 8007b1c:	6825      	ldr	r5, [r4, #0]
 8007b1e:	f015 0510 	ands.w	r5, r5, #16
 8007b22:	d159      	bne.n	8007bd8 <_scanf_float+0x414>
 8007b24:	7035      	strb	r5, [r6, #0]
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b30:	d11b      	bne.n	8007b6a <_scanf_float+0x3a6>
 8007b32:	9b01      	ldr	r3, [sp, #4]
 8007b34:	454b      	cmp	r3, r9
 8007b36:	eba3 0209 	sub.w	r2, r3, r9
 8007b3a:	d123      	bne.n	8007b84 <_scanf_float+0x3c0>
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4659      	mov	r1, fp
 8007b40:	4640      	mov	r0, r8
 8007b42:	f000 fecb 	bl	80088dc <_strtod_r>
 8007b46:	6822      	ldr	r2, [r4, #0]
 8007b48:	9b03      	ldr	r3, [sp, #12]
 8007b4a:	f012 0f02 	tst.w	r2, #2
 8007b4e:	ec57 6b10 	vmov	r6, r7, d0
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	d021      	beq.n	8007b9a <_scanf_float+0x3d6>
 8007b56:	9903      	ldr	r1, [sp, #12]
 8007b58:	1d1a      	adds	r2, r3, #4
 8007b5a:	600a      	str	r2, [r1, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	e9c3 6700 	strd	r6, r7, [r3]
 8007b62:	68e3      	ldr	r3, [r4, #12]
 8007b64:	3301      	adds	r3, #1
 8007b66:	60e3      	str	r3, [r4, #12]
 8007b68:	e66d      	b.n	8007846 <_scanf_float+0x82>
 8007b6a:	9b04      	ldr	r3, [sp, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0e5      	beq.n	8007b3c <_scanf_float+0x378>
 8007b70:	9905      	ldr	r1, [sp, #20]
 8007b72:	230a      	movs	r3, #10
 8007b74:	462a      	mov	r2, r5
 8007b76:	3101      	adds	r1, #1
 8007b78:	4640      	mov	r0, r8
 8007b7a:	f000 ff37 	bl	80089ec <_strtol_r>
 8007b7e:	9b04      	ldr	r3, [sp, #16]
 8007b80:	9e05      	ldr	r6, [sp, #20]
 8007b82:	1ac2      	subs	r2, r0, r3
 8007b84:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007b88:	429e      	cmp	r6, r3
 8007b8a:	bf28      	it	cs
 8007b8c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007b90:	4912      	ldr	r1, [pc, #72]	; (8007bdc <_scanf_float+0x418>)
 8007b92:	4630      	mov	r0, r6
 8007b94:	f000 f860 	bl	8007c58 <siprintf>
 8007b98:	e7d0      	b.n	8007b3c <_scanf_float+0x378>
 8007b9a:	9903      	ldr	r1, [sp, #12]
 8007b9c:	f012 0f04 	tst.w	r2, #4
 8007ba0:	f103 0204 	add.w	r2, r3, #4
 8007ba4:	600a      	str	r2, [r1, #0]
 8007ba6:	d1d9      	bne.n	8007b5c <_scanf_float+0x398>
 8007ba8:	f8d3 8000 	ldr.w	r8, [r3]
 8007bac:	ee10 2a10 	vmov	r2, s0
 8007bb0:	ee10 0a10 	vmov	r0, s0
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	f7f8 ffc0 	bl	8000b3c <__aeabi_dcmpun>
 8007bbc:	b128      	cbz	r0, 8007bca <_scanf_float+0x406>
 8007bbe:	4808      	ldr	r0, [pc, #32]	; (8007be0 <_scanf_float+0x41c>)
 8007bc0:	f000 f810 	bl	8007be4 <nanf>
 8007bc4:	ed88 0a00 	vstr	s0, [r8]
 8007bc8:	e7cb      	b.n	8007b62 <_scanf_float+0x39e>
 8007bca:	4630      	mov	r0, r6
 8007bcc:	4639      	mov	r1, r7
 8007bce:	f7f9 f813 	bl	8000bf8 <__aeabi_d2f>
 8007bd2:	f8c8 0000 	str.w	r0, [r8]
 8007bd6:	e7c4      	b.n	8007b62 <_scanf_float+0x39e>
 8007bd8:	2500      	movs	r5, #0
 8007bda:	e634      	b.n	8007846 <_scanf_float+0x82>
 8007bdc:	0800b8d4 	.word	0x0800b8d4
 8007be0:	0800bce0 	.word	0x0800bce0

08007be4 <nanf>:
 8007be4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007bec <nanf+0x8>
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	7fc00000 	.word	0x7fc00000

08007bf0 <sniprintf>:
 8007bf0:	b40c      	push	{r2, r3}
 8007bf2:	b530      	push	{r4, r5, lr}
 8007bf4:	4b17      	ldr	r3, [pc, #92]	; (8007c54 <sniprintf+0x64>)
 8007bf6:	1e0c      	subs	r4, r1, #0
 8007bf8:	681d      	ldr	r5, [r3, #0]
 8007bfa:	b09d      	sub	sp, #116	; 0x74
 8007bfc:	da08      	bge.n	8007c10 <sniprintf+0x20>
 8007bfe:	238b      	movs	r3, #139	; 0x8b
 8007c00:	602b      	str	r3, [r5, #0]
 8007c02:	f04f 30ff 	mov.w	r0, #4294967295
 8007c06:	b01d      	add	sp, #116	; 0x74
 8007c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c0c:	b002      	add	sp, #8
 8007c0e:	4770      	bx	lr
 8007c10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007c14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c18:	bf14      	ite	ne
 8007c1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c1e:	4623      	moveq	r3, r4
 8007c20:	9304      	str	r3, [sp, #16]
 8007c22:	9307      	str	r3, [sp, #28]
 8007c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c28:	9002      	str	r0, [sp, #8]
 8007c2a:	9006      	str	r0, [sp, #24]
 8007c2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c32:	ab21      	add	r3, sp, #132	; 0x84
 8007c34:	a902      	add	r1, sp, #8
 8007c36:	4628      	mov	r0, r5
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	f002 ff03 	bl	800aa44 <_svfiprintf_r>
 8007c3e:	1c43      	adds	r3, r0, #1
 8007c40:	bfbc      	itt	lt
 8007c42:	238b      	movlt	r3, #139	; 0x8b
 8007c44:	602b      	strlt	r3, [r5, #0]
 8007c46:	2c00      	cmp	r4, #0
 8007c48:	d0dd      	beq.n	8007c06 <sniprintf+0x16>
 8007c4a:	9b02      	ldr	r3, [sp, #8]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	e7d9      	b.n	8007c06 <sniprintf+0x16>
 8007c52:	bf00      	nop
 8007c54:	2000001c 	.word	0x2000001c

08007c58 <siprintf>:
 8007c58:	b40e      	push	{r1, r2, r3}
 8007c5a:	b500      	push	{lr}
 8007c5c:	b09c      	sub	sp, #112	; 0x70
 8007c5e:	ab1d      	add	r3, sp, #116	; 0x74
 8007c60:	9002      	str	r0, [sp, #8]
 8007c62:	9006      	str	r0, [sp, #24]
 8007c64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c68:	4809      	ldr	r0, [pc, #36]	; (8007c90 <siprintf+0x38>)
 8007c6a:	9107      	str	r1, [sp, #28]
 8007c6c:	9104      	str	r1, [sp, #16]
 8007c6e:	4909      	ldr	r1, [pc, #36]	; (8007c94 <siprintf+0x3c>)
 8007c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c74:	9105      	str	r1, [sp, #20]
 8007c76:	6800      	ldr	r0, [r0, #0]
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	a902      	add	r1, sp, #8
 8007c7c:	f002 fee2 	bl	800aa44 <_svfiprintf_r>
 8007c80:	9b02      	ldr	r3, [sp, #8]
 8007c82:	2200      	movs	r2, #0
 8007c84:	701a      	strb	r2, [r3, #0]
 8007c86:	b01c      	add	sp, #112	; 0x70
 8007c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c8c:	b003      	add	sp, #12
 8007c8e:	4770      	bx	lr
 8007c90:	2000001c 	.word	0x2000001c
 8007c94:	ffff0208 	.word	0xffff0208

08007c98 <sulp>:
 8007c98:	b570      	push	{r4, r5, r6, lr}
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	460d      	mov	r5, r1
 8007c9e:	ec45 4b10 	vmov	d0, r4, r5
 8007ca2:	4616      	mov	r6, r2
 8007ca4:	f002 fc2c 	bl	800a500 <__ulp>
 8007ca8:	ec51 0b10 	vmov	r0, r1, d0
 8007cac:	b17e      	cbz	r6, 8007cce <sulp+0x36>
 8007cae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007cb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	dd09      	ble.n	8007cce <sulp+0x36>
 8007cba:	051b      	lsls	r3, r3, #20
 8007cbc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007cc0:	2400      	movs	r4, #0
 8007cc2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	462b      	mov	r3, r5
 8007cca:	f7f8 fc9d 	bl	8000608 <__aeabi_dmul>
 8007cce:	bd70      	pop	{r4, r5, r6, pc}

08007cd0 <_strtod_l>:
 8007cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd4:	ed2d 8b02 	vpush	{d8}
 8007cd8:	b09d      	sub	sp, #116	; 0x74
 8007cda:	461f      	mov	r7, r3
 8007cdc:	2300      	movs	r3, #0
 8007cde:	9318      	str	r3, [sp, #96]	; 0x60
 8007ce0:	4ba2      	ldr	r3, [pc, #648]	; (8007f6c <_strtod_l+0x29c>)
 8007ce2:	9213      	str	r2, [sp, #76]	; 0x4c
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	9305      	str	r3, [sp, #20]
 8007ce8:	4604      	mov	r4, r0
 8007cea:	4618      	mov	r0, r3
 8007cec:	4688      	mov	r8, r1
 8007cee:	f7f8 fa77 	bl	80001e0 <strlen>
 8007cf2:	f04f 0a00 	mov.w	sl, #0
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	f04f 0b00 	mov.w	fp, #0
 8007cfc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007d00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d02:	781a      	ldrb	r2, [r3, #0]
 8007d04:	2a2b      	cmp	r2, #43	; 0x2b
 8007d06:	d04e      	beq.n	8007da6 <_strtod_l+0xd6>
 8007d08:	d83b      	bhi.n	8007d82 <_strtod_l+0xb2>
 8007d0a:	2a0d      	cmp	r2, #13
 8007d0c:	d834      	bhi.n	8007d78 <_strtod_l+0xa8>
 8007d0e:	2a08      	cmp	r2, #8
 8007d10:	d834      	bhi.n	8007d7c <_strtod_l+0xac>
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	d03e      	beq.n	8007d94 <_strtod_l+0xc4>
 8007d16:	2300      	movs	r3, #0
 8007d18:	930a      	str	r3, [sp, #40]	; 0x28
 8007d1a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007d1c:	7833      	ldrb	r3, [r6, #0]
 8007d1e:	2b30      	cmp	r3, #48	; 0x30
 8007d20:	f040 80b0 	bne.w	8007e84 <_strtod_l+0x1b4>
 8007d24:	7873      	ldrb	r3, [r6, #1]
 8007d26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d2a:	2b58      	cmp	r3, #88	; 0x58
 8007d2c:	d168      	bne.n	8007e00 <_strtod_l+0x130>
 8007d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	ab18      	add	r3, sp, #96	; 0x60
 8007d34:	9702      	str	r7, [sp, #8]
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	4a8d      	ldr	r2, [pc, #564]	; (8007f70 <_strtod_l+0x2a0>)
 8007d3a:	ab19      	add	r3, sp, #100	; 0x64
 8007d3c:	a917      	add	r1, sp, #92	; 0x5c
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f001 fd38 	bl	80097b4 <__gethex>
 8007d44:	f010 0707 	ands.w	r7, r0, #7
 8007d48:	4605      	mov	r5, r0
 8007d4a:	d005      	beq.n	8007d58 <_strtod_l+0x88>
 8007d4c:	2f06      	cmp	r7, #6
 8007d4e:	d12c      	bne.n	8007daa <_strtod_l+0xda>
 8007d50:	3601      	adds	r6, #1
 8007d52:	2300      	movs	r3, #0
 8007d54:	9617      	str	r6, [sp, #92]	; 0x5c
 8007d56:	930a      	str	r3, [sp, #40]	; 0x28
 8007d58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f040 8590 	bne.w	8008880 <_strtod_l+0xbb0>
 8007d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d62:	b1eb      	cbz	r3, 8007da0 <_strtod_l+0xd0>
 8007d64:	4652      	mov	r2, sl
 8007d66:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d6a:	ec43 2b10 	vmov	d0, r2, r3
 8007d6e:	b01d      	add	sp, #116	; 0x74
 8007d70:	ecbd 8b02 	vpop	{d8}
 8007d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d78:	2a20      	cmp	r2, #32
 8007d7a:	d1cc      	bne.n	8007d16 <_strtod_l+0x46>
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d80:	e7be      	b.n	8007d00 <_strtod_l+0x30>
 8007d82:	2a2d      	cmp	r2, #45	; 0x2d
 8007d84:	d1c7      	bne.n	8007d16 <_strtod_l+0x46>
 8007d86:	2201      	movs	r2, #1
 8007d88:	920a      	str	r2, [sp, #40]	; 0x28
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d8e:	785b      	ldrb	r3, [r3, #1]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1c2      	bne.n	8007d1a <_strtod_l+0x4a>
 8007d94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d96:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f040 856e 	bne.w	800887c <_strtod_l+0xbac>
 8007da0:	4652      	mov	r2, sl
 8007da2:	465b      	mov	r3, fp
 8007da4:	e7e1      	b.n	8007d6a <_strtod_l+0x9a>
 8007da6:	2200      	movs	r2, #0
 8007da8:	e7ee      	b.n	8007d88 <_strtod_l+0xb8>
 8007daa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007dac:	b13a      	cbz	r2, 8007dbe <_strtod_l+0xee>
 8007dae:	2135      	movs	r1, #53	; 0x35
 8007db0:	a81a      	add	r0, sp, #104	; 0x68
 8007db2:	f002 fcb0 	bl	800a716 <__copybits>
 8007db6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007db8:	4620      	mov	r0, r4
 8007dba:	f002 f86f 	bl	8009e9c <_Bfree>
 8007dbe:	3f01      	subs	r7, #1
 8007dc0:	2f04      	cmp	r7, #4
 8007dc2:	d806      	bhi.n	8007dd2 <_strtod_l+0x102>
 8007dc4:	e8df f007 	tbb	[pc, r7]
 8007dc8:	1714030a 	.word	0x1714030a
 8007dcc:	0a          	.byte	0x0a
 8007dcd:	00          	.byte	0x00
 8007dce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007dd2:	0728      	lsls	r0, r5, #28
 8007dd4:	d5c0      	bpl.n	8007d58 <_strtod_l+0x88>
 8007dd6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007dda:	e7bd      	b.n	8007d58 <_strtod_l+0x88>
 8007ddc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007de0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007de2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007de6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007dea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007dee:	e7f0      	b.n	8007dd2 <_strtod_l+0x102>
 8007df0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007f74 <_strtod_l+0x2a4>
 8007df4:	e7ed      	b.n	8007dd2 <_strtod_l+0x102>
 8007df6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007dfa:	f04f 3aff 	mov.w	sl, #4294967295
 8007dfe:	e7e8      	b.n	8007dd2 <_strtod_l+0x102>
 8007e00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e02:	1c5a      	adds	r2, r3, #1
 8007e04:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e06:	785b      	ldrb	r3, [r3, #1]
 8007e08:	2b30      	cmp	r3, #48	; 0x30
 8007e0a:	d0f9      	beq.n	8007e00 <_strtod_l+0x130>
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d0a3      	beq.n	8007d58 <_strtod_l+0x88>
 8007e10:	2301      	movs	r3, #1
 8007e12:	f04f 0900 	mov.w	r9, #0
 8007e16:	9304      	str	r3, [sp, #16]
 8007e18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e1a:	9308      	str	r3, [sp, #32]
 8007e1c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007e20:	464f      	mov	r7, r9
 8007e22:	220a      	movs	r2, #10
 8007e24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007e26:	7806      	ldrb	r6, [r0, #0]
 8007e28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007e2c:	b2d9      	uxtb	r1, r3
 8007e2e:	2909      	cmp	r1, #9
 8007e30:	d92a      	bls.n	8007e88 <_strtod_l+0x1b8>
 8007e32:	9905      	ldr	r1, [sp, #20]
 8007e34:	462a      	mov	r2, r5
 8007e36:	f002 ff1f 	bl	800ac78 <strncmp>
 8007e3a:	b398      	cbz	r0, 8007ea4 <_strtod_l+0x1d4>
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	4632      	mov	r2, r6
 8007e40:	463d      	mov	r5, r7
 8007e42:	9005      	str	r0, [sp, #20]
 8007e44:	4603      	mov	r3, r0
 8007e46:	2a65      	cmp	r2, #101	; 0x65
 8007e48:	d001      	beq.n	8007e4e <_strtod_l+0x17e>
 8007e4a:	2a45      	cmp	r2, #69	; 0x45
 8007e4c:	d118      	bne.n	8007e80 <_strtod_l+0x1b0>
 8007e4e:	b91d      	cbnz	r5, 8007e58 <_strtod_l+0x188>
 8007e50:	9a04      	ldr	r2, [sp, #16]
 8007e52:	4302      	orrs	r2, r0
 8007e54:	d09e      	beq.n	8007d94 <_strtod_l+0xc4>
 8007e56:	2500      	movs	r5, #0
 8007e58:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007e5c:	f108 0201 	add.w	r2, r8, #1
 8007e60:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e62:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007e66:	2a2b      	cmp	r2, #43	; 0x2b
 8007e68:	d075      	beq.n	8007f56 <_strtod_l+0x286>
 8007e6a:	2a2d      	cmp	r2, #45	; 0x2d
 8007e6c:	d07b      	beq.n	8007f66 <_strtod_l+0x296>
 8007e6e:	f04f 0c00 	mov.w	ip, #0
 8007e72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007e76:	2909      	cmp	r1, #9
 8007e78:	f240 8082 	bls.w	8007f80 <_strtod_l+0x2b0>
 8007e7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007e80:	2600      	movs	r6, #0
 8007e82:	e09d      	b.n	8007fc0 <_strtod_l+0x2f0>
 8007e84:	2300      	movs	r3, #0
 8007e86:	e7c4      	b.n	8007e12 <_strtod_l+0x142>
 8007e88:	2f08      	cmp	r7, #8
 8007e8a:	bfd8      	it	le
 8007e8c:	9907      	ldrle	r1, [sp, #28]
 8007e8e:	f100 0001 	add.w	r0, r0, #1
 8007e92:	bfda      	itte	le
 8007e94:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e98:	9307      	strle	r3, [sp, #28]
 8007e9a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007e9e:	3701      	adds	r7, #1
 8007ea0:	9017      	str	r0, [sp, #92]	; 0x5c
 8007ea2:	e7bf      	b.n	8007e24 <_strtod_l+0x154>
 8007ea4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ea6:	195a      	adds	r2, r3, r5
 8007ea8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007eaa:	5d5a      	ldrb	r2, [r3, r5]
 8007eac:	2f00      	cmp	r7, #0
 8007eae:	d037      	beq.n	8007f20 <_strtod_l+0x250>
 8007eb0:	9005      	str	r0, [sp, #20]
 8007eb2:	463d      	mov	r5, r7
 8007eb4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007eb8:	2b09      	cmp	r3, #9
 8007eba:	d912      	bls.n	8007ee2 <_strtod_l+0x212>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e7c2      	b.n	8007e46 <_strtod_l+0x176>
 8007ec0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ec2:	1c5a      	adds	r2, r3, #1
 8007ec4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ec6:	785a      	ldrb	r2, [r3, #1]
 8007ec8:	3001      	adds	r0, #1
 8007eca:	2a30      	cmp	r2, #48	; 0x30
 8007ecc:	d0f8      	beq.n	8007ec0 <_strtod_l+0x1f0>
 8007ece:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007ed2:	2b08      	cmp	r3, #8
 8007ed4:	f200 84d9 	bhi.w	800888a <_strtod_l+0xbba>
 8007ed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007eda:	9005      	str	r0, [sp, #20]
 8007edc:	2000      	movs	r0, #0
 8007ede:	9308      	str	r3, [sp, #32]
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	3a30      	subs	r2, #48	; 0x30
 8007ee4:	f100 0301 	add.w	r3, r0, #1
 8007ee8:	d014      	beq.n	8007f14 <_strtod_l+0x244>
 8007eea:	9905      	ldr	r1, [sp, #20]
 8007eec:	4419      	add	r1, r3
 8007eee:	9105      	str	r1, [sp, #20]
 8007ef0:	462b      	mov	r3, r5
 8007ef2:	eb00 0e05 	add.w	lr, r0, r5
 8007ef6:	210a      	movs	r1, #10
 8007ef8:	4573      	cmp	r3, lr
 8007efa:	d113      	bne.n	8007f24 <_strtod_l+0x254>
 8007efc:	182b      	adds	r3, r5, r0
 8007efe:	2b08      	cmp	r3, #8
 8007f00:	f105 0501 	add.w	r5, r5, #1
 8007f04:	4405      	add	r5, r0
 8007f06:	dc1c      	bgt.n	8007f42 <_strtod_l+0x272>
 8007f08:	9907      	ldr	r1, [sp, #28]
 8007f0a:	230a      	movs	r3, #10
 8007f0c:	fb03 2301 	mla	r3, r3, r1, r2
 8007f10:	9307      	str	r3, [sp, #28]
 8007f12:	2300      	movs	r3, #0
 8007f14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f16:	1c51      	adds	r1, r2, #1
 8007f18:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f1a:	7852      	ldrb	r2, [r2, #1]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	e7c9      	b.n	8007eb4 <_strtod_l+0x1e4>
 8007f20:	4638      	mov	r0, r7
 8007f22:	e7d2      	b.n	8007eca <_strtod_l+0x1fa>
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	dc04      	bgt.n	8007f32 <_strtod_l+0x262>
 8007f28:	9e07      	ldr	r6, [sp, #28]
 8007f2a:	434e      	muls	r6, r1
 8007f2c:	9607      	str	r6, [sp, #28]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	e7e2      	b.n	8007ef8 <_strtod_l+0x228>
 8007f32:	f103 0c01 	add.w	ip, r3, #1
 8007f36:	f1bc 0f10 	cmp.w	ip, #16
 8007f3a:	bfd8      	it	le
 8007f3c:	fb01 f909 	mulle.w	r9, r1, r9
 8007f40:	e7f5      	b.n	8007f2e <_strtod_l+0x25e>
 8007f42:	2d10      	cmp	r5, #16
 8007f44:	bfdc      	itt	le
 8007f46:	230a      	movle	r3, #10
 8007f48:	fb03 2909 	mlale	r9, r3, r9, r2
 8007f4c:	e7e1      	b.n	8007f12 <_strtod_l+0x242>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	9305      	str	r3, [sp, #20]
 8007f52:	2301      	movs	r3, #1
 8007f54:	e77c      	b.n	8007e50 <_strtod_l+0x180>
 8007f56:	f04f 0c00 	mov.w	ip, #0
 8007f5a:	f108 0202 	add.w	r2, r8, #2
 8007f5e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f60:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007f64:	e785      	b.n	8007e72 <_strtod_l+0x1a2>
 8007f66:	f04f 0c01 	mov.w	ip, #1
 8007f6a:	e7f6      	b.n	8007f5a <_strtod_l+0x28a>
 8007f6c:	0800bb28 	.word	0x0800bb28
 8007f70:	0800b8dc 	.word	0x0800b8dc
 8007f74:	7ff00000 	.word	0x7ff00000
 8007f78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f7a:	1c51      	adds	r1, r2, #1
 8007f7c:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f7e:	7852      	ldrb	r2, [r2, #1]
 8007f80:	2a30      	cmp	r2, #48	; 0x30
 8007f82:	d0f9      	beq.n	8007f78 <_strtod_l+0x2a8>
 8007f84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007f88:	2908      	cmp	r1, #8
 8007f8a:	f63f af79 	bhi.w	8007e80 <_strtod_l+0x1b0>
 8007f8e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007f92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f94:	9206      	str	r2, [sp, #24]
 8007f96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f98:	1c51      	adds	r1, r2, #1
 8007f9a:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f9c:	7852      	ldrb	r2, [r2, #1]
 8007f9e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007fa2:	2e09      	cmp	r6, #9
 8007fa4:	d937      	bls.n	8008016 <_strtod_l+0x346>
 8007fa6:	9e06      	ldr	r6, [sp, #24]
 8007fa8:	1b89      	subs	r1, r1, r6
 8007faa:	2908      	cmp	r1, #8
 8007fac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007fb0:	dc02      	bgt.n	8007fb8 <_strtod_l+0x2e8>
 8007fb2:	4576      	cmp	r6, lr
 8007fb4:	bfa8      	it	ge
 8007fb6:	4676      	movge	r6, lr
 8007fb8:	f1bc 0f00 	cmp.w	ip, #0
 8007fbc:	d000      	beq.n	8007fc0 <_strtod_l+0x2f0>
 8007fbe:	4276      	negs	r6, r6
 8007fc0:	2d00      	cmp	r5, #0
 8007fc2:	d14d      	bne.n	8008060 <_strtod_l+0x390>
 8007fc4:	9904      	ldr	r1, [sp, #16]
 8007fc6:	4301      	orrs	r1, r0
 8007fc8:	f47f aec6 	bne.w	8007d58 <_strtod_l+0x88>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f47f aee1 	bne.w	8007d94 <_strtod_l+0xc4>
 8007fd2:	2a69      	cmp	r2, #105	; 0x69
 8007fd4:	d027      	beq.n	8008026 <_strtod_l+0x356>
 8007fd6:	dc24      	bgt.n	8008022 <_strtod_l+0x352>
 8007fd8:	2a49      	cmp	r2, #73	; 0x49
 8007fda:	d024      	beq.n	8008026 <_strtod_l+0x356>
 8007fdc:	2a4e      	cmp	r2, #78	; 0x4e
 8007fde:	f47f aed9 	bne.w	8007d94 <_strtod_l+0xc4>
 8007fe2:	499f      	ldr	r1, [pc, #636]	; (8008260 <_strtod_l+0x590>)
 8007fe4:	a817      	add	r0, sp, #92	; 0x5c
 8007fe6:	f001 fe3d 	bl	8009c64 <__match>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	f43f aed2 	beq.w	8007d94 <_strtod_l+0xc4>
 8007ff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b28      	cmp	r3, #40	; 0x28
 8007ff6:	d12d      	bne.n	8008054 <_strtod_l+0x384>
 8007ff8:	499a      	ldr	r1, [pc, #616]	; (8008264 <_strtod_l+0x594>)
 8007ffa:	aa1a      	add	r2, sp, #104	; 0x68
 8007ffc:	a817      	add	r0, sp, #92	; 0x5c
 8007ffe:	f001 fe45 	bl	8009c8c <__hexnan>
 8008002:	2805      	cmp	r0, #5
 8008004:	d126      	bne.n	8008054 <_strtod_l+0x384>
 8008006:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008008:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800800c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008010:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008014:	e6a0      	b.n	8007d58 <_strtod_l+0x88>
 8008016:	210a      	movs	r1, #10
 8008018:	fb01 2e0e 	mla	lr, r1, lr, r2
 800801c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008020:	e7b9      	b.n	8007f96 <_strtod_l+0x2c6>
 8008022:	2a6e      	cmp	r2, #110	; 0x6e
 8008024:	e7db      	b.n	8007fde <_strtod_l+0x30e>
 8008026:	4990      	ldr	r1, [pc, #576]	; (8008268 <_strtod_l+0x598>)
 8008028:	a817      	add	r0, sp, #92	; 0x5c
 800802a:	f001 fe1b 	bl	8009c64 <__match>
 800802e:	2800      	cmp	r0, #0
 8008030:	f43f aeb0 	beq.w	8007d94 <_strtod_l+0xc4>
 8008034:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008036:	498d      	ldr	r1, [pc, #564]	; (800826c <_strtod_l+0x59c>)
 8008038:	3b01      	subs	r3, #1
 800803a:	a817      	add	r0, sp, #92	; 0x5c
 800803c:	9317      	str	r3, [sp, #92]	; 0x5c
 800803e:	f001 fe11 	bl	8009c64 <__match>
 8008042:	b910      	cbnz	r0, 800804a <_strtod_l+0x37a>
 8008044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008046:	3301      	adds	r3, #1
 8008048:	9317      	str	r3, [sp, #92]	; 0x5c
 800804a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800827c <_strtod_l+0x5ac>
 800804e:	f04f 0a00 	mov.w	sl, #0
 8008052:	e681      	b.n	8007d58 <_strtod_l+0x88>
 8008054:	4886      	ldr	r0, [pc, #536]	; (8008270 <_strtod_l+0x5a0>)
 8008056:	f002 fdf7 	bl	800ac48 <nan>
 800805a:	ec5b ab10 	vmov	sl, fp, d0
 800805e:	e67b      	b.n	8007d58 <_strtod_l+0x88>
 8008060:	9b05      	ldr	r3, [sp, #20]
 8008062:	9807      	ldr	r0, [sp, #28]
 8008064:	1af3      	subs	r3, r6, r3
 8008066:	2f00      	cmp	r7, #0
 8008068:	bf08      	it	eq
 800806a:	462f      	moveq	r7, r5
 800806c:	2d10      	cmp	r5, #16
 800806e:	9306      	str	r3, [sp, #24]
 8008070:	46a8      	mov	r8, r5
 8008072:	bfa8      	it	ge
 8008074:	f04f 0810 	movge.w	r8, #16
 8008078:	f7f8 fa4c 	bl	8000514 <__aeabi_ui2d>
 800807c:	2d09      	cmp	r5, #9
 800807e:	4682      	mov	sl, r0
 8008080:	468b      	mov	fp, r1
 8008082:	dd13      	ble.n	80080ac <_strtod_l+0x3dc>
 8008084:	4b7b      	ldr	r3, [pc, #492]	; (8008274 <_strtod_l+0x5a4>)
 8008086:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800808a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800808e:	f7f8 fabb 	bl	8000608 <__aeabi_dmul>
 8008092:	4682      	mov	sl, r0
 8008094:	4648      	mov	r0, r9
 8008096:	468b      	mov	fp, r1
 8008098:	f7f8 fa3c 	bl	8000514 <__aeabi_ui2d>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	4650      	mov	r0, sl
 80080a2:	4659      	mov	r1, fp
 80080a4:	f7f8 f8fa 	bl	800029c <__adddf3>
 80080a8:	4682      	mov	sl, r0
 80080aa:	468b      	mov	fp, r1
 80080ac:	2d0f      	cmp	r5, #15
 80080ae:	dc38      	bgt.n	8008122 <_strtod_l+0x452>
 80080b0:	9b06      	ldr	r3, [sp, #24]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f43f ae50 	beq.w	8007d58 <_strtod_l+0x88>
 80080b8:	dd24      	ble.n	8008104 <_strtod_l+0x434>
 80080ba:	2b16      	cmp	r3, #22
 80080bc:	dc0b      	bgt.n	80080d6 <_strtod_l+0x406>
 80080be:	496d      	ldr	r1, [pc, #436]	; (8008274 <_strtod_l+0x5a4>)
 80080c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080c8:	4652      	mov	r2, sl
 80080ca:	465b      	mov	r3, fp
 80080cc:	f7f8 fa9c 	bl	8000608 <__aeabi_dmul>
 80080d0:	4682      	mov	sl, r0
 80080d2:	468b      	mov	fp, r1
 80080d4:	e640      	b.n	8007d58 <_strtod_l+0x88>
 80080d6:	9a06      	ldr	r2, [sp, #24]
 80080d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80080dc:	4293      	cmp	r3, r2
 80080de:	db20      	blt.n	8008122 <_strtod_l+0x452>
 80080e0:	4c64      	ldr	r4, [pc, #400]	; (8008274 <_strtod_l+0x5a4>)
 80080e2:	f1c5 050f 	rsb	r5, r5, #15
 80080e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80080ea:	4652      	mov	r2, sl
 80080ec:	465b      	mov	r3, fp
 80080ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080f2:	f7f8 fa89 	bl	8000608 <__aeabi_dmul>
 80080f6:	9b06      	ldr	r3, [sp, #24]
 80080f8:	1b5d      	subs	r5, r3, r5
 80080fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80080fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008102:	e7e3      	b.n	80080cc <_strtod_l+0x3fc>
 8008104:	9b06      	ldr	r3, [sp, #24]
 8008106:	3316      	adds	r3, #22
 8008108:	db0b      	blt.n	8008122 <_strtod_l+0x452>
 800810a:	9b05      	ldr	r3, [sp, #20]
 800810c:	1b9e      	subs	r6, r3, r6
 800810e:	4b59      	ldr	r3, [pc, #356]	; (8008274 <_strtod_l+0x5a4>)
 8008110:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008114:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008118:	4650      	mov	r0, sl
 800811a:	4659      	mov	r1, fp
 800811c:	f7f8 fb9e 	bl	800085c <__aeabi_ddiv>
 8008120:	e7d6      	b.n	80080d0 <_strtod_l+0x400>
 8008122:	9b06      	ldr	r3, [sp, #24]
 8008124:	eba5 0808 	sub.w	r8, r5, r8
 8008128:	4498      	add	r8, r3
 800812a:	f1b8 0f00 	cmp.w	r8, #0
 800812e:	dd74      	ble.n	800821a <_strtod_l+0x54a>
 8008130:	f018 030f 	ands.w	r3, r8, #15
 8008134:	d00a      	beq.n	800814c <_strtod_l+0x47c>
 8008136:	494f      	ldr	r1, [pc, #316]	; (8008274 <_strtod_l+0x5a4>)
 8008138:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800813c:	4652      	mov	r2, sl
 800813e:	465b      	mov	r3, fp
 8008140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008144:	f7f8 fa60 	bl	8000608 <__aeabi_dmul>
 8008148:	4682      	mov	sl, r0
 800814a:	468b      	mov	fp, r1
 800814c:	f038 080f 	bics.w	r8, r8, #15
 8008150:	d04f      	beq.n	80081f2 <_strtod_l+0x522>
 8008152:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008156:	dd22      	ble.n	800819e <_strtod_l+0x4ce>
 8008158:	2500      	movs	r5, #0
 800815a:	462e      	mov	r6, r5
 800815c:	9507      	str	r5, [sp, #28]
 800815e:	9505      	str	r5, [sp, #20]
 8008160:	2322      	movs	r3, #34	; 0x22
 8008162:	f8df b118 	ldr.w	fp, [pc, #280]	; 800827c <_strtod_l+0x5ac>
 8008166:	6023      	str	r3, [r4, #0]
 8008168:	f04f 0a00 	mov.w	sl, #0
 800816c:	9b07      	ldr	r3, [sp, #28]
 800816e:	2b00      	cmp	r3, #0
 8008170:	f43f adf2 	beq.w	8007d58 <_strtod_l+0x88>
 8008174:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008176:	4620      	mov	r0, r4
 8008178:	f001 fe90 	bl	8009e9c <_Bfree>
 800817c:	9905      	ldr	r1, [sp, #20]
 800817e:	4620      	mov	r0, r4
 8008180:	f001 fe8c 	bl	8009e9c <_Bfree>
 8008184:	4631      	mov	r1, r6
 8008186:	4620      	mov	r0, r4
 8008188:	f001 fe88 	bl	8009e9c <_Bfree>
 800818c:	9907      	ldr	r1, [sp, #28]
 800818e:	4620      	mov	r0, r4
 8008190:	f001 fe84 	bl	8009e9c <_Bfree>
 8008194:	4629      	mov	r1, r5
 8008196:	4620      	mov	r0, r4
 8008198:	f001 fe80 	bl	8009e9c <_Bfree>
 800819c:	e5dc      	b.n	8007d58 <_strtod_l+0x88>
 800819e:	4b36      	ldr	r3, [pc, #216]	; (8008278 <_strtod_l+0x5a8>)
 80081a0:	9304      	str	r3, [sp, #16]
 80081a2:	2300      	movs	r3, #0
 80081a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80081a8:	4650      	mov	r0, sl
 80081aa:	4659      	mov	r1, fp
 80081ac:	4699      	mov	r9, r3
 80081ae:	f1b8 0f01 	cmp.w	r8, #1
 80081b2:	dc21      	bgt.n	80081f8 <_strtod_l+0x528>
 80081b4:	b10b      	cbz	r3, 80081ba <_strtod_l+0x4ea>
 80081b6:	4682      	mov	sl, r0
 80081b8:	468b      	mov	fp, r1
 80081ba:	4b2f      	ldr	r3, [pc, #188]	; (8008278 <_strtod_l+0x5a8>)
 80081bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80081c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80081c4:	4652      	mov	r2, sl
 80081c6:	465b      	mov	r3, fp
 80081c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80081cc:	f7f8 fa1c 	bl	8000608 <__aeabi_dmul>
 80081d0:	4b2a      	ldr	r3, [pc, #168]	; (800827c <_strtod_l+0x5ac>)
 80081d2:	460a      	mov	r2, r1
 80081d4:	400b      	ands	r3, r1
 80081d6:	492a      	ldr	r1, [pc, #168]	; (8008280 <_strtod_l+0x5b0>)
 80081d8:	428b      	cmp	r3, r1
 80081da:	4682      	mov	sl, r0
 80081dc:	d8bc      	bhi.n	8008158 <_strtod_l+0x488>
 80081de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80081e2:	428b      	cmp	r3, r1
 80081e4:	bf86      	itte	hi
 80081e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008284 <_strtod_l+0x5b4>
 80081ea:	f04f 3aff 	movhi.w	sl, #4294967295
 80081ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80081f2:	2300      	movs	r3, #0
 80081f4:	9304      	str	r3, [sp, #16]
 80081f6:	e084      	b.n	8008302 <_strtod_l+0x632>
 80081f8:	f018 0f01 	tst.w	r8, #1
 80081fc:	d005      	beq.n	800820a <_strtod_l+0x53a>
 80081fe:	9b04      	ldr	r3, [sp, #16]
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	f7f8 fa00 	bl	8000608 <__aeabi_dmul>
 8008208:	2301      	movs	r3, #1
 800820a:	9a04      	ldr	r2, [sp, #16]
 800820c:	3208      	adds	r2, #8
 800820e:	f109 0901 	add.w	r9, r9, #1
 8008212:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008216:	9204      	str	r2, [sp, #16]
 8008218:	e7c9      	b.n	80081ae <_strtod_l+0x4de>
 800821a:	d0ea      	beq.n	80081f2 <_strtod_l+0x522>
 800821c:	f1c8 0800 	rsb	r8, r8, #0
 8008220:	f018 020f 	ands.w	r2, r8, #15
 8008224:	d00a      	beq.n	800823c <_strtod_l+0x56c>
 8008226:	4b13      	ldr	r3, [pc, #76]	; (8008274 <_strtod_l+0x5a4>)
 8008228:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800822c:	4650      	mov	r0, sl
 800822e:	4659      	mov	r1, fp
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	f7f8 fb12 	bl	800085c <__aeabi_ddiv>
 8008238:	4682      	mov	sl, r0
 800823a:	468b      	mov	fp, r1
 800823c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008240:	d0d7      	beq.n	80081f2 <_strtod_l+0x522>
 8008242:	f1b8 0f1f 	cmp.w	r8, #31
 8008246:	dd1f      	ble.n	8008288 <_strtod_l+0x5b8>
 8008248:	2500      	movs	r5, #0
 800824a:	462e      	mov	r6, r5
 800824c:	9507      	str	r5, [sp, #28]
 800824e:	9505      	str	r5, [sp, #20]
 8008250:	2322      	movs	r3, #34	; 0x22
 8008252:	f04f 0a00 	mov.w	sl, #0
 8008256:	f04f 0b00 	mov.w	fp, #0
 800825a:	6023      	str	r3, [r4, #0]
 800825c:	e786      	b.n	800816c <_strtod_l+0x49c>
 800825e:	bf00      	nop
 8008260:	0800b8ad 	.word	0x0800b8ad
 8008264:	0800b8f0 	.word	0x0800b8f0
 8008268:	0800b8a5 	.word	0x0800b8a5
 800826c:	0800ba34 	.word	0x0800ba34
 8008270:	0800bce0 	.word	0x0800bce0
 8008274:	0800bbc0 	.word	0x0800bbc0
 8008278:	0800bb98 	.word	0x0800bb98
 800827c:	7ff00000 	.word	0x7ff00000
 8008280:	7ca00000 	.word	0x7ca00000
 8008284:	7fefffff 	.word	0x7fefffff
 8008288:	f018 0310 	ands.w	r3, r8, #16
 800828c:	bf18      	it	ne
 800828e:	236a      	movne	r3, #106	; 0x6a
 8008290:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008640 <_strtod_l+0x970>
 8008294:	9304      	str	r3, [sp, #16]
 8008296:	4650      	mov	r0, sl
 8008298:	4659      	mov	r1, fp
 800829a:	2300      	movs	r3, #0
 800829c:	f018 0f01 	tst.w	r8, #1
 80082a0:	d004      	beq.n	80082ac <_strtod_l+0x5dc>
 80082a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80082a6:	f7f8 f9af 	bl	8000608 <__aeabi_dmul>
 80082aa:	2301      	movs	r3, #1
 80082ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 80082b0:	f109 0908 	add.w	r9, r9, #8
 80082b4:	d1f2      	bne.n	800829c <_strtod_l+0x5cc>
 80082b6:	b10b      	cbz	r3, 80082bc <_strtod_l+0x5ec>
 80082b8:	4682      	mov	sl, r0
 80082ba:	468b      	mov	fp, r1
 80082bc:	9b04      	ldr	r3, [sp, #16]
 80082be:	b1c3      	cbz	r3, 80082f2 <_strtod_l+0x622>
 80082c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80082c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	4659      	mov	r1, fp
 80082cc:	dd11      	ble.n	80082f2 <_strtod_l+0x622>
 80082ce:	2b1f      	cmp	r3, #31
 80082d0:	f340 8124 	ble.w	800851c <_strtod_l+0x84c>
 80082d4:	2b34      	cmp	r3, #52	; 0x34
 80082d6:	bfde      	ittt	le
 80082d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80082dc:	f04f 33ff 	movle.w	r3, #4294967295
 80082e0:	fa03 f202 	lslle.w	r2, r3, r2
 80082e4:	f04f 0a00 	mov.w	sl, #0
 80082e8:	bfcc      	ite	gt
 80082ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80082ee:	ea02 0b01 	andle.w	fp, r2, r1
 80082f2:	2200      	movs	r2, #0
 80082f4:	2300      	movs	r3, #0
 80082f6:	4650      	mov	r0, sl
 80082f8:	4659      	mov	r1, fp
 80082fa:	f7f8 fbed 	bl	8000ad8 <__aeabi_dcmpeq>
 80082fe:	2800      	cmp	r0, #0
 8008300:	d1a2      	bne.n	8008248 <_strtod_l+0x578>
 8008302:	9b07      	ldr	r3, [sp, #28]
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	9908      	ldr	r1, [sp, #32]
 8008308:	462b      	mov	r3, r5
 800830a:	463a      	mov	r2, r7
 800830c:	4620      	mov	r0, r4
 800830e:	f001 fe2d 	bl	8009f6c <__s2b>
 8008312:	9007      	str	r0, [sp, #28]
 8008314:	2800      	cmp	r0, #0
 8008316:	f43f af1f 	beq.w	8008158 <_strtod_l+0x488>
 800831a:	9b05      	ldr	r3, [sp, #20]
 800831c:	1b9e      	subs	r6, r3, r6
 800831e:	9b06      	ldr	r3, [sp, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	bfb4      	ite	lt
 8008324:	4633      	movlt	r3, r6
 8008326:	2300      	movge	r3, #0
 8008328:	930c      	str	r3, [sp, #48]	; 0x30
 800832a:	9b06      	ldr	r3, [sp, #24]
 800832c:	2500      	movs	r5, #0
 800832e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008332:	9312      	str	r3, [sp, #72]	; 0x48
 8008334:	462e      	mov	r6, r5
 8008336:	9b07      	ldr	r3, [sp, #28]
 8008338:	4620      	mov	r0, r4
 800833a:	6859      	ldr	r1, [r3, #4]
 800833c:	f001 fd6e 	bl	8009e1c <_Balloc>
 8008340:	9005      	str	r0, [sp, #20]
 8008342:	2800      	cmp	r0, #0
 8008344:	f43f af0c 	beq.w	8008160 <_strtod_l+0x490>
 8008348:	9b07      	ldr	r3, [sp, #28]
 800834a:	691a      	ldr	r2, [r3, #16]
 800834c:	3202      	adds	r2, #2
 800834e:	f103 010c 	add.w	r1, r3, #12
 8008352:	0092      	lsls	r2, r2, #2
 8008354:	300c      	adds	r0, #12
 8008356:	f001 fd53 	bl	8009e00 <memcpy>
 800835a:	ec4b ab10 	vmov	d0, sl, fp
 800835e:	aa1a      	add	r2, sp, #104	; 0x68
 8008360:	a919      	add	r1, sp, #100	; 0x64
 8008362:	4620      	mov	r0, r4
 8008364:	f002 f948 	bl	800a5f8 <__d2b>
 8008368:	ec4b ab18 	vmov	d8, sl, fp
 800836c:	9018      	str	r0, [sp, #96]	; 0x60
 800836e:	2800      	cmp	r0, #0
 8008370:	f43f aef6 	beq.w	8008160 <_strtod_l+0x490>
 8008374:	2101      	movs	r1, #1
 8008376:	4620      	mov	r0, r4
 8008378:	f001 fe92 	bl	800a0a0 <__i2b>
 800837c:	4606      	mov	r6, r0
 800837e:	2800      	cmp	r0, #0
 8008380:	f43f aeee 	beq.w	8008160 <_strtod_l+0x490>
 8008384:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008386:	9904      	ldr	r1, [sp, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	bfab      	itete	ge
 800838c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800838e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008390:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008392:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008396:	bfac      	ite	ge
 8008398:	eb03 0902 	addge.w	r9, r3, r2
 800839c:	1ad7      	sublt	r7, r2, r3
 800839e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80083a0:	eba3 0801 	sub.w	r8, r3, r1
 80083a4:	4490      	add	r8, r2
 80083a6:	4ba1      	ldr	r3, [pc, #644]	; (800862c <_strtod_l+0x95c>)
 80083a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80083ac:	4598      	cmp	r8, r3
 80083ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80083b2:	f280 80c7 	bge.w	8008544 <_strtod_l+0x874>
 80083b6:	eba3 0308 	sub.w	r3, r3, r8
 80083ba:	2b1f      	cmp	r3, #31
 80083bc:	eba2 0203 	sub.w	r2, r2, r3
 80083c0:	f04f 0101 	mov.w	r1, #1
 80083c4:	f300 80b1 	bgt.w	800852a <_strtod_l+0x85a>
 80083c8:	fa01 f303 	lsl.w	r3, r1, r3
 80083cc:	930d      	str	r3, [sp, #52]	; 0x34
 80083ce:	2300      	movs	r3, #0
 80083d0:	9308      	str	r3, [sp, #32]
 80083d2:	eb09 0802 	add.w	r8, r9, r2
 80083d6:	9b04      	ldr	r3, [sp, #16]
 80083d8:	45c1      	cmp	r9, r8
 80083da:	4417      	add	r7, r2
 80083dc:	441f      	add	r7, r3
 80083de:	464b      	mov	r3, r9
 80083e0:	bfa8      	it	ge
 80083e2:	4643      	movge	r3, r8
 80083e4:	42bb      	cmp	r3, r7
 80083e6:	bfa8      	it	ge
 80083e8:	463b      	movge	r3, r7
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	bfc2      	ittt	gt
 80083ee:	eba8 0803 	subgt.w	r8, r8, r3
 80083f2:	1aff      	subgt	r7, r7, r3
 80083f4:	eba9 0903 	subgt.w	r9, r9, r3
 80083f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	dd17      	ble.n	800842e <_strtod_l+0x75e>
 80083fe:	4631      	mov	r1, r6
 8008400:	461a      	mov	r2, r3
 8008402:	4620      	mov	r0, r4
 8008404:	f001 ff0c 	bl	800a220 <__pow5mult>
 8008408:	4606      	mov	r6, r0
 800840a:	2800      	cmp	r0, #0
 800840c:	f43f aea8 	beq.w	8008160 <_strtod_l+0x490>
 8008410:	4601      	mov	r1, r0
 8008412:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008414:	4620      	mov	r0, r4
 8008416:	f001 fe59 	bl	800a0cc <__multiply>
 800841a:	900b      	str	r0, [sp, #44]	; 0x2c
 800841c:	2800      	cmp	r0, #0
 800841e:	f43f ae9f 	beq.w	8008160 <_strtod_l+0x490>
 8008422:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008424:	4620      	mov	r0, r4
 8008426:	f001 fd39 	bl	8009e9c <_Bfree>
 800842a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800842c:	9318      	str	r3, [sp, #96]	; 0x60
 800842e:	f1b8 0f00 	cmp.w	r8, #0
 8008432:	f300 808c 	bgt.w	800854e <_strtod_l+0x87e>
 8008436:	9b06      	ldr	r3, [sp, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	dd08      	ble.n	800844e <_strtod_l+0x77e>
 800843c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800843e:	9905      	ldr	r1, [sp, #20]
 8008440:	4620      	mov	r0, r4
 8008442:	f001 feed 	bl	800a220 <__pow5mult>
 8008446:	9005      	str	r0, [sp, #20]
 8008448:	2800      	cmp	r0, #0
 800844a:	f43f ae89 	beq.w	8008160 <_strtod_l+0x490>
 800844e:	2f00      	cmp	r7, #0
 8008450:	dd08      	ble.n	8008464 <_strtod_l+0x794>
 8008452:	9905      	ldr	r1, [sp, #20]
 8008454:	463a      	mov	r2, r7
 8008456:	4620      	mov	r0, r4
 8008458:	f001 ff3c 	bl	800a2d4 <__lshift>
 800845c:	9005      	str	r0, [sp, #20]
 800845e:	2800      	cmp	r0, #0
 8008460:	f43f ae7e 	beq.w	8008160 <_strtod_l+0x490>
 8008464:	f1b9 0f00 	cmp.w	r9, #0
 8008468:	dd08      	ble.n	800847c <_strtod_l+0x7ac>
 800846a:	4631      	mov	r1, r6
 800846c:	464a      	mov	r2, r9
 800846e:	4620      	mov	r0, r4
 8008470:	f001 ff30 	bl	800a2d4 <__lshift>
 8008474:	4606      	mov	r6, r0
 8008476:	2800      	cmp	r0, #0
 8008478:	f43f ae72 	beq.w	8008160 <_strtod_l+0x490>
 800847c:	9a05      	ldr	r2, [sp, #20]
 800847e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008480:	4620      	mov	r0, r4
 8008482:	f001 ffb3 	bl	800a3ec <__mdiff>
 8008486:	4605      	mov	r5, r0
 8008488:	2800      	cmp	r0, #0
 800848a:	f43f ae69 	beq.w	8008160 <_strtod_l+0x490>
 800848e:	68c3      	ldr	r3, [r0, #12]
 8008490:	930b      	str	r3, [sp, #44]	; 0x2c
 8008492:	2300      	movs	r3, #0
 8008494:	60c3      	str	r3, [r0, #12]
 8008496:	4631      	mov	r1, r6
 8008498:	f001 ff8c 	bl	800a3b4 <__mcmp>
 800849c:	2800      	cmp	r0, #0
 800849e:	da60      	bge.n	8008562 <_strtod_l+0x892>
 80084a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084a2:	ea53 030a 	orrs.w	r3, r3, sl
 80084a6:	f040 8082 	bne.w	80085ae <_strtod_l+0x8de>
 80084aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d17d      	bne.n	80085ae <_strtod_l+0x8de>
 80084b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084b6:	0d1b      	lsrs	r3, r3, #20
 80084b8:	051b      	lsls	r3, r3, #20
 80084ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80084be:	d976      	bls.n	80085ae <_strtod_l+0x8de>
 80084c0:	696b      	ldr	r3, [r5, #20]
 80084c2:	b913      	cbnz	r3, 80084ca <_strtod_l+0x7fa>
 80084c4:	692b      	ldr	r3, [r5, #16]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	dd71      	ble.n	80085ae <_strtod_l+0x8de>
 80084ca:	4629      	mov	r1, r5
 80084cc:	2201      	movs	r2, #1
 80084ce:	4620      	mov	r0, r4
 80084d0:	f001 ff00 	bl	800a2d4 <__lshift>
 80084d4:	4631      	mov	r1, r6
 80084d6:	4605      	mov	r5, r0
 80084d8:	f001 ff6c 	bl	800a3b4 <__mcmp>
 80084dc:	2800      	cmp	r0, #0
 80084de:	dd66      	ble.n	80085ae <_strtod_l+0x8de>
 80084e0:	9904      	ldr	r1, [sp, #16]
 80084e2:	4a53      	ldr	r2, [pc, #332]	; (8008630 <_strtod_l+0x960>)
 80084e4:	465b      	mov	r3, fp
 80084e6:	2900      	cmp	r1, #0
 80084e8:	f000 8081 	beq.w	80085ee <_strtod_l+0x91e>
 80084ec:	ea02 010b 	and.w	r1, r2, fp
 80084f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80084f4:	dc7b      	bgt.n	80085ee <_strtod_l+0x91e>
 80084f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80084fa:	f77f aea9 	ble.w	8008250 <_strtod_l+0x580>
 80084fe:	4b4d      	ldr	r3, [pc, #308]	; (8008634 <_strtod_l+0x964>)
 8008500:	4650      	mov	r0, sl
 8008502:	4659      	mov	r1, fp
 8008504:	2200      	movs	r2, #0
 8008506:	f7f8 f87f 	bl	8000608 <__aeabi_dmul>
 800850a:	460b      	mov	r3, r1
 800850c:	4303      	orrs	r3, r0
 800850e:	bf08      	it	eq
 8008510:	2322      	moveq	r3, #34	; 0x22
 8008512:	4682      	mov	sl, r0
 8008514:	468b      	mov	fp, r1
 8008516:	bf08      	it	eq
 8008518:	6023      	streq	r3, [r4, #0]
 800851a:	e62b      	b.n	8008174 <_strtod_l+0x4a4>
 800851c:	f04f 32ff 	mov.w	r2, #4294967295
 8008520:	fa02 f303 	lsl.w	r3, r2, r3
 8008524:	ea03 0a0a 	and.w	sl, r3, sl
 8008528:	e6e3      	b.n	80082f2 <_strtod_l+0x622>
 800852a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800852e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008532:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008536:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800853a:	fa01 f308 	lsl.w	r3, r1, r8
 800853e:	9308      	str	r3, [sp, #32]
 8008540:	910d      	str	r1, [sp, #52]	; 0x34
 8008542:	e746      	b.n	80083d2 <_strtod_l+0x702>
 8008544:	2300      	movs	r3, #0
 8008546:	9308      	str	r3, [sp, #32]
 8008548:	2301      	movs	r3, #1
 800854a:	930d      	str	r3, [sp, #52]	; 0x34
 800854c:	e741      	b.n	80083d2 <_strtod_l+0x702>
 800854e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008550:	4642      	mov	r2, r8
 8008552:	4620      	mov	r0, r4
 8008554:	f001 febe 	bl	800a2d4 <__lshift>
 8008558:	9018      	str	r0, [sp, #96]	; 0x60
 800855a:	2800      	cmp	r0, #0
 800855c:	f47f af6b 	bne.w	8008436 <_strtod_l+0x766>
 8008560:	e5fe      	b.n	8008160 <_strtod_l+0x490>
 8008562:	465f      	mov	r7, fp
 8008564:	d16e      	bne.n	8008644 <_strtod_l+0x974>
 8008566:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008568:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800856c:	b342      	cbz	r2, 80085c0 <_strtod_l+0x8f0>
 800856e:	4a32      	ldr	r2, [pc, #200]	; (8008638 <_strtod_l+0x968>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d128      	bne.n	80085c6 <_strtod_l+0x8f6>
 8008574:	9b04      	ldr	r3, [sp, #16]
 8008576:	4651      	mov	r1, sl
 8008578:	b1eb      	cbz	r3, 80085b6 <_strtod_l+0x8e6>
 800857a:	4b2d      	ldr	r3, [pc, #180]	; (8008630 <_strtod_l+0x960>)
 800857c:	403b      	ands	r3, r7
 800857e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008582:	f04f 32ff 	mov.w	r2, #4294967295
 8008586:	d819      	bhi.n	80085bc <_strtod_l+0x8ec>
 8008588:	0d1b      	lsrs	r3, r3, #20
 800858a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800858e:	fa02 f303 	lsl.w	r3, r2, r3
 8008592:	4299      	cmp	r1, r3
 8008594:	d117      	bne.n	80085c6 <_strtod_l+0x8f6>
 8008596:	4b29      	ldr	r3, [pc, #164]	; (800863c <_strtod_l+0x96c>)
 8008598:	429f      	cmp	r7, r3
 800859a:	d102      	bne.n	80085a2 <_strtod_l+0x8d2>
 800859c:	3101      	adds	r1, #1
 800859e:	f43f addf 	beq.w	8008160 <_strtod_l+0x490>
 80085a2:	4b23      	ldr	r3, [pc, #140]	; (8008630 <_strtod_l+0x960>)
 80085a4:	403b      	ands	r3, r7
 80085a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80085aa:	f04f 0a00 	mov.w	sl, #0
 80085ae:	9b04      	ldr	r3, [sp, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1a4      	bne.n	80084fe <_strtod_l+0x82e>
 80085b4:	e5de      	b.n	8008174 <_strtod_l+0x4a4>
 80085b6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ba:	e7ea      	b.n	8008592 <_strtod_l+0x8c2>
 80085bc:	4613      	mov	r3, r2
 80085be:	e7e8      	b.n	8008592 <_strtod_l+0x8c2>
 80085c0:	ea53 030a 	orrs.w	r3, r3, sl
 80085c4:	d08c      	beq.n	80084e0 <_strtod_l+0x810>
 80085c6:	9b08      	ldr	r3, [sp, #32]
 80085c8:	b1db      	cbz	r3, 8008602 <_strtod_l+0x932>
 80085ca:	423b      	tst	r3, r7
 80085cc:	d0ef      	beq.n	80085ae <_strtod_l+0x8de>
 80085ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085d0:	9a04      	ldr	r2, [sp, #16]
 80085d2:	4650      	mov	r0, sl
 80085d4:	4659      	mov	r1, fp
 80085d6:	b1c3      	cbz	r3, 800860a <_strtod_l+0x93a>
 80085d8:	f7ff fb5e 	bl	8007c98 <sulp>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	ec51 0b18 	vmov	r0, r1, d8
 80085e4:	f7f7 fe5a 	bl	800029c <__adddf3>
 80085e8:	4682      	mov	sl, r0
 80085ea:	468b      	mov	fp, r1
 80085ec:	e7df      	b.n	80085ae <_strtod_l+0x8de>
 80085ee:	4013      	ands	r3, r2
 80085f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80085f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80085f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80085fc:	f04f 3aff 	mov.w	sl, #4294967295
 8008600:	e7d5      	b.n	80085ae <_strtod_l+0x8de>
 8008602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008604:	ea13 0f0a 	tst.w	r3, sl
 8008608:	e7e0      	b.n	80085cc <_strtod_l+0x8fc>
 800860a:	f7ff fb45 	bl	8007c98 <sulp>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	ec51 0b18 	vmov	r0, r1, d8
 8008616:	f7f7 fe3f 	bl	8000298 <__aeabi_dsub>
 800861a:	2200      	movs	r2, #0
 800861c:	2300      	movs	r3, #0
 800861e:	4682      	mov	sl, r0
 8008620:	468b      	mov	fp, r1
 8008622:	f7f8 fa59 	bl	8000ad8 <__aeabi_dcmpeq>
 8008626:	2800      	cmp	r0, #0
 8008628:	d0c1      	beq.n	80085ae <_strtod_l+0x8de>
 800862a:	e611      	b.n	8008250 <_strtod_l+0x580>
 800862c:	fffffc02 	.word	0xfffffc02
 8008630:	7ff00000 	.word	0x7ff00000
 8008634:	39500000 	.word	0x39500000
 8008638:	000fffff 	.word	0x000fffff
 800863c:	7fefffff 	.word	0x7fefffff
 8008640:	0800b908 	.word	0x0800b908
 8008644:	4631      	mov	r1, r6
 8008646:	4628      	mov	r0, r5
 8008648:	f002 f832 	bl	800a6b0 <__ratio>
 800864c:	ec59 8b10 	vmov	r8, r9, d0
 8008650:	ee10 0a10 	vmov	r0, s0
 8008654:	2200      	movs	r2, #0
 8008656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800865a:	4649      	mov	r1, r9
 800865c:	f7f8 fa50 	bl	8000b00 <__aeabi_dcmple>
 8008660:	2800      	cmp	r0, #0
 8008662:	d07a      	beq.n	800875a <_strtod_l+0xa8a>
 8008664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008666:	2b00      	cmp	r3, #0
 8008668:	d04a      	beq.n	8008700 <_strtod_l+0xa30>
 800866a:	4b95      	ldr	r3, [pc, #596]	; (80088c0 <_strtod_l+0xbf0>)
 800866c:	2200      	movs	r2, #0
 800866e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008672:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80088c0 <_strtod_l+0xbf0>
 8008676:	f04f 0800 	mov.w	r8, #0
 800867a:	4b92      	ldr	r3, [pc, #584]	; (80088c4 <_strtod_l+0xbf4>)
 800867c:	403b      	ands	r3, r7
 800867e:	930d      	str	r3, [sp, #52]	; 0x34
 8008680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008682:	4b91      	ldr	r3, [pc, #580]	; (80088c8 <_strtod_l+0xbf8>)
 8008684:	429a      	cmp	r2, r3
 8008686:	f040 80b0 	bne.w	80087ea <_strtod_l+0xb1a>
 800868a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800868e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008692:	ec4b ab10 	vmov	d0, sl, fp
 8008696:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800869a:	f001 ff31 	bl	800a500 <__ulp>
 800869e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086a2:	ec53 2b10 	vmov	r2, r3, d0
 80086a6:	f7f7 ffaf 	bl	8000608 <__aeabi_dmul>
 80086aa:	4652      	mov	r2, sl
 80086ac:	465b      	mov	r3, fp
 80086ae:	f7f7 fdf5 	bl	800029c <__adddf3>
 80086b2:	460b      	mov	r3, r1
 80086b4:	4983      	ldr	r1, [pc, #524]	; (80088c4 <_strtod_l+0xbf4>)
 80086b6:	4a85      	ldr	r2, [pc, #532]	; (80088cc <_strtod_l+0xbfc>)
 80086b8:	4019      	ands	r1, r3
 80086ba:	4291      	cmp	r1, r2
 80086bc:	4682      	mov	sl, r0
 80086be:	d960      	bls.n	8008782 <_strtod_l+0xab2>
 80086c0:	ee18 3a90 	vmov	r3, s17
 80086c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d104      	bne.n	80086d6 <_strtod_l+0xa06>
 80086cc:	ee18 3a10 	vmov	r3, s16
 80086d0:	3301      	adds	r3, #1
 80086d2:	f43f ad45 	beq.w	8008160 <_strtod_l+0x490>
 80086d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80088d8 <_strtod_l+0xc08>
 80086da:	f04f 3aff 	mov.w	sl, #4294967295
 80086de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086e0:	4620      	mov	r0, r4
 80086e2:	f001 fbdb 	bl	8009e9c <_Bfree>
 80086e6:	9905      	ldr	r1, [sp, #20]
 80086e8:	4620      	mov	r0, r4
 80086ea:	f001 fbd7 	bl	8009e9c <_Bfree>
 80086ee:	4631      	mov	r1, r6
 80086f0:	4620      	mov	r0, r4
 80086f2:	f001 fbd3 	bl	8009e9c <_Bfree>
 80086f6:	4629      	mov	r1, r5
 80086f8:	4620      	mov	r0, r4
 80086fa:	f001 fbcf 	bl	8009e9c <_Bfree>
 80086fe:	e61a      	b.n	8008336 <_strtod_l+0x666>
 8008700:	f1ba 0f00 	cmp.w	sl, #0
 8008704:	d11b      	bne.n	800873e <_strtod_l+0xa6e>
 8008706:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800870a:	b9f3      	cbnz	r3, 800874a <_strtod_l+0xa7a>
 800870c:	4b6c      	ldr	r3, [pc, #432]	; (80088c0 <_strtod_l+0xbf0>)
 800870e:	2200      	movs	r2, #0
 8008710:	4640      	mov	r0, r8
 8008712:	4649      	mov	r1, r9
 8008714:	f7f8 f9ea 	bl	8000aec <__aeabi_dcmplt>
 8008718:	b9d0      	cbnz	r0, 8008750 <_strtod_l+0xa80>
 800871a:	4640      	mov	r0, r8
 800871c:	4649      	mov	r1, r9
 800871e:	4b6c      	ldr	r3, [pc, #432]	; (80088d0 <_strtod_l+0xc00>)
 8008720:	2200      	movs	r2, #0
 8008722:	f7f7 ff71 	bl	8000608 <__aeabi_dmul>
 8008726:	4680      	mov	r8, r0
 8008728:	4689      	mov	r9, r1
 800872a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800872e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008732:	9315      	str	r3, [sp, #84]	; 0x54
 8008734:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008738:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800873c:	e79d      	b.n	800867a <_strtod_l+0x9aa>
 800873e:	f1ba 0f01 	cmp.w	sl, #1
 8008742:	d102      	bne.n	800874a <_strtod_l+0xa7a>
 8008744:	2f00      	cmp	r7, #0
 8008746:	f43f ad83 	beq.w	8008250 <_strtod_l+0x580>
 800874a:	4b62      	ldr	r3, [pc, #392]	; (80088d4 <_strtod_l+0xc04>)
 800874c:	2200      	movs	r2, #0
 800874e:	e78e      	b.n	800866e <_strtod_l+0x99e>
 8008750:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80088d0 <_strtod_l+0xc00>
 8008754:	f04f 0800 	mov.w	r8, #0
 8008758:	e7e7      	b.n	800872a <_strtod_l+0xa5a>
 800875a:	4b5d      	ldr	r3, [pc, #372]	; (80088d0 <_strtod_l+0xc00>)
 800875c:	4640      	mov	r0, r8
 800875e:	4649      	mov	r1, r9
 8008760:	2200      	movs	r2, #0
 8008762:	f7f7 ff51 	bl	8000608 <__aeabi_dmul>
 8008766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008768:	4680      	mov	r8, r0
 800876a:	4689      	mov	r9, r1
 800876c:	b933      	cbnz	r3, 800877c <_strtod_l+0xaac>
 800876e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008772:	900e      	str	r0, [sp, #56]	; 0x38
 8008774:	930f      	str	r3, [sp, #60]	; 0x3c
 8008776:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800877a:	e7dd      	b.n	8008738 <_strtod_l+0xa68>
 800877c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008780:	e7f9      	b.n	8008776 <_strtod_l+0xaa6>
 8008782:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008786:	9b04      	ldr	r3, [sp, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1a8      	bne.n	80086de <_strtod_l+0xa0e>
 800878c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008790:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008792:	0d1b      	lsrs	r3, r3, #20
 8008794:	051b      	lsls	r3, r3, #20
 8008796:	429a      	cmp	r2, r3
 8008798:	d1a1      	bne.n	80086de <_strtod_l+0xa0e>
 800879a:	4640      	mov	r0, r8
 800879c:	4649      	mov	r1, r9
 800879e:	f7f8 fa93 	bl	8000cc8 <__aeabi_d2lz>
 80087a2:	f7f7 ff03 	bl	80005ac <__aeabi_l2d>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	4640      	mov	r0, r8
 80087ac:	4649      	mov	r1, r9
 80087ae:	f7f7 fd73 	bl	8000298 <__aeabi_dsub>
 80087b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087b8:	ea43 030a 	orr.w	r3, r3, sl
 80087bc:	4313      	orrs	r3, r2
 80087be:	4680      	mov	r8, r0
 80087c0:	4689      	mov	r9, r1
 80087c2:	d055      	beq.n	8008870 <_strtod_l+0xba0>
 80087c4:	a336      	add	r3, pc, #216	; (adr r3, 80088a0 <_strtod_l+0xbd0>)
 80087c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ca:	f7f8 f98f 	bl	8000aec <__aeabi_dcmplt>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	f47f acd0 	bne.w	8008174 <_strtod_l+0x4a4>
 80087d4:	a334      	add	r3, pc, #208	; (adr r3, 80088a8 <_strtod_l+0xbd8>)
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	4640      	mov	r0, r8
 80087dc:	4649      	mov	r1, r9
 80087de:	f7f8 f9a3 	bl	8000b28 <__aeabi_dcmpgt>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	f43f af7b 	beq.w	80086de <_strtod_l+0xa0e>
 80087e8:	e4c4      	b.n	8008174 <_strtod_l+0x4a4>
 80087ea:	9b04      	ldr	r3, [sp, #16]
 80087ec:	b333      	cbz	r3, 800883c <_strtod_l+0xb6c>
 80087ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80087f4:	d822      	bhi.n	800883c <_strtod_l+0xb6c>
 80087f6:	a32e      	add	r3, pc, #184	; (adr r3, 80088b0 <_strtod_l+0xbe0>)
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	4640      	mov	r0, r8
 80087fe:	4649      	mov	r1, r9
 8008800:	f7f8 f97e 	bl	8000b00 <__aeabi_dcmple>
 8008804:	b1a0      	cbz	r0, 8008830 <_strtod_l+0xb60>
 8008806:	4649      	mov	r1, r9
 8008808:	4640      	mov	r0, r8
 800880a:	f7f8 f9d5 	bl	8000bb8 <__aeabi_d2uiz>
 800880e:	2801      	cmp	r0, #1
 8008810:	bf38      	it	cc
 8008812:	2001      	movcc	r0, #1
 8008814:	f7f7 fe7e 	bl	8000514 <__aeabi_ui2d>
 8008818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800881a:	4680      	mov	r8, r0
 800881c:	4689      	mov	r9, r1
 800881e:	bb23      	cbnz	r3, 800886a <_strtod_l+0xb9a>
 8008820:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008824:	9010      	str	r0, [sp, #64]	; 0x40
 8008826:	9311      	str	r3, [sp, #68]	; 0x44
 8008828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800882c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008832:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008834:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008838:	1a9b      	subs	r3, r3, r2
 800883a:	9309      	str	r3, [sp, #36]	; 0x24
 800883c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008840:	eeb0 0a48 	vmov.f32	s0, s16
 8008844:	eef0 0a68 	vmov.f32	s1, s17
 8008848:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800884c:	f001 fe58 	bl	800a500 <__ulp>
 8008850:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008854:	ec53 2b10 	vmov	r2, r3, d0
 8008858:	f7f7 fed6 	bl	8000608 <__aeabi_dmul>
 800885c:	ec53 2b18 	vmov	r2, r3, d8
 8008860:	f7f7 fd1c 	bl	800029c <__adddf3>
 8008864:	4682      	mov	sl, r0
 8008866:	468b      	mov	fp, r1
 8008868:	e78d      	b.n	8008786 <_strtod_l+0xab6>
 800886a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800886e:	e7db      	b.n	8008828 <_strtod_l+0xb58>
 8008870:	a311      	add	r3, pc, #68	; (adr r3, 80088b8 <_strtod_l+0xbe8>)
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	f7f8 f939 	bl	8000aec <__aeabi_dcmplt>
 800887a:	e7b2      	b.n	80087e2 <_strtod_l+0xb12>
 800887c:	2300      	movs	r3, #0
 800887e:	930a      	str	r3, [sp, #40]	; 0x28
 8008880:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008882:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008884:	6013      	str	r3, [r2, #0]
 8008886:	f7ff ba6b 	b.w	8007d60 <_strtod_l+0x90>
 800888a:	2a65      	cmp	r2, #101	; 0x65
 800888c:	f43f ab5f 	beq.w	8007f4e <_strtod_l+0x27e>
 8008890:	2a45      	cmp	r2, #69	; 0x45
 8008892:	f43f ab5c 	beq.w	8007f4e <_strtod_l+0x27e>
 8008896:	2301      	movs	r3, #1
 8008898:	f7ff bb94 	b.w	8007fc4 <_strtod_l+0x2f4>
 800889c:	f3af 8000 	nop.w
 80088a0:	94a03595 	.word	0x94a03595
 80088a4:	3fdfffff 	.word	0x3fdfffff
 80088a8:	35afe535 	.word	0x35afe535
 80088ac:	3fe00000 	.word	0x3fe00000
 80088b0:	ffc00000 	.word	0xffc00000
 80088b4:	41dfffff 	.word	0x41dfffff
 80088b8:	94a03595 	.word	0x94a03595
 80088bc:	3fcfffff 	.word	0x3fcfffff
 80088c0:	3ff00000 	.word	0x3ff00000
 80088c4:	7ff00000 	.word	0x7ff00000
 80088c8:	7fe00000 	.word	0x7fe00000
 80088cc:	7c9fffff 	.word	0x7c9fffff
 80088d0:	3fe00000 	.word	0x3fe00000
 80088d4:	bff00000 	.word	0xbff00000
 80088d8:	7fefffff 	.word	0x7fefffff

080088dc <_strtod_r>:
 80088dc:	4b01      	ldr	r3, [pc, #4]	; (80088e4 <_strtod_r+0x8>)
 80088de:	f7ff b9f7 	b.w	8007cd0 <_strtod_l>
 80088e2:	bf00      	nop
 80088e4:	20000084 	.word	0x20000084

080088e8 <_strtol_l.constprop.0>:
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ee:	d001      	beq.n	80088f4 <_strtol_l.constprop.0+0xc>
 80088f0:	2b24      	cmp	r3, #36	; 0x24
 80088f2:	d906      	bls.n	8008902 <_strtol_l.constprop.0+0x1a>
 80088f4:	f7fe faca 	bl	8006e8c <__errno>
 80088f8:	2316      	movs	r3, #22
 80088fa:	6003      	str	r3, [r0, #0]
 80088fc:	2000      	movs	r0, #0
 80088fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008902:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80089e8 <_strtol_l.constprop.0+0x100>
 8008906:	460d      	mov	r5, r1
 8008908:	462e      	mov	r6, r5
 800890a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800890e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008912:	f017 0708 	ands.w	r7, r7, #8
 8008916:	d1f7      	bne.n	8008908 <_strtol_l.constprop.0+0x20>
 8008918:	2c2d      	cmp	r4, #45	; 0x2d
 800891a:	d132      	bne.n	8008982 <_strtol_l.constprop.0+0x9a>
 800891c:	782c      	ldrb	r4, [r5, #0]
 800891e:	2701      	movs	r7, #1
 8008920:	1cb5      	adds	r5, r6, #2
 8008922:	2b00      	cmp	r3, #0
 8008924:	d05b      	beq.n	80089de <_strtol_l.constprop.0+0xf6>
 8008926:	2b10      	cmp	r3, #16
 8008928:	d109      	bne.n	800893e <_strtol_l.constprop.0+0x56>
 800892a:	2c30      	cmp	r4, #48	; 0x30
 800892c:	d107      	bne.n	800893e <_strtol_l.constprop.0+0x56>
 800892e:	782c      	ldrb	r4, [r5, #0]
 8008930:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008934:	2c58      	cmp	r4, #88	; 0x58
 8008936:	d14d      	bne.n	80089d4 <_strtol_l.constprop.0+0xec>
 8008938:	786c      	ldrb	r4, [r5, #1]
 800893a:	2310      	movs	r3, #16
 800893c:	3502      	adds	r5, #2
 800893e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008942:	f108 38ff 	add.w	r8, r8, #4294967295
 8008946:	f04f 0c00 	mov.w	ip, #0
 800894a:	fbb8 f9f3 	udiv	r9, r8, r3
 800894e:	4666      	mov	r6, ip
 8008950:	fb03 8a19 	mls	sl, r3, r9, r8
 8008954:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008958:	f1be 0f09 	cmp.w	lr, #9
 800895c:	d816      	bhi.n	800898c <_strtol_l.constprop.0+0xa4>
 800895e:	4674      	mov	r4, lr
 8008960:	42a3      	cmp	r3, r4
 8008962:	dd24      	ble.n	80089ae <_strtol_l.constprop.0+0xc6>
 8008964:	f1bc 0f00 	cmp.w	ip, #0
 8008968:	db1e      	blt.n	80089a8 <_strtol_l.constprop.0+0xc0>
 800896a:	45b1      	cmp	r9, r6
 800896c:	d31c      	bcc.n	80089a8 <_strtol_l.constprop.0+0xc0>
 800896e:	d101      	bne.n	8008974 <_strtol_l.constprop.0+0x8c>
 8008970:	45a2      	cmp	sl, r4
 8008972:	db19      	blt.n	80089a8 <_strtol_l.constprop.0+0xc0>
 8008974:	fb06 4603 	mla	r6, r6, r3, r4
 8008978:	f04f 0c01 	mov.w	ip, #1
 800897c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008980:	e7e8      	b.n	8008954 <_strtol_l.constprop.0+0x6c>
 8008982:	2c2b      	cmp	r4, #43	; 0x2b
 8008984:	bf04      	itt	eq
 8008986:	782c      	ldrbeq	r4, [r5, #0]
 8008988:	1cb5      	addeq	r5, r6, #2
 800898a:	e7ca      	b.n	8008922 <_strtol_l.constprop.0+0x3a>
 800898c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008990:	f1be 0f19 	cmp.w	lr, #25
 8008994:	d801      	bhi.n	800899a <_strtol_l.constprop.0+0xb2>
 8008996:	3c37      	subs	r4, #55	; 0x37
 8008998:	e7e2      	b.n	8008960 <_strtol_l.constprop.0+0x78>
 800899a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800899e:	f1be 0f19 	cmp.w	lr, #25
 80089a2:	d804      	bhi.n	80089ae <_strtol_l.constprop.0+0xc6>
 80089a4:	3c57      	subs	r4, #87	; 0x57
 80089a6:	e7db      	b.n	8008960 <_strtol_l.constprop.0+0x78>
 80089a8:	f04f 3cff 	mov.w	ip, #4294967295
 80089ac:	e7e6      	b.n	800897c <_strtol_l.constprop.0+0x94>
 80089ae:	f1bc 0f00 	cmp.w	ip, #0
 80089b2:	da05      	bge.n	80089c0 <_strtol_l.constprop.0+0xd8>
 80089b4:	2322      	movs	r3, #34	; 0x22
 80089b6:	6003      	str	r3, [r0, #0]
 80089b8:	4646      	mov	r6, r8
 80089ba:	b942      	cbnz	r2, 80089ce <_strtol_l.constprop.0+0xe6>
 80089bc:	4630      	mov	r0, r6
 80089be:	e79e      	b.n	80088fe <_strtol_l.constprop.0+0x16>
 80089c0:	b107      	cbz	r7, 80089c4 <_strtol_l.constprop.0+0xdc>
 80089c2:	4276      	negs	r6, r6
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	d0f9      	beq.n	80089bc <_strtol_l.constprop.0+0xd4>
 80089c8:	f1bc 0f00 	cmp.w	ip, #0
 80089cc:	d000      	beq.n	80089d0 <_strtol_l.constprop.0+0xe8>
 80089ce:	1e69      	subs	r1, r5, #1
 80089d0:	6011      	str	r1, [r2, #0]
 80089d2:	e7f3      	b.n	80089bc <_strtol_l.constprop.0+0xd4>
 80089d4:	2430      	movs	r4, #48	; 0x30
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1b1      	bne.n	800893e <_strtol_l.constprop.0+0x56>
 80089da:	2308      	movs	r3, #8
 80089dc:	e7af      	b.n	800893e <_strtol_l.constprop.0+0x56>
 80089de:	2c30      	cmp	r4, #48	; 0x30
 80089e0:	d0a5      	beq.n	800892e <_strtol_l.constprop.0+0x46>
 80089e2:	230a      	movs	r3, #10
 80089e4:	e7ab      	b.n	800893e <_strtol_l.constprop.0+0x56>
 80089e6:	bf00      	nop
 80089e8:	0800b931 	.word	0x0800b931

080089ec <_strtol_r>:
 80089ec:	f7ff bf7c 	b.w	80088e8 <_strtol_l.constprop.0>

080089f0 <quorem>:
 80089f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f4:	6903      	ldr	r3, [r0, #16]
 80089f6:	690c      	ldr	r4, [r1, #16]
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	4607      	mov	r7, r0
 80089fc:	f2c0 8081 	blt.w	8008b02 <quorem+0x112>
 8008a00:	3c01      	subs	r4, #1
 8008a02:	f101 0814 	add.w	r8, r1, #20
 8008a06:	f100 0514 	add.w	r5, r0, #20
 8008a0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a24:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a28:	d331      	bcc.n	8008a8e <quorem+0x9e>
 8008a2a:	f04f 0e00 	mov.w	lr, #0
 8008a2e:	4640      	mov	r0, r8
 8008a30:	46ac      	mov	ip, r5
 8008a32:	46f2      	mov	sl, lr
 8008a34:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a38:	b293      	uxth	r3, r2
 8008a3a:	fb06 e303 	mla	r3, r6, r3, lr
 8008a3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	ebaa 0303 	sub.w	r3, sl, r3
 8008a48:	f8dc a000 	ldr.w	sl, [ip]
 8008a4c:	0c12      	lsrs	r2, r2, #16
 8008a4e:	fa13 f38a 	uxtah	r3, r3, sl
 8008a52:	fb06 e202 	mla	r2, r6, r2, lr
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	9b00      	ldr	r3, [sp, #0]
 8008a5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a5e:	b292      	uxth	r2, r2
 8008a60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a68:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a6c:	4581      	cmp	r9, r0
 8008a6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a72:	f84c 3b04 	str.w	r3, [ip], #4
 8008a76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a7a:	d2db      	bcs.n	8008a34 <quorem+0x44>
 8008a7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a80:	b92b      	cbnz	r3, 8008a8e <quorem+0x9e>
 8008a82:	9b01      	ldr	r3, [sp, #4]
 8008a84:	3b04      	subs	r3, #4
 8008a86:	429d      	cmp	r5, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	d32e      	bcc.n	8008aea <quorem+0xfa>
 8008a8c:	613c      	str	r4, [r7, #16]
 8008a8e:	4638      	mov	r0, r7
 8008a90:	f001 fc90 	bl	800a3b4 <__mcmp>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	db24      	blt.n	8008ae2 <quorem+0xf2>
 8008a98:	3601      	adds	r6, #1
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f04f 0c00 	mov.w	ip, #0
 8008aa0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008aa4:	f8d0 e000 	ldr.w	lr, [r0]
 8008aa8:	b293      	uxth	r3, r2
 8008aaa:	ebac 0303 	sub.w	r3, ip, r3
 8008aae:	0c12      	lsrs	r2, r2, #16
 8008ab0:	fa13 f38e 	uxtah	r3, r3, lr
 8008ab4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ac2:	45c1      	cmp	r9, r8
 8008ac4:	f840 3b04 	str.w	r3, [r0], #4
 8008ac8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008acc:	d2e8      	bcs.n	8008aa0 <quorem+0xb0>
 8008ace:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ad6:	b922      	cbnz	r2, 8008ae2 <quorem+0xf2>
 8008ad8:	3b04      	subs	r3, #4
 8008ada:	429d      	cmp	r5, r3
 8008adc:	461a      	mov	r2, r3
 8008ade:	d30a      	bcc.n	8008af6 <quorem+0x106>
 8008ae0:	613c      	str	r4, [r7, #16]
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	b003      	add	sp, #12
 8008ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aea:	6812      	ldr	r2, [r2, #0]
 8008aec:	3b04      	subs	r3, #4
 8008aee:	2a00      	cmp	r2, #0
 8008af0:	d1cc      	bne.n	8008a8c <quorem+0x9c>
 8008af2:	3c01      	subs	r4, #1
 8008af4:	e7c7      	b.n	8008a86 <quorem+0x96>
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	3b04      	subs	r3, #4
 8008afa:	2a00      	cmp	r2, #0
 8008afc:	d1f0      	bne.n	8008ae0 <quorem+0xf0>
 8008afe:	3c01      	subs	r4, #1
 8008b00:	e7eb      	b.n	8008ada <quorem+0xea>
 8008b02:	2000      	movs	r0, #0
 8008b04:	e7ee      	b.n	8008ae4 <quorem+0xf4>
	...

08008b08 <_dtoa_r>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	ed2d 8b04 	vpush	{d8-d9}
 8008b10:	ec57 6b10 	vmov	r6, r7, d0
 8008b14:	b093      	sub	sp, #76	; 0x4c
 8008b16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b1c:	9106      	str	r1, [sp, #24]
 8008b1e:	ee10 aa10 	vmov	sl, s0
 8008b22:	4604      	mov	r4, r0
 8008b24:	9209      	str	r2, [sp, #36]	; 0x24
 8008b26:	930c      	str	r3, [sp, #48]	; 0x30
 8008b28:	46bb      	mov	fp, r7
 8008b2a:	b975      	cbnz	r5, 8008b4a <_dtoa_r+0x42>
 8008b2c:	2010      	movs	r0, #16
 8008b2e:	f001 f94d 	bl	8009dcc <malloc>
 8008b32:	4602      	mov	r2, r0
 8008b34:	6260      	str	r0, [r4, #36]	; 0x24
 8008b36:	b920      	cbnz	r0, 8008b42 <_dtoa_r+0x3a>
 8008b38:	4ba7      	ldr	r3, [pc, #668]	; (8008dd8 <_dtoa_r+0x2d0>)
 8008b3a:	21ea      	movs	r1, #234	; 0xea
 8008b3c:	48a7      	ldr	r0, [pc, #668]	; (8008ddc <_dtoa_r+0x2d4>)
 8008b3e:	f002 f8bd 	bl	800acbc <__assert_func>
 8008b42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b46:	6005      	str	r5, [r0, #0]
 8008b48:	60c5      	str	r5, [r0, #12]
 8008b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	b151      	cbz	r1, 8008b66 <_dtoa_r+0x5e>
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	604a      	str	r2, [r1, #4]
 8008b54:	2301      	movs	r3, #1
 8008b56:	4093      	lsls	r3, r2
 8008b58:	608b      	str	r3, [r1, #8]
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f001 f99e 	bl	8009e9c <_Bfree>
 8008b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b62:	2200      	movs	r2, #0
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	1e3b      	subs	r3, r7, #0
 8008b68:	bfaa      	itet	ge
 8008b6a:	2300      	movge	r3, #0
 8008b6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008b70:	f8c8 3000 	strge.w	r3, [r8]
 8008b74:	4b9a      	ldr	r3, [pc, #616]	; (8008de0 <_dtoa_r+0x2d8>)
 8008b76:	bfbc      	itt	lt
 8008b78:	2201      	movlt	r2, #1
 8008b7a:	f8c8 2000 	strlt.w	r2, [r8]
 8008b7e:	ea33 030b 	bics.w	r3, r3, fp
 8008b82:	d11b      	bne.n	8008bbc <_dtoa_r+0xb4>
 8008b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b86:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b90:	4333      	orrs	r3, r6
 8008b92:	f000 8592 	beq.w	80096ba <_dtoa_r+0xbb2>
 8008b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b98:	b963      	cbnz	r3, 8008bb4 <_dtoa_r+0xac>
 8008b9a:	4b92      	ldr	r3, [pc, #584]	; (8008de4 <_dtoa_r+0x2dc>)
 8008b9c:	e022      	b.n	8008be4 <_dtoa_r+0xdc>
 8008b9e:	4b92      	ldr	r3, [pc, #584]	; (8008de8 <_dtoa_r+0x2e0>)
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	9801      	ldr	r0, [sp, #4]
 8008baa:	b013      	add	sp, #76	; 0x4c
 8008bac:	ecbd 8b04 	vpop	{d8-d9}
 8008bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb4:	4b8b      	ldr	r3, [pc, #556]	; (8008de4 <_dtoa_r+0x2dc>)
 8008bb6:	9301      	str	r3, [sp, #4]
 8008bb8:	3303      	adds	r3, #3
 8008bba:	e7f3      	b.n	8008ba4 <_dtoa_r+0x9c>
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4650      	mov	r0, sl
 8008bc2:	4659      	mov	r1, fp
 8008bc4:	f7f7 ff88 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bc8:	ec4b ab19 	vmov	d9, sl, fp
 8008bcc:	4680      	mov	r8, r0
 8008bce:	b158      	cbz	r0, 8008be8 <_dtoa_r+0xe0>
 8008bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 856b 	beq.w	80096b4 <_dtoa_r+0xbac>
 8008bde:	4883      	ldr	r0, [pc, #524]	; (8008dec <_dtoa_r+0x2e4>)
 8008be0:	6018      	str	r0, [r3, #0]
 8008be2:	1e43      	subs	r3, r0, #1
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	e7df      	b.n	8008ba8 <_dtoa_r+0xa0>
 8008be8:	ec4b ab10 	vmov	d0, sl, fp
 8008bec:	aa10      	add	r2, sp, #64	; 0x40
 8008bee:	a911      	add	r1, sp, #68	; 0x44
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f001 fd01 	bl	800a5f8 <__d2b>
 8008bf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008bfa:	ee08 0a10 	vmov	s16, r0
 8008bfe:	2d00      	cmp	r5, #0
 8008c00:	f000 8084 	beq.w	8008d0c <_dtoa_r+0x204>
 8008c04:	ee19 3a90 	vmov	r3, s19
 8008c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c10:	4656      	mov	r6, sl
 8008c12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008c1e:	4b74      	ldr	r3, [pc, #464]	; (8008df0 <_dtoa_r+0x2e8>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	4630      	mov	r0, r6
 8008c24:	4639      	mov	r1, r7
 8008c26:	f7f7 fb37 	bl	8000298 <__aeabi_dsub>
 8008c2a:	a365      	add	r3, pc, #404	; (adr r3, 8008dc0 <_dtoa_r+0x2b8>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	f7f7 fcea 	bl	8000608 <__aeabi_dmul>
 8008c34:	a364      	add	r3, pc, #400	; (adr r3, 8008dc8 <_dtoa_r+0x2c0>)
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	f7f7 fb2f 	bl	800029c <__adddf3>
 8008c3e:	4606      	mov	r6, r0
 8008c40:	4628      	mov	r0, r5
 8008c42:	460f      	mov	r7, r1
 8008c44:	f7f7 fc76 	bl	8000534 <__aeabi_i2d>
 8008c48:	a361      	add	r3, pc, #388	; (adr r3, 8008dd0 <_dtoa_r+0x2c8>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fcdb 	bl	8000608 <__aeabi_dmul>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4630      	mov	r0, r6
 8008c58:	4639      	mov	r1, r7
 8008c5a:	f7f7 fb1f 	bl	800029c <__adddf3>
 8008c5e:	4606      	mov	r6, r0
 8008c60:	460f      	mov	r7, r1
 8008c62:	f7f7 ff81 	bl	8000b68 <__aeabi_d2iz>
 8008c66:	2200      	movs	r2, #0
 8008c68:	9000      	str	r0, [sp, #0]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	4639      	mov	r1, r7
 8008c70:	f7f7 ff3c 	bl	8000aec <__aeabi_dcmplt>
 8008c74:	b150      	cbz	r0, 8008c8c <_dtoa_r+0x184>
 8008c76:	9800      	ldr	r0, [sp, #0]
 8008c78:	f7f7 fc5c 	bl	8000534 <__aeabi_i2d>
 8008c7c:	4632      	mov	r2, r6
 8008c7e:	463b      	mov	r3, r7
 8008c80:	f7f7 ff2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c84:	b910      	cbnz	r0, 8008c8c <_dtoa_r+0x184>
 8008c86:	9b00      	ldr	r3, [sp, #0]
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	9b00      	ldr	r3, [sp, #0]
 8008c8e:	2b16      	cmp	r3, #22
 8008c90:	d85a      	bhi.n	8008d48 <_dtoa_r+0x240>
 8008c92:	9a00      	ldr	r2, [sp, #0]
 8008c94:	4b57      	ldr	r3, [pc, #348]	; (8008df4 <_dtoa_r+0x2ec>)
 8008c96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	ec51 0b19 	vmov	r0, r1, d9
 8008ca2:	f7f7 ff23 	bl	8000aec <__aeabi_dcmplt>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d050      	beq.n	8008d4c <_dtoa_r+0x244>
 8008caa:	9b00      	ldr	r3, [sp, #0]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cb6:	1b5d      	subs	r5, r3, r5
 8008cb8:	1e6b      	subs	r3, r5, #1
 8008cba:	9305      	str	r3, [sp, #20]
 8008cbc:	bf45      	ittet	mi
 8008cbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008cc2:	9304      	strmi	r3, [sp, #16]
 8008cc4:	2300      	movpl	r3, #0
 8008cc6:	2300      	movmi	r3, #0
 8008cc8:	bf4c      	ite	mi
 8008cca:	9305      	strmi	r3, [sp, #20]
 8008ccc:	9304      	strpl	r3, [sp, #16]
 8008cce:	9b00      	ldr	r3, [sp, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	db3d      	blt.n	8008d50 <_dtoa_r+0x248>
 8008cd4:	9b05      	ldr	r3, [sp, #20]
 8008cd6:	9a00      	ldr	r2, [sp, #0]
 8008cd8:	920a      	str	r2, [sp, #40]	; 0x28
 8008cda:	4413      	add	r3, r2
 8008cdc:	9305      	str	r3, [sp, #20]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	9307      	str	r3, [sp, #28]
 8008ce2:	9b06      	ldr	r3, [sp, #24]
 8008ce4:	2b09      	cmp	r3, #9
 8008ce6:	f200 8089 	bhi.w	8008dfc <_dtoa_r+0x2f4>
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	bfc4      	itt	gt
 8008cee:	3b04      	subgt	r3, #4
 8008cf0:	9306      	strgt	r3, [sp, #24]
 8008cf2:	9b06      	ldr	r3, [sp, #24]
 8008cf4:	f1a3 0302 	sub.w	r3, r3, #2
 8008cf8:	bfcc      	ite	gt
 8008cfa:	2500      	movgt	r5, #0
 8008cfc:	2501      	movle	r5, #1
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	f200 8087 	bhi.w	8008e12 <_dtoa_r+0x30a>
 8008d04:	e8df f003 	tbb	[pc, r3]
 8008d08:	59383a2d 	.word	0x59383a2d
 8008d0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d10:	441d      	add	r5, r3
 8008d12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d16:	2b20      	cmp	r3, #32
 8008d18:	bfc1      	itttt	gt
 8008d1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d22:	fa0b f303 	lslgt.w	r3, fp, r3
 8008d26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d2a:	bfda      	itte	le
 8008d2c:	f1c3 0320 	rsble	r3, r3, #32
 8008d30:	fa06 f003 	lslle.w	r0, r6, r3
 8008d34:	4318      	orrgt	r0, r3
 8008d36:	f7f7 fbed 	bl	8000514 <__aeabi_ui2d>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d42:	3d01      	subs	r5, #1
 8008d44:	930e      	str	r3, [sp, #56]	; 0x38
 8008d46:	e76a      	b.n	8008c1e <_dtoa_r+0x116>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e7b2      	b.n	8008cb2 <_dtoa_r+0x1aa>
 8008d4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d4e:	e7b1      	b.n	8008cb4 <_dtoa_r+0x1ac>
 8008d50:	9b04      	ldr	r3, [sp, #16]
 8008d52:	9a00      	ldr	r2, [sp, #0]
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	9304      	str	r3, [sp, #16]
 8008d58:	4253      	negs	r3, r2
 8008d5a:	9307      	str	r3, [sp, #28]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d60:	e7bf      	b.n	8008ce2 <_dtoa_r+0x1da>
 8008d62:	2300      	movs	r3, #0
 8008d64:	9308      	str	r3, [sp, #32]
 8008d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	dc55      	bgt.n	8008e18 <_dtoa_r+0x310>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d72:	461a      	mov	r2, r3
 8008d74:	9209      	str	r2, [sp, #36]	; 0x24
 8008d76:	e00c      	b.n	8008d92 <_dtoa_r+0x28a>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e7f3      	b.n	8008d64 <_dtoa_r+0x25c>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d80:	9308      	str	r3, [sp, #32]
 8008d82:	9b00      	ldr	r3, [sp, #0]
 8008d84:	4413      	add	r3, r2
 8008d86:	9302      	str	r3, [sp, #8]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	9303      	str	r3, [sp, #12]
 8008d8e:	bfb8      	it	lt
 8008d90:	2301      	movlt	r3, #1
 8008d92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d94:	2200      	movs	r2, #0
 8008d96:	6042      	str	r2, [r0, #4]
 8008d98:	2204      	movs	r2, #4
 8008d9a:	f102 0614 	add.w	r6, r2, #20
 8008d9e:	429e      	cmp	r6, r3
 8008da0:	6841      	ldr	r1, [r0, #4]
 8008da2:	d93d      	bls.n	8008e20 <_dtoa_r+0x318>
 8008da4:	4620      	mov	r0, r4
 8008da6:	f001 f839 	bl	8009e1c <_Balloc>
 8008daa:	9001      	str	r0, [sp, #4]
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d13b      	bne.n	8008e28 <_dtoa_r+0x320>
 8008db0:	4b11      	ldr	r3, [pc, #68]	; (8008df8 <_dtoa_r+0x2f0>)
 8008db2:	4602      	mov	r2, r0
 8008db4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008db8:	e6c0      	b.n	8008b3c <_dtoa_r+0x34>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e7df      	b.n	8008d7e <_dtoa_r+0x276>
 8008dbe:	bf00      	nop
 8008dc0:	636f4361 	.word	0x636f4361
 8008dc4:	3fd287a7 	.word	0x3fd287a7
 8008dc8:	8b60c8b3 	.word	0x8b60c8b3
 8008dcc:	3fc68a28 	.word	0x3fc68a28
 8008dd0:	509f79fb 	.word	0x509f79fb
 8008dd4:	3fd34413 	.word	0x3fd34413
 8008dd8:	0800ba3e 	.word	0x0800ba3e
 8008ddc:	0800ba55 	.word	0x0800ba55
 8008de0:	7ff00000 	.word	0x7ff00000
 8008de4:	0800ba3a 	.word	0x0800ba3a
 8008de8:	0800ba31 	.word	0x0800ba31
 8008dec:	0800b8b1 	.word	0x0800b8b1
 8008df0:	3ff80000 	.word	0x3ff80000
 8008df4:	0800bbc0 	.word	0x0800bbc0
 8008df8:	0800bab0 	.word	0x0800bab0
 8008dfc:	2501      	movs	r5, #1
 8008dfe:	2300      	movs	r3, #0
 8008e00:	9306      	str	r3, [sp, #24]
 8008e02:	9508      	str	r5, [sp, #32]
 8008e04:	f04f 33ff 	mov.w	r3, #4294967295
 8008e08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2312      	movs	r3, #18
 8008e10:	e7b0      	b.n	8008d74 <_dtoa_r+0x26c>
 8008e12:	2301      	movs	r3, #1
 8008e14:	9308      	str	r3, [sp, #32]
 8008e16:	e7f5      	b.n	8008e04 <_dtoa_r+0x2fc>
 8008e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e1e:	e7b8      	b.n	8008d92 <_dtoa_r+0x28a>
 8008e20:	3101      	adds	r1, #1
 8008e22:	6041      	str	r1, [r0, #4]
 8008e24:	0052      	lsls	r2, r2, #1
 8008e26:	e7b8      	b.n	8008d9a <_dtoa_r+0x292>
 8008e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e2a:	9a01      	ldr	r2, [sp, #4]
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	2b0e      	cmp	r3, #14
 8008e32:	f200 809d 	bhi.w	8008f70 <_dtoa_r+0x468>
 8008e36:	2d00      	cmp	r5, #0
 8008e38:	f000 809a 	beq.w	8008f70 <_dtoa_r+0x468>
 8008e3c:	9b00      	ldr	r3, [sp, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	dd32      	ble.n	8008ea8 <_dtoa_r+0x3a0>
 8008e42:	4ab7      	ldr	r2, [pc, #732]	; (8009120 <_dtoa_r+0x618>)
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e50:	9b00      	ldr	r3, [sp, #0]
 8008e52:	05d8      	lsls	r0, r3, #23
 8008e54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008e58:	d516      	bpl.n	8008e88 <_dtoa_r+0x380>
 8008e5a:	4bb2      	ldr	r3, [pc, #712]	; (8009124 <_dtoa_r+0x61c>)
 8008e5c:	ec51 0b19 	vmov	r0, r1, d9
 8008e60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e64:	f7f7 fcfa 	bl	800085c <__aeabi_ddiv>
 8008e68:	f007 070f 	and.w	r7, r7, #15
 8008e6c:	4682      	mov	sl, r0
 8008e6e:	468b      	mov	fp, r1
 8008e70:	2503      	movs	r5, #3
 8008e72:	4eac      	ldr	r6, [pc, #688]	; (8009124 <_dtoa_r+0x61c>)
 8008e74:	b957      	cbnz	r7, 8008e8c <_dtoa_r+0x384>
 8008e76:	4642      	mov	r2, r8
 8008e78:	464b      	mov	r3, r9
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	4659      	mov	r1, fp
 8008e7e:	f7f7 fced 	bl	800085c <__aeabi_ddiv>
 8008e82:	4682      	mov	sl, r0
 8008e84:	468b      	mov	fp, r1
 8008e86:	e028      	b.n	8008eda <_dtoa_r+0x3d2>
 8008e88:	2502      	movs	r5, #2
 8008e8a:	e7f2      	b.n	8008e72 <_dtoa_r+0x36a>
 8008e8c:	07f9      	lsls	r1, r7, #31
 8008e8e:	d508      	bpl.n	8008ea2 <_dtoa_r+0x39a>
 8008e90:	4640      	mov	r0, r8
 8008e92:	4649      	mov	r1, r9
 8008e94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e98:	f7f7 fbb6 	bl	8000608 <__aeabi_dmul>
 8008e9c:	3501      	adds	r5, #1
 8008e9e:	4680      	mov	r8, r0
 8008ea0:	4689      	mov	r9, r1
 8008ea2:	107f      	asrs	r7, r7, #1
 8008ea4:	3608      	adds	r6, #8
 8008ea6:	e7e5      	b.n	8008e74 <_dtoa_r+0x36c>
 8008ea8:	f000 809b 	beq.w	8008fe2 <_dtoa_r+0x4da>
 8008eac:	9b00      	ldr	r3, [sp, #0]
 8008eae:	4f9d      	ldr	r7, [pc, #628]	; (8009124 <_dtoa_r+0x61c>)
 8008eb0:	425e      	negs	r6, r3
 8008eb2:	4b9b      	ldr	r3, [pc, #620]	; (8009120 <_dtoa_r+0x618>)
 8008eb4:	f006 020f 	and.w	r2, r6, #15
 8008eb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	ec51 0b19 	vmov	r0, r1, d9
 8008ec4:	f7f7 fba0 	bl	8000608 <__aeabi_dmul>
 8008ec8:	1136      	asrs	r6, r6, #4
 8008eca:	4682      	mov	sl, r0
 8008ecc:	468b      	mov	fp, r1
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2502      	movs	r5, #2
 8008ed2:	2e00      	cmp	r6, #0
 8008ed4:	d17a      	bne.n	8008fcc <_dtoa_r+0x4c4>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1d3      	bne.n	8008e82 <_dtoa_r+0x37a>
 8008eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 8082 	beq.w	8008fe6 <_dtoa_r+0x4de>
 8008ee2:	4b91      	ldr	r3, [pc, #580]	; (8009128 <_dtoa_r+0x620>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4650      	mov	r0, sl
 8008ee8:	4659      	mov	r1, fp
 8008eea:	f7f7 fdff 	bl	8000aec <__aeabi_dcmplt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d079      	beq.n	8008fe6 <_dtoa_r+0x4de>
 8008ef2:	9b03      	ldr	r3, [sp, #12]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d076      	beq.n	8008fe6 <_dtoa_r+0x4de>
 8008ef8:	9b02      	ldr	r3, [sp, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	dd36      	ble.n	8008f6c <_dtoa_r+0x464>
 8008efe:	9b00      	ldr	r3, [sp, #0]
 8008f00:	4650      	mov	r0, sl
 8008f02:	4659      	mov	r1, fp
 8008f04:	1e5f      	subs	r7, r3, #1
 8008f06:	2200      	movs	r2, #0
 8008f08:	4b88      	ldr	r3, [pc, #544]	; (800912c <_dtoa_r+0x624>)
 8008f0a:	f7f7 fb7d 	bl	8000608 <__aeabi_dmul>
 8008f0e:	9e02      	ldr	r6, [sp, #8]
 8008f10:	4682      	mov	sl, r0
 8008f12:	468b      	mov	fp, r1
 8008f14:	3501      	adds	r5, #1
 8008f16:	4628      	mov	r0, r5
 8008f18:	f7f7 fb0c 	bl	8000534 <__aeabi_i2d>
 8008f1c:	4652      	mov	r2, sl
 8008f1e:	465b      	mov	r3, fp
 8008f20:	f7f7 fb72 	bl	8000608 <__aeabi_dmul>
 8008f24:	4b82      	ldr	r3, [pc, #520]	; (8009130 <_dtoa_r+0x628>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	f7f7 f9b8 	bl	800029c <__adddf3>
 8008f2c:	46d0      	mov	r8, sl
 8008f2e:	46d9      	mov	r9, fp
 8008f30:	4682      	mov	sl, r0
 8008f32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	d158      	bne.n	8008fec <_dtoa_r+0x4e4>
 8008f3a:	4b7e      	ldr	r3, [pc, #504]	; (8009134 <_dtoa_r+0x62c>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	4640      	mov	r0, r8
 8008f40:	4649      	mov	r1, r9
 8008f42:	f7f7 f9a9 	bl	8000298 <__aeabi_dsub>
 8008f46:	4652      	mov	r2, sl
 8008f48:	465b      	mov	r3, fp
 8008f4a:	4680      	mov	r8, r0
 8008f4c:	4689      	mov	r9, r1
 8008f4e:	f7f7 fdeb 	bl	8000b28 <__aeabi_dcmpgt>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	f040 8295 	bne.w	8009482 <_dtoa_r+0x97a>
 8008f58:	4652      	mov	r2, sl
 8008f5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f5e:	4640      	mov	r0, r8
 8008f60:	4649      	mov	r1, r9
 8008f62:	f7f7 fdc3 	bl	8000aec <__aeabi_dcmplt>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f040 8289 	bne.w	800947e <_dtoa_r+0x976>
 8008f6c:	ec5b ab19 	vmov	sl, fp, d9
 8008f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f2c0 8148 	blt.w	8009208 <_dtoa_r+0x700>
 8008f78:	9a00      	ldr	r2, [sp, #0]
 8008f7a:	2a0e      	cmp	r2, #14
 8008f7c:	f300 8144 	bgt.w	8009208 <_dtoa_r+0x700>
 8008f80:	4b67      	ldr	r3, [pc, #412]	; (8009120 <_dtoa_r+0x618>)
 8008f82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f280 80d5 	bge.w	800913c <_dtoa_r+0x634>
 8008f92:	9b03      	ldr	r3, [sp, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f300 80d1 	bgt.w	800913c <_dtoa_r+0x634>
 8008f9a:	f040 826f 	bne.w	800947c <_dtoa_r+0x974>
 8008f9e:	4b65      	ldr	r3, [pc, #404]	; (8009134 <_dtoa_r+0x62c>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	f7f7 fb2f 	bl	8000608 <__aeabi_dmul>
 8008faa:	4652      	mov	r2, sl
 8008fac:	465b      	mov	r3, fp
 8008fae:	f7f7 fdb1 	bl	8000b14 <__aeabi_dcmpge>
 8008fb2:	9e03      	ldr	r6, [sp, #12]
 8008fb4:	4637      	mov	r7, r6
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f040 8245 	bne.w	8009446 <_dtoa_r+0x93e>
 8008fbc:	9d01      	ldr	r5, [sp, #4]
 8008fbe:	2331      	movs	r3, #49	; 0x31
 8008fc0:	f805 3b01 	strb.w	r3, [r5], #1
 8008fc4:	9b00      	ldr	r3, [sp, #0]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	e240      	b.n	800944e <_dtoa_r+0x946>
 8008fcc:	07f2      	lsls	r2, r6, #31
 8008fce:	d505      	bpl.n	8008fdc <_dtoa_r+0x4d4>
 8008fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fd4:	f7f7 fb18 	bl	8000608 <__aeabi_dmul>
 8008fd8:	3501      	adds	r5, #1
 8008fda:	2301      	movs	r3, #1
 8008fdc:	1076      	asrs	r6, r6, #1
 8008fde:	3708      	adds	r7, #8
 8008fe0:	e777      	b.n	8008ed2 <_dtoa_r+0x3ca>
 8008fe2:	2502      	movs	r5, #2
 8008fe4:	e779      	b.n	8008eda <_dtoa_r+0x3d2>
 8008fe6:	9f00      	ldr	r7, [sp, #0]
 8008fe8:	9e03      	ldr	r6, [sp, #12]
 8008fea:	e794      	b.n	8008f16 <_dtoa_r+0x40e>
 8008fec:	9901      	ldr	r1, [sp, #4]
 8008fee:	4b4c      	ldr	r3, [pc, #304]	; (8009120 <_dtoa_r+0x618>)
 8008ff0:	4431      	add	r1, r6
 8008ff2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ff4:	9908      	ldr	r1, [sp, #32]
 8008ff6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ffa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ffe:	2900      	cmp	r1, #0
 8009000:	d043      	beq.n	800908a <_dtoa_r+0x582>
 8009002:	494d      	ldr	r1, [pc, #308]	; (8009138 <_dtoa_r+0x630>)
 8009004:	2000      	movs	r0, #0
 8009006:	f7f7 fc29 	bl	800085c <__aeabi_ddiv>
 800900a:	4652      	mov	r2, sl
 800900c:	465b      	mov	r3, fp
 800900e:	f7f7 f943 	bl	8000298 <__aeabi_dsub>
 8009012:	9d01      	ldr	r5, [sp, #4]
 8009014:	4682      	mov	sl, r0
 8009016:	468b      	mov	fp, r1
 8009018:	4649      	mov	r1, r9
 800901a:	4640      	mov	r0, r8
 800901c:	f7f7 fda4 	bl	8000b68 <__aeabi_d2iz>
 8009020:	4606      	mov	r6, r0
 8009022:	f7f7 fa87 	bl	8000534 <__aeabi_i2d>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4640      	mov	r0, r8
 800902c:	4649      	mov	r1, r9
 800902e:	f7f7 f933 	bl	8000298 <__aeabi_dsub>
 8009032:	3630      	adds	r6, #48	; 0x30
 8009034:	f805 6b01 	strb.w	r6, [r5], #1
 8009038:	4652      	mov	r2, sl
 800903a:	465b      	mov	r3, fp
 800903c:	4680      	mov	r8, r0
 800903e:	4689      	mov	r9, r1
 8009040:	f7f7 fd54 	bl	8000aec <__aeabi_dcmplt>
 8009044:	2800      	cmp	r0, #0
 8009046:	d163      	bne.n	8009110 <_dtoa_r+0x608>
 8009048:	4642      	mov	r2, r8
 800904a:	464b      	mov	r3, r9
 800904c:	4936      	ldr	r1, [pc, #216]	; (8009128 <_dtoa_r+0x620>)
 800904e:	2000      	movs	r0, #0
 8009050:	f7f7 f922 	bl	8000298 <__aeabi_dsub>
 8009054:	4652      	mov	r2, sl
 8009056:	465b      	mov	r3, fp
 8009058:	f7f7 fd48 	bl	8000aec <__aeabi_dcmplt>
 800905c:	2800      	cmp	r0, #0
 800905e:	f040 80b5 	bne.w	80091cc <_dtoa_r+0x6c4>
 8009062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009064:	429d      	cmp	r5, r3
 8009066:	d081      	beq.n	8008f6c <_dtoa_r+0x464>
 8009068:	4b30      	ldr	r3, [pc, #192]	; (800912c <_dtoa_r+0x624>)
 800906a:	2200      	movs	r2, #0
 800906c:	4650      	mov	r0, sl
 800906e:	4659      	mov	r1, fp
 8009070:	f7f7 faca 	bl	8000608 <__aeabi_dmul>
 8009074:	4b2d      	ldr	r3, [pc, #180]	; (800912c <_dtoa_r+0x624>)
 8009076:	4682      	mov	sl, r0
 8009078:	468b      	mov	fp, r1
 800907a:	4640      	mov	r0, r8
 800907c:	4649      	mov	r1, r9
 800907e:	2200      	movs	r2, #0
 8009080:	f7f7 fac2 	bl	8000608 <__aeabi_dmul>
 8009084:	4680      	mov	r8, r0
 8009086:	4689      	mov	r9, r1
 8009088:	e7c6      	b.n	8009018 <_dtoa_r+0x510>
 800908a:	4650      	mov	r0, sl
 800908c:	4659      	mov	r1, fp
 800908e:	f7f7 fabb 	bl	8000608 <__aeabi_dmul>
 8009092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009094:	9d01      	ldr	r5, [sp, #4]
 8009096:	930f      	str	r3, [sp, #60]	; 0x3c
 8009098:	4682      	mov	sl, r0
 800909a:	468b      	mov	fp, r1
 800909c:	4649      	mov	r1, r9
 800909e:	4640      	mov	r0, r8
 80090a0:	f7f7 fd62 	bl	8000b68 <__aeabi_d2iz>
 80090a4:	4606      	mov	r6, r0
 80090a6:	f7f7 fa45 	bl	8000534 <__aeabi_i2d>
 80090aa:	3630      	adds	r6, #48	; 0x30
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4640      	mov	r0, r8
 80090b2:	4649      	mov	r1, r9
 80090b4:	f7f7 f8f0 	bl	8000298 <__aeabi_dsub>
 80090b8:	f805 6b01 	strb.w	r6, [r5], #1
 80090bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090be:	429d      	cmp	r5, r3
 80090c0:	4680      	mov	r8, r0
 80090c2:	4689      	mov	r9, r1
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	d124      	bne.n	8009114 <_dtoa_r+0x60c>
 80090ca:	4b1b      	ldr	r3, [pc, #108]	; (8009138 <_dtoa_r+0x630>)
 80090cc:	4650      	mov	r0, sl
 80090ce:	4659      	mov	r1, fp
 80090d0:	f7f7 f8e4 	bl	800029c <__adddf3>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4640      	mov	r0, r8
 80090da:	4649      	mov	r1, r9
 80090dc:	f7f7 fd24 	bl	8000b28 <__aeabi_dcmpgt>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d173      	bne.n	80091cc <_dtoa_r+0x6c4>
 80090e4:	4652      	mov	r2, sl
 80090e6:	465b      	mov	r3, fp
 80090e8:	4913      	ldr	r1, [pc, #76]	; (8009138 <_dtoa_r+0x630>)
 80090ea:	2000      	movs	r0, #0
 80090ec:	f7f7 f8d4 	bl	8000298 <__aeabi_dsub>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4640      	mov	r0, r8
 80090f6:	4649      	mov	r1, r9
 80090f8:	f7f7 fcf8 	bl	8000aec <__aeabi_dcmplt>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f43f af35 	beq.w	8008f6c <_dtoa_r+0x464>
 8009102:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009104:	1e6b      	subs	r3, r5, #1
 8009106:	930f      	str	r3, [sp, #60]	; 0x3c
 8009108:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800910c:	2b30      	cmp	r3, #48	; 0x30
 800910e:	d0f8      	beq.n	8009102 <_dtoa_r+0x5fa>
 8009110:	9700      	str	r7, [sp, #0]
 8009112:	e049      	b.n	80091a8 <_dtoa_r+0x6a0>
 8009114:	4b05      	ldr	r3, [pc, #20]	; (800912c <_dtoa_r+0x624>)
 8009116:	f7f7 fa77 	bl	8000608 <__aeabi_dmul>
 800911a:	4680      	mov	r8, r0
 800911c:	4689      	mov	r9, r1
 800911e:	e7bd      	b.n	800909c <_dtoa_r+0x594>
 8009120:	0800bbc0 	.word	0x0800bbc0
 8009124:	0800bb98 	.word	0x0800bb98
 8009128:	3ff00000 	.word	0x3ff00000
 800912c:	40240000 	.word	0x40240000
 8009130:	401c0000 	.word	0x401c0000
 8009134:	40140000 	.word	0x40140000
 8009138:	3fe00000 	.word	0x3fe00000
 800913c:	9d01      	ldr	r5, [sp, #4]
 800913e:	4656      	mov	r6, sl
 8009140:	465f      	mov	r7, fp
 8009142:	4642      	mov	r2, r8
 8009144:	464b      	mov	r3, r9
 8009146:	4630      	mov	r0, r6
 8009148:	4639      	mov	r1, r7
 800914a:	f7f7 fb87 	bl	800085c <__aeabi_ddiv>
 800914e:	f7f7 fd0b 	bl	8000b68 <__aeabi_d2iz>
 8009152:	4682      	mov	sl, r0
 8009154:	f7f7 f9ee 	bl	8000534 <__aeabi_i2d>
 8009158:	4642      	mov	r2, r8
 800915a:	464b      	mov	r3, r9
 800915c:	f7f7 fa54 	bl	8000608 <__aeabi_dmul>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4630      	mov	r0, r6
 8009166:	4639      	mov	r1, r7
 8009168:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800916c:	f7f7 f894 	bl	8000298 <__aeabi_dsub>
 8009170:	f805 6b01 	strb.w	r6, [r5], #1
 8009174:	9e01      	ldr	r6, [sp, #4]
 8009176:	9f03      	ldr	r7, [sp, #12]
 8009178:	1bae      	subs	r6, r5, r6
 800917a:	42b7      	cmp	r7, r6
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	d135      	bne.n	80091ee <_dtoa_r+0x6e6>
 8009182:	f7f7 f88b 	bl	800029c <__adddf3>
 8009186:	4642      	mov	r2, r8
 8009188:	464b      	mov	r3, r9
 800918a:	4606      	mov	r6, r0
 800918c:	460f      	mov	r7, r1
 800918e:	f7f7 fccb 	bl	8000b28 <__aeabi_dcmpgt>
 8009192:	b9d0      	cbnz	r0, 80091ca <_dtoa_r+0x6c2>
 8009194:	4642      	mov	r2, r8
 8009196:	464b      	mov	r3, r9
 8009198:	4630      	mov	r0, r6
 800919a:	4639      	mov	r1, r7
 800919c:	f7f7 fc9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80091a0:	b110      	cbz	r0, 80091a8 <_dtoa_r+0x6a0>
 80091a2:	f01a 0f01 	tst.w	sl, #1
 80091a6:	d110      	bne.n	80091ca <_dtoa_r+0x6c2>
 80091a8:	4620      	mov	r0, r4
 80091aa:	ee18 1a10 	vmov	r1, s16
 80091ae:	f000 fe75 	bl	8009e9c <_Bfree>
 80091b2:	2300      	movs	r3, #0
 80091b4:	9800      	ldr	r0, [sp, #0]
 80091b6:	702b      	strb	r3, [r5, #0]
 80091b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ba:	3001      	adds	r0, #1
 80091bc:	6018      	str	r0, [r3, #0]
 80091be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f43f acf1 	beq.w	8008ba8 <_dtoa_r+0xa0>
 80091c6:	601d      	str	r5, [r3, #0]
 80091c8:	e4ee      	b.n	8008ba8 <_dtoa_r+0xa0>
 80091ca:	9f00      	ldr	r7, [sp, #0]
 80091cc:	462b      	mov	r3, r5
 80091ce:	461d      	mov	r5, r3
 80091d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091d4:	2a39      	cmp	r2, #57	; 0x39
 80091d6:	d106      	bne.n	80091e6 <_dtoa_r+0x6de>
 80091d8:	9a01      	ldr	r2, [sp, #4]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d1f7      	bne.n	80091ce <_dtoa_r+0x6c6>
 80091de:	9901      	ldr	r1, [sp, #4]
 80091e0:	2230      	movs	r2, #48	; 0x30
 80091e2:	3701      	adds	r7, #1
 80091e4:	700a      	strb	r2, [r1, #0]
 80091e6:	781a      	ldrb	r2, [r3, #0]
 80091e8:	3201      	adds	r2, #1
 80091ea:	701a      	strb	r2, [r3, #0]
 80091ec:	e790      	b.n	8009110 <_dtoa_r+0x608>
 80091ee:	4ba6      	ldr	r3, [pc, #664]	; (8009488 <_dtoa_r+0x980>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	f7f7 fa09 	bl	8000608 <__aeabi_dmul>
 80091f6:	2200      	movs	r2, #0
 80091f8:	2300      	movs	r3, #0
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	f7f7 fc6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009202:	2800      	cmp	r0, #0
 8009204:	d09d      	beq.n	8009142 <_dtoa_r+0x63a>
 8009206:	e7cf      	b.n	80091a8 <_dtoa_r+0x6a0>
 8009208:	9a08      	ldr	r2, [sp, #32]
 800920a:	2a00      	cmp	r2, #0
 800920c:	f000 80d7 	beq.w	80093be <_dtoa_r+0x8b6>
 8009210:	9a06      	ldr	r2, [sp, #24]
 8009212:	2a01      	cmp	r2, #1
 8009214:	f300 80ba 	bgt.w	800938c <_dtoa_r+0x884>
 8009218:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800921a:	2a00      	cmp	r2, #0
 800921c:	f000 80b2 	beq.w	8009384 <_dtoa_r+0x87c>
 8009220:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009224:	9e07      	ldr	r6, [sp, #28]
 8009226:	9d04      	ldr	r5, [sp, #16]
 8009228:	9a04      	ldr	r2, [sp, #16]
 800922a:	441a      	add	r2, r3
 800922c:	9204      	str	r2, [sp, #16]
 800922e:	9a05      	ldr	r2, [sp, #20]
 8009230:	2101      	movs	r1, #1
 8009232:	441a      	add	r2, r3
 8009234:	4620      	mov	r0, r4
 8009236:	9205      	str	r2, [sp, #20]
 8009238:	f000 ff32 	bl	800a0a0 <__i2b>
 800923c:	4607      	mov	r7, r0
 800923e:	2d00      	cmp	r5, #0
 8009240:	dd0c      	ble.n	800925c <_dtoa_r+0x754>
 8009242:	9b05      	ldr	r3, [sp, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	dd09      	ble.n	800925c <_dtoa_r+0x754>
 8009248:	42ab      	cmp	r3, r5
 800924a:	9a04      	ldr	r2, [sp, #16]
 800924c:	bfa8      	it	ge
 800924e:	462b      	movge	r3, r5
 8009250:	1ad2      	subs	r2, r2, r3
 8009252:	9204      	str	r2, [sp, #16]
 8009254:	9a05      	ldr	r2, [sp, #20]
 8009256:	1aed      	subs	r5, r5, r3
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	9b07      	ldr	r3, [sp, #28]
 800925e:	b31b      	cbz	r3, 80092a8 <_dtoa_r+0x7a0>
 8009260:	9b08      	ldr	r3, [sp, #32]
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 80af 	beq.w	80093c6 <_dtoa_r+0x8be>
 8009268:	2e00      	cmp	r6, #0
 800926a:	dd13      	ble.n	8009294 <_dtoa_r+0x78c>
 800926c:	4639      	mov	r1, r7
 800926e:	4632      	mov	r2, r6
 8009270:	4620      	mov	r0, r4
 8009272:	f000 ffd5 	bl	800a220 <__pow5mult>
 8009276:	ee18 2a10 	vmov	r2, s16
 800927a:	4601      	mov	r1, r0
 800927c:	4607      	mov	r7, r0
 800927e:	4620      	mov	r0, r4
 8009280:	f000 ff24 	bl	800a0cc <__multiply>
 8009284:	ee18 1a10 	vmov	r1, s16
 8009288:	4680      	mov	r8, r0
 800928a:	4620      	mov	r0, r4
 800928c:	f000 fe06 	bl	8009e9c <_Bfree>
 8009290:	ee08 8a10 	vmov	s16, r8
 8009294:	9b07      	ldr	r3, [sp, #28]
 8009296:	1b9a      	subs	r2, r3, r6
 8009298:	d006      	beq.n	80092a8 <_dtoa_r+0x7a0>
 800929a:	ee18 1a10 	vmov	r1, s16
 800929e:	4620      	mov	r0, r4
 80092a0:	f000 ffbe 	bl	800a220 <__pow5mult>
 80092a4:	ee08 0a10 	vmov	s16, r0
 80092a8:	2101      	movs	r1, #1
 80092aa:	4620      	mov	r0, r4
 80092ac:	f000 fef8 	bl	800a0a0 <__i2b>
 80092b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	4606      	mov	r6, r0
 80092b6:	f340 8088 	ble.w	80093ca <_dtoa_r+0x8c2>
 80092ba:	461a      	mov	r2, r3
 80092bc:	4601      	mov	r1, r0
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 ffae 	bl	800a220 <__pow5mult>
 80092c4:	9b06      	ldr	r3, [sp, #24]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	4606      	mov	r6, r0
 80092ca:	f340 8081 	ble.w	80093d0 <_dtoa_r+0x8c8>
 80092ce:	f04f 0800 	mov.w	r8, #0
 80092d2:	6933      	ldr	r3, [r6, #16]
 80092d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092d8:	6918      	ldr	r0, [r3, #16]
 80092da:	f000 fe91 	bl	800a000 <__hi0bits>
 80092de:	f1c0 0020 	rsb	r0, r0, #32
 80092e2:	9b05      	ldr	r3, [sp, #20]
 80092e4:	4418      	add	r0, r3
 80092e6:	f010 001f 	ands.w	r0, r0, #31
 80092ea:	f000 8092 	beq.w	8009412 <_dtoa_r+0x90a>
 80092ee:	f1c0 0320 	rsb	r3, r0, #32
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	f340 808a 	ble.w	800940c <_dtoa_r+0x904>
 80092f8:	f1c0 001c 	rsb	r0, r0, #28
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	4403      	add	r3, r0
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	9b05      	ldr	r3, [sp, #20]
 8009304:	4403      	add	r3, r0
 8009306:	4405      	add	r5, r0
 8009308:	9305      	str	r3, [sp, #20]
 800930a:	9b04      	ldr	r3, [sp, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	dd07      	ble.n	8009320 <_dtoa_r+0x818>
 8009310:	ee18 1a10 	vmov	r1, s16
 8009314:	461a      	mov	r2, r3
 8009316:	4620      	mov	r0, r4
 8009318:	f000 ffdc 	bl	800a2d4 <__lshift>
 800931c:	ee08 0a10 	vmov	s16, r0
 8009320:	9b05      	ldr	r3, [sp, #20]
 8009322:	2b00      	cmp	r3, #0
 8009324:	dd05      	ble.n	8009332 <_dtoa_r+0x82a>
 8009326:	4631      	mov	r1, r6
 8009328:	461a      	mov	r2, r3
 800932a:	4620      	mov	r0, r4
 800932c:	f000 ffd2 	bl	800a2d4 <__lshift>
 8009330:	4606      	mov	r6, r0
 8009332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009334:	2b00      	cmp	r3, #0
 8009336:	d06e      	beq.n	8009416 <_dtoa_r+0x90e>
 8009338:	ee18 0a10 	vmov	r0, s16
 800933c:	4631      	mov	r1, r6
 800933e:	f001 f839 	bl	800a3b4 <__mcmp>
 8009342:	2800      	cmp	r0, #0
 8009344:	da67      	bge.n	8009416 <_dtoa_r+0x90e>
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	3b01      	subs	r3, #1
 800934a:	ee18 1a10 	vmov	r1, s16
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	220a      	movs	r2, #10
 8009352:	2300      	movs	r3, #0
 8009354:	4620      	mov	r0, r4
 8009356:	f000 fdc3 	bl	8009ee0 <__multadd>
 800935a:	9b08      	ldr	r3, [sp, #32]
 800935c:	ee08 0a10 	vmov	s16, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 81b1 	beq.w	80096c8 <_dtoa_r+0xbc0>
 8009366:	2300      	movs	r3, #0
 8009368:	4639      	mov	r1, r7
 800936a:	220a      	movs	r2, #10
 800936c:	4620      	mov	r0, r4
 800936e:	f000 fdb7 	bl	8009ee0 <__multadd>
 8009372:	9b02      	ldr	r3, [sp, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	4607      	mov	r7, r0
 8009378:	f300 808e 	bgt.w	8009498 <_dtoa_r+0x990>
 800937c:	9b06      	ldr	r3, [sp, #24]
 800937e:	2b02      	cmp	r3, #2
 8009380:	dc51      	bgt.n	8009426 <_dtoa_r+0x91e>
 8009382:	e089      	b.n	8009498 <_dtoa_r+0x990>
 8009384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800938a:	e74b      	b.n	8009224 <_dtoa_r+0x71c>
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	1e5e      	subs	r6, r3, #1
 8009390:	9b07      	ldr	r3, [sp, #28]
 8009392:	42b3      	cmp	r3, r6
 8009394:	bfbf      	itttt	lt
 8009396:	9b07      	ldrlt	r3, [sp, #28]
 8009398:	9607      	strlt	r6, [sp, #28]
 800939a:	1af2      	sublt	r2, r6, r3
 800939c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800939e:	bfb6      	itet	lt
 80093a0:	189b      	addlt	r3, r3, r2
 80093a2:	1b9e      	subge	r6, r3, r6
 80093a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80093a6:	9b03      	ldr	r3, [sp, #12]
 80093a8:	bfb8      	it	lt
 80093aa:	2600      	movlt	r6, #0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	bfb7      	itett	lt
 80093b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80093b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80093b8:	1a9d      	sublt	r5, r3, r2
 80093ba:	2300      	movlt	r3, #0
 80093bc:	e734      	b.n	8009228 <_dtoa_r+0x720>
 80093be:	9e07      	ldr	r6, [sp, #28]
 80093c0:	9d04      	ldr	r5, [sp, #16]
 80093c2:	9f08      	ldr	r7, [sp, #32]
 80093c4:	e73b      	b.n	800923e <_dtoa_r+0x736>
 80093c6:	9a07      	ldr	r2, [sp, #28]
 80093c8:	e767      	b.n	800929a <_dtoa_r+0x792>
 80093ca:	9b06      	ldr	r3, [sp, #24]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	dc18      	bgt.n	8009402 <_dtoa_r+0x8fa>
 80093d0:	f1ba 0f00 	cmp.w	sl, #0
 80093d4:	d115      	bne.n	8009402 <_dtoa_r+0x8fa>
 80093d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093da:	b993      	cbnz	r3, 8009402 <_dtoa_r+0x8fa>
 80093dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093e0:	0d1b      	lsrs	r3, r3, #20
 80093e2:	051b      	lsls	r3, r3, #20
 80093e4:	b183      	cbz	r3, 8009408 <_dtoa_r+0x900>
 80093e6:	9b04      	ldr	r3, [sp, #16]
 80093e8:	3301      	adds	r3, #1
 80093ea:	9304      	str	r3, [sp, #16]
 80093ec:	9b05      	ldr	r3, [sp, #20]
 80093ee:	3301      	adds	r3, #1
 80093f0:	9305      	str	r3, [sp, #20]
 80093f2:	f04f 0801 	mov.w	r8, #1
 80093f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f47f af6a 	bne.w	80092d2 <_dtoa_r+0x7ca>
 80093fe:	2001      	movs	r0, #1
 8009400:	e76f      	b.n	80092e2 <_dtoa_r+0x7da>
 8009402:	f04f 0800 	mov.w	r8, #0
 8009406:	e7f6      	b.n	80093f6 <_dtoa_r+0x8ee>
 8009408:	4698      	mov	r8, r3
 800940a:	e7f4      	b.n	80093f6 <_dtoa_r+0x8ee>
 800940c:	f43f af7d 	beq.w	800930a <_dtoa_r+0x802>
 8009410:	4618      	mov	r0, r3
 8009412:	301c      	adds	r0, #28
 8009414:	e772      	b.n	80092fc <_dtoa_r+0x7f4>
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	dc37      	bgt.n	800948c <_dtoa_r+0x984>
 800941c:	9b06      	ldr	r3, [sp, #24]
 800941e:	2b02      	cmp	r3, #2
 8009420:	dd34      	ble.n	800948c <_dtoa_r+0x984>
 8009422:	9b03      	ldr	r3, [sp, #12]
 8009424:	9302      	str	r3, [sp, #8]
 8009426:	9b02      	ldr	r3, [sp, #8]
 8009428:	b96b      	cbnz	r3, 8009446 <_dtoa_r+0x93e>
 800942a:	4631      	mov	r1, r6
 800942c:	2205      	movs	r2, #5
 800942e:	4620      	mov	r0, r4
 8009430:	f000 fd56 	bl	8009ee0 <__multadd>
 8009434:	4601      	mov	r1, r0
 8009436:	4606      	mov	r6, r0
 8009438:	ee18 0a10 	vmov	r0, s16
 800943c:	f000 ffba 	bl	800a3b4 <__mcmp>
 8009440:	2800      	cmp	r0, #0
 8009442:	f73f adbb 	bgt.w	8008fbc <_dtoa_r+0x4b4>
 8009446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009448:	9d01      	ldr	r5, [sp, #4]
 800944a:	43db      	mvns	r3, r3
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	f04f 0800 	mov.w	r8, #0
 8009452:	4631      	mov	r1, r6
 8009454:	4620      	mov	r0, r4
 8009456:	f000 fd21 	bl	8009e9c <_Bfree>
 800945a:	2f00      	cmp	r7, #0
 800945c:	f43f aea4 	beq.w	80091a8 <_dtoa_r+0x6a0>
 8009460:	f1b8 0f00 	cmp.w	r8, #0
 8009464:	d005      	beq.n	8009472 <_dtoa_r+0x96a>
 8009466:	45b8      	cmp	r8, r7
 8009468:	d003      	beq.n	8009472 <_dtoa_r+0x96a>
 800946a:	4641      	mov	r1, r8
 800946c:	4620      	mov	r0, r4
 800946e:	f000 fd15 	bl	8009e9c <_Bfree>
 8009472:	4639      	mov	r1, r7
 8009474:	4620      	mov	r0, r4
 8009476:	f000 fd11 	bl	8009e9c <_Bfree>
 800947a:	e695      	b.n	80091a8 <_dtoa_r+0x6a0>
 800947c:	2600      	movs	r6, #0
 800947e:	4637      	mov	r7, r6
 8009480:	e7e1      	b.n	8009446 <_dtoa_r+0x93e>
 8009482:	9700      	str	r7, [sp, #0]
 8009484:	4637      	mov	r7, r6
 8009486:	e599      	b.n	8008fbc <_dtoa_r+0x4b4>
 8009488:	40240000 	.word	0x40240000
 800948c:	9b08      	ldr	r3, [sp, #32]
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 80ca 	beq.w	8009628 <_dtoa_r+0xb20>
 8009494:	9b03      	ldr	r3, [sp, #12]
 8009496:	9302      	str	r3, [sp, #8]
 8009498:	2d00      	cmp	r5, #0
 800949a:	dd05      	ble.n	80094a8 <_dtoa_r+0x9a0>
 800949c:	4639      	mov	r1, r7
 800949e:	462a      	mov	r2, r5
 80094a0:	4620      	mov	r0, r4
 80094a2:	f000 ff17 	bl	800a2d4 <__lshift>
 80094a6:	4607      	mov	r7, r0
 80094a8:	f1b8 0f00 	cmp.w	r8, #0
 80094ac:	d05b      	beq.n	8009566 <_dtoa_r+0xa5e>
 80094ae:	6879      	ldr	r1, [r7, #4]
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 fcb3 	bl	8009e1c <_Balloc>
 80094b6:	4605      	mov	r5, r0
 80094b8:	b928      	cbnz	r0, 80094c6 <_dtoa_r+0x9be>
 80094ba:	4b87      	ldr	r3, [pc, #540]	; (80096d8 <_dtoa_r+0xbd0>)
 80094bc:	4602      	mov	r2, r0
 80094be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094c2:	f7ff bb3b 	b.w	8008b3c <_dtoa_r+0x34>
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	3202      	adds	r2, #2
 80094ca:	0092      	lsls	r2, r2, #2
 80094cc:	f107 010c 	add.w	r1, r7, #12
 80094d0:	300c      	adds	r0, #12
 80094d2:	f000 fc95 	bl	8009e00 <memcpy>
 80094d6:	2201      	movs	r2, #1
 80094d8:	4629      	mov	r1, r5
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fefa 	bl	800a2d4 <__lshift>
 80094e0:	9b01      	ldr	r3, [sp, #4]
 80094e2:	f103 0901 	add.w	r9, r3, #1
 80094e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80094ea:	4413      	add	r3, r2
 80094ec:	9305      	str	r3, [sp, #20]
 80094ee:	f00a 0301 	and.w	r3, sl, #1
 80094f2:	46b8      	mov	r8, r7
 80094f4:	9304      	str	r3, [sp, #16]
 80094f6:	4607      	mov	r7, r0
 80094f8:	4631      	mov	r1, r6
 80094fa:	ee18 0a10 	vmov	r0, s16
 80094fe:	f7ff fa77 	bl	80089f0 <quorem>
 8009502:	4641      	mov	r1, r8
 8009504:	9002      	str	r0, [sp, #8]
 8009506:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800950a:	ee18 0a10 	vmov	r0, s16
 800950e:	f000 ff51 	bl	800a3b4 <__mcmp>
 8009512:	463a      	mov	r2, r7
 8009514:	9003      	str	r0, [sp, #12]
 8009516:	4631      	mov	r1, r6
 8009518:	4620      	mov	r0, r4
 800951a:	f000 ff67 	bl	800a3ec <__mdiff>
 800951e:	68c2      	ldr	r2, [r0, #12]
 8009520:	f109 3bff 	add.w	fp, r9, #4294967295
 8009524:	4605      	mov	r5, r0
 8009526:	bb02      	cbnz	r2, 800956a <_dtoa_r+0xa62>
 8009528:	4601      	mov	r1, r0
 800952a:	ee18 0a10 	vmov	r0, s16
 800952e:	f000 ff41 	bl	800a3b4 <__mcmp>
 8009532:	4602      	mov	r2, r0
 8009534:	4629      	mov	r1, r5
 8009536:	4620      	mov	r0, r4
 8009538:	9207      	str	r2, [sp, #28]
 800953a:	f000 fcaf 	bl	8009e9c <_Bfree>
 800953e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009542:	ea43 0102 	orr.w	r1, r3, r2
 8009546:	9b04      	ldr	r3, [sp, #16]
 8009548:	430b      	orrs	r3, r1
 800954a:	464d      	mov	r5, r9
 800954c:	d10f      	bne.n	800956e <_dtoa_r+0xa66>
 800954e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009552:	d02a      	beq.n	80095aa <_dtoa_r+0xaa2>
 8009554:	9b03      	ldr	r3, [sp, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	dd02      	ble.n	8009560 <_dtoa_r+0xa58>
 800955a:	9b02      	ldr	r3, [sp, #8]
 800955c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009560:	f88b a000 	strb.w	sl, [fp]
 8009564:	e775      	b.n	8009452 <_dtoa_r+0x94a>
 8009566:	4638      	mov	r0, r7
 8009568:	e7ba      	b.n	80094e0 <_dtoa_r+0x9d8>
 800956a:	2201      	movs	r2, #1
 800956c:	e7e2      	b.n	8009534 <_dtoa_r+0xa2c>
 800956e:	9b03      	ldr	r3, [sp, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	db04      	blt.n	800957e <_dtoa_r+0xa76>
 8009574:	9906      	ldr	r1, [sp, #24]
 8009576:	430b      	orrs	r3, r1
 8009578:	9904      	ldr	r1, [sp, #16]
 800957a:	430b      	orrs	r3, r1
 800957c:	d122      	bne.n	80095c4 <_dtoa_r+0xabc>
 800957e:	2a00      	cmp	r2, #0
 8009580:	ddee      	ble.n	8009560 <_dtoa_r+0xa58>
 8009582:	ee18 1a10 	vmov	r1, s16
 8009586:	2201      	movs	r2, #1
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fea3 	bl	800a2d4 <__lshift>
 800958e:	4631      	mov	r1, r6
 8009590:	ee08 0a10 	vmov	s16, r0
 8009594:	f000 ff0e 	bl	800a3b4 <__mcmp>
 8009598:	2800      	cmp	r0, #0
 800959a:	dc03      	bgt.n	80095a4 <_dtoa_r+0xa9c>
 800959c:	d1e0      	bne.n	8009560 <_dtoa_r+0xa58>
 800959e:	f01a 0f01 	tst.w	sl, #1
 80095a2:	d0dd      	beq.n	8009560 <_dtoa_r+0xa58>
 80095a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095a8:	d1d7      	bne.n	800955a <_dtoa_r+0xa52>
 80095aa:	2339      	movs	r3, #57	; 0x39
 80095ac:	f88b 3000 	strb.w	r3, [fp]
 80095b0:	462b      	mov	r3, r5
 80095b2:	461d      	mov	r5, r3
 80095b4:	3b01      	subs	r3, #1
 80095b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095ba:	2a39      	cmp	r2, #57	; 0x39
 80095bc:	d071      	beq.n	80096a2 <_dtoa_r+0xb9a>
 80095be:	3201      	adds	r2, #1
 80095c0:	701a      	strb	r2, [r3, #0]
 80095c2:	e746      	b.n	8009452 <_dtoa_r+0x94a>
 80095c4:	2a00      	cmp	r2, #0
 80095c6:	dd07      	ble.n	80095d8 <_dtoa_r+0xad0>
 80095c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095cc:	d0ed      	beq.n	80095aa <_dtoa_r+0xaa2>
 80095ce:	f10a 0301 	add.w	r3, sl, #1
 80095d2:	f88b 3000 	strb.w	r3, [fp]
 80095d6:	e73c      	b.n	8009452 <_dtoa_r+0x94a>
 80095d8:	9b05      	ldr	r3, [sp, #20]
 80095da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80095de:	4599      	cmp	r9, r3
 80095e0:	d047      	beq.n	8009672 <_dtoa_r+0xb6a>
 80095e2:	ee18 1a10 	vmov	r1, s16
 80095e6:	2300      	movs	r3, #0
 80095e8:	220a      	movs	r2, #10
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 fc78 	bl	8009ee0 <__multadd>
 80095f0:	45b8      	cmp	r8, r7
 80095f2:	ee08 0a10 	vmov	s16, r0
 80095f6:	f04f 0300 	mov.w	r3, #0
 80095fa:	f04f 020a 	mov.w	r2, #10
 80095fe:	4641      	mov	r1, r8
 8009600:	4620      	mov	r0, r4
 8009602:	d106      	bne.n	8009612 <_dtoa_r+0xb0a>
 8009604:	f000 fc6c 	bl	8009ee0 <__multadd>
 8009608:	4680      	mov	r8, r0
 800960a:	4607      	mov	r7, r0
 800960c:	f109 0901 	add.w	r9, r9, #1
 8009610:	e772      	b.n	80094f8 <_dtoa_r+0x9f0>
 8009612:	f000 fc65 	bl	8009ee0 <__multadd>
 8009616:	4639      	mov	r1, r7
 8009618:	4680      	mov	r8, r0
 800961a:	2300      	movs	r3, #0
 800961c:	220a      	movs	r2, #10
 800961e:	4620      	mov	r0, r4
 8009620:	f000 fc5e 	bl	8009ee0 <__multadd>
 8009624:	4607      	mov	r7, r0
 8009626:	e7f1      	b.n	800960c <_dtoa_r+0xb04>
 8009628:	9b03      	ldr	r3, [sp, #12]
 800962a:	9302      	str	r3, [sp, #8]
 800962c:	9d01      	ldr	r5, [sp, #4]
 800962e:	ee18 0a10 	vmov	r0, s16
 8009632:	4631      	mov	r1, r6
 8009634:	f7ff f9dc 	bl	80089f0 <quorem>
 8009638:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800963c:	9b01      	ldr	r3, [sp, #4]
 800963e:	f805 ab01 	strb.w	sl, [r5], #1
 8009642:	1aea      	subs	r2, r5, r3
 8009644:	9b02      	ldr	r3, [sp, #8]
 8009646:	4293      	cmp	r3, r2
 8009648:	dd09      	ble.n	800965e <_dtoa_r+0xb56>
 800964a:	ee18 1a10 	vmov	r1, s16
 800964e:	2300      	movs	r3, #0
 8009650:	220a      	movs	r2, #10
 8009652:	4620      	mov	r0, r4
 8009654:	f000 fc44 	bl	8009ee0 <__multadd>
 8009658:	ee08 0a10 	vmov	s16, r0
 800965c:	e7e7      	b.n	800962e <_dtoa_r+0xb26>
 800965e:	9b02      	ldr	r3, [sp, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	bfc8      	it	gt
 8009664:	461d      	movgt	r5, r3
 8009666:	9b01      	ldr	r3, [sp, #4]
 8009668:	bfd8      	it	le
 800966a:	2501      	movle	r5, #1
 800966c:	441d      	add	r5, r3
 800966e:	f04f 0800 	mov.w	r8, #0
 8009672:	ee18 1a10 	vmov	r1, s16
 8009676:	2201      	movs	r2, #1
 8009678:	4620      	mov	r0, r4
 800967a:	f000 fe2b 	bl	800a2d4 <__lshift>
 800967e:	4631      	mov	r1, r6
 8009680:	ee08 0a10 	vmov	s16, r0
 8009684:	f000 fe96 	bl	800a3b4 <__mcmp>
 8009688:	2800      	cmp	r0, #0
 800968a:	dc91      	bgt.n	80095b0 <_dtoa_r+0xaa8>
 800968c:	d102      	bne.n	8009694 <_dtoa_r+0xb8c>
 800968e:	f01a 0f01 	tst.w	sl, #1
 8009692:	d18d      	bne.n	80095b0 <_dtoa_r+0xaa8>
 8009694:	462b      	mov	r3, r5
 8009696:	461d      	mov	r5, r3
 8009698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800969c:	2a30      	cmp	r2, #48	; 0x30
 800969e:	d0fa      	beq.n	8009696 <_dtoa_r+0xb8e>
 80096a0:	e6d7      	b.n	8009452 <_dtoa_r+0x94a>
 80096a2:	9a01      	ldr	r2, [sp, #4]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d184      	bne.n	80095b2 <_dtoa_r+0xaaa>
 80096a8:	9b00      	ldr	r3, [sp, #0]
 80096aa:	3301      	adds	r3, #1
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	2331      	movs	r3, #49	; 0x31
 80096b0:	7013      	strb	r3, [r2, #0]
 80096b2:	e6ce      	b.n	8009452 <_dtoa_r+0x94a>
 80096b4:	4b09      	ldr	r3, [pc, #36]	; (80096dc <_dtoa_r+0xbd4>)
 80096b6:	f7ff ba95 	b.w	8008be4 <_dtoa_r+0xdc>
 80096ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f47f aa6e 	bne.w	8008b9e <_dtoa_r+0x96>
 80096c2:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <_dtoa_r+0xbd8>)
 80096c4:	f7ff ba8e 	b.w	8008be4 <_dtoa_r+0xdc>
 80096c8:	9b02      	ldr	r3, [sp, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	dcae      	bgt.n	800962c <_dtoa_r+0xb24>
 80096ce:	9b06      	ldr	r3, [sp, #24]
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	f73f aea8 	bgt.w	8009426 <_dtoa_r+0x91e>
 80096d6:	e7a9      	b.n	800962c <_dtoa_r+0xb24>
 80096d8:	0800bab0 	.word	0x0800bab0
 80096dc:	0800b8b0 	.word	0x0800b8b0
 80096e0:	0800ba31 	.word	0x0800ba31

080096e4 <rshift>:
 80096e4:	6903      	ldr	r3, [r0, #16]
 80096e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80096ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80096f2:	f100 0414 	add.w	r4, r0, #20
 80096f6:	dd45      	ble.n	8009784 <rshift+0xa0>
 80096f8:	f011 011f 	ands.w	r1, r1, #31
 80096fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009700:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009704:	d10c      	bne.n	8009720 <rshift+0x3c>
 8009706:	f100 0710 	add.w	r7, r0, #16
 800970a:	4629      	mov	r1, r5
 800970c:	42b1      	cmp	r1, r6
 800970e:	d334      	bcc.n	800977a <rshift+0x96>
 8009710:	1a9b      	subs	r3, r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	1eea      	subs	r2, r5, #3
 8009716:	4296      	cmp	r6, r2
 8009718:	bf38      	it	cc
 800971a:	2300      	movcc	r3, #0
 800971c:	4423      	add	r3, r4
 800971e:	e015      	b.n	800974c <rshift+0x68>
 8009720:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009724:	f1c1 0820 	rsb	r8, r1, #32
 8009728:	40cf      	lsrs	r7, r1
 800972a:	f105 0e04 	add.w	lr, r5, #4
 800972e:	46a1      	mov	r9, r4
 8009730:	4576      	cmp	r6, lr
 8009732:	46f4      	mov	ip, lr
 8009734:	d815      	bhi.n	8009762 <rshift+0x7e>
 8009736:	1a9a      	subs	r2, r3, r2
 8009738:	0092      	lsls	r2, r2, #2
 800973a:	3a04      	subs	r2, #4
 800973c:	3501      	adds	r5, #1
 800973e:	42ae      	cmp	r6, r5
 8009740:	bf38      	it	cc
 8009742:	2200      	movcc	r2, #0
 8009744:	18a3      	adds	r3, r4, r2
 8009746:	50a7      	str	r7, [r4, r2]
 8009748:	b107      	cbz	r7, 800974c <rshift+0x68>
 800974a:	3304      	adds	r3, #4
 800974c:	1b1a      	subs	r2, r3, r4
 800974e:	42a3      	cmp	r3, r4
 8009750:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009754:	bf08      	it	eq
 8009756:	2300      	moveq	r3, #0
 8009758:	6102      	str	r2, [r0, #16]
 800975a:	bf08      	it	eq
 800975c:	6143      	streq	r3, [r0, #20]
 800975e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009762:	f8dc c000 	ldr.w	ip, [ip]
 8009766:	fa0c fc08 	lsl.w	ip, ip, r8
 800976a:	ea4c 0707 	orr.w	r7, ip, r7
 800976e:	f849 7b04 	str.w	r7, [r9], #4
 8009772:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009776:	40cf      	lsrs	r7, r1
 8009778:	e7da      	b.n	8009730 <rshift+0x4c>
 800977a:	f851 cb04 	ldr.w	ip, [r1], #4
 800977e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009782:	e7c3      	b.n	800970c <rshift+0x28>
 8009784:	4623      	mov	r3, r4
 8009786:	e7e1      	b.n	800974c <rshift+0x68>

08009788 <__hexdig_fun>:
 8009788:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800978c:	2b09      	cmp	r3, #9
 800978e:	d802      	bhi.n	8009796 <__hexdig_fun+0xe>
 8009790:	3820      	subs	r0, #32
 8009792:	b2c0      	uxtb	r0, r0
 8009794:	4770      	bx	lr
 8009796:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800979a:	2b05      	cmp	r3, #5
 800979c:	d801      	bhi.n	80097a2 <__hexdig_fun+0x1a>
 800979e:	3847      	subs	r0, #71	; 0x47
 80097a0:	e7f7      	b.n	8009792 <__hexdig_fun+0xa>
 80097a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80097a6:	2b05      	cmp	r3, #5
 80097a8:	d801      	bhi.n	80097ae <__hexdig_fun+0x26>
 80097aa:	3827      	subs	r0, #39	; 0x27
 80097ac:	e7f1      	b.n	8009792 <__hexdig_fun+0xa>
 80097ae:	2000      	movs	r0, #0
 80097b0:	4770      	bx	lr
	...

080097b4 <__gethex>:
 80097b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	ed2d 8b02 	vpush	{d8}
 80097bc:	b089      	sub	sp, #36	; 0x24
 80097be:	ee08 0a10 	vmov	s16, r0
 80097c2:	9304      	str	r3, [sp, #16]
 80097c4:	4bb4      	ldr	r3, [pc, #720]	; (8009a98 <__gethex+0x2e4>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	9301      	str	r3, [sp, #4]
 80097ca:	4618      	mov	r0, r3
 80097cc:	468b      	mov	fp, r1
 80097ce:	4690      	mov	r8, r2
 80097d0:	f7f6 fd06 	bl	80001e0 <strlen>
 80097d4:	9b01      	ldr	r3, [sp, #4]
 80097d6:	f8db 2000 	ldr.w	r2, [fp]
 80097da:	4403      	add	r3, r0
 80097dc:	4682      	mov	sl, r0
 80097de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80097e2:	9305      	str	r3, [sp, #20]
 80097e4:	1c93      	adds	r3, r2, #2
 80097e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80097ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80097ee:	32fe      	adds	r2, #254	; 0xfe
 80097f0:	18d1      	adds	r1, r2, r3
 80097f2:	461f      	mov	r7, r3
 80097f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80097f8:	9100      	str	r1, [sp, #0]
 80097fa:	2830      	cmp	r0, #48	; 0x30
 80097fc:	d0f8      	beq.n	80097f0 <__gethex+0x3c>
 80097fe:	f7ff ffc3 	bl	8009788 <__hexdig_fun>
 8009802:	4604      	mov	r4, r0
 8009804:	2800      	cmp	r0, #0
 8009806:	d13a      	bne.n	800987e <__gethex+0xca>
 8009808:	9901      	ldr	r1, [sp, #4]
 800980a:	4652      	mov	r2, sl
 800980c:	4638      	mov	r0, r7
 800980e:	f001 fa33 	bl	800ac78 <strncmp>
 8009812:	4605      	mov	r5, r0
 8009814:	2800      	cmp	r0, #0
 8009816:	d168      	bne.n	80098ea <__gethex+0x136>
 8009818:	f817 000a 	ldrb.w	r0, [r7, sl]
 800981c:	eb07 060a 	add.w	r6, r7, sl
 8009820:	f7ff ffb2 	bl	8009788 <__hexdig_fun>
 8009824:	2800      	cmp	r0, #0
 8009826:	d062      	beq.n	80098ee <__gethex+0x13a>
 8009828:	4633      	mov	r3, r6
 800982a:	7818      	ldrb	r0, [r3, #0]
 800982c:	2830      	cmp	r0, #48	; 0x30
 800982e:	461f      	mov	r7, r3
 8009830:	f103 0301 	add.w	r3, r3, #1
 8009834:	d0f9      	beq.n	800982a <__gethex+0x76>
 8009836:	f7ff ffa7 	bl	8009788 <__hexdig_fun>
 800983a:	2301      	movs	r3, #1
 800983c:	fab0 f480 	clz	r4, r0
 8009840:	0964      	lsrs	r4, r4, #5
 8009842:	4635      	mov	r5, r6
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	463a      	mov	r2, r7
 8009848:	4616      	mov	r6, r2
 800984a:	3201      	adds	r2, #1
 800984c:	7830      	ldrb	r0, [r6, #0]
 800984e:	f7ff ff9b 	bl	8009788 <__hexdig_fun>
 8009852:	2800      	cmp	r0, #0
 8009854:	d1f8      	bne.n	8009848 <__gethex+0x94>
 8009856:	9901      	ldr	r1, [sp, #4]
 8009858:	4652      	mov	r2, sl
 800985a:	4630      	mov	r0, r6
 800985c:	f001 fa0c 	bl	800ac78 <strncmp>
 8009860:	b980      	cbnz	r0, 8009884 <__gethex+0xd0>
 8009862:	b94d      	cbnz	r5, 8009878 <__gethex+0xc4>
 8009864:	eb06 050a 	add.w	r5, r6, sl
 8009868:	462a      	mov	r2, r5
 800986a:	4616      	mov	r6, r2
 800986c:	3201      	adds	r2, #1
 800986e:	7830      	ldrb	r0, [r6, #0]
 8009870:	f7ff ff8a 	bl	8009788 <__hexdig_fun>
 8009874:	2800      	cmp	r0, #0
 8009876:	d1f8      	bne.n	800986a <__gethex+0xb6>
 8009878:	1bad      	subs	r5, r5, r6
 800987a:	00ad      	lsls	r5, r5, #2
 800987c:	e004      	b.n	8009888 <__gethex+0xd4>
 800987e:	2400      	movs	r4, #0
 8009880:	4625      	mov	r5, r4
 8009882:	e7e0      	b.n	8009846 <__gethex+0x92>
 8009884:	2d00      	cmp	r5, #0
 8009886:	d1f7      	bne.n	8009878 <__gethex+0xc4>
 8009888:	7833      	ldrb	r3, [r6, #0]
 800988a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800988e:	2b50      	cmp	r3, #80	; 0x50
 8009890:	d13b      	bne.n	800990a <__gethex+0x156>
 8009892:	7873      	ldrb	r3, [r6, #1]
 8009894:	2b2b      	cmp	r3, #43	; 0x2b
 8009896:	d02c      	beq.n	80098f2 <__gethex+0x13e>
 8009898:	2b2d      	cmp	r3, #45	; 0x2d
 800989a:	d02e      	beq.n	80098fa <__gethex+0x146>
 800989c:	1c71      	adds	r1, r6, #1
 800989e:	f04f 0900 	mov.w	r9, #0
 80098a2:	7808      	ldrb	r0, [r1, #0]
 80098a4:	f7ff ff70 	bl	8009788 <__hexdig_fun>
 80098a8:	1e43      	subs	r3, r0, #1
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b18      	cmp	r3, #24
 80098ae:	d82c      	bhi.n	800990a <__gethex+0x156>
 80098b0:	f1a0 0210 	sub.w	r2, r0, #16
 80098b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80098b8:	f7ff ff66 	bl	8009788 <__hexdig_fun>
 80098bc:	1e43      	subs	r3, r0, #1
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b18      	cmp	r3, #24
 80098c2:	d91d      	bls.n	8009900 <__gethex+0x14c>
 80098c4:	f1b9 0f00 	cmp.w	r9, #0
 80098c8:	d000      	beq.n	80098cc <__gethex+0x118>
 80098ca:	4252      	negs	r2, r2
 80098cc:	4415      	add	r5, r2
 80098ce:	f8cb 1000 	str.w	r1, [fp]
 80098d2:	b1e4      	cbz	r4, 800990e <__gethex+0x15a>
 80098d4:	9b00      	ldr	r3, [sp, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	bf14      	ite	ne
 80098da:	2700      	movne	r7, #0
 80098dc:	2706      	moveq	r7, #6
 80098de:	4638      	mov	r0, r7
 80098e0:	b009      	add	sp, #36	; 0x24
 80098e2:	ecbd 8b02 	vpop	{d8}
 80098e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ea:	463e      	mov	r6, r7
 80098ec:	4625      	mov	r5, r4
 80098ee:	2401      	movs	r4, #1
 80098f0:	e7ca      	b.n	8009888 <__gethex+0xd4>
 80098f2:	f04f 0900 	mov.w	r9, #0
 80098f6:	1cb1      	adds	r1, r6, #2
 80098f8:	e7d3      	b.n	80098a2 <__gethex+0xee>
 80098fa:	f04f 0901 	mov.w	r9, #1
 80098fe:	e7fa      	b.n	80098f6 <__gethex+0x142>
 8009900:	230a      	movs	r3, #10
 8009902:	fb03 0202 	mla	r2, r3, r2, r0
 8009906:	3a10      	subs	r2, #16
 8009908:	e7d4      	b.n	80098b4 <__gethex+0x100>
 800990a:	4631      	mov	r1, r6
 800990c:	e7df      	b.n	80098ce <__gethex+0x11a>
 800990e:	1bf3      	subs	r3, r6, r7
 8009910:	3b01      	subs	r3, #1
 8009912:	4621      	mov	r1, r4
 8009914:	2b07      	cmp	r3, #7
 8009916:	dc0b      	bgt.n	8009930 <__gethex+0x17c>
 8009918:	ee18 0a10 	vmov	r0, s16
 800991c:	f000 fa7e 	bl	8009e1c <_Balloc>
 8009920:	4604      	mov	r4, r0
 8009922:	b940      	cbnz	r0, 8009936 <__gethex+0x182>
 8009924:	4b5d      	ldr	r3, [pc, #372]	; (8009a9c <__gethex+0x2e8>)
 8009926:	4602      	mov	r2, r0
 8009928:	21de      	movs	r1, #222	; 0xde
 800992a:	485d      	ldr	r0, [pc, #372]	; (8009aa0 <__gethex+0x2ec>)
 800992c:	f001 f9c6 	bl	800acbc <__assert_func>
 8009930:	3101      	adds	r1, #1
 8009932:	105b      	asrs	r3, r3, #1
 8009934:	e7ee      	b.n	8009914 <__gethex+0x160>
 8009936:	f100 0914 	add.w	r9, r0, #20
 800993a:	f04f 0b00 	mov.w	fp, #0
 800993e:	f1ca 0301 	rsb	r3, sl, #1
 8009942:	f8cd 9008 	str.w	r9, [sp, #8]
 8009946:	f8cd b000 	str.w	fp, [sp]
 800994a:	9306      	str	r3, [sp, #24]
 800994c:	42b7      	cmp	r7, r6
 800994e:	d340      	bcc.n	80099d2 <__gethex+0x21e>
 8009950:	9802      	ldr	r0, [sp, #8]
 8009952:	9b00      	ldr	r3, [sp, #0]
 8009954:	f840 3b04 	str.w	r3, [r0], #4
 8009958:	eba0 0009 	sub.w	r0, r0, r9
 800995c:	1080      	asrs	r0, r0, #2
 800995e:	0146      	lsls	r6, r0, #5
 8009960:	6120      	str	r0, [r4, #16]
 8009962:	4618      	mov	r0, r3
 8009964:	f000 fb4c 	bl	800a000 <__hi0bits>
 8009968:	1a30      	subs	r0, r6, r0
 800996a:	f8d8 6000 	ldr.w	r6, [r8]
 800996e:	42b0      	cmp	r0, r6
 8009970:	dd63      	ble.n	8009a3a <__gethex+0x286>
 8009972:	1b87      	subs	r7, r0, r6
 8009974:	4639      	mov	r1, r7
 8009976:	4620      	mov	r0, r4
 8009978:	f000 fef0 	bl	800a75c <__any_on>
 800997c:	4682      	mov	sl, r0
 800997e:	b1a8      	cbz	r0, 80099ac <__gethex+0x1f8>
 8009980:	1e7b      	subs	r3, r7, #1
 8009982:	1159      	asrs	r1, r3, #5
 8009984:	f003 021f 	and.w	r2, r3, #31
 8009988:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800998c:	f04f 0a01 	mov.w	sl, #1
 8009990:	fa0a f202 	lsl.w	r2, sl, r2
 8009994:	420a      	tst	r2, r1
 8009996:	d009      	beq.n	80099ac <__gethex+0x1f8>
 8009998:	4553      	cmp	r3, sl
 800999a:	dd05      	ble.n	80099a8 <__gethex+0x1f4>
 800999c:	1eb9      	subs	r1, r7, #2
 800999e:	4620      	mov	r0, r4
 80099a0:	f000 fedc 	bl	800a75c <__any_on>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d145      	bne.n	8009a34 <__gethex+0x280>
 80099a8:	f04f 0a02 	mov.w	sl, #2
 80099ac:	4639      	mov	r1, r7
 80099ae:	4620      	mov	r0, r4
 80099b0:	f7ff fe98 	bl	80096e4 <rshift>
 80099b4:	443d      	add	r5, r7
 80099b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099ba:	42ab      	cmp	r3, r5
 80099bc:	da4c      	bge.n	8009a58 <__gethex+0x2a4>
 80099be:	ee18 0a10 	vmov	r0, s16
 80099c2:	4621      	mov	r1, r4
 80099c4:	f000 fa6a 	bl	8009e9c <_Bfree>
 80099c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80099ca:	2300      	movs	r3, #0
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	27a3      	movs	r7, #163	; 0xa3
 80099d0:	e785      	b.n	80098de <__gethex+0x12a>
 80099d2:	1e73      	subs	r3, r6, #1
 80099d4:	9a05      	ldr	r2, [sp, #20]
 80099d6:	9303      	str	r3, [sp, #12]
 80099d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099dc:	4293      	cmp	r3, r2
 80099de:	d019      	beq.n	8009a14 <__gethex+0x260>
 80099e0:	f1bb 0f20 	cmp.w	fp, #32
 80099e4:	d107      	bne.n	80099f6 <__gethex+0x242>
 80099e6:	9b02      	ldr	r3, [sp, #8]
 80099e8:	9a00      	ldr	r2, [sp, #0]
 80099ea:	f843 2b04 	str.w	r2, [r3], #4
 80099ee:	9302      	str	r3, [sp, #8]
 80099f0:	2300      	movs	r3, #0
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	469b      	mov	fp, r3
 80099f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80099fa:	f7ff fec5 	bl	8009788 <__hexdig_fun>
 80099fe:	9b00      	ldr	r3, [sp, #0]
 8009a00:	f000 000f 	and.w	r0, r0, #15
 8009a04:	fa00 f00b 	lsl.w	r0, r0, fp
 8009a08:	4303      	orrs	r3, r0
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	f10b 0b04 	add.w	fp, fp, #4
 8009a10:	9b03      	ldr	r3, [sp, #12]
 8009a12:	e00d      	b.n	8009a30 <__gethex+0x27c>
 8009a14:	9b03      	ldr	r3, [sp, #12]
 8009a16:	9a06      	ldr	r2, [sp, #24]
 8009a18:	4413      	add	r3, r2
 8009a1a:	42bb      	cmp	r3, r7
 8009a1c:	d3e0      	bcc.n	80099e0 <__gethex+0x22c>
 8009a1e:	4618      	mov	r0, r3
 8009a20:	9901      	ldr	r1, [sp, #4]
 8009a22:	9307      	str	r3, [sp, #28]
 8009a24:	4652      	mov	r2, sl
 8009a26:	f001 f927 	bl	800ac78 <strncmp>
 8009a2a:	9b07      	ldr	r3, [sp, #28]
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d1d7      	bne.n	80099e0 <__gethex+0x22c>
 8009a30:	461e      	mov	r6, r3
 8009a32:	e78b      	b.n	800994c <__gethex+0x198>
 8009a34:	f04f 0a03 	mov.w	sl, #3
 8009a38:	e7b8      	b.n	80099ac <__gethex+0x1f8>
 8009a3a:	da0a      	bge.n	8009a52 <__gethex+0x29e>
 8009a3c:	1a37      	subs	r7, r6, r0
 8009a3e:	4621      	mov	r1, r4
 8009a40:	ee18 0a10 	vmov	r0, s16
 8009a44:	463a      	mov	r2, r7
 8009a46:	f000 fc45 	bl	800a2d4 <__lshift>
 8009a4a:	1bed      	subs	r5, r5, r7
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	f100 0914 	add.w	r9, r0, #20
 8009a52:	f04f 0a00 	mov.w	sl, #0
 8009a56:	e7ae      	b.n	80099b6 <__gethex+0x202>
 8009a58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009a5c:	42a8      	cmp	r0, r5
 8009a5e:	dd72      	ble.n	8009b46 <__gethex+0x392>
 8009a60:	1b45      	subs	r5, r0, r5
 8009a62:	42ae      	cmp	r6, r5
 8009a64:	dc36      	bgt.n	8009ad4 <__gethex+0x320>
 8009a66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d02a      	beq.n	8009ac4 <__gethex+0x310>
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d02c      	beq.n	8009acc <__gethex+0x318>
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d11c      	bne.n	8009ab0 <__gethex+0x2fc>
 8009a76:	42ae      	cmp	r6, r5
 8009a78:	d11a      	bne.n	8009ab0 <__gethex+0x2fc>
 8009a7a:	2e01      	cmp	r6, #1
 8009a7c:	d112      	bne.n	8009aa4 <__gethex+0x2f0>
 8009a7e:	9a04      	ldr	r2, [sp, #16]
 8009a80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	2301      	movs	r3, #1
 8009a88:	6123      	str	r3, [r4, #16]
 8009a8a:	f8c9 3000 	str.w	r3, [r9]
 8009a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a90:	2762      	movs	r7, #98	; 0x62
 8009a92:	601c      	str	r4, [r3, #0]
 8009a94:	e723      	b.n	80098de <__gethex+0x12a>
 8009a96:	bf00      	nop
 8009a98:	0800bb28 	.word	0x0800bb28
 8009a9c:	0800bab0 	.word	0x0800bab0
 8009aa0:	0800bac1 	.word	0x0800bac1
 8009aa4:	1e71      	subs	r1, r6, #1
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f000 fe58 	bl	800a75c <__any_on>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d1e6      	bne.n	8009a7e <__gethex+0x2ca>
 8009ab0:	ee18 0a10 	vmov	r0, s16
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	f000 f9f1 	bl	8009e9c <_Bfree>
 8009aba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009abc:	2300      	movs	r3, #0
 8009abe:	6013      	str	r3, [r2, #0]
 8009ac0:	2750      	movs	r7, #80	; 0x50
 8009ac2:	e70c      	b.n	80098de <__gethex+0x12a>
 8009ac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1f2      	bne.n	8009ab0 <__gethex+0x2fc>
 8009aca:	e7d8      	b.n	8009a7e <__gethex+0x2ca>
 8009acc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1d5      	bne.n	8009a7e <__gethex+0x2ca>
 8009ad2:	e7ed      	b.n	8009ab0 <__gethex+0x2fc>
 8009ad4:	1e6f      	subs	r7, r5, #1
 8009ad6:	f1ba 0f00 	cmp.w	sl, #0
 8009ada:	d131      	bne.n	8009b40 <__gethex+0x38c>
 8009adc:	b127      	cbz	r7, 8009ae8 <__gethex+0x334>
 8009ade:	4639      	mov	r1, r7
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 fe3b 	bl	800a75c <__any_on>
 8009ae6:	4682      	mov	sl, r0
 8009ae8:	117b      	asrs	r3, r7, #5
 8009aea:	2101      	movs	r1, #1
 8009aec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009af0:	f007 071f 	and.w	r7, r7, #31
 8009af4:	fa01 f707 	lsl.w	r7, r1, r7
 8009af8:	421f      	tst	r7, r3
 8009afa:	4629      	mov	r1, r5
 8009afc:	4620      	mov	r0, r4
 8009afe:	bf18      	it	ne
 8009b00:	f04a 0a02 	orrne.w	sl, sl, #2
 8009b04:	1b76      	subs	r6, r6, r5
 8009b06:	f7ff fded 	bl	80096e4 <rshift>
 8009b0a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009b0e:	2702      	movs	r7, #2
 8009b10:	f1ba 0f00 	cmp.w	sl, #0
 8009b14:	d048      	beq.n	8009ba8 <__gethex+0x3f4>
 8009b16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d015      	beq.n	8009b4a <__gethex+0x396>
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d017      	beq.n	8009b52 <__gethex+0x39e>
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d109      	bne.n	8009b3a <__gethex+0x386>
 8009b26:	f01a 0f02 	tst.w	sl, #2
 8009b2a:	d006      	beq.n	8009b3a <__gethex+0x386>
 8009b2c:	f8d9 0000 	ldr.w	r0, [r9]
 8009b30:	ea4a 0a00 	orr.w	sl, sl, r0
 8009b34:	f01a 0f01 	tst.w	sl, #1
 8009b38:	d10e      	bne.n	8009b58 <__gethex+0x3a4>
 8009b3a:	f047 0710 	orr.w	r7, r7, #16
 8009b3e:	e033      	b.n	8009ba8 <__gethex+0x3f4>
 8009b40:	f04f 0a01 	mov.w	sl, #1
 8009b44:	e7d0      	b.n	8009ae8 <__gethex+0x334>
 8009b46:	2701      	movs	r7, #1
 8009b48:	e7e2      	b.n	8009b10 <__gethex+0x35c>
 8009b4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b4c:	f1c3 0301 	rsb	r3, r3, #1
 8009b50:	9315      	str	r3, [sp, #84]	; 0x54
 8009b52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d0f0      	beq.n	8009b3a <__gethex+0x386>
 8009b58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b5c:	f104 0314 	add.w	r3, r4, #20
 8009b60:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b64:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b68:	f04f 0c00 	mov.w	ip, #0
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b72:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b76:	d01c      	beq.n	8009bb2 <__gethex+0x3fe>
 8009b78:	3201      	adds	r2, #1
 8009b7a:	6002      	str	r2, [r0, #0]
 8009b7c:	2f02      	cmp	r7, #2
 8009b7e:	f104 0314 	add.w	r3, r4, #20
 8009b82:	d13f      	bne.n	8009c04 <__gethex+0x450>
 8009b84:	f8d8 2000 	ldr.w	r2, [r8]
 8009b88:	3a01      	subs	r2, #1
 8009b8a:	42b2      	cmp	r2, r6
 8009b8c:	d10a      	bne.n	8009ba4 <__gethex+0x3f0>
 8009b8e:	1171      	asrs	r1, r6, #5
 8009b90:	2201      	movs	r2, #1
 8009b92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b96:	f006 061f 	and.w	r6, r6, #31
 8009b9a:	fa02 f606 	lsl.w	r6, r2, r6
 8009b9e:	421e      	tst	r6, r3
 8009ba0:	bf18      	it	ne
 8009ba2:	4617      	movne	r7, r2
 8009ba4:	f047 0720 	orr.w	r7, r7, #32
 8009ba8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009baa:	601c      	str	r4, [r3, #0]
 8009bac:	9b04      	ldr	r3, [sp, #16]
 8009bae:	601d      	str	r5, [r3, #0]
 8009bb0:	e695      	b.n	80098de <__gethex+0x12a>
 8009bb2:	4299      	cmp	r1, r3
 8009bb4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009bb8:	d8d8      	bhi.n	8009b6c <__gethex+0x3b8>
 8009bba:	68a3      	ldr	r3, [r4, #8]
 8009bbc:	459b      	cmp	fp, r3
 8009bbe:	db19      	blt.n	8009bf4 <__gethex+0x440>
 8009bc0:	6861      	ldr	r1, [r4, #4]
 8009bc2:	ee18 0a10 	vmov	r0, s16
 8009bc6:	3101      	adds	r1, #1
 8009bc8:	f000 f928 	bl	8009e1c <_Balloc>
 8009bcc:	4681      	mov	r9, r0
 8009bce:	b918      	cbnz	r0, 8009bd8 <__gethex+0x424>
 8009bd0:	4b1a      	ldr	r3, [pc, #104]	; (8009c3c <__gethex+0x488>)
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	2184      	movs	r1, #132	; 0x84
 8009bd6:	e6a8      	b.n	800992a <__gethex+0x176>
 8009bd8:	6922      	ldr	r2, [r4, #16]
 8009bda:	3202      	adds	r2, #2
 8009bdc:	f104 010c 	add.w	r1, r4, #12
 8009be0:	0092      	lsls	r2, r2, #2
 8009be2:	300c      	adds	r0, #12
 8009be4:	f000 f90c 	bl	8009e00 <memcpy>
 8009be8:	4621      	mov	r1, r4
 8009bea:	ee18 0a10 	vmov	r0, s16
 8009bee:	f000 f955 	bl	8009e9c <_Bfree>
 8009bf2:	464c      	mov	r4, r9
 8009bf4:	6923      	ldr	r3, [r4, #16]
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bfc:	6122      	str	r2, [r4, #16]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	615a      	str	r2, [r3, #20]
 8009c02:	e7bb      	b.n	8009b7c <__gethex+0x3c8>
 8009c04:	6922      	ldr	r2, [r4, #16]
 8009c06:	455a      	cmp	r2, fp
 8009c08:	dd0b      	ble.n	8009c22 <__gethex+0x46e>
 8009c0a:	2101      	movs	r1, #1
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f7ff fd69 	bl	80096e4 <rshift>
 8009c12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c16:	3501      	adds	r5, #1
 8009c18:	42ab      	cmp	r3, r5
 8009c1a:	f6ff aed0 	blt.w	80099be <__gethex+0x20a>
 8009c1e:	2701      	movs	r7, #1
 8009c20:	e7c0      	b.n	8009ba4 <__gethex+0x3f0>
 8009c22:	f016 061f 	ands.w	r6, r6, #31
 8009c26:	d0fa      	beq.n	8009c1e <__gethex+0x46a>
 8009c28:	4453      	add	r3, sl
 8009c2a:	f1c6 0620 	rsb	r6, r6, #32
 8009c2e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009c32:	f000 f9e5 	bl	800a000 <__hi0bits>
 8009c36:	42b0      	cmp	r0, r6
 8009c38:	dbe7      	blt.n	8009c0a <__gethex+0x456>
 8009c3a:	e7f0      	b.n	8009c1e <__gethex+0x46a>
 8009c3c:	0800bab0 	.word	0x0800bab0

08009c40 <L_shift>:
 8009c40:	f1c2 0208 	rsb	r2, r2, #8
 8009c44:	0092      	lsls	r2, r2, #2
 8009c46:	b570      	push	{r4, r5, r6, lr}
 8009c48:	f1c2 0620 	rsb	r6, r2, #32
 8009c4c:	6843      	ldr	r3, [r0, #4]
 8009c4e:	6804      	ldr	r4, [r0, #0]
 8009c50:	fa03 f506 	lsl.w	r5, r3, r6
 8009c54:	432c      	orrs	r4, r5
 8009c56:	40d3      	lsrs	r3, r2
 8009c58:	6004      	str	r4, [r0, #0]
 8009c5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c5e:	4288      	cmp	r0, r1
 8009c60:	d3f4      	bcc.n	8009c4c <L_shift+0xc>
 8009c62:	bd70      	pop	{r4, r5, r6, pc}

08009c64 <__match>:
 8009c64:	b530      	push	{r4, r5, lr}
 8009c66:	6803      	ldr	r3, [r0, #0]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c6e:	b914      	cbnz	r4, 8009c76 <__match+0x12>
 8009c70:	6003      	str	r3, [r0, #0]
 8009c72:	2001      	movs	r0, #1
 8009c74:	bd30      	pop	{r4, r5, pc}
 8009c76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009c7e:	2d19      	cmp	r5, #25
 8009c80:	bf98      	it	ls
 8009c82:	3220      	addls	r2, #32
 8009c84:	42a2      	cmp	r2, r4
 8009c86:	d0f0      	beq.n	8009c6a <__match+0x6>
 8009c88:	2000      	movs	r0, #0
 8009c8a:	e7f3      	b.n	8009c74 <__match+0x10>

08009c8c <__hexnan>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	680b      	ldr	r3, [r1, #0]
 8009c92:	115e      	asrs	r6, r3, #5
 8009c94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c98:	f013 031f 	ands.w	r3, r3, #31
 8009c9c:	b087      	sub	sp, #28
 8009c9e:	bf18      	it	ne
 8009ca0:	3604      	addne	r6, #4
 8009ca2:	2500      	movs	r5, #0
 8009ca4:	1f37      	subs	r7, r6, #4
 8009ca6:	4690      	mov	r8, r2
 8009ca8:	6802      	ldr	r2, [r0, #0]
 8009caa:	9301      	str	r3, [sp, #4]
 8009cac:	4682      	mov	sl, r0
 8009cae:	f846 5c04 	str.w	r5, [r6, #-4]
 8009cb2:	46b9      	mov	r9, r7
 8009cb4:	463c      	mov	r4, r7
 8009cb6:	9502      	str	r5, [sp, #8]
 8009cb8:	46ab      	mov	fp, r5
 8009cba:	7851      	ldrb	r1, [r2, #1]
 8009cbc:	1c53      	adds	r3, r2, #1
 8009cbe:	9303      	str	r3, [sp, #12]
 8009cc0:	b341      	cbz	r1, 8009d14 <__hexnan+0x88>
 8009cc2:	4608      	mov	r0, r1
 8009cc4:	9205      	str	r2, [sp, #20]
 8009cc6:	9104      	str	r1, [sp, #16]
 8009cc8:	f7ff fd5e 	bl	8009788 <__hexdig_fun>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d14f      	bne.n	8009d70 <__hexnan+0xe4>
 8009cd0:	9904      	ldr	r1, [sp, #16]
 8009cd2:	9a05      	ldr	r2, [sp, #20]
 8009cd4:	2920      	cmp	r1, #32
 8009cd6:	d818      	bhi.n	8009d0a <__hexnan+0x7e>
 8009cd8:	9b02      	ldr	r3, [sp, #8]
 8009cda:	459b      	cmp	fp, r3
 8009cdc:	dd13      	ble.n	8009d06 <__hexnan+0x7a>
 8009cde:	454c      	cmp	r4, r9
 8009ce0:	d206      	bcs.n	8009cf0 <__hexnan+0x64>
 8009ce2:	2d07      	cmp	r5, #7
 8009ce4:	dc04      	bgt.n	8009cf0 <__hexnan+0x64>
 8009ce6:	462a      	mov	r2, r5
 8009ce8:	4649      	mov	r1, r9
 8009cea:	4620      	mov	r0, r4
 8009cec:	f7ff ffa8 	bl	8009c40 <L_shift>
 8009cf0:	4544      	cmp	r4, r8
 8009cf2:	d950      	bls.n	8009d96 <__hexnan+0x10a>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f1a4 0904 	sub.w	r9, r4, #4
 8009cfa:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cfe:	f8cd b008 	str.w	fp, [sp, #8]
 8009d02:	464c      	mov	r4, r9
 8009d04:	461d      	mov	r5, r3
 8009d06:	9a03      	ldr	r2, [sp, #12]
 8009d08:	e7d7      	b.n	8009cba <__hexnan+0x2e>
 8009d0a:	2929      	cmp	r1, #41	; 0x29
 8009d0c:	d156      	bne.n	8009dbc <__hexnan+0x130>
 8009d0e:	3202      	adds	r2, #2
 8009d10:	f8ca 2000 	str.w	r2, [sl]
 8009d14:	f1bb 0f00 	cmp.w	fp, #0
 8009d18:	d050      	beq.n	8009dbc <__hexnan+0x130>
 8009d1a:	454c      	cmp	r4, r9
 8009d1c:	d206      	bcs.n	8009d2c <__hexnan+0xa0>
 8009d1e:	2d07      	cmp	r5, #7
 8009d20:	dc04      	bgt.n	8009d2c <__hexnan+0xa0>
 8009d22:	462a      	mov	r2, r5
 8009d24:	4649      	mov	r1, r9
 8009d26:	4620      	mov	r0, r4
 8009d28:	f7ff ff8a 	bl	8009c40 <L_shift>
 8009d2c:	4544      	cmp	r4, r8
 8009d2e:	d934      	bls.n	8009d9a <__hexnan+0x10e>
 8009d30:	f1a8 0204 	sub.w	r2, r8, #4
 8009d34:	4623      	mov	r3, r4
 8009d36:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d3a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d3e:	429f      	cmp	r7, r3
 8009d40:	d2f9      	bcs.n	8009d36 <__hexnan+0xaa>
 8009d42:	1b3b      	subs	r3, r7, r4
 8009d44:	f023 0303 	bic.w	r3, r3, #3
 8009d48:	3304      	adds	r3, #4
 8009d4a:	3401      	adds	r4, #1
 8009d4c:	3e03      	subs	r6, #3
 8009d4e:	42b4      	cmp	r4, r6
 8009d50:	bf88      	it	hi
 8009d52:	2304      	movhi	r3, #4
 8009d54:	4443      	add	r3, r8
 8009d56:	2200      	movs	r2, #0
 8009d58:	f843 2b04 	str.w	r2, [r3], #4
 8009d5c:	429f      	cmp	r7, r3
 8009d5e:	d2fb      	bcs.n	8009d58 <__hexnan+0xcc>
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	b91b      	cbnz	r3, 8009d6c <__hexnan+0xe0>
 8009d64:	4547      	cmp	r7, r8
 8009d66:	d127      	bne.n	8009db8 <__hexnan+0x12c>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	603b      	str	r3, [r7, #0]
 8009d6c:	2005      	movs	r0, #5
 8009d6e:	e026      	b.n	8009dbe <__hexnan+0x132>
 8009d70:	3501      	adds	r5, #1
 8009d72:	2d08      	cmp	r5, #8
 8009d74:	f10b 0b01 	add.w	fp, fp, #1
 8009d78:	dd06      	ble.n	8009d88 <__hexnan+0xfc>
 8009d7a:	4544      	cmp	r4, r8
 8009d7c:	d9c3      	bls.n	8009d06 <__hexnan+0x7a>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d84:	2501      	movs	r5, #1
 8009d86:	3c04      	subs	r4, #4
 8009d88:	6822      	ldr	r2, [r4, #0]
 8009d8a:	f000 000f 	and.w	r0, r0, #15
 8009d8e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009d92:	6022      	str	r2, [r4, #0]
 8009d94:	e7b7      	b.n	8009d06 <__hexnan+0x7a>
 8009d96:	2508      	movs	r5, #8
 8009d98:	e7b5      	b.n	8009d06 <__hexnan+0x7a>
 8009d9a:	9b01      	ldr	r3, [sp, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d0df      	beq.n	8009d60 <__hexnan+0xd4>
 8009da0:	f04f 32ff 	mov.w	r2, #4294967295
 8009da4:	f1c3 0320 	rsb	r3, r3, #32
 8009da8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009db0:	401a      	ands	r2, r3
 8009db2:	f846 2c04 	str.w	r2, [r6, #-4]
 8009db6:	e7d3      	b.n	8009d60 <__hexnan+0xd4>
 8009db8:	3f04      	subs	r7, #4
 8009dba:	e7d1      	b.n	8009d60 <__hexnan+0xd4>
 8009dbc:	2004      	movs	r0, #4
 8009dbe:	b007      	add	sp, #28
 8009dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009dc4 <_localeconv_r>:
 8009dc4:	4800      	ldr	r0, [pc, #0]	; (8009dc8 <_localeconv_r+0x4>)
 8009dc6:	4770      	bx	lr
 8009dc8:	20000174 	.word	0x20000174

08009dcc <malloc>:
 8009dcc:	4b02      	ldr	r3, [pc, #8]	; (8009dd8 <malloc+0xc>)
 8009dce:	4601      	mov	r1, r0
 8009dd0:	6818      	ldr	r0, [r3, #0]
 8009dd2:	f000 bd67 	b.w	800a8a4 <_malloc_r>
 8009dd6:	bf00      	nop
 8009dd8:	2000001c 	.word	0x2000001c

08009ddc <__ascii_mbtowc>:
 8009ddc:	b082      	sub	sp, #8
 8009dde:	b901      	cbnz	r1, 8009de2 <__ascii_mbtowc+0x6>
 8009de0:	a901      	add	r1, sp, #4
 8009de2:	b142      	cbz	r2, 8009df6 <__ascii_mbtowc+0x1a>
 8009de4:	b14b      	cbz	r3, 8009dfa <__ascii_mbtowc+0x1e>
 8009de6:	7813      	ldrb	r3, [r2, #0]
 8009de8:	600b      	str	r3, [r1, #0]
 8009dea:	7812      	ldrb	r2, [r2, #0]
 8009dec:	1e10      	subs	r0, r2, #0
 8009dee:	bf18      	it	ne
 8009df0:	2001      	movne	r0, #1
 8009df2:	b002      	add	sp, #8
 8009df4:	4770      	bx	lr
 8009df6:	4610      	mov	r0, r2
 8009df8:	e7fb      	b.n	8009df2 <__ascii_mbtowc+0x16>
 8009dfa:	f06f 0001 	mvn.w	r0, #1
 8009dfe:	e7f8      	b.n	8009df2 <__ascii_mbtowc+0x16>

08009e00 <memcpy>:
 8009e00:	440a      	add	r2, r1
 8009e02:	4291      	cmp	r1, r2
 8009e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e08:	d100      	bne.n	8009e0c <memcpy+0xc>
 8009e0a:	4770      	bx	lr
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e16:	4291      	cmp	r1, r2
 8009e18:	d1f9      	bne.n	8009e0e <memcpy+0xe>
 8009e1a:	bd10      	pop	{r4, pc}

08009e1c <_Balloc>:
 8009e1c:	b570      	push	{r4, r5, r6, lr}
 8009e1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e20:	4604      	mov	r4, r0
 8009e22:	460d      	mov	r5, r1
 8009e24:	b976      	cbnz	r6, 8009e44 <_Balloc+0x28>
 8009e26:	2010      	movs	r0, #16
 8009e28:	f7ff ffd0 	bl	8009dcc <malloc>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	6260      	str	r0, [r4, #36]	; 0x24
 8009e30:	b920      	cbnz	r0, 8009e3c <_Balloc+0x20>
 8009e32:	4b18      	ldr	r3, [pc, #96]	; (8009e94 <_Balloc+0x78>)
 8009e34:	4818      	ldr	r0, [pc, #96]	; (8009e98 <_Balloc+0x7c>)
 8009e36:	2166      	movs	r1, #102	; 0x66
 8009e38:	f000 ff40 	bl	800acbc <__assert_func>
 8009e3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e40:	6006      	str	r6, [r0, #0]
 8009e42:	60c6      	str	r6, [r0, #12]
 8009e44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e46:	68f3      	ldr	r3, [r6, #12]
 8009e48:	b183      	cbz	r3, 8009e6c <_Balloc+0x50>
 8009e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e52:	b9b8      	cbnz	r0, 8009e84 <_Balloc+0x68>
 8009e54:	2101      	movs	r1, #1
 8009e56:	fa01 f605 	lsl.w	r6, r1, r5
 8009e5a:	1d72      	adds	r2, r6, #5
 8009e5c:	0092      	lsls	r2, r2, #2
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f000 fc9d 	bl	800a79e <_calloc_r>
 8009e64:	b160      	cbz	r0, 8009e80 <_Balloc+0x64>
 8009e66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e6a:	e00e      	b.n	8009e8a <_Balloc+0x6e>
 8009e6c:	2221      	movs	r2, #33	; 0x21
 8009e6e:	2104      	movs	r1, #4
 8009e70:	4620      	mov	r0, r4
 8009e72:	f000 fc94 	bl	800a79e <_calloc_r>
 8009e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e78:	60f0      	str	r0, [r6, #12]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1e4      	bne.n	8009e4a <_Balloc+0x2e>
 8009e80:	2000      	movs	r0, #0
 8009e82:	bd70      	pop	{r4, r5, r6, pc}
 8009e84:	6802      	ldr	r2, [r0, #0]
 8009e86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e90:	e7f7      	b.n	8009e82 <_Balloc+0x66>
 8009e92:	bf00      	nop
 8009e94:	0800ba3e 	.word	0x0800ba3e
 8009e98:	0800bb3c 	.word	0x0800bb3c

08009e9c <_Bfree>:
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	b976      	cbnz	r6, 8009ec4 <_Bfree+0x28>
 8009ea6:	2010      	movs	r0, #16
 8009ea8:	f7ff ff90 	bl	8009dcc <malloc>
 8009eac:	4602      	mov	r2, r0
 8009eae:	6268      	str	r0, [r5, #36]	; 0x24
 8009eb0:	b920      	cbnz	r0, 8009ebc <_Bfree+0x20>
 8009eb2:	4b09      	ldr	r3, [pc, #36]	; (8009ed8 <_Bfree+0x3c>)
 8009eb4:	4809      	ldr	r0, [pc, #36]	; (8009edc <_Bfree+0x40>)
 8009eb6:	218a      	movs	r1, #138	; 0x8a
 8009eb8:	f000 ff00 	bl	800acbc <__assert_func>
 8009ebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ec0:	6006      	str	r6, [r0, #0]
 8009ec2:	60c6      	str	r6, [r0, #12]
 8009ec4:	b13c      	cbz	r4, 8009ed6 <_Bfree+0x3a>
 8009ec6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ec8:	6862      	ldr	r2, [r4, #4]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ed0:	6021      	str	r1, [r4, #0]
 8009ed2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
 8009ed8:	0800ba3e 	.word	0x0800ba3e
 8009edc:	0800bb3c 	.word	0x0800bb3c

08009ee0 <__multadd>:
 8009ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee4:	690d      	ldr	r5, [r1, #16]
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	460c      	mov	r4, r1
 8009eea:	461e      	mov	r6, r3
 8009eec:	f101 0c14 	add.w	ip, r1, #20
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	f8dc 3000 	ldr.w	r3, [ip]
 8009ef6:	b299      	uxth	r1, r3
 8009ef8:	fb02 6101 	mla	r1, r2, r1, r6
 8009efc:	0c1e      	lsrs	r6, r3, #16
 8009efe:	0c0b      	lsrs	r3, r1, #16
 8009f00:	fb02 3306 	mla	r3, r2, r6, r3
 8009f04:	b289      	uxth	r1, r1
 8009f06:	3001      	adds	r0, #1
 8009f08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f0c:	4285      	cmp	r5, r0
 8009f0e:	f84c 1b04 	str.w	r1, [ip], #4
 8009f12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f16:	dcec      	bgt.n	8009ef2 <__multadd+0x12>
 8009f18:	b30e      	cbz	r6, 8009f5e <__multadd+0x7e>
 8009f1a:	68a3      	ldr	r3, [r4, #8]
 8009f1c:	42ab      	cmp	r3, r5
 8009f1e:	dc19      	bgt.n	8009f54 <__multadd+0x74>
 8009f20:	6861      	ldr	r1, [r4, #4]
 8009f22:	4638      	mov	r0, r7
 8009f24:	3101      	adds	r1, #1
 8009f26:	f7ff ff79 	bl	8009e1c <_Balloc>
 8009f2a:	4680      	mov	r8, r0
 8009f2c:	b928      	cbnz	r0, 8009f3a <__multadd+0x5a>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	4b0c      	ldr	r3, [pc, #48]	; (8009f64 <__multadd+0x84>)
 8009f32:	480d      	ldr	r0, [pc, #52]	; (8009f68 <__multadd+0x88>)
 8009f34:	21b5      	movs	r1, #181	; 0xb5
 8009f36:	f000 fec1 	bl	800acbc <__assert_func>
 8009f3a:	6922      	ldr	r2, [r4, #16]
 8009f3c:	3202      	adds	r2, #2
 8009f3e:	f104 010c 	add.w	r1, r4, #12
 8009f42:	0092      	lsls	r2, r2, #2
 8009f44:	300c      	adds	r0, #12
 8009f46:	f7ff ff5b 	bl	8009e00 <memcpy>
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	f7ff ffa5 	bl	8009e9c <_Bfree>
 8009f52:	4644      	mov	r4, r8
 8009f54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f58:	3501      	adds	r5, #1
 8009f5a:	615e      	str	r6, [r3, #20]
 8009f5c:	6125      	str	r5, [r4, #16]
 8009f5e:	4620      	mov	r0, r4
 8009f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f64:	0800bab0 	.word	0x0800bab0
 8009f68:	0800bb3c 	.word	0x0800bb3c

08009f6c <__s2b>:
 8009f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f70:	460c      	mov	r4, r1
 8009f72:	4615      	mov	r5, r2
 8009f74:	461f      	mov	r7, r3
 8009f76:	2209      	movs	r2, #9
 8009f78:	3308      	adds	r3, #8
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f80:	2100      	movs	r1, #0
 8009f82:	2201      	movs	r2, #1
 8009f84:	429a      	cmp	r2, r3
 8009f86:	db09      	blt.n	8009f9c <__s2b+0x30>
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7ff ff47 	bl	8009e1c <_Balloc>
 8009f8e:	b940      	cbnz	r0, 8009fa2 <__s2b+0x36>
 8009f90:	4602      	mov	r2, r0
 8009f92:	4b19      	ldr	r3, [pc, #100]	; (8009ff8 <__s2b+0x8c>)
 8009f94:	4819      	ldr	r0, [pc, #100]	; (8009ffc <__s2b+0x90>)
 8009f96:	21ce      	movs	r1, #206	; 0xce
 8009f98:	f000 fe90 	bl	800acbc <__assert_func>
 8009f9c:	0052      	lsls	r2, r2, #1
 8009f9e:	3101      	adds	r1, #1
 8009fa0:	e7f0      	b.n	8009f84 <__s2b+0x18>
 8009fa2:	9b08      	ldr	r3, [sp, #32]
 8009fa4:	6143      	str	r3, [r0, #20]
 8009fa6:	2d09      	cmp	r5, #9
 8009fa8:	f04f 0301 	mov.w	r3, #1
 8009fac:	6103      	str	r3, [r0, #16]
 8009fae:	dd16      	ble.n	8009fde <__s2b+0x72>
 8009fb0:	f104 0909 	add.w	r9, r4, #9
 8009fb4:	46c8      	mov	r8, r9
 8009fb6:	442c      	add	r4, r5
 8009fb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009fbc:	4601      	mov	r1, r0
 8009fbe:	3b30      	subs	r3, #48	; 0x30
 8009fc0:	220a      	movs	r2, #10
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f7ff ff8c 	bl	8009ee0 <__multadd>
 8009fc8:	45a0      	cmp	r8, r4
 8009fca:	d1f5      	bne.n	8009fb8 <__s2b+0x4c>
 8009fcc:	f1a5 0408 	sub.w	r4, r5, #8
 8009fd0:	444c      	add	r4, r9
 8009fd2:	1b2d      	subs	r5, r5, r4
 8009fd4:	1963      	adds	r3, r4, r5
 8009fd6:	42bb      	cmp	r3, r7
 8009fd8:	db04      	blt.n	8009fe4 <__s2b+0x78>
 8009fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fde:	340a      	adds	r4, #10
 8009fe0:	2509      	movs	r5, #9
 8009fe2:	e7f6      	b.n	8009fd2 <__s2b+0x66>
 8009fe4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009fe8:	4601      	mov	r1, r0
 8009fea:	3b30      	subs	r3, #48	; 0x30
 8009fec:	220a      	movs	r2, #10
 8009fee:	4630      	mov	r0, r6
 8009ff0:	f7ff ff76 	bl	8009ee0 <__multadd>
 8009ff4:	e7ee      	b.n	8009fd4 <__s2b+0x68>
 8009ff6:	bf00      	nop
 8009ff8:	0800bab0 	.word	0x0800bab0
 8009ffc:	0800bb3c 	.word	0x0800bb3c

0800a000 <__hi0bits>:
 800a000:	0c03      	lsrs	r3, r0, #16
 800a002:	041b      	lsls	r3, r3, #16
 800a004:	b9d3      	cbnz	r3, 800a03c <__hi0bits+0x3c>
 800a006:	0400      	lsls	r0, r0, #16
 800a008:	2310      	movs	r3, #16
 800a00a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a00e:	bf04      	itt	eq
 800a010:	0200      	lsleq	r0, r0, #8
 800a012:	3308      	addeq	r3, #8
 800a014:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a018:	bf04      	itt	eq
 800a01a:	0100      	lsleq	r0, r0, #4
 800a01c:	3304      	addeq	r3, #4
 800a01e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a022:	bf04      	itt	eq
 800a024:	0080      	lsleq	r0, r0, #2
 800a026:	3302      	addeq	r3, #2
 800a028:	2800      	cmp	r0, #0
 800a02a:	db05      	blt.n	800a038 <__hi0bits+0x38>
 800a02c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a030:	f103 0301 	add.w	r3, r3, #1
 800a034:	bf08      	it	eq
 800a036:	2320      	moveq	r3, #32
 800a038:	4618      	mov	r0, r3
 800a03a:	4770      	bx	lr
 800a03c:	2300      	movs	r3, #0
 800a03e:	e7e4      	b.n	800a00a <__hi0bits+0xa>

0800a040 <__lo0bits>:
 800a040:	6803      	ldr	r3, [r0, #0]
 800a042:	f013 0207 	ands.w	r2, r3, #7
 800a046:	4601      	mov	r1, r0
 800a048:	d00b      	beq.n	800a062 <__lo0bits+0x22>
 800a04a:	07da      	lsls	r2, r3, #31
 800a04c:	d423      	bmi.n	800a096 <__lo0bits+0x56>
 800a04e:	0798      	lsls	r0, r3, #30
 800a050:	bf49      	itett	mi
 800a052:	085b      	lsrmi	r3, r3, #1
 800a054:	089b      	lsrpl	r3, r3, #2
 800a056:	2001      	movmi	r0, #1
 800a058:	600b      	strmi	r3, [r1, #0]
 800a05a:	bf5c      	itt	pl
 800a05c:	600b      	strpl	r3, [r1, #0]
 800a05e:	2002      	movpl	r0, #2
 800a060:	4770      	bx	lr
 800a062:	b298      	uxth	r0, r3
 800a064:	b9a8      	cbnz	r0, 800a092 <__lo0bits+0x52>
 800a066:	0c1b      	lsrs	r3, r3, #16
 800a068:	2010      	movs	r0, #16
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	b90a      	cbnz	r2, 800a072 <__lo0bits+0x32>
 800a06e:	3008      	adds	r0, #8
 800a070:	0a1b      	lsrs	r3, r3, #8
 800a072:	071a      	lsls	r2, r3, #28
 800a074:	bf04      	itt	eq
 800a076:	091b      	lsreq	r3, r3, #4
 800a078:	3004      	addeq	r0, #4
 800a07a:	079a      	lsls	r2, r3, #30
 800a07c:	bf04      	itt	eq
 800a07e:	089b      	lsreq	r3, r3, #2
 800a080:	3002      	addeq	r0, #2
 800a082:	07da      	lsls	r2, r3, #31
 800a084:	d403      	bmi.n	800a08e <__lo0bits+0x4e>
 800a086:	085b      	lsrs	r3, r3, #1
 800a088:	f100 0001 	add.w	r0, r0, #1
 800a08c:	d005      	beq.n	800a09a <__lo0bits+0x5a>
 800a08e:	600b      	str	r3, [r1, #0]
 800a090:	4770      	bx	lr
 800a092:	4610      	mov	r0, r2
 800a094:	e7e9      	b.n	800a06a <__lo0bits+0x2a>
 800a096:	2000      	movs	r0, #0
 800a098:	4770      	bx	lr
 800a09a:	2020      	movs	r0, #32
 800a09c:	4770      	bx	lr
	...

0800a0a0 <__i2b>:
 800a0a0:	b510      	push	{r4, lr}
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	f7ff feb9 	bl	8009e1c <_Balloc>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	b928      	cbnz	r0, 800a0ba <__i2b+0x1a>
 800a0ae:	4b05      	ldr	r3, [pc, #20]	; (800a0c4 <__i2b+0x24>)
 800a0b0:	4805      	ldr	r0, [pc, #20]	; (800a0c8 <__i2b+0x28>)
 800a0b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0b6:	f000 fe01 	bl	800acbc <__assert_func>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	6144      	str	r4, [r0, #20]
 800a0be:	6103      	str	r3, [r0, #16]
 800a0c0:	bd10      	pop	{r4, pc}
 800a0c2:	bf00      	nop
 800a0c4:	0800bab0 	.word	0x0800bab0
 800a0c8:	0800bb3c 	.word	0x0800bb3c

0800a0cc <__multiply>:
 800a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	4691      	mov	r9, r2
 800a0d2:	690a      	ldr	r2, [r1, #16]
 800a0d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	bfb8      	it	lt
 800a0dc:	460b      	movlt	r3, r1
 800a0de:	460c      	mov	r4, r1
 800a0e0:	bfbc      	itt	lt
 800a0e2:	464c      	movlt	r4, r9
 800a0e4:	4699      	movlt	r9, r3
 800a0e6:	6927      	ldr	r7, [r4, #16]
 800a0e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a0ec:	68a3      	ldr	r3, [r4, #8]
 800a0ee:	6861      	ldr	r1, [r4, #4]
 800a0f0:	eb07 060a 	add.w	r6, r7, sl
 800a0f4:	42b3      	cmp	r3, r6
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	bfb8      	it	lt
 800a0fa:	3101      	addlt	r1, #1
 800a0fc:	f7ff fe8e 	bl	8009e1c <_Balloc>
 800a100:	b930      	cbnz	r0, 800a110 <__multiply+0x44>
 800a102:	4602      	mov	r2, r0
 800a104:	4b44      	ldr	r3, [pc, #272]	; (800a218 <__multiply+0x14c>)
 800a106:	4845      	ldr	r0, [pc, #276]	; (800a21c <__multiply+0x150>)
 800a108:	f240 115d 	movw	r1, #349	; 0x15d
 800a10c:	f000 fdd6 	bl	800acbc <__assert_func>
 800a110:	f100 0514 	add.w	r5, r0, #20
 800a114:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a118:	462b      	mov	r3, r5
 800a11a:	2200      	movs	r2, #0
 800a11c:	4543      	cmp	r3, r8
 800a11e:	d321      	bcc.n	800a164 <__multiply+0x98>
 800a120:	f104 0314 	add.w	r3, r4, #20
 800a124:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a128:	f109 0314 	add.w	r3, r9, #20
 800a12c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a130:	9202      	str	r2, [sp, #8]
 800a132:	1b3a      	subs	r2, r7, r4
 800a134:	3a15      	subs	r2, #21
 800a136:	f022 0203 	bic.w	r2, r2, #3
 800a13a:	3204      	adds	r2, #4
 800a13c:	f104 0115 	add.w	r1, r4, #21
 800a140:	428f      	cmp	r7, r1
 800a142:	bf38      	it	cc
 800a144:	2204      	movcc	r2, #4
 800a146:	9201      	str	r2, [sp, #4]
 800a148:	9a02      	ldr	r2, [sp, #8]
 800a14a:	9303      	str	r3, [sp, #12]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d80c      	bhi.n	800a16a <__multiply+0x9e>
 800a150:	2e00      	cmp	r6, #0
 800a152:	dd03      	ble.n	800a15c <__multiply+0x90>
 800a154:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d05a      	beq.n	800a212 <__multiply+0x146>
 800a15c:	6106      	str	r6, [r0, #16]
 800a15e:	b005      	add	sp, #20
 800a160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a164:	f843 2b04 	str.w	r2, [r3], #4
 800a168:	e7d8      	b.n	800a11c <__multiply+0x50>
 800a16a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a16e:	f1ba 0f00 	cmp.w	sl, #0
 800a172:	d024      	beq.n	800a1be <__multiply+0xf2>
 800a174:	f104 0e14 	add.w	lr, r4, #20
 800a178:	46a9      	mov	r9, r5
 800a17a:	f04f 0c00 	mov.w	ip, #0
 800a17e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a182:	f8d9 1000 	ldr.w	r1, [r9]
 800a186:	fa1f fb82 	uxth.w	fp, r2
 800a18a:	b289      	uxth	r1, r1
 800a18c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a190:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a194:	f8d9 2000 	ldr.w	r2, [r9]
 800a198:	4461      	add	r1, ip
 800a19a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a19e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1a6:	b289      	uxth	r1, r1
 800a1a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1ac:	4577      	cmp	r7, lr
 800a1ae:	f849 1b04 	str.w	r1, [r9], #4
 800a1b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1b6:	d8e2      	bhi.n	800a17e <__multiply+0xb2>
 800a1b8:	9a01      	ldr	r2, [sp, #4]
 800a1ba:	f845 c002 	str.w	ip, [r5, r2]
 800a1be:	9a03      	ldr	r2, [sp, #12]
 800a1c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	f1b9 0f00 	cmp.w	r9, #0
 800a1ca:	d020      	beq.n	800a20e <__multiply+0x142>
 800a1cc:	6829      	ldr	r1, [r5, #0]
 800a1ce:	f104 0c14 	add.w	ip, r4, #20
 800a1d2:	46ae      	mov	lr, r5
 800a1d4:	f04f 0a00 	mov.w	sl, #0
 800a1d8:	f8bc b000 	ldrh.w	fp, [ip]
 800a1dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1e0:	fb09 220b 	mla	r2, r9, fp, r2
 800a1e4:	4492      	add	sl, r2
 800a1e6:	b289      	uxth	r1, r1
 800a1e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a1ec:	f84e 1b04 	str.w	r1, [lr], #4
 800a1f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a1f4:	f8be 1000 	ldrh.w	r1, [lr]
 800a1f8:	0c12      	lsrs	r2, r2, #16
 800a1fa:	fb09 1102 	mla	r1, r9, r2, r1
 800a1fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a202:	4567      	cmp	r7, ip
 800a204:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a208:	d8e6      	bhi.n	800a1d8 <__multiply+0x10c>
 800a20a:	9a01      	ldr	r2, [sp, #4]
 800a20c:	50a9      	str	r1, [r5, r2]
 800a20e:	3504      	adds	r5, #4
 800a210:	e79a      	b.n	800a148 <__multiply+0x7c>
 800a212:	3e01      	subs	r6, #1
 800a214:	e79c      	b.n	800a150 <__multiply+0x84>
 800a216:	bf00      	nop
 800a218:	0800bab0 	.word	0x0800bab0
 800a21c:	0800bb3c 	.word	0x0800bb3c

0800a220 <__pow5mult>:
 800a220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a224:	4615      	mov	r5, r2
 800a226:	f012 0203 	ands.w	r2, r2, #3
 800a22a:	4606      	mov	r6, r0
 800a22c:	460f      	mov	r7, r1
 800a22e:	d007      	beq.n	800a240 <__pow5mult+0x20>
 800a230:	4c25      	ldr	r4, [pc, #148]	; (800a2c8 <__pow5mult+0xa8>)
 800a232:	3a01      	subs	r2, #1
 800a234:	2300      	movs	r3, #0
 800a236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a23a:	f7ff fe51 	bl	8009ee0 <__multadd>
 800a23e:	4607      	mov	r7, r0
 800a240:	10ad      	asrs	r5, r5, #2
 800a242:	d03d      	beq.n	800a2c0 <__pow5mult+0xa0>
 800a244:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a246:	b97c      	cbnz	r4, 800a268 <__pow5mult+0x48>
 800a248:	2010      	movs	r0, #16
 800a24a:	f7ff fdbf 	bl	8009dcc <malloc>
 800a24e:	4602      	mov	r2, r0
 800a250:	6270      	str	r0, [r6, #36]	; 0x24
 800a252:	b928      	cbnz	r0, 800a260 <__pow5mult+0x40>
 800a254:	4b1d      	ldr	r3, [pc, #116]	; (800a2cc <__pow5mult+0xac>)
 800a256:	481e      	ldr	r0, [pc, #120]	; (800a2d0 <__pow5mult+0xb0>)
 800a258:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a25c:	f000 fd2e 	bl	800acbc <__assert_func>
 800a260:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a264:	6004      	str	r4, [r0, #0]
 800a266:	60c4      	str	r4, [r0, #12]
 800a268:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a26c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a270:	b94c      	cbnz	r4, 800a286 <__pow5mult+0x66>
 800a272:	f240 2171 	movw	r1, #625	; 0x271
 800a276:	4630      	mov	r0, r6
 800a278:	f7ff ff12 	bl	800a0a0 <__i2b>
 800a27c:	2300      	movs	r3, #0
 800a27e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a282:	4604      	mov	r4, r0
 800a284:	6003      	str	r3, [r0, #0]
 800a286:	f04f 0900 	mov.w	r9, #0
 800a28a:	07eb      	lsls	r3, r5, #31
 800a28c:	d50a      	bpl.n	800a2a4 <__pow5mult+0x84>
 800a28e:	4639      	mov	r1, r7
 800a290:	4622      	mov	r2, r4
 800a292:	4630      	mov	r0, r6
 800a294:	f7ff ff1a 	bl	800a0cc <__multiply>
 800a298:	4639      	mov	r1, r7
 800a29a:	4680      	mov	r8, r0
 800a29c:	4630      	mov	r0, r6
 800a29e:	f7ff fdfd 	bl	8009e9c <_Bfree>
 800a2a2:	4647      	mov	r7, r8
 800a2a4:	106d      	asrs	r5, r5, #1
 800a2a6:	d00b      	beq.n	800a2c0 <__pow5mult+0xa0>
 800a2a8:	6820      	ldr	r0, [r4, #0]
 800a2aa:	b938      	cbnz	r0, 800a2bc <__pow5mult+0x9c>
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f7ff ff0b 	bl	800a0cc <__multiply>
 800a2b6:	6020      	str	r0, [r4, #0]
 800a2b8:	f8c0 9000 	str.w	r9, [r0]
 800a2bc:	4604      	mov	r4, r0
 800a2be:	e7e4      	b.n	800a28a <__pow5mult+0x6a>
 800a2c0:	4638      	mov	r0, r7
 800a2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2c6:	bf00      	nop
 800a2c8:	0800bc88 	.word	0x0800bc88
 800a2cc:	0800ba3e 	.word	0x0800ba3e
 800a2d0:	0800bb3c 	.word	0x0800bb3c

0800a2d4 <__lshift>:
 800a2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d8:	460c      	mov	r4, r1
 800a2da:	6849      	ldr	r1, [r1, #4]
 800a2dc:	6923      	ldr	r3, [r4, #16]
 800a2de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2e2:	68a3      	ldr	r3, [r4, #8]
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	4691      	mov	r9, r2
 800a2e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2ec:	f108 0601 	add.w	r6, r8, #1
 800a2f0:	42b3      	cmp	r3, r6
 800a2f2:	db0b      	blt.n	800a30c <__lshift+0x38>
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	f7ff fd91 	bl	8009e1c <_Balloc>
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	b948      	cbnz	r0, 800a312 <__lshift+0x3e>
 800a2fe:	4602      	mov	r2, r0
 800a300:	4b2a      	ldr	r3, [pc, #168]	; (800a3ac <__lshift+0xd8>)
 800a302:	482b      	ldr	r0, [pc, #172]	; (800a3b0 <__lshift+0xdc>)
 800a304:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a308:	f000 fcd8 	bl	800acbc <__assert_func>
 800a30c:	3101      	adds	r1, #1
 800a30e:	005b      	lsls	r3, r3, #1
 800a310:	e7ee      	b.n	800a2f0 <__lshift+0x1c>
 800a312:	2300      	movs	r3, #0
 800a314:	f100 0114 	add.w	r1, r0, #20
 800a318:	f100 0210 	add.w	r2, r0, #16
 800a31c:	4618      	mov	r0, r3
 800a31e:	4553      	cmp	r3, sl
 800a320:	db37      	blt.n	800a392 <__lshift+0xbe>
 800a322:	6920      	ldr	r0, [r4, #16]
 800a324:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a328:	f104 0314 	add.w	r3, r4, #20
 800a32c:	f019 091f 	ands.w	r9, r9, #31
 800a330:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a334:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a338:	d02f      	beq.n	800a39a <__lshift+0xc6>
 800a33a:	f1c9 0e20 	rsb	lr, r9, #32
 800a33e:	468a      	mov	sl, r1
 800a340:	f04f 0c00 	mov.w	ip, #0
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	fa02 f209 	lsl.w	r2, r2, r9
 800a34a:	ea42 020c 	orr.w	r2, r2, ip
 800a34e:	f84a 2b04 	str.w	r2, [sl], #4
 800a352:	f853 2b04 	ldr.w	r2, [r3], #4
 800a356:	4298      	cmp	r0, r3
 800a358:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a35c:	d8f2      	bhi.n	800a344 <__lshift+0x70>
 800a35e:	1b03      	subs	r3, r0, r4
 800a360:	3b15      	subs	r3, #21
 800a362:	f023 0303 	bic.w	r3, r3, #3
 800a366:	3304      	adds	r3, #4
 800a368:	f104 0215 	add.w	r2, r4, #21
 800a36c:	4290      	cmp	r0, r2
 800a36e:	bf38      	it	cc
 800a370:	2304      	movcc	r3, #4
 800a372:	f841 c003 	str.w	ip, [r1, r3]
 800a376:	f1bc 0f00 	cmp.w	ip, #0
 800a37a:	d001      	beq.n	800a380 <__lshift+0xac>
 800a37c:	f108 0602 	add.w	r6, r8, #2
 800a380:	3e01      	subs	r6, #1
 800a382:	4638      	mov	r0, r7
 800a384:	612e      	str	r6, [r5, #16]
 800a386:	4621      	mov	r1, r4
 800a388:	f7ff fd88 	bl	8009e9c <_Bfree>
 800a38c:	4628      	mov	r0, r5
 800a38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a392:	f842 0f04 	str.w	r0, [r2, #4]!
 800a396:	3301      	adds	r3, #1
 800a398:	e7c1      	b.n	800a31e <__lshift+0x4a>
 800a39a:	3904      	subs	r1, #4
 800a39c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3a4:	4298      	cmp	r0, r3
 800a3a6:	d8f9      	bhi.n	800a39c <__lshift+0xc8>
 800a3a8:	e7ea      	b.n	800a380 <__lshift+0xac>
 800a3aa:	bf00      	nop
 800a3ac:	0800bab0 	.word	0x0800bab0
 800a3b0:	0800bb3c 	.word	0x0800bb3c

0800a3b4 <__mcmp>:
 800a3b4:	b530      	push	{r4, r5, lr}
 800a3b6:	6902      	ldr	r2, [r0, #16]
 800a3b8:	690c      	ldr	r4, [r1, #16]
 800a3ba:	1b12      	subs	r2, r2, r4
 800a3bc:	d10e      	bne.n	800a3dc <__mcmp+0x28>
 800a3be:	f100 0314 	add.w	r3, r0, #20
 800a3c2:	3114      	adds	r1, #20
 800a3c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3d4:	42a5      	cmp	r5, r4
 800a3d6:	d003      	beq.n	800a3e0 <__mcmp+0x2c>
 800a3d8:	d305      	bcc.n	800a3e6 <__mcmp+0x32>
 800a3da:	2201      	movs	r2, #1
 800a3dc:	4610      	mov	r0, r2
 800a3de:	bd30      	pop	{r4, r5, pc}
 800a3e0:	4283      	cmp	r3, r0
 800a3e2:	d3f3      	bcc.n	800a3cc <__mcmp+0x18>
 800a3e4:	e7fa      	b.n	800a3dc <__mcmp+0x28>
 800a3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ea:	e7f7      	b.n	800a3dc <__mcmp+0x28>

0800a3ec <__mdiff>:
 800a3ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	4690      	mov	r8, r2
 800a3fa:	f7ff ffdb 	bl	800a3b4 <__mcmp>
 800a3fe:	1e05      	subs	r5, r0, #0
 800a400:	d110      	bne.n	800a424 <__mdiff+0x38>
 800a402:	4629      	mov	r1, r5
 800a404:	4630      	mov	r0, r6
 800a406:	f7ff fd09 	bl	8009e1c <_Balloc>
 800a40a:	b930      	cbnz	r0, 800a41a <__mdiff+0x2e>
 800a40c:	4b3a      	ldr	r3, [pc, #232]	; (800a4f8 <__mdiff+0x10c>)
 800a40e:	4602      	mov	r2, r0
 800a410:	f240 2132 	movw	r1, #562	; 0x232
 800a414:	4839      	ldr	r0, [pc, #228]	; (800a4fc <__mdiff+0x110>)
 800a416:	f000 fc51 	bl	800acbc <__assert_func>
 800a41a:	2301      	movs	r3, #1
 800a41c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a424:	bfa4      	itt	ge
 800a426:	4643      	movge	r3, r8
 800a428:	46a0      	movge	r8, r4
 800a42a:	4630      	mov	r0, r6
 800a42c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a430:	bfa6      	itte	ge
 800a432:	461c      	movge	r4, r3
 800a434:	2500      	movge	r5, #0
 800a436:	2501      	movlt	r5, #1
 800a438:	f7ff fcf0 	bl	8009e1c <_Balloc>
 800a43c:	b920      	cbnz	r0, 800a448 <__mdiff+0x5c>
 800a43e:	4b2e      	ldr	r3, [pc, #184]	; (800a4f8 <__mdiff+0x10c>)
 800a440:	4602      	mov	r2, r0
 800a442:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a446:	e7e5      	b.n	800a414 <__mdiff+0x28>
 800a448:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a44c:	6926      	ldr	r6, [r4, #16]
 800a44e:	60c5      	str	r5, [r0, #12]
 800a450:	f104 0914 	add.w	r9, r4, #20
 800a454:	f108 0514 	add.w	r5, r8, #20
 800a458:	f100 0e14 	add.w	lr, r0, #20
 800a45c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a460:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a464:	f108 0210 	add.w	r2, r8, #16
 800a468:	46f2      	mov	sl, lr
 800a46a:	2100      	movs	r1, #0
 800a46c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a470:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a474:	fa1f f883 	uxth.w	r8, r3
 800a478:	fa11 f18b 	uxtah	r1, r1, fp
 800a47c:	0c1b      	lsrs	r3, r3, #16
 800a47e:	eba1 0808 	sub.w	r8, r1, r8
 800a482:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a486:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a48a:	fa1f f888 	uxth.w	r8, r8
 800a48e:	1419      	asrs	r1, r3, #16
 800a490:	454e      	cmp	r6, r9
 800a492:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a496:	f84a 3b04 	str.w	r3, [sl], #4
 800a49a:	d8e7      	bhi.n	800a46c <__mdiff+0x80>
 800a49c:	1b33      	subs	r3, r6, r4
 800a49e:	3b15      	subs	r3, #21
 800a4a0:	f023 0303 	bic.w	r3, r3, #3
 800a4a4:	3304      	adds	r3, #4
 800a4a6:	3415      	adds	r4, #21
 800a4a8:	42a6      	cmp	r6, r4
 800a4aa:	bf38      	it	cc
 800a4ac:	2304      	movcc	r3, #4
 800a4ae:	441d      	add	r5, r3
 800a4b0:	4473      	add	r3, lr
 800a4b2:	469e      	mov	lr, r3
 800a4b4:	462e      	mov	r6, r5
 800a4b6:	4566      	cmp	r6, ip
 800a4b8:	d30e      	bcc.n	800a4d8 <__mdiff+0xec>
 800a4ba:	f10c 0203 	add.w	r2, ip, #3
 800a4be:	1b52      	subs	r2, r2, r5
 800a4c0:	f022 0203 	bic.w	r2, r2, #3
 800a4c4:	3d03      	subs	r5, #3
 800a4c6:	45ac      	cmp	ip, r5
 800a4c8:	bf38      	it	cc
 800a4ca:	2200      	movcc	r2, #0
 800a4cc:	441a      	add	r2, r3
 800a4ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a4d2:	b17b      	cbz	r3, 800a4f4 <__mdiff+0x108>
 800a4d4:	6107      	str	r7, [r0, #16]
 800a4d6:	e7a3      	b.n	800a420 <__mdiff+0x34>
 800a4d8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a4dc:	fa11 f288 	uxtah	r2, r1, r8
 800a4e0:	1414      	asrs	r4, r2, #16
 800a4e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4e6:	b292      	uxth	r2, r2
 800a4e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a4ec:	f84e 2b04 	str.w	r2, [lr], #4
 800a4f0:	1421      	asrs	r1, r4, #16
 800a4f2:	e7e0      	b.n	800a4b6 <__mdiff+0xca>
 800a4f4:	3f01      	subs	r7, #1
 800a4f6:	e7ea      	b.n	800a4ce <__mdiff+0xe2>
 800a4f8:	0800bab0 	.word	0x0800bab0
 800a4fc:	0800bb3c 	.word	0x0800bb3c

0800a500 <__ulp>:
 800a500:	b082      	sub	sp, #8
 800a502:	ed8d 0b00 	vstr	d0, [sp]
 800a506:	9b01      	ldr	r3, [sp, #4]
 800a508:	4912      	ldr	r1, [pc, #72]	; (800a554 <__ulp+0x54>)
 800a50a:	4019      	ands	r1, r3
 800a50c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a510:	2900      	cmp	r1, #0
 800a512:	dd05      	ble.n	800a520 <__ulp+0x20>
 800a514:	2200      	movs	r2, #0
 800a516:	460b      	mov	r3, r1
 800a518:	ec43 2b10 	vmov	d0, r2, r3
 800a51c:	b002      	add	sp, #8
 800a51e:	4770      	bx	lr
 800a520:	4249      	negs	r1, r1
 800a522:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a526:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a52a:	f04f 0200 	mov.w	r2, #0
 800a52e:	f04f 0300 	mov.w	r3, #0
 800a532:	da04      	bge.n	800a53e <__ulp+0x3e>
 800a534:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a538:	fa41 f300 	asr.w	r3, r1, r0
 800a53c:	e7ec      	b.n	800a518 <__ulp+0x18>
 800a53e:	f1a0 0114 	sub.w	r1, r0, #20
 800a542:	291e      	cmp	r1, #30
 800a544:	bfda      	itte	le
 800a546:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a54a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a54e:	2101      	movgt	r1, #1
 800a550:	460a      	mov	r2, r1
 800a552:	e7e1      	b.n	800a518 <__ulp+0x18>
 800a554:	7ff00000 	.word	0x7ff00000

0800a558 <__b2d>:
 800a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55a:	6905      	ldr	r5, [r0, #16]
 800a55c:	f100 0714 	add.w	r7, r0, #20
 800a560:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a564:	1f2e      	subs	r6, r5, #4
 800a566:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a56a:	4620      	mov	r0, r4
 800a56c:	f7ff fd48 	bl	800a000 <__hi0bits>
 800a570:	f1c0 0320 	rsb	r3, r0, #32
 800a574:	280a      	cmp	r0, #10
 800a576:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a5f4 <__b2d+0x9c>
 800a57a:	600b      	str	r3, [r1, #0]
 800a57c:	dc14      	bgt.n	800a5a8 <__b2d+0x50>
 800a57e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a582:	fa24 f10e 	lsr.w	r1, r4, lr
 800a586:	42b7      	cmp	r7, r6
 800a588:	ea41 030c 	orr.w	r3, r1, ip
 800a58c:	bf34      	ite	cc
 800a58e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a592:	2100      	movcs	r1, #0
 800a594:	3015      	adds	r0, #21
 800a596:	fa04 f000 	lsl.w	r0, r4, r0
 800a59a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a59e:	ea40 0201 	orr.w	r2, r0, r1
 800a5a2:	ec43 2b10 	vmov	d0, r2, r3
 800a5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a8:	42b7      	cmp	r7, r6
 800a5aa:	bf3a      	itte	cc
 800a5ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a5b0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a5b4:	2100      	movcs	r1, #0
 800a5b6:	380b      	subs	r0, #11
 800a5b8:	d017      	beq.n	800a5ea <__b2d+0x92>
 800a5ba:	f1c0 0c20 	rsb	ip, r0, #32
 800a5be:	fa04 f500 	lsl.w	r5, r4, r0
 800a5c2:	42be      	cmp	r6, r7
 800a5c4:	fa21 f40c 	lsr.w	r4, r1, ip
 800a5c8:	ea45 0504 	orr.w	r5, r5, r4
 800a5cc:	bf8c      	ite	hi
 800a5ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a5d2:	2400      	movls	r4, #0
 800a5d4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a5d8:	fa01 f000 	lsl.w	r0, r1, r0
 800a5dc:	fa24 f40c 	lsr.w	r4, r4, ip
 800a5e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a5e4:	ea40 0204 	orr.w	r2, r0, r4
 800a5e8:	e7db      	b.n	800a5a2 <__b2d+0x4a>
 800a5ea:	ea44 030c 	orr.w	r3, r4, ip
 800a5ee:	460a      	mov	r2, r1
 800a5f0:	e7d7      	b.n	800a5a2 <__b2d+0x4a>
 800a5f2:	bf00      	nop
 800a5f4:	3ff00000 	.word	0x3ff00000

0800a5f8 <__d2b>:
 800a5f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5fc:	4689      	mov	r9, r1
 800a5fe:	2101      	movs	r1, #1
 800a600:	ec57 6b10 	vmov	r6, r7, d0
 800a604:	4690      	mov	r8, r2
 800a606:	f7ff fc09 	bl	8009e1c <_Balloc>
 800a60a:	4604      	mov	r4, r0
 800a60c:	b930      	cbnz	r0, 800a61c <__d2b+0x24>
 800a60e:	4602      	mov	r2, r0
 800a610:	4b25      	ldr	r3, [pc, #148]	; (800a6a8 <__d2b+0xb0>)
 800a612:	4826      	ldr	r0, [pc, #152]	; (800a6ac <__d2b+0xb4>)
 800a614:	f240 310a 	movw	r1, #778	; 0x30a
 800a618:	f000 fb50 	bl	800acbc <__assert_func>
 800a61c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a620:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a624:	bb35      	cbnz	r5, 800a674 <__d2b+0x7c>
 800a626:	2e00      	cmp	r6, #0
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	d028      	beq.n	800a67e <__d2b+0x86>
 800a62c:	4668      	mov	r0, sp
 800a62e:	9600      	str	r6, [sp, #0]
 800a630:	f7ff fd06 	bl	800a040 <__lo0bits>
 800a634:	9900      	ldr	r1, [sp, #0]
 800a636:	b300      	cbz	r0, 800a67a <__d2b+0x82>
 800a638:	9a01      	ldr	r2, [sp, #4]
 800a63a:	f1c0 0320 	rsb	r3, r0, #32
 800a63e:	fa02 f303 	lsl.w	r3, r2, r3
 800a642:	430b      	orrs	r3, r1
 800a644:	40c2      	lsrs	r2, r0
 800a646:	6163      	str	r3, [r4, #20]
 800a648:	9201      	str	r2, [sp, #4]
 800a64a:	9b01      	ldr	r3, [sp, #4]
 800a64c:	61a3      	str	r3, [r4, #24]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	bf14      	ite	ne
 800a652:	2202      	movne	r2, #2
 800a654:	2201      	moveq	r2, #1
 800a656:	6122      	str	r2, [r4, #16]
 800a658:	b1d5      	cbz	r5, 800a690 <__d2b+0x98>
 800a65a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a65e:	4405      	add	r5, r0
 800a660:	f8c9 5000 	str.w	r5, [r9]
 800a664:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a668:	f8c8 0000 	str.w	r0, [r8]
 800a66c:	4620      	mov	r0, r4
 800a66e:	b003      	add	sp, #12
 800a670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a678:	e7d5      	b.n	800a626 <__d2b+0x2e>
 800a67a:	6161      	str	r1, [r4, #20]
 800a67c:	e7e5      	b.n	800a64a <__d2b+0x52>
 800a67e:	a801      	add	r0, sp, #4
 800a680:	f7ff fcde 	bl	800a040 <__lo0bits>
 800a684:	9b01      	ldr	r3, [sp, #4]
 800a686:	6163      	str	r3, [r4, #20]
 800a688:	2201      	movs	r2, #1
 800a68a:	6122      	str	r2, [r4, #16]
 800a68c:	3020      	adds	r0, #32
 800a68e:	e7e3      	b.n	800a658 <__d2b+0x60>
 800a690:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a694:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a698:	f8c9 0000 	str.w	r0, [r9]
 800a69c:	6918      	ldr	r0, [r3, #16]
 800a69e:	f7ff fcaf 	bl	800a000 <__hi0bits>
 800a6a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6a6:	e7df      	b.n	800a668 <__d2b+0x70>
 800a6a8:	0800bab0 	.word	0x0800bab0
 800a6ac:	0800bb3c 	.word	0x0800bb3c

0800a6b0 <__ratio>:
 800a6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b4:	4688      	mov	r8, r1
 800a6b6:	4669      	mov	r1, sp
 800a6b8:	4681      	mov	r9, r0
 800a6ba:	f7ff ff4d 	bl	800a558 <__b2d>
 800a6be:	a901      	add	r1, sp, #4
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	ec55 4b10 	vmov	r4, r5, d0
 800a6c6:	f7ff ff47 	bl	800a558 <__b2d>
 800a6ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a6d2:	eba3 0c02 	sub.w	ip, r3, r2
 800a6d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6da:	1a9b      	subs	r3, r3, r2
 800a6dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a6e0:	ec51 0b10 	vmov	r0, r1, d0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	bfd6      	itet	le
 800a6e8:	460a      	movle	r2, r1
 800a6ea:	462a      	movgt	r2, r5
 800a6ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6f0:	468b      	mov	fp, r1
 800a6f2:	462f      	mov	r7, r5
 800a6f4:	bfd4      	ite	le
 800a6f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a6fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a6fe:	4620      	mov	r0, r4
 800a700:	ee10 2a10 	vmov	r2, s0
 800a704:	465b      	mov	r3, fp
 800a706:	4639      	mov	r1, r7
 800a708:	f7f6 f8a8 	bl	800085c <__aeabi_ddiv>
 800a70c:	ec41 0b10 	vmov	d0, r0, r1
 800a710:	b003      	add	sp, #12
 800a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a716 <__copybits>:
 800a716:	3901      	subs	r1, #1
 800a718:	b570      	push	{r4, r5, r6, lr}
 800a71a:	1149      	asrs	r1, r1, #5
 800a71c:	6914      	ldr	r4, [r2, #16]
 800a71e:	3101      	adds	r1, #1
 800a720:	f102 0314 	add.w	r3, r2, #20
 800a724:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a728:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a72c:	1f05      	subs	r5, r0, #4
 800a72e:	42a3      	cmp	r3, r4
 800a730:	d30c      	bcc.n	800a74c <__copybits+0x36>
 800a732:	1aa3      	subs	r3, r4, r2
 800a734:	3b11      	subs	r3, #17
 800a736:	f023 0303 	bic.w	r3, r3, #3
 800a73a:	3211      	adds	r2, #17
 800a73c:	42a2      	cmp	r2, r4
 800a73e:	bf88      	it	hi
 800a740:	2300      	movhi	r3, #0
 800a742:	4418      	add	r0, r3
 800a744:	2300      	movs	r3, #0
 800a746:	4288      	cmp	r0, r1
 800a748:	d305      	bcc.n	800a756 <__copybits+0x40>
 800a74a:	bd70      	pop	{r4, r5, r6, pc}
 800a74c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a750:	f845 6f04 	str.w	r6, [r5, #4]!
 800a754:	e7eb      	b.n	800a72e <__copybits+0x18>
 800a756:	f840 3b04 	str.w	r3, [r0], #4
 800a75a:	e7f4      	b.n	800a746 <__copybits+0x30>

0800a75c <__any_on>:
 800a75c:	f100 0214 	add.w	r2, r0, #20
 800a760:	6900      	ldr	r0, [r0, #16]
 800a762:	114b      	asrs	r3, r1, #5
 800a764:	4298      	cmp	r0, r3
 800a766:	b510      	push	{r4, lr}
 800a768:	db11      	blt.n	800a78e <__any_on+0x32>
 800a76a:	dd0a      	ble.n	800a782 <__any_on+0x26>
 800a76c:	f011 011f 	ands.w	r1, r1, #31
 800a770:	d007      	beq.n	800a782 <__any_on+0x26>
 800a772:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a776:	fa24 f001 	lsr.w	r0, r4, r1
 800a77a:	fa00 f101 	lsl.w	r1, r0, r1
 800a77e:	428c      	cmp	r4, r1
 800a780:	d10b      	bne.n	800a79a <__any_on+0x3e>
 800a782:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a786:	4293      	cmp	r3, r2
 800a788:	d803      	bhi.n	800a792 <__any_on+0x36>
 800a78a:	2000      	movs	r0, #0
 800a78c:	bd10      	pop	{r4, pc}
 800a78e:	4603      	mov	r3, r0
 800a790:	e7f7      	b.n	800a782 <__any_on+0x26>
 800a792:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a796:	2900      	cmp	r1, #0
 800a798:	d0f5      	beq.n	800a786 <__any_on+0x2a>
 800a79a:	2001      	movs	r0, #1
 800a79c:	e7f6      	b.n	800a78c <__any_on+0x30>

0800a79e <_calloc_r>:
 800a79e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7a0:	fba1 2402 	umull	r2, r4, r1, r2
 800a7a4:	b94c      	cbnz	r4, 800a7ba <_calloc_r+0x1c>
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	9201      	str	r2, [sp, #4]
 800a7aa:	f000 f87b 	bl	800a8a4 <_malloc_r>
 800a7ae:	9a01      	ldr	r2, [sp, #4]
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	b930      	cbnz	r0, 800a7c2 <_calloc_r+0x24>
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	b003      	add	sp, #12
 800a7b8:	bd30      	pop	{r4, r5, pc}
 800a7ba:	220c      	movs	r2, #12
 800a7bc:	6002      	str	r2, [r0, #0]
 800a7be:	2500      	movs	r5, #0
 800a7c0:	e7f8      	b.n	800a7b4 <_calloc_r+0x16>
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	f7fc fb8c 	bl	8006ee0 <memset>
 800a7c8:	e7f4      	b.n	800a7b4 <_calloc_r+0x16>
	...

0800a7cc <_free_r>:
 800a7cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7ce:	2900      	cmp	r1, #0
 800a7d0:	d044      	beq.n	800a85c <_free_r+0x90>
 800a7d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7d6:	9001      	str	r0, [sp, #4]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f1a1 0404 	sub.w	r4, r1, #4
 800a7de:	bfb8      	it	lt
 800a7e0:	18e4      	addlt	r4, r4, r3
 800a7e2:	f000 fab5 	bl	800ad50 <__malloc_lock>
 800a7e6:	4a1e      	ldr	r2, [pc, #120]	; (800a860 <_free_r+0x94>)
 800a7e8:	9801      	ldr	r0, [sp, #4]
 800a7ea:	6813      	ldr	r3, [r2, #0]
 800a7ec:	b933      	cbnz	r3, 800a7fc <_free_r+0x30>
 800a7ee:	6063      	str	r3, [r4, #4]
 800a7f0:	6014      	str	r4, [r2, #0]
 800a7f2:	b003      	add	sp, #12
 800a7f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7f8:	f000 bab0 	b.w	800ad5c <__malloc_unlock>
 800a7fc:	42a3      	cmp	r3, r4
 800a7fe:	d908      	bls.n	800a812 <_free_r+0x46>
 800a800:	6825      	ldr	r5, [r4, #0]
 800a802:	1961      	adds	r1, r4, r5
 800a804:	428b      	cmp	r3, r1
 800a806:	bf01      	itttt	eq
 800a808:	6819      	ldreq	r1, [r3, #0]
 800a80a:	685b      	ldreq	r3, [r3, #4]
 800a80c:	1949      	addeq	r1, r1, r5
 800a80e:	6021      	streq	r1, [r4, #0]
 800a810:	e7ed      	b.n	800a7ee <_free_r+0x22>
 800a812:	461a      	mov	r2, r3
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	b10b      	cbz	r3, 800a81c <_free_r+0x50>
 800a818:	42a3      	cmp	r3, r4
 800a81a:	d9fa      	bls.n	800a812 <_free_r+0x46>
 800a81c:	6811      	ldr	r1, [r2, #0]
 800a81e:	1855      	adds	r5, r2, r1
 800a820:	42a5      	cmp	r5, r4
 800a822:	d10b      	bne.n	800a83c <_free_r+0x70>
 800a824:	6824      	ldr	r4, [r4, #0]
 800a826:	4421      	add	r1, r4
 800a828:	1854      	adds	r4, r2, r1
 800a82a:	42a3      	cmp	r3, r4
 800a82c:	6011      	str	r1, [r2, #0]
 800a82e:	d1e0      	bne.n	800a7f2 <_free_r+0x26>
 800a830:	681c      	ldr	r4, [r3, #0]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	6053      	str	r3, [r2, #4]
 800a836:	4421      	add	r1, r4
 800a838:	6011      	str	r1, [r2, #0]
 800a83a:	e7da      	b.n	800a7f2 <_free_r+0x26>
 800a83c:	d902      	bls.n	800a844 <_free_r+0x78>
 800a83e:	230c      	movs	r3, #12
 800a840:	6003      	str	r3, [r0, #0]
 800a842:	e7d6      	b.n	800a7f2 <_free_r+0x26>
 800a844:	6825      	ldr	r5, [r4, #0]
 800a846:	1961      	adds	r1, r4, r5
 800a848:	428b      	cmp	r3, r1
 800a84a:	bf04      	itt	eq
 800a84c:	6819      	ldreq	r1, [r3, #0]
 800a84e:	685b      	ldreq	r3, [r3, #4]
 800a850:	6063      	str	r3, [r4, #4]
 800a852:	bf04      	itt	eq
 800a854:	1949      	addeq	r1, r1, r5
 800a856:	6021      	streq	r1, [r4, #0]
 800a858:	6054      	str	r4, [r2, #4]
 800a85a:	e7ca      	b.n	800a7f2 <_free_r+0x26>
 800a85c:	b003      	add	sp, #12
 800a85e:	bd30      	pop	{r4, r5, pc}
 800a860:	200003bc 	.word	0x200003bc

0800a864 <sbrk_aligned>:
 800a864:	b570      	push	{r4, r5, r6, lr}
 800a866:	4e0e      	ldr	r6, [pc, #56]	; (800a8a0 <sbrk_aligned+0x3c>)
 800a868:	460c      	mov	r4, r1
 800a86a:	6831      	ldr	r1, [r6, #0]
 800a86c:	4605      	mov	r5, r0
 800a86e:	b911      	cbnz	r1, 800a876 <sbrk_aligned+0x12>
 800a870:	f000 f9f2 	bl	800ac58 <_sbrk_r>
 800a874:	6030      	str	r0, [r6, #0]
 800a876:	4621      	mov	r1, r4
 800a878:	4628      	mov	r0, r5
 800a87a:	f000 f9ed 	bl	800ac58 <_sbrk_r>
 800a87e:	1c43      	adds	r3, r0, #1
 800a880:	d00a      	beq.n	800a898 <sbrk_aligned+0x34>
 800a882:	1cc4      	adds	r4, r0, #3
 800a884:	f024 0403 	bic.w	r4, r4, #3
 800a888:	42a0      	cmp	r0, r4
 800a88a:	d007      	beq.n	800a89c <sbrk_aligned+0x38>
 800a88c:	1a21      	subs	r1, r4, r0
 800a88e:	4628      	mov	r0, r5
 800a890:	f000 f9e2 	bl	800ac58 <_sbrk_r>
 800a894:	3001      	adds	r0, #1
 800a896:	d101      	bne.n	800a89c <sbrk_aligned+0x38>
 800a898:	f04f 34ff 	mov.w	r4, #4294967295
 800a89c:	4620      	mov	r0, r4
 800a89e:	bd70      	pop	{r4, r5, r6, pc}
 800a8a0:	200003c0 	.word	0x200003c0

0800a8a4 <_malloc_r>:
 800a8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a8:	1ccd      	adds	r5, r1, #3
 800a8aa:	f025 0503 	bic.w	r5, r5, #3
 800a8ae:	3508      	adds	r5, #8
 800a8b0:	2d0c      	cmp	r5, #12
 800a8b2:	bf38      	it	cc
 800a8b4:	250c      	movcc	r5, #12
 800a8b6:	2d00      	cmp	r5, #0
 800a8b8:	4607      	mov	r7, r0
 800a8ba:	db01      	blt.n	800a8c0 <_malloc_r+0x1c>
 800a8bc:	42a9      	cmp	r1, r5
 800a8be:	d905      	bls.n	800a8cc <_malloc_r+0x28>
 800a8c0:	230c      	movs	r3, #12
 800a8c2:	603b      	str	r3, [r7, #0]
 800a8c4:	2600      	movs	r6, #0
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8cc:	4e2e      	ldr	r6, [pc, #184]	; (800a988 <_malloc_r+0xe4>)
 800a8ce:	f000 fa3f 	bl	800ad50 <__malloc_lock>
 800a8d2:	6833      	ldr	r3, [r6, #0]
 800a8d4:	461c      	mov	r4, r3
 800a8d6:	bb34      	cbnz	r4, 800a926 <_malloc_r+0x82>
 800a8d8:	4629      	mov	r1, r5
 800a8da:	4638      	mov	r0, r7
 800a8dc:	f7ff ffc2 	bl	800a864 <sbrk_aligned>
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	d14d      	bne.n	800a982 <_malloc_r+0xde>
 800a8e6:	6834      	ldr	r4, [r6, #0]
 800a8e8:	4626      	mov	r6, r4
 800a8ea:	2e00      	cmp	r6, #0
 800a8ec:	d140      	bne.n	800a970 <_malloc_r+0xcc>
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	4631      	mov	r1, r6
 800a8f2:	4638      	mov	r0, r7
 800a8f4:	eb04 0803 	add.w	r8, r4, r3
 800a8f8:	f000 f9ae 	bl	800ac58 <_sbrk_r>
 800a8fc:	4580      	cmp	r8, r0
 800a8fe:	d13a      	bne.n	800a976 <_malloc_r+0xd2>
 800a900:	6821      	ldr	r1, [r4, #0]
 800a902:	3503      	adds	r5, #3
 800a904:	1a6d      	subs	r5, r5, r1
 800a906:	f025 0503 	bic.w	r5, r5, #3
 800a90a:	3508      	adds	r5, #8
 800a90c:	2d0c      	cmp	r5, #12
 800a90e:	bf38      	it	cc
 800a910:	250c      	movcc	r5, #12
 800a912:	4629      	mov	r1, r5
 800a914:	4638      	mov	r0, r7
 800a916:	f7ff ffa5 	bl	800a864 <sbrk_aligned>
 800a91a:	3001      	adds	r0, #1
 800a91c:	d02b      	beq.n	800a976 <_malloc_r+0xd2>
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	442b      	add	r3, r5
 800a922:	6023      	str	r3, [r4, #0]
 800a924:	e00e      	b.n	800a944 <_malloc_r+0xa0>
 800a926:	6822      	ldr	r2, [r4, #0]
 800a928:	1b52      	subs	r2, r2, r5
 800a92a:	d41e      	bmi.n	800a96a <_malloc_r+0xc6>
 800a92c:	2a0b      	cmp	r2, #11
 800a92e:	d916      	bls.n	800a95e <_malloc_r+0xba>
 800a930:	1961      	adds	r1, r4, r5
 800a932:	42a3      	cmp	r3, r4
 800a934:	6025      	str	r5, [r4, #0]
 800a936:	bf18      	it	ne
 800a938:	6059      	strne	r1, [r3, #4]
 800a93a:	6863      	ldr	r3, [r4, #4]
 800a93c:	bf08      	it	eq
 800a93e:	6031      	streq	r1, [r6, #0]
 800a940:	5162      	str	r2, [r4, r5]
 800a942:	604b      	str	r3, [r1, #4]
 800a944:	4638      	mov	r0, r7
 800a946:	f104 060b 	add.w	r6, r4, #11
 800a94a:	f000 fa07 	bl	800ad5c <__malloc_unlock>
 800a94e:	f026 0607 	bic.w	r6, r6, #7
 800a952:	1d23      	adds	r3, r4, #4
 800a954:	1af2      	subs	r2, r6, r3
 800a956:	d0b6      	beq.n	800a8c6 <_malloc_r+0x22>
 800a958:	1b9b      	subs	r3, r3, r6
 800a95a:	50a3      	str	r3, [r4, r2]
 800a95c:	e7b3      	b.n	800a8c6 <_malloc_r+0x22>
 800a95e:	6862      	ldr	r2, [r4, #4]
 800a960:	42a3      	cmp	r3, r4
 800a962:	bf0c      	ite	eq
 800a964:	6032      	streq	r2, [r6, #0]
 800a966:	605a      	strne	r2, [r3, #4]
 800a968:	e7ec      	b.n	800a944 <_malloc_r+0xa0>
 800a96a:	4623      	mov	r3, r4
 800a96c:	6864      	ldr	r4, [r4, #4]
 800a96e:	e7b2      	b.n	800a8d6 <_malloc_r+0x32>
 800a970:	4634      	mov	r4, r6
 800a972:	6876      	ldr	r6, [r6, #4]
 800a974:	e7b9      	b.n	800a8ea <_malloc_r+0x46>
 800a976:	230c      	movs	r3, #12
 800a978:	603b      	str	r3, [r7, #0]
 800a97a:	4638      	mov	r0, r7
 800a97c:	f000 f9ee 	bl	800ad5c <__malloc_unlock>
 800a980:	e7a1      	b.n	800a8c6 <_malloc_r+0x22>
 800a982:	6025      	str	r5, [r4, #0]
 800a984:	e7de      	b.n	800a944 <_malloc_r+0xa0>
 800a986:	bf00      	nop
 800a988:	200003bc 	.word	0x200003bc

0800a98c <__ssputs_r>:
 800a98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a990:	688e      	ldr	r6, [r1, #8]
 800a992:	429e      	cmp	r6, r3
 800a994:	4682      	mov	sl, r0
 800a996:	460c      	mov	r4, r1
 800a998:	4690      	mov	r8, r2
 800a99a:	461f      	mov	r7, r3
 800a99c:	d838      	bhi.n	800aa10 <__ssputs_r+0x84>
 800a99e:	898a      	ldrh	r2, [r1, #12]
 800a9a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9a4:	d032      	beq.n	800aa0c <__ssputs_r+0x80>
 800a9a6:	6825      	ldr	r5, [r4, #0]
 800a9a8:	6909      	ldr	r1, [r1, #16]
 800a9aa:	eba5 0901 	sub.w	r9, r5, r1
 800a9ae:	6965      	ldr	r5, [r4, #20]
 800a9b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	444b      	add	r3, r9
 800a9bc:	106d      	asrs	r5, r5, #1
 800a9be:	429d      	cmp	r5, r3
 800a9c0:	bf38      	it	cc
 800a9c2:	461d      	movcc	r5, r3
 800a9c4:	0553      	lsls	r3, r2, #21
 800a9c6:	d531      	bpl.n	800aa2c <__ssputs_r+0xa0>
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	f7ff ff6b 	bl	800a8a4 <_malloc_r>
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	b950      	cbnz	r0, 800a9e8 <__ssputs_r+0x5c>
 800a9d2:	230c      	movs	r3, #12
 800a9d4:	f8ca 3000 	str.w	r3, [sl]
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9de:	81a3      	strh	r3, [r4, #12]
 800a9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e8:	6921      	ldr	r1, [r4, #16]
 800a9ea:	464a      	mov	r2, r9
 800a9ec:	f7ff fa08 	bl	8009e00 <memcpy>
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9fa:	81a3      	strh	r3, [r4, #12]
 800a9fc:	6126      	str	r6, [r4, #16]
 800a9fe:	6165      	str	r5, [r4, #20]
 800aa00:	444e      	add	r6, r9
 800aa02:	eba5 0509 	sub.w	r5, r5, r9
 800aa06:	6026      	str	r6, [r4, #0]
 800aa08:	60a5      	str	r5, [r4, #8]
 800aa0a:	463e      	mov	r6, r7
 800aa0c:	42be      	cmp	r6, r7
 800aa0e:	d900      	bls.n	800aa12 <__ssputs_r+0x86>
 800aa10:	463e      	mov	r6, r7
 800aa12:	6820      	ldr	r0, [r4, #0]
 800aa14:	4632      	mov	r2, r6
 800aa16:	4641      	mov	r1, r8
 800aa18:	f000 f980 	bl	800ad1c <memmove>
 800aa1c:	68a3      	ldr	r3, [r4, #8]
 800aa1e:	1b9b      	subs	r3, r3, r6
 800aa20:	60a3      	str	r3, [r4, #8]
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	4433      	add	r3, r6
 800aa26:	6023      	str	r3, [r4, #0]
 800aa28:	2000      	movs	r0, #0
 800aa2a:	e7db      	b.n	800a9e4 <__ssputs_r+0x58>
 800aa2c:	462a      	mov	r2, r5
 800aa2e:	f000 f99b 	bl	800ad68 <_realloc_r>
 800aa32:	4606      	mov	r6, r0
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d1e1      	bne.n	800a9fc <__ssputs_r+0x70>
 800aa38:	6921      	ldr	r1, [r4, #16]
 800aa3a:	4650      	mov	r0, sl
 800aa3c:	f7ff fec6 	bl	800a7cc <_free_r>
 800aa40:	e7c7      	b.n	800a9d2 <__ssputs_r+0x46>
	...

0800aa44 <_svfiprintf_r>:
 800aa44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa48:	4698      	mov	r8, r3
 800aa4a:	898b      	ldrh	r3, [r1, #12]
 800aa4c:	061b      	lsls	r3, r3, #24
 800aa4e:	b09d      	sub	sp, #116	; 0x74
 800aa50:	4607      	mov	r7, r0
 800aa52:	460d      	mov	r5, r1
 800aa54:	4614      	mov	r4, r2
 800aa56:	d50e      	bpl.n	800aa76 <_svfiprintf_r+0x32>
 800aa58:	690b      	ldr	r3, [r1, #16]
 800aa5a:	b963      	cbnz	r3, 800aa76 <_svfiprintf_r+0x32>
 800aa5c:	2140      	movs	r1, #64	; 0x40
 800aa5e:	f7ff ff21 	bl	800a8a4 <_malloc_r>
 800aa62:	6028      	str	r0, [r5, #0]
 800aa64:	6128      	str	r0, [r5, #16]
 800aa66:	b920      	cbnz	r0, 800aa72 <_svfiprintf_r+0x2e>
 800aa68:	230c      	movs	r3, #12
 800aa6a:	603b      	str	r3, [r7, #0]
 800aa6c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa70:	e0d1      	b.n	800ac16 <_svfiprintf_r+0x1d2>
 800aa72:	2340      	movs	r3, #64	; 0x40
 800aa74:	616b      	str	r3, [r5, #20]
 800aa76:	2300      	movs	r3, #0
 800aa78:	9309      	str	r3, [sp, #36]	; 0x24
 800aa7a:	2320      	movs	r3, #32
 800aa7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa80:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa84:	2330      	movs	r3, #48	; 0x30
 800aa86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac30 <_svfiprintf_r+0x1ec>
 800aa8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa8e:	f04f 0901 	mov.w	r9, #1
 800aa92:	4623      	mov	r3, r4
 800aa94:	469a      	mov	sl, r3
 800aa96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa9a:	b10a      	cbz	r2, 800aaa0 <_svfiprintf_r+0x5c>
 800aa9c:	2a25      	cmp	r2, #37	; 0x25
 800aa9e:	d1f9      	bne.n	800aa94 <_svfiprintf_r+0x50>
 800aaa0:	ebba 0b04 	subs.w	fp, sl, r4
 800aaa4:	d00b      	beq.n	800aabe <_svfiprintf_r+0x7a>
 800aaa6:	465b      	mov	r3, fp
 800aaa8:	4622      	mov	r2, r4
 800aaaa:	4629      	mov	r1, r5
 800aaac:	4638      	mov	r0, r7
 800aaae:	f7ff ff6d 	bl	800a98c <__ssputs_r>
 800aab2:	3001      	adds	r0, #1
 800aab4:	f000 80aa 	beq.w	800ac0c <_svfiprintf_r+0x1c8>
 800aab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaba:	445a      	add	r2, fp
 800aabc:	9209      	str	r2, [sp, #36]	; 0x24
 800aabe:	f89a 3000 	ldrb.w	r3, [sl]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 80a2 	beq.w	800ac0c <_svfiprintf_r+0x1c8>
 800aac8:	2300      	movs	r3, #0
 800aaca:	f04f 32ff 	mov.w	r2, #4294967295
 800aace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aad2:	f10a 0a01 	add.w	sl, sl, #1
 800aad6:	9304      	str	r3, [sp, #16]
 800aad8:	9307      	str	r3, [sp, #28]
 800aada:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aade:	931a      	str	r3, [sp, #104]	; 0x68
 800aae0:	4654      	mov	r4, sl
 800aae2:	2205      	movs	r2, #5
 800aae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae8:	4851      	ldr	r0, [pc, #324]	; (800ac30 <_svfiprintf_r+0x1ec>)
 800aaea:	f7f5 fb81 	bl	80001f0 <memchr>
 800aaee:	9a04      	ldr	r2, [sp, #16]
 800aaf0:	b9d8      	cbnz	r0, 800ab2a <_svfiprintf_r+0xe6>
 800aaf2:	06d0      	lsls	r0, r2, #27
 800aaf4:	bf44      	itt	mi
 800aaf6:	2320      	movmi	r3, #32
 800aaf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aafc:	0711      	lsls	r1, r2, #28
 800aafe:	bf44      	itt	mi
 800ab00:	232b      	movmi	r3, #43	; 0x2b
 800ab02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab06:	f89a 3000 	ldrb.w	r3, [sl]
 800ab0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab0c:	d015      	beq.n	800ab3a <_svfiprintf_r+0xf6>
 800ab0e:	9a07      	ldr	r2, [sp, #28]
 800ab10:	4654      	mov	r4, sl
 800ab12:	2000      	movs	r0, #0
 800ab14:	f04f 0c0a 	mov.w	ip, #10
 800ab18:	4621      	mov	r1, r4
 800ab1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab1e:	3b30      	subs	r3, #48	; 0x30
 800ab20:	2b09      	cmp	r3, #9
 800ab22:	d94e      	bls.n	800abc2 <_svfiprintf_r+0x17e>
 800ab24:	b1b0      	cbz	r0, 800ab54 <_svfiprintf_r+0x110>
 800ab26:	9207      	str	r2, [sp, #28]
 800ab28:	e014      	b.n	800ab54 <_svfiprintf_r+0x110>
 800ab2a:	eba0 0308 	sub.w	r3, r0, r8
 800ab2e:	fa09 f303 	lsl.w	r3, r9, r3
 800ab32:	4313      	orrs	r3, r2
 800ab34:	9304      	str	r3, [sp, #16]
 800ab36:	46a2      	mov	sl, r4
 800ab38:	e7d2      	b.n	800aae0 <_svfiprintf_r+0x9c>
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	1d19      	adds	r1, r3, #4
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	9103      	str	r1, [sp, #12]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	bfbb      	ittet	lt
 800ab46:	425b      	neglt	r3, r3
 800ab48:	f042 0202 	orrlt.w	r2, r2, #2
 800ab4c:	9307      	strge	r3, [sp, #28]
 800ab4e:	9307      	strlt	r3, [sp, #28]
 800ab50:	bfb8      	it	lt
 800ab52:	9204      	strlt	r2, [sp, #16]
 800ab54:	7823      	ldrb	r3, [r4, #0]
 800ab56:	2b2e      	cmp	r3, #46	; 0x2e
 800ab58:	d10c      	bne.n	800ab74 <_svfiprintf_r+0x130>
 800ab5a:	7863      	ldrb	r3, [r4, #1]
 800ab5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab5e:	d135      	bne.n	800abcc <_svfiprintf_r+0x188>
 800ab60:	9b03      	ldr	r3, [sp, #12]
 800ab62:	1d1a      	adds	r2, r3, #4
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	9203      	str	r2, [sp, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	bfb8      	it	lt
 800ab6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab70:	3402      	adds	r4, #2
 800ab72:	9305      	str	r3, [sp, #20]
 800ab74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac40 <_svfiprintf_r+0x1fc>
 800ab78:	7821      	ldrb	r1, [r4, #0]
 800ab7a:	2203      	movs	r2, #3
 800ab7c:	4650      	mov	r0, sl
 800ab7e:	f7f5 fb37 	bl	80001f0 <memchr>
 800ab82:	b140      	cbz	r0, 800ab96 <_svfiprintf_r+0x152>
 800ab84:	2340      	movs	r3, #64	; 0x40
 800ab86:	eba0 000a 	sub.w	r0, r0, sl
 800ab8a:	fa03 f000 	lsl.w	r0, r3, r0
 800ab8e:	9b04      	ldr	r3, [sp, #16]
 800ab90:	4303      	orrs	r3, r0
 800ab92:	3401      	adds	r4, #1
 800ab94:	9304      	str	r3, [sp, #16]
 800ab96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab9a:	4826      	ldr	r0, [pc, #152]	; (800ac34 <_svfiprintf_r+0x1f0>)
 800ab9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aba0:	2206      	movs	r2, #6
 800aba2:	f7f5 fb25 	bl	80001f0 <memchr>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d038      	beq.n	800ac1c <_svfiprintf_r+0x1d8>
 800abaa:	4b23      	ldr	r3, [pc, #140]	; (800ac38 <_svfiprintf_r+0x1f4>)
 800abac:	bb1b      	cbnz	r3, 800abf6 <_svfiprintf_r+0x1b2>
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	3307      	adds	r3, #7
 800abb2:	f023 0307 	bic.w	r3, r3, #7
 800abb6:	3308      	adds	r3, #8
 800abb8:	9303      	str	r3, [sp, #12]
 800abba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abbc:	4433      	add	r3, r6
 800abbe:	9309      	str	r3, [sp, #36]	; 0x24
 800abc0:	e767      	b.n	800aa92 <_svfiprintf_r+0x4e>
 800abc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800abc6:	460c      	mov	r4, r1
 800abc8:	2001      	movs	r0, #1
 800abca:	e7a5      	b.n	800ab18 <_svfiprintf_r+0xd4>
 800abcc:	2300      	movs	r3, #0
 800abce:	3401      	adds	r4, #1
 800abd0:	9305      	str	r3, [sp, #20]
 800abd2:	4619      	mov	r1, r3
 800abd4:	f04f 0c0a 	mov.w	ip, #10
 800abd8:	4620      	mov	r0, r4
 800abda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abde:	3a30      	subs	r2, #48	; 0x30
 800abe0:	2a09      	cmp	r2, #9
 800abe2:	d903      	bls.n	800abec <_svfiprintf_r+0x1a8>
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d0c5      	beq.n	800ab74 <_svfiprintf_r+0x130>
 800abe8:	9105      	str	r1, [sp, #20]
 800abea:	e7c3      	b.n	800ab74 <_svfiprintf_r+0x130>
 800abec:	fb0c 2101 	mla	r1, ip, r1, r2
 800abf0:	4604      	mov	r4, r0
 800abf2:	2301      	movs	r3, #1
 800abf4:	e7f0      	b.n	800abd8 <_svfiprintf_r+0x194>
 800abf6:	ab03      	add	r3, sp, #12
 800abf8:	9300      	str	r3, [sp, #0]
 800abfa:	462a      	mov	r2, r5
 800abfc:	4b0f      	ldr	r3, [pc, #60]	; (800ac3c <_svfiprintf_r+0x1f8>)
 800abfe:	a904      	add	r1, sp, #16
 800ac00:	4638      	mov	r0, r7
 800ac02:	f7fc fa15 	bl	8007030 <_printf_float>
 800ac06:	1c42      	adds	r2, r0, #1
 800ac08:	4606      	mov	r6, r0
 800ac0a:	d1d6      	bne.n	800abba <_svfiprintf_r+0x176>
 800ac0c:	89ab      	ldrh	r3, [r5, #12]
 800ac0e:	065b      	lsls	r3, r3, #25
 800ac10:	f53f af2c 	bmi.w	800aa6c <_svfiprintf_r+0x28>
 800ac14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac16:	b01d      	add	sp, #116	; 0x74
 800ac18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1c:	ab03      	add	r3, sp, #12
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	462a      	mov	r2, r5
 800ac22:	4b06      	ldr	r3, [pc, #24]	; (800ac3c <_svfiprintf_r+0x1f8>)
 800ac24:	a904      	add	r1, sp, #16
 800ac26:	4638      	mov	r0, r7
 800ac28:	f7fc fca6 	bl	8007578 <_printf_i>
 800ac2c:	e7eb      	b.n	800ac06 <_svfiprintf_r+0x1c2>
 800ac2e:	bf00      	nop
 800ac30:	0800bc94 	.word	0x0800bc94
 800ac34:	0800bc9e 	.word	0x0800bc9e
 800ac38:	08007031 	.word	0x08007031
 800ac3c:	0800a98d 	.word	0x0800a98d
 800ac40:	0800bc9a 	.word	0x0800bc9a
 800ac44:	00000000 	.word	0x00000000

0800ac48 <nan>:
 800ac48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ac50 <nan+0x8>
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	00000000 	.word	0x00000000
 800ac54:	7ff80000 	.word	0x7ff80000

0800ac58 <_sbrk_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	4d06      	ldr	r5, [pc, #24]	; (800ac74 <_sbrk_r+0x1c>)
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	4604      	mov	r4, r0
 800ac60:	4608      	mov	r0, r1
 800ac62:	602b      	str	r3, [r5, #0]
 800ac64:	f7f6 fe8c 	bl	8001980 <_sbrk>
 800ac68:	1c43      	adds	r3, r0, #1
 800ac6a:	d102      	bne.n	800ac72 <_sbrk_r+0x1a>
 800ac6c:	682b      	ldr	r3, [r5, #0]
 800ac6e:	b103      	cbz	r3, 800ac72 <_sbrk_r+0x1a>
 800ac70:	6023      	str	r3, [r4, #0]
 800ac72:	bd38      	pop	{r3, r4, r5, pc}
 800ac74:	200003c4 	.word	0x200003c4

0800ac78 <strncmp>:
 800ac78:	b510      	push	{r4, lr}
 800ac7a:	b17a      	cbz	r2, 800ac9c <strncmp+0x24>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	3901      	subs	r1, #1
 800ac80:	1884      	adds	r4, r0, r2
 800ac82:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ac8a:	4290      	cmp	r0, r2
 800ac8c:	d101      	bne.n	800ac92 <strncmp+0x1a>
 800ac8e:	42a3      	cmp	r3, r4
 800ac90:	d101      	bne.n	800ac96 <strncmp+0x1e>
 800ac92:	1a80      	subs	r0, r0, r2
 800ac94:	bd10      	pop	{r4, pc}
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d1f3      	bne.n	800ac82 <strncmp+0xa>
 800ac9a:	e7fa      	b.n	800ac92 <strncmp+0x1a>
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	e7f9      	b.n	800ac94 <strncmp+0x1c>

0800aca0 <__ascii_wctomb>:
 800aca0:	b149      	cbz	r1, 800acb6 <__ascii_wctomb+0x16>
 800aca2:	2aff      	cmp	r2, #255	; 0xff
 800aca4:	bf85      	ittet	hi
 800aca6:	238a      	movhi	r3, #138	; 0x8a
 800aca8:	6003      	strhi	r3, [r0, #0]
 800acaa:	700a      	strbls	r2, [r1, #0]
 800acac:	f04f 30ff 	movhi.w	r0, #4294967295
 800acb0:	bf98      	it	ls
 800acb2:	2001      	movls	r0, #1
 800acb4:	4770      	bx	lr
 800acb6:	4608      	mov	r0, r1
 800acb8:	4770      	bx	lr
	...

0800acbc <__assert_func>:
 800acbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acbe:	4614      	mov	r4, r2
 800acc0:	461a      	mov	r2, r3
 800acc2:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <__assert_func+0x2c>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4605      	mov	r5, r0
 800acc8:	68d8      	ldr	r0, [r3, #12]
 800acca:	b14c      	cbz	r4, 800ace0 <__assert_func+0x24>
 800accc:	4b07      	ldr	r3, [pc, #28]	; (800acec <__assert_func+0x30>)
 800acce:	9100      	str	r1, [sp, #0]
 800acd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800acd4:	4906      	ldr	r1, [pc, #24]	; (800acf0 <__assert_func+0x34>)
 800acd6:	462b      	mov	r3, r5
 800acd8:	f000 f80e 	bl	800acf8 <fiprintf>
 800acdc:	f000 fa8c 	bl	800b1f8 <abort>
 800ace0:	4b04      	ldr	r3, [pc, #16]	; (800acf4 <__assert_func+0x38>)
 800ace2:	461c      	mov	r4, r3
 800ace4:	e7f3      	b.n	800acce <__assert_func+0x12>
 800ace6:	bf00      	nop
 800ace8:	2000001c 	.word	0x2000001c
 800acec:	0800bca5 	.word	0x0800bca5
 800acf0:	0800bcb2 	.word	0x0800bcb2
 800acf4:	0800bce0 	.word	0x0800bce0

0800acf8 <fiprintf>:
 800acf8:	b40e      	push	{r1, r2, r3}
 800acfa:	b503      	push	{r0, r1, lr}
 800acfc:	4601      	mov	r1, r0
 800acfe:	ab03      	add	r3, sp, #12
 800ad00:	4805      	ldr	r0, [pc, #20]	; (800ad18 <fiprintf+0x20>)
 800ad02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad06:	6800      	ldr	r0, [r0, #0]
 800ad08:	9301      	str	r3, [sp, #4]
 800ad0a:	f000 f885 	bl	800ae18 <_vfiprintf_r>
 800ad0e:	b002      	add	sp, #8
 800ad10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad14:	b003      	add	sp, #12
 800ad16:	4770      	bx	lr
 800ad18:	2000001c 	.word	0x2000001c

0800ad1c <memmove>:
 800ad1c:	4288      	cmp	r0, r1
 800ad1e:	b510      	push	{r4, lr}
 800ad20:	eb01 0402 	add.w	r4, r1, r2
 800ad24:	d902      	bls.n	800ad2c <memmove+0x10>
 800ad26:	4284      	cmp	r4, r0
 800ad28:	4623      	mov	r3, r4
 800ad2a:	d807      	bhi.n	800ad3c <memmove+0x20>
 800ad2c:	1e43      	subs	r3, r0, #1
 800ad2e:	42a1      	cmp	r1, r4
 800ad30:	d008      	beq.n	800ad44 <memmove+0x28>
 800ad32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad3a:	e7f8      	b.n	800ad2e <memmove+0x12>
 800ad3c:	4402      	add	r2, r0
 800ad3e:	4601      	mov	r1, r0
 800ad40:	428a      	cmp	r2, r1
 800ad42:	d100      	bne.n	800ad46 <memmove+0x2a>
 800ad44:	bd10      	pop	{r4, pc}
 800ad46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad4e:	e7f7      	b.n	800ad40 <memmove+0x24>

0800ad50 <__malloc_lock>:
 800ad50:	4801      	ldr	r0, [pc, #4]	; (800ad58 <__malloc_lock+0x8>)
 800ad52:	f000 bc11 	b.w	800b578 <__retarget_lock_acquire_recursive>
 800ad56:	bf00      	nop
 800ad58:	200003c8 	.word	0x200003c8

0800ad5c <__malloc_unlock>:
 800ad5c:	4801      	ldr	r0, [pc, #4]	; (800ad64 <__malloc_unlock+0x8>)
 800ad5e:	f000 bc0c 	b.w	800b57a <__retarget_lock_release_recursive>
 800ad62:	bf00      	nop
 800ad64:	200003c8 	.word	0x200003c8

0800ad68 <_realloc_r>:
 800ad68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6c:	4680      	mov	r8, r0
 800ad6e:	4614      	mov	r4, r2
 800ad70:	460e      	mov	r6, r1
 800ad72:	b921      	cbnz	r1, 800ad7e <_realloc_r+0x16>
 800ad74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad78:	4611      	mov	r1, r2
 800ad7a:	f7ff bd93 	b.w	800a8a4 <_malloc_r>
 800ad7e:	b92a      	cbnz	r2, 800ad8c <_realloc_r+0x24>
 800ad80:	f7ff fd24 	bl	800a7cc <_free_r>
 800ad84:	4625      	mov	r5, r4
 800ad86:	4628      	mov	r0, r5
 800ad88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad8c:	f000 fc5c 	bl	800b648 <_malloc_usable_size_r>
 800ad90:	4284      	cmp	r4, r0
 800ad92:	4607      	mov	r7, r0
 800ad94:	d802      	bhi.n	800ad9c <_realloc_r+0x34>
 800ad96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad9a:	d812      	bhi.n	800adc2 <_realloc_r+0x5a>
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	4640      	mov	r0, r8
 800ada0:	f7ff fd80 	bl	800a8a4 <_malloc_r>
 800ada4:	4605      	mov	r5, r0
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d0ed      	beq.n	800ad86 <_realloc_r+0x1e>
 800adaa:	42bc      	cmp	r4, r7
 800adac:	4622      	mov	r2, r4
 800adae:	4631      	mov	r1, r6
 800adb0:	bf28      	it	cs
 800adb2:	463a      	movcs	r2, r7
 800adb4:	f7ff f824 	bl	8009e00 <memcpy>
 800adb8:	4631      	mov	r1, r6
 800adba:	4640      	mov	r0, r8
 800adbc:	f7ff fd06 	bl	800a7cc <_free_r>
 800adc0:	e7e1      	b.n	800ad86 <_realloc_r+0x1e>
 800adc2:	4635      	mov	r5, r6
 800adc4:	e7df      	b.n	800ad86 <_realloc_r+0x1e>

0800adc6 <__sfputc_r>:
 800adc6:	6893      	ldr	r3, [r2, #8]
 800adc8:	3b01      	subs	r3, #1
 800adca:	2b00      	cmp	r3, #0
 800adcc:	b410      	push	{r4}
 800adce:	6093      	str	r3, [r2, #8]
 800add0:	da08      	bge.n	800ade4 <__sfputc_r+0x1e>
 800add2:	6994      	ldr	r4, [r2, #24]
 800add4:	42a3      	cmp	r3, r4
 800add6:	db01      	blt.n	800addc <__sfputc_r+0x16>
 800add8:	290a      	cmp	r1, #10
 800adda:	d103      	bne.n	800ade4 <__sfputc_r+0x1e>
 800addc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ade0:	f000 b94a 	b.w	800b078 <__swbuf_r>
 800ade4:	6813      	ldr	r3, [r2, #0]
 800ade6:	1c58      	adds	r0, r3, #1
 800ade8:	6010      	str	r0, [r2, #0]
 800adea:	7019      	strb	r1, [r3, #0]
 800adec:	4608      	mov	r0, r1
 800adee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <__sfputs_r>:
 800adf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf6:	4606      	mov	r6, r0
 800adf8:	460f      	mov	r7, r1
 800adfa:	4614      	mov	r4, r2
 800adfc:	18d5      	adds	r5, r2, r3
 800adfe:	42ac      	cmp	r4, r5
 800ae00:	d101      	bne.n	800ae06 <__sfputs_r+0x12>
 800ae02:	2000      	movs	r0, #0
 800ae04:	e007      	b.n	800ae16 <__sfputs_r+0x22>
 800ae06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae0a:	463a      	mov	r2, r7
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f7ff ffda 	bl	800adc6 <__sfputc_r>
 800ae12:	1c43      	adds	r3, r0, #1
 800ae14:	d1f3      	bne.n	800adfe <__sfputs_r+0xa>
 800ae16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae18 <_vfiprintf_r>:
 800ae18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1c:	460d      	mov	r5, r1
 800ae1e:	b09d      	sub	sp, #116	; 0x74
 800ae20:	4614      	mov	r4, r2
 800ae22:	4698      	mov	r8, r3
 800ae24:	4606      	mov	r6, r0
 800ae26:	b118      	cbz	r0, 800ae30 <_vfiprintf_r+0x18>
 800ae28:	6983      	ldr	r3, [r0, #24]
 800ae2a:	b90b      	cbnz	r3, 800ae30 <_vfiprintf_r+0x18>
 800ae2c:	f000 fb06 	bl	800b43c <__sinit>
 800ae30:	4b89      	ldr	r3, [pc, #548]	; (800b058 <_vfiprintf_r+0x240>)
 800ae32:	429d      	cmp	r5, r3
 800ae34:	d11b      	bne.n	800ae6e <_vfiprintf_r+0x56>
 800ae36:	6875      	ldr	r5, [r6, #4]
 800ae38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae3a:	07d9      	lsls	r1, r3, #31
 800ae3c:	d405      	bmi.n	800ae4a <_vfiprintf_r+0x32>
 800ae3e:	89ab      	ldrh	r3, [r5, #12]
 800ae40:	059a      	lsls	r2, r3, #22
 800ae42:	d402      	bmi.n	800ae4a <_vfiprintf_r+0x32>
 800ae44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae46:	f000 fb97 	bl	800b578 <__retarget_lock_acquire_recursive>
 800ae4a:	89ab      	ldrh	r3, [r5, #12]
 800ae4c:	071b      	lsls	r3, r3, #28
 800ae4e:	d501      	bpl.n	800ae54 <_vfiprintf_r+0x3c>
 800ae50:	692b      	ldr	r3, [r5, #16]
 800ae52:	b9eb      	cbnz	r3, 800ae90 <_vfiprintf_r+0x78>
 800ae54:	4629      	mov	r1, r5
 800ae56:	4630      	mov	r0, r6
 800ae58:	f000 f960 	bl	800b11c <__swsetup_r>
 800ae5c:	b1c0      	cbz	r0, 800ae90 <_vfiprintf_r+0x78>
 800ae5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae60:	07dc      	lsls	r4, r3, #31
 800ae62:	d50e      	bpl.n	800ae82 <_vfiprintf_r+0x6a>
 800ae64:	f04f 30ff 	mov.w	r0, #4294967295
 800ae68:	b01d      	add	sp, #116	; 0x74
 800ae6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae6e:	4b7b      	ldr	r3, [pc, #492]	; (800b05c <_vfiprintf_r+0x244>)
 800ae70:	429d      	cmp	r5, r3
 800ae72:	d101      	bne.n	800ae78 <_vfiprintf_r+0x60>
 800ae74:	68b5      	ldr	r5, [r6, #8]
 800ae76:	e7df      	b.n	800ae38 <_vfiprintf_r+0x20>
 800ae78:	4b79      	ldr	r3, [pc, #484]	; (800b060 <_vfiprintf_r+0x248>)
 800ae7a:	429d      	cmp	r5, r3
 800ae7c:	bf08      	it	eq
 800ae7e:	68f5      	ldreq	r5, [r6, #12]
 800ae80:	e7da      	b.n	800ae38 <_vfiprintf_r+0x20>
 800ae82:	89ab      	ldrh	r3, [r5, #12]
 800ae84:	0598      	lsls	r0, r3, #22
 800ae86:	d4ed      	bmi.n	800ae64 <_vfiprintf_r+0x4c>
 800ae88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae8a:	f000 fb76 	bl	800b57a <__retarget_lock_release_recursive>
 800ae8e:	e7e9      	b.n	800ae64 <_vfiprintf_r+0x4c>
 800ae90:	2300      	movs	r3, #0
 800ae92:	9309      	str	r3, [sp, #36]	; 0x24
 800ae94:	2320      	movs	r3, #32
 800ae96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae9e:	2330      	movs	r3, #48	; 0x30
 800aea0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b064 <_vfiprintf_r+0x24c>
 800aea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aea8:	f04f 0901 	mov.w	r9, #1
 800aeac:	4623      	mov	r3, r4
 800aeae:	469a      	mov	sl, r3
 800aeb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeb4:	b10a      	cbz	r2, 800aeba <_vfiprintf_r+0xa2>
 800aeb6:	2a25      	cmp	r2, #37	; 0x25
 800aeb8:	d1f9      	bne.n	800aeae <_vfiprintf_r+0x96>
 800aeba:	ebba 0b04 	subs.w	fp, sl, r4
 800aebe:	d00b      	beq.n	800aed8 <_vfiprintf_r+0xc0>
 800aec0:	465b      	mov	r3, fp
 800aec2:	4622      	mov	r2, r4
 800aec4:	4629      	mov	r1, r5
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7ff ff94 	bl	800adf4 <__sfputs_r>
 800aecc:	3001      	adds	r0, #1
 800aece:	f000 80aa 	beq.w	800b026 <_vfiprintf_r+0x20e>
 800aed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aed4:	445a      	add	r2, fp
 800aed6:	9209      	str	r2, [sp, #36]	; 0x24
 800aed8:	f89a 3000 	ldrb.w	r3, [sl]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f000 80a2 	beq.w	800b026 <_vfiprintf_r+0x20e>
 800aee2:	2300      	movs	r3, #0
 800aee4:	f04f 32ff 	mov.w	r2, #4294967295
 800aee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeec:	f10a 0a01 	add.w	sl, sl, #1
 800aef0:	9304      	str	r3, [sp, #16]
 800aef2:	9307      	str	r3, [sp, #28]
 800aef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aef8:	931a      	str	r3, [sp, #104]	; 0x68
 800aefa:	4654      	mov	r4, sl
 800aefc:	2205      	movs	r2, #5
 800aefe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af02:	4858      	ldr	r0, [pc, #352]	; (800b064 <_vfiprintf_r+0x24c>)
 800af04:	f7f5 f974 	bl	80001f0 <memchr>
 800af08:	9a04      	ldr	r2, [sp, #16]
 800af0a:	b9d8      	cbnz	r0, 800af44 <_vfiprintf_r+0x12c>
 800af0c:	06d1      	lsls	r1, r2, #27
 800af0e:	bf44      	itt	mi
 800af10:	2320      	movmi	r3, #32
 800af12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af16:	0713      	lsls	r3, r2, #28
 800af18:	bf44      	itt	mi
 800af1a:	232b      	movmi	r3, #43	; 0x2b
 800af1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af20:	f89a 3000 	ldrb.w	r3, [sl]
 800af24:	2b2a      	cmp	r3, #42	; 0x2a
 800af26:	d015      	beq.n	800af54 <_vfiprintf_r+0x13c>
 800af28:	9a07      	ldr	r2, [sp, #28]
 800af2a:	4654      	mov	r4, sl
 800af2c:	2000      	movs	r0, #0
 800af2e:	f04f 0c0a 	mov.w	ip, #10
 800af32:	4621      	mov	r1, r4
 800af34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af38:	3b30      	subs	r3, #48	; 0x30
 800af3a:	2b09      	cmp	r3, #9
 800af3c:	d94e      	bls.n	800afdc <_vfiprintf_r+0x1c4>
 800af3e:	b1b0      	cbz	r0, 800af6e <_vfiprintf_r+0x156>
 800af40:	9207      	str	r2, [sp, #28]
 800af42:	e014      	b.n	800af6e <_vfiprintf_r+0x156>
 800af44:	eba0 0308 	sub.w	r3, r0, r8
 800af48:	fa09 f303 	lsl.w	r3, r9, r3
 800af4c:	4313      	orrs	r3, r2
 800af4e:	9304      	str	r3, [sp, #16]
 800af50:	46a2      	mov	sl, r4
 800af52:	e7d2      	b.n	800aefa <_vfiprintf_r+0xe2>
 800af54:	9b03      	ldr	r3, [sp, #12]
 800af56:	1d19      	adds	r1, r3, #4
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	9103      	str	r1, [sp, #12]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	bfbb      	ittet	lt
 800af60:	425b      	neglt	r3, r3
 800af62:	f042 0202 	orrlt.w	r2, r2, #2
 800af66:	9307      	strge	r3, [sp, #28]
 800af68:	9307      	strlt	r3, [sp, #28]
 800af6a:	bfb8      	it	lt
 800af6c:	9204      	strlt	r2, [sp, #16]
 800af6e:	7823      	ldrb	r3, [r4, #0]
 800af70:	2b2e      	cmp	r3, #46	; 0x2e
 800af72:	d10c      	bne.n	800af8e <_vfiprintf_r+0x176>
 800af74:	7863      	ldrb	r3, [r4, #1]
 800af76:	2b2a      	cmp	r3, #42	; 0x2a
 800af78:	d135      	bne.n	800afe6 <_vfiprintf_r+0x1ce>
 800af7a:	9b03      	ldr	r3, [sp, #12]
 800af7c:	1d1a      	adds	r2, r3, #4
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	9203      	str	r2, [sp, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	bfb8      	it	lt
 800af86:	f04f 33ff 	movlt.w	r3, #4294967295
 800af8a:	3402      	adds	r4, #2
 800af8c:	9305      	str	r3, [sp, #20]
 800af8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b074 <_vfiprintf_r+0x25c>
 800af92:	7821      	ldrb	r1, [r4, #0]
 800af94:	2203      	movs	r2, #3
 800af96:	4650      	mov	r0, sl
 800af98:	f7f5 f92a 	bl	80001f0 <memchr>
 800af9c:	b140      	cbz	r0, 800afb0 <_vfiprintf_r+0x198>
 800af9e:	2340      	movs	r3, #64	; 0x40
 800afa0:	eba0 000a 	sub.w	r0, r0, sl
 800afa4:	fa03 f000 	lsl.w	r0, r3, r0
 800afa8:	9b04      	ldr	r3, [sp, #16]
 800afaa:	4303      	orrs	r3, r0
 800afac:	3401      	adds	r4, #1
 800afae:	9304      	str	r3, [sp, #16]
 800afb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb4:	482c      	ldr	r0, [pc, #176]	; (800b068 <_vfiprintf_r+0x250>)
 800afb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afba:	2206      	movs	r2, #6
 800afbc:	f7f5 f918 	bl	80001f0 <memchr>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d03f      	beq.n	800b044 <_vfiprintf_r+0x22c>
 800afc4:	4b29      	ldr	r3, [pc, #164]	; (800b06c <_vfiprintf_r+0x254>)
 800afc6:	bb1b      	cbnz	r3, 800b010 <_vfiprintf_r+0x1f8>
 800afc8:	9b03      	ldr	r3, [sp, #12]
 800afca:	3307      	adds	r3, #7
 800afcc:	f023 0307 	bic.w	r3, r3, #7
 800afd0:	3308      	adds	r3, #8
 800afd2:	9303      	str	r3, [sp, #12]
 800afd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd6:	443b      	add	r3, r7
 800afd8:	9309      	str	r3, [sp, #36]	; 0x24
 800afda:	e767      	b.n	800aeac <_vfiprintf_r+0x94>
 800afdc:	fb0c 3202 	mla	r2, ip, r2, r3
 800afe0:	460c      	mov	r4, r1
 800afe2:	2001      	movs	r0, #1
 800afe4:	e7a5      	b.n	800af32 <_vfiprintf_r+0x11a>
 800afe6:	2300      	movs	r3, #0
 800afe8:	3401      	adds	r4, #1
 800afea:	9305      	str	r3, [sp, #20]
 800afec:	4619      	mov	r1, r3
 800afee:	f04f 0c0a 	mov.w	ip, #10
 800aff2:	4620      	mov	r0, r4
 800aff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aff8:	3a30      	subs	r2, #48	; 0x30
 800affa:	2a09      	cmp	r2, #9
 800affc:	d903      	bls.n	800b006 <_vfiprintf_r+0x1ee>
 800affe:	2b00      	cmp	r3, #0
 800b000:	d0c5      	beq.n	800af8e <_vfiprintf_r+0x176>
 800b002:	9105      	str	r1, [sp, #20]
 800b004:	e7c3      	b.n	800af8e <_vfiprintf_r+0x176>
 800b006:	fb0c 2101 	mla	r1, ip, r1, r2
 800b00a:	4604      	mov	r4, r0
 800b00c:	2301      	movs	r3, #1
 800b00e:	e7f0      	b.n	800aff2 <_vfiprintf_r+0x1da>
 800b010:	ab03      	add	r3, sp, #12
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	462a      	mov	r2, r5
 800b016:	4b16      	ldr	r3, [pc, #88]	; (800b070 <_vfiprintf_r+0x258>)
 800b018:	a904      	add	r1, sp, #16
 800b01a:	4630      	mov	r0, r6
 800b01c:	f7fc f808 	bl	8007030 <_printf_float>
 800b020:	4607      	mov	r7, r0
 800b022:	1c78      	adds	r0, r7, #1
 800b024:	d1d6      	bne.n	800afd4 <_vfiprintf_r+0x1bc>
 800b026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b028:	07d9      	lsls	r1, r3, #31
 800b02a:	d405      	bmi.n	800b038 <_vfiprintf_r+0x220>
 800b02c:	89ab      	ldrh	r3, [r5, #12]
 800b02e:	059a      	lsls	r2, r3, #22
 800b030:	d402      	bmi.n	800b038 <_vfiprintf_r+0x220>
 800b032:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b034:	f000 faa1 	bl	800b57a <__retarget_lock_release_recursive>
 800b038:	89ab      	ldrh	r3, [r5, #12]
 800b03a:	065b      	lsls	r3, r3, #25
 800b03c:	f53f af12 	bmi.w	800ae64 <_vfiprintf_r+0x4c>
 800b040:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b042:	e711      	b.n	800ae68 <_vfiprintf_r+0x50>
 800b044:	ab03      	add	r3, sp, #12
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	462a      	mov	r2, r5
 800b04a:	4b09      	ldr	r3, [pc, #36]	; (800b070 <_vfiprintf_r+0x258>)
 800b04c:	a904      	add	r1, sp, #16
 800b04e:	4630      	mov	r0, r6
 800b050:	f7fc fa92 	bl	8007578 <_printf_i>
 800b054:	e7e4      	b.n	800b020 <_vfiprintf_r+0x208>
 800b056:	bf00      	nop
 800b058:	0800bd04 	.word	0x0800bd04
 800b05c:	0800bd24 	.word	0x0800bd24
 800b060:	0800bce4 	.word	0x0800bce4
 800b064:	0800bc94 	.word	0x0800bc94
 800b068:	0800bc9e 	.word	0x0800bc9e
 800b06c:	08007031 	.word	0x08007031
 800b070:	0800adf5 	.word	0x0800adf5
 800b074:	0800bc9a 	.word	0x0800bc9a

0800b078 <__swbuf_r>:
 800b078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07a:	460e      	mov	r6, r1
 800b07c:	4614      	mov	r4, r2
 800b07e:	4605      	mov	r5, r0
 800b080:	b118      	cbz	r0, 800b08a <__swbuf_r+0x12>
 800b082:	6983      	ldr	r3, [r0, #24]
 800b084:	b90b      	cbnz	r3, 800b08a <__swbuf_r+0x12>
 800b086:	f000 f9d9 	bl	800b43c <__sinit>
 800b08a:	4b21      	ldr	r3, [pc, #132]	; (800b110 <__swbuf_r+0x98>)
 800b08c:	429c      	cmp	r4, r3
 800b08e:	d12b      	bne.n	800b0e8 <__swbuf_r+0x70>
 800b090:	686c      	ldr	r4, [r5, #4]
 800b092:	69a3      	ldr	r3, [r4, #24]
 800b094:	60a3      	str	r3, [r4, #8]
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	071a      	lsls	r2, r3, #28
 800b09a:	d52f      	bpl.n	800b0fc <__swbuf_r+0x84>
 800b09c:	6923      	ldr	r3, [r4, #16]
 800b09e:	b36b      	cbz	r3, 800b0fc <__swbuf_r+0x84>
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	6820      	ldr	r0, [r4, #0]
 800b0a4:	1ac0      	subs	r0, r0, r3
 800b0a6:	6963      	ldr	r3, [r4, #20]
 800b0a8:	b2f6      	uxtb	r6, r6
 800b0aa:	4283      	cmp	r3, r0
 800b0ac:	4637      	mov	r7, r6
 800b0ae:	dc04      	bgt.n	800b0ba <__swbuf_r+0x42>
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f000 f92e 	bl	800b314 <_fflush_r>
 800b0b8:	bb30      	cbnz	r0, 800b108 <__swbuf_r+0x90>
 800b0ba:	68a3      	ldr	r3, [r4, #8]
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	60a3      	str	r3, [r4, #8]
 800b0c0:	6823      	ldr	r3, [r4, #0]
 800b0c2:	1c5a      	adds	r2, r3, #1
 800b0c4:	6022      	str	r2, [r4, #0]
 800b0c6:	701e      	strb	r6, [r3, #0]
 800b0c8:	6963      	ldr	r3, [r4, #20]
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	4283      	cmp	r3, r0
 800b0ce:	d004      	beq.n	800b0da <__swbuf_r+0x62>
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	07db      	lsls	r3, r3, #31
 800b0d4:	d506      	bpl.n	800b0e4 <__swbuf_r+0x6c>
 800b0d6:	2e0a      	cmp	r6, #10
 800b0d8:	d104      	bne.n	800b0e4 <__swbuf_r+0x6c>
 800b0da:	4621      	mov	r1, r4
 800b0dc:	4628      	mov	r0, r5
 800b0de:	f000 f919 	bl	800b314 <_fflush_r>
 800b0e2:	b988      	cbnz	r0, 800b108 <__swbuf_r+0x90>
 800b0e4:	4638      	mov	r0, r7
 800b0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0e8:	4b0a      	ldr	r3, [pc, #40]	; (800b114 <__swbuf_r+0x9c>)
 800b0ea:	429c      	cmp	r4, r3
 800b0ec:	d101      	bne.n	800b0f2 <__swbuf_r+0x7a>
 800b0ee:	68ac      	ldr	r4, [r5, #8]
 800b0f0:	e7cf      	b.n	800b092 <__swbuf_r+0x1a>
 800b0f2:	4b09      	ldr	r3, [pc, #36]	; (800b118 <__swbuf_r+0xa0>)
 800b0f4:	429c      	cmp	r4, r3
 800b0f6:	bf08      	it	eq
 800b0f8:	68ec      	ldreq	r4, [r5, #12]
 800b0fa:	e7ca      	b.n	800b092 <__swbuf_r+0x1a>
 800b0fc:	4621      	mov	r1, r4
 800b0fe:	4628      	mov	r0, r5
 800b100:	f000 f80c 	bl	800b11c <__swsetup_r>
 800b104:	2800      	cmp	r0, #0
 800b106:	d0cb      	beq.n	800b0a0 <__swbuf_r+0x28>
 800b108:	f04f 37ff 	mov.w	r7, #4294967295
 800b10c:	e7ea      	b.n	800b0e4 <__swbuf_r+0x6c>
 800b10e:	bf00      	nop
 800b110:	0800bd04 	.word	0x0800bd04
 800b114:	0800bd24 	.word	0x0800bd24
 800b118:	0800bce4 	.word	0x0800bce4

0800b11c <__swsetup_r>:
 800b11c:	4b32      	ldr	r3, [pc, #200]	; (800b1e8 <__swsetup_r+0xcc>)
 800b11e:	b570      	push	{r4, r5, r6, lr}
 800b120:	681d      	ldr	r5, [r3, #0]
 800b122:	4606      	mov	r6, r0
 800b124:	460c      	mov	r4, r1
 800b126:	b125      	cbz	r5, 800b132 <__swsetup_r+0x16>
 800b128:	69ab      	ldr	r3, [r5, #24]
 800b12a:	b913      	cbnz	r3, 800b132 <__swsetup_r+0x16>
 800b12c:	4628      	mov	r0, r5
 800b12e:	f000 f985 	bl	800b43c <__sinit>
 800b132:	4b2e      	ldr	r3, [pc, #184]	; (800b1ec <__swsetup_r+0xd0>)
 800b134:	429c      	cmp	r4, r3
 800b136:	d10f      	bne.n	800b158 <__swsetup_r+0x3c>
 800b138:	686c      	ldr	r4, [r5, #4]
 800b13a:	89a3      	ldrh	r3, [r4, #12]
 800b13c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b140:	0719      	lsls	r1, r3, #28
 800b142:	d42c      	bmi.n	800b19e <__swsetup_r+0x82>
 800b144:	06dd      	lsls	r5, r3, #27
 800b146:	d411      	bmi.n	800b16c <__swsetup_r+0x50>
 800b148:	2309      	movs	r3, #9
 800b14a:	6033      	str	r3, [r6, #0]
 800b14c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b150:	81a3      	strh	r3, [r4, #12]
 800b152:	f04f 30ff 	mov.w	r0, #4294967295
 800b156:	e03e      	b.n	800b1d6 <__swsetup_r+0xba>
 800b158:	4b25      	ldr	r3, [pc, #148]	; (800b1f0 <__swsetup_r+0xd4>)
 800b15a:	429c      	cmp	r4, r3
 800b15c:	d101      	bne.n	800b162 <__swsetup_r+0x46>
 800b15e:	68ac      	ldr	r4, [r5, #8]
 800b160:	e7eb      	b.n	800b13a <__swsetup_r+0x1e>
 800b162:	4b24      	ldr	r3, [pc, #144]	; (800b1f4 <__swsetup_r+0xd8>)
 800b164:	429c      	cmp	r4, r3
 800b166:	bf08      	it	eq
 800b168:	68ec      	ldreq	r4, [r5, #12]
 800b16a:	e7e6      	b.n	800b13a <__swsetup_r+0x1e>
 800b16c:	0758      	lsls	r0, r3, #29
 800b16e:	d512      	bpl.n	800b196 <__swsetup_r+0x7a>
 800b170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b172:	b141      	cbz	r1, 800b186 <__swsetup_r+0x6a>
 800b174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b178:	4299      	cmp	r1, r3
 800b17a:	d002      	beq.n	800b182 <__swsetup_r+0x66>
 800b17c:	4630      	mov	r0, r6
 800b17e:	f7ff fb25 	bl	800a7cc <_free_r>
 800b182:	2300      	movs	r3, #0
 800b184:	6363      	str	r3, [r4, #52]	; 0x34
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b18c:	81a3      	strh	r3, [r4, #12]
 800b18e:	2300      	movs	r3, #0
 800b190:	6063      	str	r3, [r4, #4]
 800b192:	6923      	ldr	r3, [r4, #16]
 800b194:	6023      	str	r3, [r4, #0]
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	f043 0308 	orr.w	r3, r3, #8
 800b19c:	81a3      	strh	r3, [r4, #12]
 800b19e:	6923      	ldr	r3, [r4, #16]
 800b1a0:	b94b      	cbnz	r3, 800b1b6 <__swsetup_r+0x9a>
 800b1a2:	89a3      	ldrh	r3, [r4, #12]
 800b1a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1ac:	d003      	beq.n	800b1b6 <__swsetup_r+0x9a>
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	f000 fa09 	bl	800b5c8 <__smakebuf_r>
 800b1b6:	89a0      	ldrh	r0, [r4, #12]
 800b1b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1bc:	f010 0301 	ands.w	r3, r0, #1
 800b1c0:	d00a      	beq.n	800b1d8 <__swsetup_r+0xbc>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	60a3      	str	r3, [r4, #8]
 800b1c6:	6963      	ldr	r3, [r4, #20]
 800b1c8:	425b      	negs	r3, r3
 800b1ca:	61a3      	str	r3, [r4, #24]
 800b1cc:	6923      	ldr	r3, [r4, #16]
 800b1ce:	b943      	cbnz	r3, 800b1e2 <__swsetup_r+0xc6>
 800b1d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b1d4:	d1ba      	bne.n	800b14c <__swsetup_r+0x30>
 800b1d6:	bd70      	pop	{r4, r5, r6, pc}
 800b1d8:	0781      	lsls	r1, r0, #30
 800b1da:	bf58      	it	pl
 800b1dc:	6963      	ldrpl	r3, [r4, #20]
 800b1de:	60a3      	str	r3, [r4, #8]
 800b1e0:	e7f4      	b.n	800b1cc <__swsetup_r+0xb0>
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	e7f7      	b.n	800b1d6 <__swsetup_r+0xba>
 800b1e6:	bf00      	nop
 800b1e8:	2000001c 	.word	0x2000001c
 800b1ec:	0800bd04 	.word	0x0800bd04
 800b1f0:	0800bd24 	.word	0x0800bd24
 800b1f4:	0800bce4 	.word	0x0800bce4

0800b1f8 <abort>:
 800b1f8:	b508      	push	{r3, lr}
 800b1fa:	2006      	movs	r0, #6
 800b1fc:	f000 fa54 	bl	800b6a8 <raise>
 800b200:	2001      	movs	r0, #1
 800b202:	f7f6 fb45 	bl	8001890 <_exit>
	...

0800b208 <__sflush_r>:
 800b208:	898a      	ldrh	r2, [r1, #12]
 800b20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b20e:	4605      	mov	r5, r0
 800b210:	0710      	lsls	r0, r2, #28
 800b212:	460c      	mov	r4, r1
 800b214:	d458      	bmi.n	800b2c8 <__sflush_r+0xc0>
 800b216:	684b      	ldr	r3, [r1, #4]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	dc05      	bgt.n	800b228 <__sflush_r+0x20>
 800b21c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b21e:	2b00      	cmp	r3, #0
 800b220:	dc02      	bgt.n	800b228 <__sflush_r+0x20>
 800b222:	2000      	movs	r0, #0
 800b224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b22a:	2e00      	cmp	r6, #0
 800b22c:	d0f9      	beq.n	800b222 <__sflush_r+0x1a>
 800b22e:	2300      	movs	r3, #0
 800b230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b234:	682f      	ldr	r7, [r5, #0]
 800b236:	602b      	str	r3, [r5, #0]
 800b238:	d032      	beq.n	800b2a0 <__sflush_r+0x98>
 800b23a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b23c:	89a3      	ldrh	r3, [r4, #12]
 800b23e:	075a      	lsls	r2, r3, #29
 800b240:	d505      	bpl.n	800b24e <__sflush_r+0x46>
 800b242:	6863      	ldr	r3, [r4, #4]
 800b244:	1ac0      	subs	r0, r0, r3
 800b246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b248:	b10b      	cbz	r3, 800b24e <__sflush_r+0x46>
 800b24a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b24c:	1ac0      	subs	r0, r0, r3
 800b24e:	2300      	movs	r3, #0
 800b250:	4602      	mov	r2, r0
 800b252:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b254:	6a21      	ldr	r1, [r4, #32]
 800b256:	4628      	mov	r0, r5
 800b258:	47b0      	blx	r6
 800b25a:	1c43      	adds	r3, r0, #1
 800b25c:	89a3      	ldrh	r3, [r4, #12]
 800b25e:	d106      	bne.n	800b26e <__sflush_r+0x66>
 800b260:	6829      	ldr	r1, [r5, #0]
 800b262:	291d      	cmp	r1, #29
 800b264:	d82c      	bhi.n	800b2c0 <__sflush_r+0xb8>
 800b266:	4a2a      	ldr	r2, [pc, #168]	; (800b310 <__sflush_r+0x108>)
 800b268:	40ca      	lsrs	r2, r1
 800b26a:	07d6      	lsls	r6, r2, #31
 800b26c:	d528      	bpl.n	800b2c0 <__sflush_r+0xb8>
 800b26e:	2200      	movs	r2, #0
 800b270:	6062      	str	r2, [r4, #4]
 800b272:	04d9      	lsls	r1, r3, #19
 800b274:	6922      	ldr	r2, [r4, #16]
 800b276:	6022      	str	r2, [r4, #0]
 800b278:	d504      	bpl.n	800b284 <__sflush_r+0x7c>
 800b27a:	1c42      	adds	r2, r0, #1
 800b27c:	d101      	bne.n	800b282 <__sflush_r+0x7a>
 800b27e:	682b      	ldr	r3, [r5, #0]
 800b280:	b903      	cbnz	r3, 800b284 <__sflush_r+0x7c>
 800b282:	6560      	str	r0, [r4, #84]	; 0x54
 800b284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b286:	602f      	str	r7, [r5, #0]
 800b288:	2900      	cmp	r1, #0
 800b28a:	d0ca      	beq.n	800b222 <__sflush_r+0x1a>
 800b28c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b290:	4299      	cmp	r1, r3
 800b292:	d002      	beq.n	800b29a <__sflush_r+0x92>
 800b294:	4628      	mov	r0, r5
 800b296:	f7ff fa99 	bl	800a7cc <_free_r>
 800b29a:	2000      	movs	r0, #0
 800b29c:	6360      	str	r0, [r4, #52]	; 0x34
 800b29e:	e7c1      	b.n	800b224 <__sflush_r+0x1c>
 800b2a0:	6a21      	ldr	r1, [r4, #32]
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	47b0      	blx	r6
 800b2a8:	1c41      	adds	r1, r0, #1
 800b2aa:	d1c7      	bne.n	800b23c <__sflush_r+0x34>
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d0c4      	beq.n	800b23c <__sflush_r+0x34>
 800b2b2:	2b1d      	cmp	r3, #29
 800b2b4:	d001      	beq.n	800b2ba <__sflush_r+0xb2>
 800b2b6:	2b16      	cmp	r3, #22
 800b2b8:	d101      	bne.n	800b2be <__sflush_r+0xb6>
 800b2ba:	602f      	str	r7, [r5, #0]
 800b2bc:	e7b1      	b.n	800b222 <__sflush_r+0x1a>
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2c4:	81a3      	strh	r3, [r4, #12]
 800b2c6:	e7ad      	b.n	800b224 <__sflush_r+0x1c>
 800b2c8:	690f      	ldr	r7, [r1, #16]
 800b2ca:	2f00      	cmp	r7, #0
 800b2cc:	d0a9      	beq.n	800b222 <__sflush_r+0x1a>
 800b2ce:	0793      	lsls	r3, r2, #30
 800b2d0:	680e      	ldr	r6, [r1, #0]
 800b2d2:	bf08      	it	eq
 800b2d4:	694b      	ldreq	r3, [r1, #20]
 800b2d6:	600f      	str	r7, [r1, #0]
 800b2d8:	bf18      	it	ne
 800b2da:	2300      	movne	r3, #0
 800b2dc:	eba6 0807 	sub.w	r8, r6, r7
 800b2e0:	608b      	str	r3, [r1, #8]
 800b2e2:	f1b8 0f00 	cmp.w	r8, #0
 800b2e6:	dd9c      	ble.n	800b222 <__sflush_r+0x1a>
 800b2e8:	6a21      	ldr	r1, [r4, #32]
 800b2ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2ec:	4643      	mov	r3, r8
 800b2ee:	463a      	mov	r2, r7
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	47b0      	blx	r6
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	dc06      	bgt.n	800b306 <__sflush_r+0xfe>
 800b2f8:	89a3      	ldrh	r3, [r4, #12]
 800b2fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2fe:	81a3      	strh	r3, [r4, #12]
 800b300:	f04f 30ff 	mov.w	r0, #4294967295
 800b304:	e78e      	b.n	800b224 <__sflush_r+0x1c>
 800b306:	4407      	add	r7, r0
 800b308:	eba8 0800 	sub.w	r8, r8, r0
 800b30c:	e7e9      	b.n	800b2e2 <__sflush_r+0xda>
 800b30e:	bf00      	nop
 800b310:	20400001 	.word	0x20400001

0800b314 <_fflush_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	690b      	ldr	r3, [r1, #16]
 800b318:	4605      	mov	r5, r0
 800b31a:	460c      	mov	r4, r1
 800b31c:	b913      	cbnz	r3, 800b324 <_fflush_r+0x10>
 800b31e:	2500      	movs	r5, #0
 800b320:	4628      	mov	r0, r5
 800b322:	bd38      	pop	{r3, r4, r5, pc}
 800b324:	b118      	cbz	r0, 800b32e <_fflush_r+0x1a>
 800b326:	6983      	ldr	r3, [r0, #24]
 800b328:	b90b      	cbnz	r3, 800b32e <_fflush_r+0x1a>
 800b32a:	f000 f887 	bl	800b43c <__sinit>
 800b32e:	4b14      	ldr	r3, [pc, #80]	; (800b380 <_fflush_r+0x6c>)
 800b330:	429c      	cmp	r4, r3
 800b332:	d11b      	bne.n	800b36c <_fflush_r+0x58>
 800b334:	686c      	ldr	r4, [r5, #4]
 800b336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0ef      	beq.n	800b31e <_fflush_r+0xa>
 800b33e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b340:	07d0      	lsls	r0, r2, #31
 800b342:	d404      	bmi.n	800b34e <_fflush_r+0x3a>
 800b344:	0599      	lsls	r1, r3, #22
 800b346:	d402      	bmi.n	800b34e <_fflush_r+0x3a>
 800b348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b34a:	f000 f915 	bl	800b578 <__retarget_lock_acquire_recursive>
 800b34e:	4628      	mov	r0, r5
 800b350:	4621      	mov	r1, r4
 800b352:	f7ff ff59 	bl	800b208 <__sflush_r>
 800b356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b358:	07da      	lsls	r2, r3, #31
 800b35a:	4605      	mov	r5, r0
 800b35c:	d4e0      	bmi.n	800b320 <_fflush_r+0xc>
 800b35e:	89a3      	ldrh	r3, [r4, #12]
 800b360:	059b      	lsls	r3, r3, #22
 800b362:	d4dd      	bmi.n	800b320 <_fflush_r+0xc>
 800b364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b366:	f000 f908 	bl	800b57a <__retarget_lock_release_recursive>
 800b36a:	e7d9      	b.n	800b320 <_fflush_r+0xc>
 800b36c:	4b05      	ldr	r3, [pc, #20]	; (800b384 <_fflush_r+0x70>)
 800b36e:	429c      	cmp	r4, r3
 800b370:	d101      	bne.n	800b376 <_fflush_r+0x62>
 800b372:	68ac      	ldr	r4, [r5, #8]
 800b374:	e7df      	b.n	800b336 <_fflush_r+0x22>
 800b376:	4b04      	ldr	r3, [pc, #16]	; (800b388 <_fflush_r+0x74>)
 800b378:	429c      	cmp	r4, r3
 800b37a:	bf08      	it	eq
 800b37c:	68ec      	ldreq	r4, [r5, #12]
 800b37e:	e7da      	b.n	800b336 <_fflush_r+0x22>
 800b380:	0800bd04 	.word	0x0800bd04
 800b384:	0800bd24 	.word	0x0800bd24
 800b388:	0800bce4 	.word	0x0800bce4

0800b38c <std>:
 800b38c:	2300      	movs	r3, #0
 800b38e:	b510      	push	{r4, lr}
 800b390:	4604      	mov	r4, r0
 800b392:	e9c0 3300 	strd	r3, r3, [r0]
 800b396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b39a:	6083      	str	r3, [r0, #8]
 800b39c:	8181      	strh	r1, [r0, #12]
 800b39e:	6643      	str	r3, [r0, #100]	; 0x64
 800b3a0:	81c2      	strh	r2, [r0, #14]
 800b3a2:	6183      	str	r3, [r0, #24]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	2208      	movs	r2, #8
 800b3a8:	305c      	adds	r0, #92	; 0x5c
 800b3aa:	f7fb fd99 	bl	8006ee0 <memset>
 800b3ae:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <std+0x38>)
 800b3b0:	6263      	str	r3, [r4, #36]	; 0x24
 800b3b2:	4b05      	ldr	r3, [pc, #20]	; (800b3c8 <std+0x3c>)
 800b3b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3b6:	4b05      	ldr	r3, [pc, #20]	; (800b3cc <std+0x40>)
 800b3b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3ba:	4b05      	ldr	r3, [pc, #20]	; (800b3d0 <std+0x44>)
 800b3bc:	6224      	str	r4, [r4, #32]
 800b3be:	6323      	str	r3, [r4, #48]	; 0x30
 800b3c0:	bd10      	pop	{r4, pc}
 800b3c2:	bf00      	nop
 800b3c4:	0800b6e1 	.word	0x0800b6e1
 800b3c8:	0800b703 	.word	0x0800b703
 800b3cc:	0800b73b 	.word	0x0800b73b
 800b3d0:	0800b75f 	.word	0x0800b75f

0800b3d4 <_cleanup_r>:
 800b3d4:	4901      	ldr	r1, [pc, #4]	; (800b3dc <_cleanup_r+0x8>)
 800b3d6:	f000 b8af 	b.w	800b538 <_fwalk_reent>
 800b3da:	bf00      	nop
 800b3dc:	0800b315 	.word	0x0800b315

0800b3e0 <__sfmoreglue>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	2268      	movs	r2, #104	; 0x68
 800b3e4:	1e4d      	subs	r5, r1, #1
 800b3e6:	4355      	muls	r5, r2
 800b3e8:	460e      	mov	r6, r1
 800b3ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3ee:	f7ff fa59 	bl	800a8a4 <_malloc_r>
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	b140      	cbz	r0, 800b408 <__sfmoreglue+0x28>
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	e9c0 1600 	strd	r1, r6, [r0]
 800b3fc:	300c      	adds	r0, #12
 800b3fe:	60a0      	str	r0, [r4, #8]
 800b400:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b404:	f7fb fd6c 	bl	8006ee0 <memset>
 800b408:	4620      	mov	r0, r4
 800b40a:	bd70      	pop	{r4, r5, r6, pc}

0800b40c <__sfp_lock_acquire>:
 800b40c:	4801      	ldr	r0, [pc, #4]	; (800b414 <__sfp_lock_acquire+0x8>)
 800b40e:	f000 b8b3 	b.w	800b578 <__retarget_lock_acquire_recursive>
 800b412:	bf00      	nop
 800b414:	200003c9 	.word	0x200003c9

0800b418 <__sfp_lock_release>:
 800b418:	4801      	ldr	r0, [pc, #4]	; (800b420 <__sfp_lock_release+0x8>)
 800b41a:	f000 b8ae 	b.w	800b57a <__retarget_lock_release_recursive>
 800b41e:	bf00      	nop
 800b420:	200003c9 	.word	0x200003c9

0800b424 <__sinit_lock_acquire>:
 800b424:	4801      	ldr	r0, [pc, #4]	; (800b42c <__sinit_lock_acquire+0x8>)
 800b426:	f000 b8a7 	b.w	800b578 <__retarget_lock_acquire_recursive>
 800b42a:	bf00      	nop
 800b42c:	200003ca 	.word	0x200003ca

0800b430 <__sinit_lock_release>:
 800b430:	4801      	ldr	r0, [pc, #4]	; (800b438 <__sinit_lock_release+0x8>)
 800b432:	f000 b8a2 	b.w	800b57a <__retarget_lock_release_recursive>
 800b436:	bf00      	nop
 800b438:	200003ca 	.word	0x200003ca

0800b43c <__sinit>:
 800b43c:	b510      	push	{r4, lr}
 800b43e:	4604      	mov	r4, r0
 800b440:	f7ff fff0 	bl	800b424 <__sinit_lock_acquire>
 800b444:	69a3      	ldr	r3, [r4, #24]
 800b446:	b11b      	cbz	r3, 800b450 <__sinit+0x14>
 800b448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b44c:	f7ff bff0 	b.w	800b430 <__sinit_lock_release>
 800b450:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b454:	6523      	str	r3, [r4, #80]	; 0x50
 800b456:	4b13      	ldr	r3, [pc, #76]	; (800b4a4 <__sinit+0x68>)
 800b458:	4a13      	ldr	r2, [pc, #76]	; (800b4a8 <__sinit+0x6c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b45e:	42a3      	cmp	r3, r4
 800b460:	bf04      	itt	eq
 800b462:	2301      	moveq	r3, #1
 800b464:	61a3      	streq	r3, [r4, #24]
 800b466:	4620      	mov	r0, r4
 800b468:	f000 f820 	bl	800b4ac <__sfp>
 800b46c:	6060      	str	r0, [r4, #4]
 800b46e:	4620      	mov	r0, r4
 800b470:	f000 f81c 	bl	800b4ac <__sfp>
 800b474:	60a0      	str	r0, [r4, #8]
 800b476:	4620      	mov	r0, r4
 800b478:	f000 f818 	bl	800b4ac <__sfp>
 800b47c:	2200      	movs	r2, #0
 800b47e:	60e0      	str	r0, [r4, #12]
 800b480:	2104      	movs	r1, #4
 800b482:	6860      	ldr	r0, [r4, #4]
 800b484:	f7ff ff82 	bl	800b38c <std>
 800b488:	68a0      	ldr	r0, [r4, #8]
 800b48a:	2201      	movs	r2, #1
 800b48c:	2109      	movs	r1, #9
 800b48e:	f7ff ff7d 	bl	800b38c <std>
 800b492:	68e0      	ldr	r0, [r4, #12]
 800b494:	2202      	movs	r2, #2
 800b496:	2112      	movs	r1, #18
 800b498:	f7ff ff78 	bl	800b38c <std>
 800b49c:	2301      	movs	r3, #1
 800b49e:	61a3      	str	r3, [r4, #24]
 800b4a0:	e7d2      	b.n	800b448 <__sinit+0xc>
 800b4a2:	bf00      	nop
 800b4a4:	0800b89c 	.word	0x0800b89c
 800b4a8:	0800b3d5 	.word	0x0800b3d5

0800b4ac <__sfp>:
 800b4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ae:	4607      	mov	r7, r0
 800b4b0:	f7ff ffac 	bl	800b40c <__sfp_lock_acquire>
 800b4b4:	4b1e      	ldr	r3, [pc, #120]	; (800b530 <__sfp+0x84>)
 800b4b6:	681e      	ldr	r6, [r3, #0]
 800b4b8:	69b3      	ldr	r3, [r6, #24]
 800b4ba:	b913      	cbnz	r3, 800b4c2 <__sfp+0x16>
 800b4bc:	4630      	mov	r0, r6
 800b4be:	f7ff ffbd 	bl	800b43c <__sinit>
 800b4c2:	3648      	adds	r6, #72	; 0x48
 800b4c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	d503      	bpl.n	800b4d4 <__sfp+0x28>
 800b4cc:	6833      	ldr	r3, [r6, #0]
 800b4ce:	b30b      	cbz	r3, 800b514 <__sfp+0x68>
 800b4d0:	6836      	ldr	r6, [r6, #0]
 800b4d2:	e7f7      	b.n	800b4c4 <__sfp+0x18>
 800b4d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b4d8:	b9d5      	cbnz	r5, 800b510 <__sfp+0x64>
 800b4da:	4b16      	ldr	r3, [pc, #88]	; (800b534 <__sfp+0x88>)
 800b4dc:	60e3      	str	r3, [r4, #12]
 800b4de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b4e2:	6665      	str	r5, [r4, #100]	; 0x64
 800b4e4:	f000 f847 	bl	800b576 <__retarget_lock_init_recursive>
 800b4e8:	f7ff ff96 	bl	800b418 <__sfp_lock_release>
 800b4ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4f4:	6025      	str	r5, [r4, #0]
 800b4f6:	61a5      	str	r5, [r4, #24]
 800b4f8:	2208      	movs	r2, #8
 800b4fa:	4629      	mov	r1, r5
 800b4fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b500:	f7fb fcee 	bl	8006ee0 <memset>
 800b504:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b508:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b50c:	4620      	mov	r0, r4
 800b50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b510:	3468      	adds	r4, #104	; 0x68
 800b512:	e7d9      	b.n	800b4c8 <__sfp+0x1c>
 800b514:	2104      	movs	r1, #4
 800b516:	4638      	mov	r0, r7
 800b518:	f7ff ff62 	bl	800b3e0 <__sfmoreglue>
 800b51c:	4604      	mov	r4, r0
 800b51e:	6030      	str	r0, [r6, #0]
 800b520:	2800      	cmp	r0, #0
 800b522:	d1d5      	bne.n	800b4d0 <__sfp+0x24>
 800b524:	f7ff ff78 	bl	800b418 <__sfp_lock_release>
 800b528:	230c      	movs	r3, #12
 800b52a:	603b      	str	r3, [r7, #0]
 800b52c:	e7ee      	b.n	800b50c <__sfp+0x60>
 800b52e:	bf00      	nop
 800b530:	0800b89c 	.word	0x0800b89c
 800b534:	ffff0001 	.word	0xffff0001

0800b538 <_fwalk_reent>:
 800b538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b53c:	4606      	mov	r6, r0
 800b53e:	4688      	mov	r8, r1
 800b540:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b544:	2700      	movs	r7, #0
 800b546:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b54a:	f1b9 0901 	subs.w	r9, r9, #1
 800b54e:	d505      	bpl.n	800b55c <_fwalk_reent+0x24>
 800b550:	6824      	ldr	r4, [r4, #0]
 800b552:	2c00      	cmp	r4, #0
 800b554:	d1f7      	bne.n	800b546 <_fwalk_reent+0xe>
 800b556:	4638      	mov	r0, r7
 800b558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b55c:	89ab      	ldrh	r3, [r5, #12]
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d907      	bls.n	800b572 <_fwalk_reent+0x3a>
 800b562:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b566:	3301      	adds	r3, #1
 800b568:	d003      	beq.n	800b572 <_fwalk_reent+0x3a>
 800b56a:	4629      	mov	r1, r5
 800b56c:	4630      	mov	r0, r6
 800b56e:	47c0      	blx	r8
 800b570:	4307      	orrs	r7, r0
 800b572:	3568      	adds	r5, #104	; 0x68
 800b574:	e7e9      	b.n	800b54a <_fwalk_reent+0x12>

0800b576 <__retarget_lock_init_recursive>:
 800b576:	4770      	bx	lr

0800b578 <__retarget_lock_acquire_recursive>:
 800b578:	4770      	bx	lr

0800b57a <__retarget_lock_release_recursive>:
 800b57a:	4770      	bx	lr

0800b57c <__swhatbuf_r>:
 800b57c:	b570      	push	{r4, r5, r6, lr}
 800b57e:	460e      	mov	r6, r1
 800b580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b584:	2900      	cmp	r1, #0
 800b586:	b096      	sub	sp, #88	; 0x58
 800b588:	4614      	mov	r4, r2
 800b58a:	461d      	mov	r5, r3
 800b58c:	da08      	bge.n	800b5a0 <__swhatbuf_r+0x24>
 800b58e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	602a      	str	r2, [r5, #0]
 800b596:	061a      	lsls	r2, r3, #24
 800b598:	d410      	bmi.n	800b5bc <__swhatbuf_r+0x40>
 800b59a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b59e:	e00e      	b.n	800b5be <__swhatbuf_r+0x42>
 800b5a0:	466a      	mov	r2, sp
 800b5a2:	f000 f903 	bl	800b7ac <_fstat_r>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	dbf1      	blt.n	800b58e <__swhatbuf_r+0x12>
 800b5aa:	9a01      	ldr	r2, [sp, #4]
 800b5ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b5b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b5b4:	425a      	negs	r2, r3
 800b5b6:	415a      	adcs	r2, r3
 800b5b8:	602a      	str	r2, [r5, #0]
 800b5ba:	e7ee      	b.n	800b59a <__swhatbuf_r+0x1e>
 800b5bc:	2340      	movs	r3, #64	; 0x40
 800b5be:	2000      	movs	r0, #0
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	b016      	add	sp, #88	; 0x58
 800b5c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5c8 <__smakebuf_r>:
 800b5c8:	898b      	ldrh	r3, [r1, #12]
 800b5ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5cc:	079d      	lsls	r5, r3, #30
 800b5ce:	4606      	mov	r6, r0
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	d507      	bpl.n	800b5e4 <__smakebuf_r+0x1c>
 800b5d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	6123      	str	r3, [r4, #16]
 800b5dc:	2301      	movs	r3, #1
 800b5de:	6163      	str	r3, [r4, #20]
 800b5e0:	b002      	add	sp, #8
 800b5e2:	bd70      	pop	{r4, r5, r6, pc}
 800b5e4:	ab01      	add	r3, sp, #4
 800b5e6:	466a      	mov	r2, sp
 800b5e8:	f7ff ffc8 	bl	800b57c <__swhatbuf_r>
 800b5ec:	9900      	ldr	r1, [sp, #0]
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f7ff f957 	bl	800a8a4 <_malloc_r>
 800b5f6:	b948      	cbnz	r0, 800b60c <__smakebuf_r+0x44>
 800b5f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5fc:	059a      	lsls	r2, r3, #22
 800b5fe:	d4ef      	bmi.n	800b5e0 <__smakebuf_r+0x18>
 800b600:	f023 0303 	bic.w	r3, r3, #3
 800b604:	f043 0302 	orr.w	r3, r3, #2
 800b608:	81a3      	strh	r3, [r4, #12]
 800b60a:	e7e3      	b.n	800b5d4 <__smakebuf_r+0xc>
 800b60c:	4b0d      	ldr	r3, [pc, #52]	; (800b644 <__smakebuf_r+0x7c>)
 800b60e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b610:	89a3      	ldrh	r3, [r4, #12]
 800b612:	6020      	str	r0, [r4, #0]
 800b614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b618:	81a3      	strh	r3, [r4, #12]
 800b61a:	9b00      	ldr	r3, [sp, #0]
 800b61c:	6163      	str	r3, [r4, #20]
 800b61e:	9b01      	ldr	r3, [sp, #4]
 800b620:	6120      	str	r0, [r4, #16]
 800b622:	b15b      	cbz	r3, 800b63c <__smakebuf_r+0x74>
 800b624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b628:	4630      	mov	r0, r6
 800b62a:	f000 f8d1 	bl	800b7d0 <_isatty_r>
 800b62e:	b128      	cbz	r0, 800b63c <__smakebuf_r+0x74>
 800b630:	89a3      	ldrh	r3, [r4, #12]
 800b632:	f023 0303 	bic.w	r3, r3, #3
 800b636:	f043 0301 	orr.w	r3, r3, #1
 800b63a:	81a3      	strh	r3, [r4, #12]
 800b63c:	89a0      	ldrh	r0, [r4, #12]
 800b63e:	4305      	orrs	r5, r0
 800b640:	81a5      	strh	r5, [r4, #12]
 800b642:	e7cd      	b.n	800b5e0 <__smakebuf_r+0x18>
 800b644:	0800b3d5 	.word	0x0800b3d5

0800b648 <_malloc_usable_size_r>:
 800b648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b64c:	1f18      	subs	r0, r3, #4
 800b64e:	2b00      	cmp	r3, #0
 800b650:	bfbc      	itt	lt
 800b652:	580b      	ldrlt	r3, [r1, r0]
 800b654:	18c0      	addlt	r0, r0, r3
 800b656:	4770      	bx	lr

0800b658 <_raise_r>:
 800b658:	291f      	cmp	r1, #31
 800b65a:	b538      	push	{r3, r4, r5, lr}
 800b65c:	4604      	mov	r4, r0
 800b65e:	460d      	mov	r5, r1
 800b660:	d904      	bls.n	800b66c <_raise_r+0x14>
 800b662:	2316      	movs	r3, #22
 800b664:	6003      	str	r3, [r0, #0]
 800b666:	f04f 30ff 	mov.w	r0, #4294967295
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b66e:	b112      	cbz	r2, 800b676 <_raise_r+0x1e>
 800b670:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b674:	b94b      	cbnz	r3, 800b68a <_raise_r+0x32>
 800b676:	4620      	mov	r0, r4
 800b678:	f000 f830 	bl	800b6dc <_getpid_r>
 800b67c:	462a      	mov	r2, r5
 800b67e:	4601      	mov	r1, r0
 800b680:	4620      	mov	r0, r4
 800b682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b686:	f000 b817 	b.w	800b6b8 <_kill_r>
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d00a      	beq.n	800b6a4 <_raise_r+0x4c>
 800b68e:	1c59      	adds	r1, r3, #1
 800b690:	d103      	bne.n	800b69a <_raise_r+0x42>
 800b692:	2316      	movs	r3, #22
 800b694:	6003      	str	r3, [r0, #0]
 800b696:	2001      	movs	r0, #1
 800b698:	e7e7      	b.n	800b66a <_raise_r+0x12>
 800b69a:	2400      	movs	r4, #0
 800b69c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	4798      	blx	r3
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	e7e0      	b.n	800b66a <_raise_r+0x12>

0800b6a8 <raise>:
 800b6a8:	4b02      	ldr	r3, [pc, #8]	; (800b6b4 <raise+0xc>)
 800b6aa:	4601      	mov	r1, r0
 800b6ac:	6818      	ldr	r0, [r3, #0]
 800b6ae:	f7ff bfd3 	b.w	800b658 <_raise_r>
 800b6b2:	bf00      	nop
 800b6b4:	2000001c 	.word	0x2000001c

0800b6b8 <_kill_r>:
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	4d07      	ldr	r5, [pc, #28]	; (800b6d8 <_kill_r+0x20>)
 800b6bc:	2300      	movs	r3, #0
 800b6be:	4604      	mov	r4, r0
 800b6c0:	4608      	mov	r0, r1
 800b6c2:	4611      	mov	r1, r2
 800b6c4:	602b      	str	r3, [r5, #0]
 800b6c6:	f7f6 f8d3 	bl	8001870 <_kill>
 800b6ca:	1c43      	adds	r3, r0, #1
 800b6cc:	d102      	bne.n	800b6d4 <_kill_r+0x1c>
 800b6ce:	682b      	ldr	r3, [r5, #0]
 800b6d0:	b103      	cbz	r3, 800b6d4 <_kill_r+0x1c>
 800b6d2:	6023      	str	r3, [r4, #0]
 800b6d4:	bd38      	pop	{r3, r4, r5, pc}
 800b6d6:	bf00      	nop
 800b6d8:	200003c4 	.word	0x200003c4

0800b6dc <_getpid_r>:
 800b6dc:	f7f6 b8c0 	b.w	8001860 <_getpid>

0800b6e0 <__sread>:
 800b6e0:	b510      	push	{r4, lr}
 800b6e2:	460c      	mov	r4, r1
 800b6e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e8:	f000 f894 	bl	800b814 <_read_r>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	bfab      	itete	ge
 800b6f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6f2:	89a3      	ldrhlt	r3, [r4, #12]
 800b6f4:	181b      	addge	r3, r3, r0
 800b6f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6fa:	bfac      	ite	ge
 800b6fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6fe:	81a3      	strhlt	r3, [r4, #12]
 800b700:	bd10      	pop	{r4, pc}

0800b702 <__swrite>:
 800b702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b706:	461f      	mov	r7, r3
 800b708:	898b      	ldrh	r3, [r1, #12]
 800b70a:	05db      	lsls	r3, r3, #23
 800b70c:	4605      	mov	r5, r0
 800b70e:	460c      	mov	r4, r1
 800b710:	4616      	mov	r6, r2
 800b712:	d505      	bpl.n	800b720 <__swrite+0x1e>
 800b714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b718:	2302      	movs	r3, #2
 800b71a:	2200      	movs	r2, #0
 800b71c:	f000 f868 	bl	800b7f0 <_lseek_r>
 800b720:	89a3      	ldrh	r3, [r4, #12]
 800b722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b72a:	81a3      	strh	r3, [r4, #12]
 800b72c:	4632      	mov	r2, r6
 800b72e:	463b      	mov	r3, r7
 800b730:	4628      	mov	r0, r5
 800b732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b736:	f000 b817 	b.w	800b768 <_write_r>

0800b73a <__sseek>:
 800b73a:	b510      	push	{r4, lr}
 800b73c:	460c      	mov	r4, r1
 800b73e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b742:	f000 f855 	bl	800b7f0 <_lseek_r>
 800b746:	1c43      	adds	r3, r0, #1
 800b748:	89a3      	ldrh	r3, [r4, #12]
 800b74a:	bf15      	itete	ne
 800b74c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b74e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b756:	81a3      	strheq	r3, [r4, #12]
 800b758:	bf18      	it	ne
 800b75a:	81a3      	strhne	r3, [r4, #12]
 800b75c:	bd10      	pop	{r4, pc}

0800b75e <__sclose>:
 800b75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b762:	f000 b813 	b.w	800b78c <_close_r>
	...

0800b768 <_write_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4d07      	ldr	r5, [pc, #28]	; (800b788 <_write_r+0x20>)
 800b76c:	4604      	mov	r4, r0
 800b76e:	4608      	mov	r0, r1
 800b770:	4611      	mov	r1, r2
 800b772:	2200      	movs	r2, #0
 800b774:	602a      	str	r2, [r5, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	f7f6 f8b1 	bl	80018de <_write>
 800b77c:	1c43      	adds	r3, r0, #1
 800b77e:	d102      	bne.n	800b786 <_write_r+0x1e>
 800b780:	682b      	ldr	r3, [r5, #0]
 800b782:	b103      	cbz	r3, 800b786 <_write_r+0x1e>
 800b784:	6023      	str	r3, [r4, #0]
 800b786:	bd38      	pop	{r3, r4, r5, pc}
 800b788:	200003c4 	.word	0x200003c4

0800b78c <_close_r>:
 800b78c:	b538      	push	{r3, r4, r5, lr}
 800b78e:	4d06      	ldr	r5, [pc, #24]	; (800b7a8 <_close_r+0x1c>)
 800b790:	2300      	movs	r3, #0
 800b792:	4604      	mov	r4, r0
 800b794:	4608      	mov	r0, r1
 800b796:	602b      	str	r3, [r5, #0]
 800b798:	f7f6 f8bd 	bl	8001916 <_close>
 800b79c:	1c43      	adds	r3, r0, #1
 800b79e:	d102      	bne.n	800b7a6 <_close_r+0x1a>
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	b103      	cbz	r3, 800b7a6 <_close_r+0x1a>
 800b7a4:	6023      	str	r3, [r4, #0]
 800b7a6:	bd38      	pop	{r3, r4, r5, pc}
 800b7a8:	200003c4 	.word	0x200003c4

0800b7ac <_fstat_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d07      	ldr	r5, [pc, #28]	; (800b7cc <_fstat_r+0x20>)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	602b      	str	r3, [r5, #0]
 800b7ba:	f7f6 f8b8 	bl	800192e <_fstat>
 800b7be:	1c43      	adds	r3, r0, #1
 800b7c0:	d102      	bne.n	800b7c8 <_fstat_r+0x1c>
 800b7c2:	682b      	ldr	r3, [r5, #0]
 800b7c4:	b103      	cbz	r3, 800b7c8 <_fstat_r+0x1c>
 800b7c6:	6023      	str	r3, [r4, #0]
 800b7c8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ca:	bf00      	nop
 800b7cc:	200003c4 	.word	0x200003c4

0800b7d0 <_isatty_r>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	4d06      	ldr	r5, [pc, #24]	; (800b7ec <_isatty_r+0x1c>)
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	4608      	mov	r0, r1
 800b7da:	602b      	str	r3, [r5, #0]
 800b7dc:	f7f6 f8b7 	bl	800194e <_isatty>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_isatty_r+0x1a>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_isatty_r+0x1a>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	200003c4 	.word	0x200003c4

0800b7f0 <_lseek_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d07      	ldr	r5, [pc, #28]	; (800b810 <_lseek_r+0x20>)
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	4608      	mov	r0, r1
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	602a      	str	r2, [r5, #0]
 800b7fe:	461a      	mov	r2, r3
 800b800:	f7f6 f8b0 	bl	8001964 <_lseek>
 800b804:	1c43      	adds	r3, r0, #1
 800b806:	d102      	bne.n	800b80e <_lseek_r+0x1e>
 800b808:	682b      	ldr	r3, [r5, #0]
 800b80a:	b103      	cbz	r3, 800b80e <_lseek_r+0x1e>
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
 800b810:	200003c4 	.word	0x200003c4

0800b814 <_read_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4d07      	ldr	r5, [pc, #28]	; (800b834 <_read_r+0x20>)
 800b818:	4604      	mov	r4, r0
 800b81a:	4608      	mov	r0, r1
 800b81c:	4611      	mov	r1, r2
 800b81e:	2200      	movs	r2, #0
 800b820:	602a      	str	r2, [r5, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	f7f6 f83e 	bl	80018a4 <_read>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_read_r+0x1e>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_read_r+0x1e>
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	200003c4 	.word	0x200003c4

0800b838 <_init>:
 800b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83a:	bf00      	nop
 800b83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b83e:	bc08      	pop	{r3}
 800b840:	469e      	mov	lr, r3
 800b842:	4770      	bx	lr

0800b844 <_fini>:
 800b844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b846:	bf00      	nop
 800b848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b84a:	bc08      	pop	{r3}
 800b84c:	469e      	mov	lr, r3
 800b84e:	4770      	bx	lr
