
hw_3B_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de4  08002de4  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dec  08002dec  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08002df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000098  08002e8c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002e8c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f6f  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001500  00000000  00000000  00028037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  00029538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  00029c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c2d  00000000  00000000  0002a240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086ed  00000000  00000000  0003fe6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000852bf  00000000  00000000  0004855a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd819  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e44  00000000  00000000  000cd86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002d3c 	.word	0x08002d3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08002d3c 	.word	0x08002d3c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <DWT_Delay_Init+0x58>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <DWT_Delay_Init+0x58>)
 800059e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005a2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <DWT_Delay_Init+0x58>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a10      	ldr	r2, [pc, #64]	; (80005ec <DWT_Delay_Init+0x58>)
 80005aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005ae:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <DWT_Delay_Init+0x5c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <DWT_Delay_Init+0x5c>)
 80005b6:	f023 0301 	bic.w	r3, r3, #1
 80005ba:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <DWT_Delay_Init+0x5c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <DWT_Delay_Init+0x5c>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <DWT_Delay_Init+0x5c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005ce:	bf00      	nop
    __ASM volatile ("NOP");
 80005d0:	bf00      	nop
    __ASM volatile ("NOP");
 80005d2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <DWT_Delay_Init+0x5c>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80005dc:	2300      	movs	r3, #0
 80005de:	e000      	b.n	80005e2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80005e0:	2301      	movs	r3, #1
    }
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000edf0 	.word	0xe000edf0
 80005f0:	e0001000 	.word	0xe0001000

080005f4 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <DWT_Delay_us+0x48>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000602:	f001 fbf1 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <DWT_Delay_us+0x4c>)
 800060a:	fba2 2303 	umull	r2, r3, r2, r3
 800060e:	0c9b      	lsrs	r3, r3, #18
 8000610:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	fb02 f303 	mul.w	r3, r2, r3
 800061a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 800061c:	bf00      	nop
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <DWT_Delay_us+0x48>)
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	1ad2      	subs	r2, r2, r3
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	1acb      	subs	r3, r1, r3
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f6      	bcc.n	800061e <DWT_Delay_us+0x2a>
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	e0001000 	.word	0xe0001000
 8000640:	431bde83 	.word	0x431bde83

08000644 <lcd_enable>:


//  LCD code


void lcd_enable(){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 8000648:	2201      	movs	r2, #1
 800064a:	2102      	movs	r1, #2
 800064c:	4807      	ldr	r0, [pc, #28]	; (800066c <lcd_enable+0x28>)
 800064e:	f000 ff4d 	bl	80014ec <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8000652:	2032      	movs	r0, #50	; 0x32
 8000654:	f7ff ffce 	bl	80005f4 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2102      	movs	r1, #2
 800065c:	4803      	ldr	r0, [pc, #12]	; (800066c <lcd_enable+0x28>)
 800065e:	f000 ff45 	bl	80014ec <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8000662:	2032      	movs	r0, #50	; 0x32
 8000664:	f7ff ffc6 	bl	80005f4 <DWT_Delay_us>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40020400 	.word	0x40020400

08000670 <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	461a      	mov	r2, r3
 8000684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000688:	4816      	ldr	r0, [pc, #88]	; (80006e4 <lcd_write4+0x74>)
 800068a:	f000 ff2f 	bl	80014ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	105b      	asrs	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	b2db      	uxtb	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a0:	4810      	ldr	r0, [pc, #64]	; (80006e4 <lcd_write4+0x74>)
 80006a2:	f000 ff23 	bl	80014ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	109b      	asrs	r3, r3, #2
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b8:	480a      	ldr	r0, [pc, #40]	; (80006e4 <lcd_write4+0x74>)
 80006ba:	f000 ff17 	bl	80014ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	10db      	asrs	r3, r3, #3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <lcd_write4+0x74>)
 80006d2:	f000 ff0b 	bl	80014ec <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 80006d6:	f7ff ffb5 	bl	8000644 <lcd_enable>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40020400 	.word	0x40020400

080006e8 <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	091b      	lsrs	r3, r3, #4
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ffb9 	bl	8000670 <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ffb5 	bl	8000670 <lcd_write4>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 800071a:	2200      	movs	r2, #0
 800071c:	2104      	movs	r1, #4
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <lcd_command+0x24>)
 8000720:	f000 fee4 	bl	80014ec <HAL_GPIO_WritePin>
	lcd_write(byte);
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffde 	bl	80006e8 <lcd_write>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40020400 	.word	0x40020400

08000738 <lcd_data>:
	lcd_command(LCD_CLEAR_COMMAND);
	DWT_Delay_us(2000);
}

//  send data to the LCD
void lcd_data(uint8_t byte){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 8000742:	2201      	movs	r2, #1
 8000744:	2104      	movs	r1, #4
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <lcd_data+0x24>)
 8000748:	f000 fed0 	bl	80014ec <HAL_GPIO_WritePin>
	lcd_write(byte);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ffca 	bl	80006e8 <lcd_write>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40020400 	.word	0x40020400

08000760 <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	4613      	mov	r3, r2
 800076e:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	3301      	adds	r3, #1
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	3201      	adds	r2, #1
 8000778:	fb02 f303 	mul.w	r3, r2, r3
 800077c:	2b4f      	cmp	r3, #79	; 0x4f
 800077e:	dc10      	bgt.n	80007a2 <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	461a      	mov	r2, r3
 8000784:	0092      	lsls	r2, r2, #2
 8000786:	4413      	add	r3, r2
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	b2da      	uxtb	r2, r3
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	4413      	add	r3, r2
 8000790:	b2db      	uxtb	r3, r3
 8000792:	b25b      	sxtb	r3, r3
 8000794:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000798:	b25b      	sxtb	r3, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffb7 	bl	8000710 <lcd_command>
	}
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b084      	sub	sp, #16
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff fd14 	bl	80001e0 <strlen>
 80007b8:	4603      	mov	r3, r0
 80007ba:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 80007bc:	e006      	b.n	80007cc <lcd_print+0x22>
		lcd_data(*string++);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ffb6 	bl	8000738 <lcd_data>
	while (size--){
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	1e5a      	subs	r2, r3, #1
 80007d0:	60fa      	str	r2, [r7, #12]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f3      	bne.n	80007be <lcd_print+0x14>
	}
}
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <lcd_println>:

void lcd_println(char string[], uint8_t row){
 80007e0:	b5b0      	push	{r4, r5, r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <lcd_println+0x6c>)
 80007ee:	f107 0408 	add.w	r4, r7, #8
 80007f2:	461d      	mov	r5, r3
 80007f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f8:	682b      	ldr	r3, [r5, #0]
 80007fa:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fcef 	bl	80001e0 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	2b10      	cmp	r3, #16
 800080a:	dd0c      	ble.n	8000826 <lcd_println+0x46>
		size = 16;
 800080c:	2310      	movs	r3, #16
 800080e:	61fb      	str	r3, [r7, #28]

	while (size--){
 8000810:	e009      	b.n	8000826 <lcd_println+0x46>
		line[size] = string[size];
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	7819      	ldrb	r1, [r3, #0]
 800081a:	f107 0208 	add.w	r2, r7, #8
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	4413      	add	r3, r2
 8000822:	460a      	mov	r2, r1
 8000824:	701a      	strb	r2, [r3, #0]
	while (size--){
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	61fa      	str	r2, [r7, #28]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f0      	bne.n	8000812 <lcd_println+0x32>
	}
	setCursor(0, row);
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	4619      	mov	r1, r3
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff ff93 	bl	8000760 <setCursor>
	lcd_print(line);
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffb3 	bl	80007aa <lcd_print>
}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bdb0      	pop	{r4, r5, r7, pc}
 800084c:	08002d54 	.word	0x08002d54

08000850 <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	b25b      	sxtb	r3, r3
 800086a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086e:	b25b      	sxtb	r3, r3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff4c 	bl	8000710 <lcd_command>
	for (int i = 0; i<8; i++){
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	e009      	b.n	8000892 <writeCustomChar+0x42>
		lcd_data(map[i]);	
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff56 	bl	8000738 <lcd_data>
	for (int i = 0; i<8; i++){
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2b07      	cmp	r3, #7
 8000896:	ddf2      	ble.n	800087e <writeCustomChar+0x2e>
	}
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 80008a8:	490a      	ldr	r1, [pc, #40]	; (80008d4 <loadCustomChars+0x30>)
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff ffd0 	bl	8000850 <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 80008b0:	4909      	ldr	r1, [pc, #36]	; (80008d8 <loadCustomChars+0x34>)
 80008b2:	2002      	movs	r0, #2
 80008b4:	f7ff ffcc 	bl	8000850 <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 80008b8:	4908      	ldr	r1, [pc, #32]	; (80008dc <loadCustomChars+0x38>)
 80008ba:	2003      	movs	r0, #3
 80008bc:	f7ff ffc8 	bl	8000850 <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 80008c0:	4907      	ldr	r1, [pc, #28]	; (80008e0 <loadCustomChars+0x3c>)
 80008c2:	2004      	movs	r0, #4
 80008c4:	f7ff ffc4 	bl	8000850 <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 80008c8:	4906      	ldr	r1, [pc, #24]	; (80008e4 <loadCustomChars+0x40>)
 80008ca:	2005      	movs	r0, #5
 80008cc:	f7ff ffc0 	bl	8000850 <writeCustomChar>
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000010 	.word	0x20000010
 80008e0:	20000018 	.word	0x20000018
 80008e4:	20000020 	.word	0x20000020

080008e8 <lcd_initialize>:
		i++;
	}
	lcd_print(bar); //finally we write to the LCD
}

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 80008ec:	2032      	movs	r0, #50	; 0x32
 80008ee:	f000 fb6f 	bl	8000fd0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2104      	movs	r1, #4
 80008f6:	4824      	ldr	r0, [pc, #144]	; (8000988 <lcd_initialize+0xa0>)
 80008f8:	f000 fdf8 	bl	80014ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2102      	movs	r1, #2
 8000900:	4821      	ldr	r0, [pc, #132]	; (8000988 <lcd_initialize+0xa0>)
 8000902:	f000 fdf3 	bl	80014ec <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 8000906:	f7ff fe45 	bl	8000594 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 800090a:	2003      	movs	r0, #3
 800090c:	f7ff feb0 	bl	8000670 <lcd_write4>
	HAL_Delay(5);
 8000910:	2005      	movs	r0, #5
 8000912:	f000 fb5d 	bl	8000fd0 <HAL_Delay>
	lcd_write4(0x03);
 8000916:	2003      	movs	r0, #3
 8000918:	f7ff feaa 	bl	8000670 <lcd_write4>
	HAL_Delay(5);
 800091c:	2005      	movs	r0, #5
 800091e:	f000 fb57 	bl	8000fd0 <HAL_Delay>
	lcd_write4(0x03);
 8000922:	2003      	movs	r0, #3
 8000924:	f7ff fea4 	bl	8000670 <lcd_write4>
	HAL_Delay(5);
 8000928:	2005      	movs	r0, #5
 800092a:	f000 fb51 	bl	8000fd0 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff fe9e 	bl	8000670 <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 8000934:	2028      	movs	r0, #40	; 0x28
 8000936:	f7ff fed7 	bl	80006e8 <lcd_write>
	HAL_Delay(5);
 800093a:	2005      	movs	r0, #5
 800093c:	f000 fb48 	bl	8000fd0 <HAL_Delay>
	lcd_write(0x08); //display off;
 8000940:	2008      	movs	r0, #8
 8000942:	f7ff fed1 	bl	80006e8 <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff fece 	bl	80006e8 <lcd_write>
	HAL_Delay(5);
 800094c:	2005      	movs	r0, #5
 800094e:	f000 fb3f 	bl	8000fd0 <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 8000952:	2006      	movs	r0, #6
 8000954:	f7ff fec8 	bl	80006e8 <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 8000958:	2201      	movs	r2, #1
 800095a:	2110      	movs	r1, #16
 800095c:	480b      	ldr	r0, [pc, #44]	; (800098c <lcd_initialize+0xa4>)
 800095e:	f000 fdc5 	bl	80014ec <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <lcd_initialize+0xa8>)
 8000964:	220c      	movs	r2, #12
 8000966:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <lcd_initialize+0xa8>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff febb 	bl	80006e8 <lcd_write>
	lcd_write(0x02); //go home
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff feb8 	bl	80006e8 <lcd_write>
	HAL_Delay(2);
 8000978:	2002      	movs	r0, #2
 800097a:	f000 fb29 	bl	8000fd0 <HAL_Delay>
	loadCustomChars();
 800097e:	f7ff ff91 	bl	80008a4 <loadCustomChars>

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40020400 	.word	0x40020400
 800098c:	40020000 	.word	0x40020000
 8000990:	200000b4 	.word	0x200000b4

08000994 <lcd_backlight_ON>:

void lcd_backlight_ON(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2110      	movs	r1, #16
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <lcd_backlight_ON+0x14>)
 800099e:	f000 fda5 	bl	80014ec <HAL_GPIO_WritePin>
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40020000 	.word	0x40020000

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b096      	sub	sp, #88	; 0x58
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b2:	f000 fa9b 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b6:	f000 f86b 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ba:	f000 f8ff 	bl	8000bbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009be:	f000 f8d3 	bl	8000b68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int i=0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	657b      	str	r3, [r7, #84]	; 0x54
   lcd_initialize();
 80009c6:	f7ff ff8f 	bl	80008e8 <lcd_initialize>
   lcd_backlight_ON();
 80009ca:	f7ff ffe3 	bl	8000994 <lcd_backlight_ON>
  stringa lista[5];
  snprintf(lista[0].nome, sizeof(lista[4].nome),"Elise");
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4a2a      	ldr	r2, [pc, #168]	; (8000a7c <main+0xd0>)
 80009d2:	2110      	movs	r1, #16
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fd2f 	bl	8002438 <sniprintf>
  snprintf(lista[1].nome, sizeof(lista[4].nome),"Marco");
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	3310      	adds	r3, #16
 80009de:	4a28      	ldr	r2, [pc, #160]	; (8000a80 <main+0xd4>)
 80009e0:	2110      	movs	r1, #16
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 fd28 	bl	8002438 <sniprintf>
  snprintf(lista[2].nome, sizeof(lista[4].nome),"Francesco");
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	3320      	adds	r3, #32
 80009ec:	4a25      	ldr	r2, [pc, #148]	; (8000a84 <main+0xd8>)
 80009ee:	2110      	movs	r1, #16
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 fd21 	bl	8002438 <sniprintf>
  snprintf(lista[3].nome, sizeof(lista[4].nome),"Francesco S");
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	3330      	adds	r3, #48	; 0x30
 80009fa:	4a23      	ldr	r2, [pc, #140]	; (8000a88 <main+0xdc>)
 80009fc:	2110      	movs	r1, #16
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 fd1a 	bl	8002438 <sniprintf>
  snprintf(lista[4].nome, sizeof(lista[4].nome),"Lilian");
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	3340      	adds	r3, #64	; 0x40
 8000a08:	4a20      	ldr	r2, [pc, #128]	; (8000a8c <main+0xe0>)
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fd13 	bl	8002438 <sniprintf>
  lcd_println(lista[0].nome,1);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2101      	movs	r1, #1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fee2 	bl	80007e0 <lcd_println>
  HAL_Delay(1000);
 8000a1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a20:	f000 fad6 	bl	8000fd0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(i=0;i<5;i++){
 8000a24:	2300      	movs	r3, #0
 8000a26:	657b      	str	r3, [r7, #84]	; 0x54
 8000a28:	e023      	b.n	8000a72 <main+0xc6>
		  lcd_println(lista[i].nome,0);
 8000a2a:	1d3a      	adds	r2, r7, #4
 8000a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a2e:	011b      	lsls	r3, r3, #4
 8000a30:	4413      	add	r3, r2
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fed3 	bl	80007e0 <lcd_println>
		  if(i!=4)
 8000a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a3c:	2b04      	cmp	r3, #4
 8000a3e:	d009      	beq.n	8000a54 <main+0xa8>
			  lcd_println(lista[i+1].nome,1);
 8000a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a42:	3301      	adds	r3, #1
 8000a44:	1d3a      	adds	r2, r7, #4
 8000a46:	011b      	lsls	r3, r3, #4
 8000a48:	4413      	add	r3, r2
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fec7 	bl	80007e0 <lcd_println>
 8000a52:	e007      	b.n	8000a64 <main+0xb8>
		  else if (i==4)
 8000a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d104      	bne.n	8000a64 <main+0xb8>
			  lcd_println(lista[0].nome,1);
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff febe 	bl	80007e0 <lcd_println>
		  HAL_Delay(1000);
 8000a64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a68:	f000 fab2 	bl	8000fd0 <HAL_Delay>
	  for(i=0;i<5;i++){
 8000a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a6e:	3301      	adds	r3, #1
 8000a70:	657b      	str	r3, [r7, #84]	; 0x54
 8000a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	ddd8      	ble.n	8000a2a <main+0x7e>
 8000a78:	e7d4      	b.n	8000a24 <main+0x78>
 8000a7a:	bf00      	nop
 8000a7c:	08002d68 	.word	0x08002d68
 8000a80:	08002d70 	.word	0x08002d70
 8000a84:	08002d78 	.word	0x08002d78
 8000a88:	08002d84 	.word	0x08002d84
 8000a8c:	08002d90 	.word	0x08002d90

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b094      	sub	sp, #80	; 0x50
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0320 	add.w	r3, r7, #32
 8000a9a:	2230      	movs	r2, #48	; 0x30
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fcc2 	bl	8002428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <SystemClock_Config+0xd0>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	4a28      	ldr	r2, [pc, #160]	; (8000b60 <SystemClock_Config+0xd0>)
 8000abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac4:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <SystemClock_Config+0xd0>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <SystemClock_Config+0xd4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000adc:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <SystemClock_Config+0xd4>)
 8000ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <SystemClock_Config+0xd4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af0:	2302      	movs	r3, #2
 8000af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af4:	2301      	movs	r3, #1
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af8:	2310      	movs	r3, #16
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afc:	2302      	movs	r3, #2
 8000afe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b04:	2310      	movs	r3, #16
 8000b06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b08:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b12:	2307      	movs	r3, #7
 8000b14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b16:	f107 0320 	add.w	r3, r7, #32
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fd00 	bl	8001520 <HAL_RCC_OscConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b26:	f000 f8cf 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	2102      	movs	r1, #2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 ff62 	bl	8001a10 <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b52:	f000 f8b9 	bl	8000cc8 <Error_Handler>
  }
}
 8000b56:	bf00      	nop
 8000b58:	3750      	adds	r7, #80	; 0x50
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40007000 	.word	0x40007000

08000b68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <MX_USART2_UART_Init+0x50>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	f001 f956 	bl	8001e50 <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000baa:	f000 f88d 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000b8 	.word	0x200000b8
 8000bb8:	40004400 	.word	0x40004400

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b38      	ldr	r3, [pc, #224]	; (8000cb8 <MX_GPIO_Init+0xfc>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a37      	ldr	r2, [pc, #220]	; (8000cb8 <MX_GPIO_Init+0xfc>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <MX_GPIO_Init+0xfc>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <MX_GPIO_Init+0xfc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a30      	ldr	r2, [pc, #192]	; (8000cb8 <MX_GPIO_Init+0xfc>)
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <MX_GPIO_Init+0xfc>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <MX_GPIO_Init+0xfc>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a29      	ldr	r2, [pc, #164]	; (8000cb8 <MX_GPIO_Init+0xfc>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <MX_GPIO_Init+0xfc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <MX_GPIO_Init+0xfc>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a22      	ldr	r2, [pc, #136]	; (8000cb8 <MX_GPIO_Init+0xfc>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <MX_GPIO_Init+0xfc>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2130      	movs	r1, #48	; 0x30
 8000c46:	481d      	ldr	r0, [pc, #116]	; (8000cbc <MX_GPIO_Init+0x100>)
 8000c48:	f000 fc50 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f24f 0106 	movw	r1, #61446	; 0xf006
 8000c52:	481b      	ldr	r0, [pc, #108]	; (8000cc0 <MX_GPIO_Init+0x104>)
 8000c54:	f000 fc4a 	bl	80014ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <MX_GPIO_Init+0x108>)
 8000c70:	f000 fab8 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000c74:	2330      	movs	r3, #48	; 0x30
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_GPIO_Init+0x100>)
 8000c8c:	f000 faaa 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000c90:	f24f 0306 	movw	r3, #61446	; 0xf006
 8000c94:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_GPIO_Init+0x104>)
 8000caa:	f000 fa9b 	bl	80011e4 <HAL_GPIO_Init>

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020400 	.word	0x40020400
 8000cc4:	40020800 	.word	0x40020800

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <Error_Handler+0x8>
	...

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <HAL_MspInit+0x4c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <HAL_MspInit+0x4c>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <HAL_MspInit+0x4c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_MspInit+0x4c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_MspInit+0x4c>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_MspInit+0x4c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d12:	2007      	movs	r0, #7
 8000d14:	f000 fa32 	bl	800117c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0x84>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12b      	bne.n	8000d9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a17      	ldr	r2, [pc, #92]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d7e:	230c      	movs	r3, #12
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8e:	2307      	movs	r3, #7
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_UART_MspInit+0x8c>)
 8000d9a:	f000 fa23 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40004400 	.word	0x40004400
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <NMI_Handler+0x4>

08000dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e00:	f000 f8c6 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e10:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <_sbrk+0x5c>)
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <_sbrk+0x60>)
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <_sbrk+0x64>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <_sbrk+0x68>)
 8000e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d207      	bcs.n	8000e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e38:	f001 facc 	bl	80023d4 <__errno>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	220c      	movs	r2, #12
 8000e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	e009      	b.n	8000e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <_sbrk+0x64>)
 8000e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20018000 	.word	0x20018000
 8000e68:	00000400 	.word	0x00000400
 8000e6c:	200000fc 	.word	0x200000fc
 8000e70:	20000118 	.word	0x20000118

08000e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <SystemInit+0x20>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <SystemInit+0x20>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e9e:	490e      	ldr	r1, [pc, #56]	; (8000ed8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea4:	e002      	b.n	8000eac <LoopCopyDataInit>

08000ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eaa:	3304      	adds	r3, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb0:	d3f9      	bcc.n	8000ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb4:	4c0b      	ldr	r4, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb8:	e001      	b.n	8000ebe <LoopFillZerobss>

08000eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ebc:	3204      	adds	r2, #4

08000ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec0:	d3fb      	bcc.n	8000eba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec2:	f7ff ffd7 	bl	8000e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f001 fa8b 	bl	80023e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fd6f 	bl	80009ac <main>
  bx  lr    
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000edc:	08002df4 	.word	0x08002df4
  ldr r2, =_sbss
 8000ee0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000ee4:	20000114 	.word	0x20000114

08000ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_Init+0x40>)
 8000ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_Init+0x40>)
 8000f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_Init+0x40>)
 8000f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 f931 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f000 f808 	bl	8000f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f20:	f7ff fed8 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023c00 	.word	0x40023c00

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x54>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x58>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f93b 	bl	80011ca <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 f911 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_InitTick+0x5c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000028 	.word	0x20000028
 8000f88:	20000030 	.word	0x20000030
 8000f8c:	2000002c 	.word	0x2000002c

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000030 	.word	0x20000030
 8000fb4:	20000100 	.word	0x20000100

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000100 	.word	0x20000100

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_Delay+0x44>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffde 	bl	8000fb8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000030 	.word	0x20000030

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff47 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff5c 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff8e 	bl	80010d0 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffb0 	bl	8001138 <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e159      	b.n	80014b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001200:	2201      	movs	r2, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	429a      	cmp	r2, r3
 800121a:	f040 8148 	bne.w	80014ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d005      	beq.n	8001236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	2b02      	cmp	r3, #2
 8001234:	d130      	bne.n	8001298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126c:	2201      	movs	r2, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 0201 	and.w	r2, r3, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d017      	beq.n	80012d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d123      	bne.n	8001328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0203 	and.w	r2, r3, #3
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80a2 	beq.w	80014ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b57      	ldr	r3, [pc, #348]	; (80014cc <HAL_GPIO_Init+0x2e8>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a56      	ldr	r2, [pc, #344]	; (80014cc <HAL_GPIO_Init+0x2e8>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b54      	ldr	r3, [pc, #336]	; (80014cc <HAL_GPIO_Init+0x2e8>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001386:	4a52      	ldr	r2, [pc, #328]	; (80014d0 <HAL_GPIO_Init+0x2ec>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a49      	ldr	r2, [pc, #292]	; (80014d4 <HAL_GPIO_Init+0x2f0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x202>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a48      	ldr	r2, [pc, #288]	; (80014d8 <HAL_GPIO_Init+0x2f4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x1fe>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a47      	ldr	r2, [pc, #284]	; (80014dc <HAL_GPIO_Init+0x2f8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x1fa>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a46      	ldr	r2, [pc, #280]	; (80014e0 <HAL_GPIO_Init+0x2fc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x1f6>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a45      	ldr	r2, [pc, #276]	; (80014e4 <HAL_GPIO_Init+0x300>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x1f2>
 80013d2:	2304      	movs	r3, #4
 80013d4:	e008      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013da:	2303      	movs	r3, #3
 80013dc:	e004      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013de:	2302      	movs	r3, #2
 80013e0:	e002      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013e6:	2300      	movs	r3, #0
 80013e8:	69fa      	ldr	r2, [r7, #28]
 80013ea:	f002 0203 	and.w	r2, r2, #3
 80013ee:	0092      	lsls	r2, r2, #2
 80013f0:	4093      	lsls	r3, r2
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f8:	4935      	ldr	r1, [pc, #212]	; (80014d0 <HAL_GPIO_Init+0x2ec>)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3302      	adds	r3, #2
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001406:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <HAL_GPIO_Init+0x304>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142a:	4a2f      	ldr	r2, [pc, #188]	; (80014e8 <HAL_GPIO_Init+0x304>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HAL_GPIO_Init+0x304>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001454:	4a24      	ldr	r2, [pc, #144]	; (80014e8 <HAL_GPIO_Init+0x304>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800145a:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <HAL_GPIO_Init+0x304>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800147e:	4a1a      	ldr	r2, [pc, #104]	; (80014e8 <HAL_GPIO_Init+0x304>)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_GPIO_Init+0x304>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a8:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <HAL_GPIO_Init+0x304>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3301      	adds	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	2b0f      	cmp	r3, #15
 80014b8:	f67f aea2 	bls.w	8001200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40013800 	.word	0x40013800
 80014d4:	40020000 	.word	0x40020000
 80014d8:	40020400 	.word	0x40020400
 80014dc:	40020800 	.word	0x40020800
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40013c00 	.word	0x40013c00

080014ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
 80014f8:	4613      	mov	r3, r2
 80014fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014fc:	787b      	ldrb	r3, [r7, #1]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001508:	e003      	b.n	8001512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	041a      	lsls	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	619a      	str	r2, [r3, #24]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e267      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d075      	beq.n	800162a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800153e:	4b88      	ldr	r3, [pc, #544]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b04      	cmp	r3, #4
 8001548:	d00c      	beq.n	8001564 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154a:	4b85      	ldr	r3, [pc, #532]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001552:	2b08      	cmp	r3, #8
 8001554:	d112      	bne.n	800157c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001556:	4b82      	ldr	r3, [pc, #520]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001562:	d10b      	bne.n	800157c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	4b7e      	ldr	r3, [pc, #504]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d05b      	beq.n	8001628 <HAL_RCC_OscConfig+0x108>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d157      	bne.n	8001628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e242      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001584:	d106      	bne.n	8001594 <HAL_RCC_OscConfig+0x74>
 8001586:	4b76      	ldr	r3, [pc, #472]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a75      	ldr	r2, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 800158c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e01d      	b.n	80015d0 <HAL_RCC_OscConfig+0xb0>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x98>
 800159e:	4b70      	ldr	r3, [pc, #448]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6f      	ldr	r2, [pc, #444]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b6d      	ldr	r3, [pc, #436]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6c      	ldr	r2, [pc, #432]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0xb0>
 80015b8:	4b69      	ldr	r3, [pc, #420]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a68      	ldr	r2, [pc, #416]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b66      	ldr	r3, [pc, #408]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a65      	ldr	r2, [pc, #404]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d013      	beq.n	8001600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fcee 	bl	8000fb8 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fcea 	bl	8000fb8 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e207      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b5b      	ldr	r3, [pc, #364]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0xc0>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fcda 	bl	8000fb8 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fcd6 	bl	8000fb8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1f3      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161a:	4b51      	ldr	r3, [pc, #324]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0xe8>
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d063      	beq.n	80016fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001636:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800164a:	2b08      	cmp	r3, #8
 800164c:	d11c      	bne.n	8001688 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164e:	4b44      	ldr	r3, [pc, #272]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d116      	bne.n	8001688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	4b41      	ldr	r3, [pc, #260]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <HAL_RCC_OscConfig+0x152>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e1c7      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4937      	ldr	r1, [pc, #220]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	e03a      	b.n	80016fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001690:	4b34      	ldr	r3, [pc, #208]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff fc8f 	bl	8000fb8 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fc8b 	bl	8000fb8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e1a8      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4925      	ldr	r1, [pc, #148]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
 80016d0:	e015      	b.n	80016fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b24      	ldr	r3, [pc, #144]	; (8001764 <HAL_RCC_OscConfig+0x244>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff fc6e 	bl	8000fb8 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e0:	f7ff fc6a 	bl	8000fb8 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e187      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d036      	beq.n	8001778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d016      	beq.n	8001740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_RCC_OscConfig+0x248>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff fc4e 	bl	8000fb8 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001720:	f7ff fc4a 	bl	8000fb8 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e167      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_OscConfig+0x240>)
 8001734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x200>
 800173e:	e01b      	b.n	8001778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_RCC_OscConfig+0x248>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001746:	f7ff fc37 	bl	8000fb8 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	e00e      	b.n	800176c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174e:	f7ff fc33 	bl	8000fb8 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d907      	bls.n	800176c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e150      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
 8001760:	40023800 	.word	0x40023800
 8001764:	42470000 	.word	0x42470000
 8001768:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176c:	4b88      	ldr	r3, [pc, #544]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800176e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ea      	bne.n	800174e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 8097 	beq.w	80018b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800178a:	4b81      	ldr	r3, [pc, #516]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10f      	bne.n	80017b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b7d      	ldr	r3, [pc, #500]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a7c      	ldr	r2, [pc, #496]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b7a      	ldr	r3, [pc, #488]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b2:	2301      	movs	r3, #1
 80017b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b6:	4b77      	ldr	r3, [pc, #476]	; (8001994 <HAL_RCC_OscConfig+0x474>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d118      	bne.n	80017f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c2:	4b74      	ldr	r3, [pc, #464]	; (8001994 <HAL_RCC_OscConfig+0x474>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a73      	ldr	r2, [pc, #460]	; (8001994 <HAL_RCC_OscConfig+0x474>)
 80017c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fbf3 	bl	8000fb8 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d6:	f7ff fbef 	bl	8000fb8 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e10c      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e8:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <HAL_RCC_OscConfig+0x474>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x2ea>
 80017fc:	4b64      	ldr	r3, [pc, #400]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 80017fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001800:	4a63      	ldr	r2, [pc, #396]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6713      	str	r3, [r2, #112]	; 0x70
 8001808:	e01c      	b.n	8001844 <HAL_RCC_OscConfig+0x324>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b05      	cmp	r3, #5
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x30c>
 8001812:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001816:	4a5e      	ldr	r2, [pc, #376]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6713      	str	r3, [r2, #112]	; 0x70
 800181e:	4b5c      	ldr	r3, [pc, #368]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001822:	4a5b      	ldr	r2, [pc, #364]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6713      	str	r3, [r2, #112]	; 0x70
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0x324>
 800182c:	4b58      	ldr	r3, [pc, #352]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001830:	4a57      	ldr	r2, [pc, #348]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	6713      	str	r3, [r2, #112]	; 0x70
 8001838:	4b55      	ldr	r3, [pc, #340]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183c:	4a54      	ldr	r2, [pc, #336]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800183e:	f023 0304 	bic.w	r3, r3, #4
 8001842:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d015      	beq.n	8001878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff fbb4 	bl	8000fb8 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001852:	e00a      	b.n	800186a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f7ff fbb0 	bl	8000fb8 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e0cb      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186a:	4b49      	ldr	r3, [pc, #292]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0ee      	beq.n	8001854 <HAL_RCC_OscConfig+0x334>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001878:	f7ff fb9e 	bl	8000fb8 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7ff fb9a 	bl	8000fb8 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e0b5      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001896:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ee      	bne.n	8001880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018a2:	7dfb      	ldrb	r3, [r7, #23]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a8:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a38      	ldr	r2, [pc, #224]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 80018ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80a1 	beq.w	8001a00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018be:	4b34      	ldr	r3, [pc, #208]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d05c      	beq.n	8001984 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d141      	bne.n	8001956 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_RCC_OscConfig+0x478>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fb6e 	bl	8000fb8 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff fb6a 	bl	8000fb8 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e087      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f2:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69da      	ldr	r2, [r3, #28]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	019b      	lsls	r3, r3, #6
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	085b      	lsrs	r3, r3, #1
 8001916:	3b01      	subs	r3, #1
 8001918:	041b      	lsls	r3, r3, #16
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	061b      	lsls	r3, r3, #24
 8001922:	491b      	ldr	r1, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_RCC_OscConfig+0x478>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7ff fb43 	bl	8000fb8 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001936:	f7ff fb3f 	bl	8000fb8 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e05c      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x416>
 8001954:	e054      	b.n	8001a00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_RCC_OscConfig+0x478>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fb2c 	bl	8000fb8 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff fb28 	bl	8000fb8 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e045      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_RCC_OscConfig+0x470>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x444>
 8001982:	e03d      	b.n	8001a00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d107      	bne.n	800199c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e038      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
 8001990:	40023800 	.word	0x40023800
 8001994:	40007000 	.word	0x40007000
 8001998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_RCC_OscConfig+0x4ec>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d028      	beq.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d121      	bne.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d11a      	bne.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019cc:	4013      	ands	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d111      	bne.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	3b01      	subs	r3, #1
 80019e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800

08001a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0cc      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a24:	4b68      	ldr	r3, [pc, #416]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d90c      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b65      	ldr	r3, [pc, #404]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b8      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a64:	4b59      	ldr	r3, [pc, #356]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	494d      	ldr	r1, [pc, #308]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d044      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d119      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e07f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ace:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e06f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e067      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aee:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f023 0203 	bic.w	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4934      	ldr	r1, [pc, #208]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b00:	f7ff fa5a 	bl	8000fb8 <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f7ff fa56 	bl	8000fb8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e04f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 020c 	and.w	r2, r3, #12
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1eb      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d20c      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e032      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4916      	ldr	r1, [pc, #88]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	490e      	ldr	r1, [pc, #56]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b96:	f000 f821 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	490a      	ldr	r1, [pc, #40]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	5ccb      	ldrb	r3, [r1, r3]
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f9ba 	bl	8000f30 <HAL_InitTick>

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023c00 	.word	0x40023c00
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	08002d98 	.word	0x08002d98
 8001bd4:	20000028 	.word	0x20000028
 8001bd8:	2000002c 	.word	0x2000002c

08001bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be0:	b094      	sub	sp, #80	; 0x50
 8001be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	647b      	str	r3, [r7, #68]	; 0x44
 8001be8:	2300      	movs	r3, #0
 8001bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bec:	2300      	movs	r3, #0
 8001bee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf4:	4b79      	ldr	r3, [pc, #484]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d00d      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x40>
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	f200 80e1 	bhi.w	8001dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x34>
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c0e:	e0db      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c10:	4b73      	ldr	r3, [pc, #460]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c14:	e0db      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c16:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c1a:	e0d8      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c1c:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c26:	4b6d      	ldr	r3, [pc, #436]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d063      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c32:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	099b      	lsrs	r3, r3, #6
 8001c38:	2200      	movs	r2, #0
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
 8001c46:	2300      	movs	r3, #0
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
 8001c4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c4e:	4622      	mov	r2, r4
 8001c50:	462b      	mov	r3, r5
 8001c52:	f04f 0000 	mov.w	r0, #0
 8001c56:	f04f 0100 	mov.w	r1, #0
 8001c5a:	0159      	lsls	r1, r3, #5
 8001c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c60:	0150      	lsls	r0, r2, #5
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4621      	mov	r1, r4
 8001c68:	1a51      	subs	r1, r2, r1
 8001c6a:	6139      	str	r1, [r7, #16]
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c80:	4659      	mov	r1, fp
 8001c82:	018b      	lsls	r3, r1, #6
 8001c84:	4651      	mov	r1, sl
 8001c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c8a:	4651      	mov	r1, sl
 8001c8c:	018a      	lsls	r2, r1, #6
 8001c8e:	4651      	mov	r1, sl
 8001c90:	ebb2 0801 	subs.w	r8, r2, r1
 8001c94:	4659      	mov	r1, fp
 8001c96:	eb63 0901 	sbc.w	r9, r3, r1
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cae:	4690      	mov	r8, r2
 8001cb0:	4699      	mov	r9, r3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	eb18 0303 	adds.w	r3, r8, r3
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	462b      	mov	r3, r5
 8001cbc:	eb49 0303 	adc.w	r3, r9, r3
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cce:	4629      	mov	r1, r5
 8001cd0:	024b      	lsls	r3, r1, #9
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cd8:	4621      	mov	r1, r4
 8001cda:	024a      	lsls	r2, r1, #9
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cec:	f7fe fad0 	bl	8000290 <__aeabi_uldivmod>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cf8:	e058      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfa:	4b38      	ldr	r3, [pc, #224]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	099b      	lsrs	r3, r3, #6
 8001d00:	2200      	movs	r2, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	4611      	mov	r1, r2
 8001d06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d0a:	623b      	str	r3, [r7, #32]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d14:	4642      	mov	r2, r8
 8001d16:	464b      	mov	r3, r9
 8001d18:	f04f 0000 	mov.w	r0, #0
 8001d1c:	f04f 0100 	mov.w	r1, #0
 8001d20:	0159      	lsls	r1, r3, #5
 8001d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d26:	0150      	lsls	r0, r2, #5
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d32:	4649      	mov	r1, r9
 8001d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8001d50:	eb63 050b 	sbc.w	r5, r3, fp
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	00eb      	lsls	r3, r5, #3
 8001d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d62:	00e2      	lsls	r2, r4, #3
 8001d64:	4614      	mov	r4, r2
 8001d66:	461d      	mov	r5, r3
 8001d68:	4643      	mov	r3, r8
 8001d6a:	18e3      	adds	r3, r4, r3
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	464b      	mov	r3, r9
 8001d70:	eb45 0303 	adc.w	r3, r5, r3
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d82:	4629      	mov	r1, r5
 8001d84:	028b      	lsls	r3, r1, #10
 8001d86:	4621      	mov	r1, r4
 8001d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	028a      	lsls	r2, r1, #10
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d96:	2200      	movs	r2, #0
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	61fa      	str	r2, [r7, #28]
 8001d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001da0:	f7fe fa76 	bl	8000290 <__aeabi_uldivmod>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4613      	mov	r3, r2
 8001daa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	3301      	adds	r3, #1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dc6:	e002      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3750      	adds	r7, #80	; 0x50
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	00f42400 	.word	0x00f42400
 8001de4:	007a1200 	.word	0x007a1200

08001de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000028 	.word	0x20000028

08001e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e04:	f7ff fff0 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	0a9b      	lsrs	r3, r3, #10
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	4903      	ldr	r1, [pc, #12]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	08002da8 	.word	0x08002da8

08001e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e2c:	f7ff ffdc 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	0b5b      	lsrs	r3, r3, #13
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	4903      	ldr	r1, [pc, #12]	; (8001e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	08002da8 	.word	0x08002da8

08001e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e03f      	b.n	8001ee2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe ff54 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2224      	movs	r2, #36	; 0x24
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f829 	bl	8001eec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef0:	b0c0      	sub	sp, #256	; 0x100
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f08:	68d9      	ldr	r1, [r3, #12]
 8001f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	ea40 0301 	orr.w	r3, r0, r1
 8001f14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f44:	f021 010c 	bic.w	r1, r1, #12
 8001f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f52:	430b      	orrs	r3, r1
 8001f54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f66:	6999      	ldr	r1, [r3, #24]
 8001f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	ea40 0301 	orr.w	r3, r0, r1
 8001f72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4b8f      	ldr	r3, [pc, #572]	; (80021b8 <UART_SetConfig+0x2cc>)
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d005      	beq.n	8001f8c <UART_SetConfig+0xa0>
 8001f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4b8d      	ldr	r3, [pc, #564]	; (80021bc <UART_SetConfig+0x2d0>)
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d104      	bne.n	8001f96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f8c:	f7ff ff4c 	bl	8001e28 <HAL_RCC_GetPCLK2Freq>
 8001f90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f94:	e003      	b.n	8001f9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f96:	f7ff ff33 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 8001f9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fa8:	f040 810c 	bne.w	80021c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001fb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001fba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001fbe:	4622      	mov	r2, r4
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	1891      	adds	r1, r2, r2
 8001fc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8001fc6:	415b      	adcs	r3, r3
 8001fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fce:	4621      	mov	r1, r4
 8001fd0:	eb12 0801 	adds.w	r8, r2, r1
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	eb43 0901 	adc.w	r9, r3, r1
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fe6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fee:	4690      	mov	r8, r2
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	eb18 0303 	adds.w	r3, r8, r3
 8001ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ffc:	462b      	mov	r3, r5
 8001ffe:	eb49 0303 	adc.w	r3, r9, r3
 8002002:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002012:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002016:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800201a:	460b      	mov	r3, r1
 800201c:	18db      	adds	r3, r3, r3
 800201e:	653b      	str	r3, [r7, #80]	; 0x50
 8002020:	4613      	mov	r3, r2
 8002022:	eb42 0303 	adc.w	r3, r2, r3
 8002026:	657b      	str	r3, [r7, #84]	; 0x54
 8002028:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800202c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002030:	f7fe f92e 	bl	8000290 <__aeabi_uldivmod>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4b61      	ldr	r3, [pc, #388]	; (80021c0 <UART_SetConfig+0x2d4>)
 800203a:	fba3 2302 	umull	r2, r3, r3, r2
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	011c      	lsls	r4, r3, #4
 8002042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002046:	2200      	movs	r2, #0
 8002048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800204c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002050:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002054:	4642      	mov	r2, r8
 8002056:	464b      	mov	r3, r9
 8002058:	1891      	adds	r1, r2, r2
 800205a:	64b9      	str	r1, [r7, #72]	; 0x48
 800205c:	415b      	adcs	r3, r3
 800205e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002060:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002064:	4641      	mov	r1, r8
 8002066:	eb12 0a01 	adds.w	sl, r2, r1
 800206a:	4649      	mov	r1, r9
 800206c:	eb43 0b01 	adc.w	fp, r3, r1
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800207c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002080:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002084:	4692      	mov	sl, r2
 8002086:	469b      	mov	fp, r3
 8002088:	4643      	mov	r3, r8
 800208a:	eb1a 0303 	adds.w	r3, sl, r3
 800208e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002092:	464b      	mov	r3, r9
 8002094:	eb4b 0303 	adc.w	r3, fp, r3
 8002098:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800209c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80020ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80020b0:	460b      	mov	r3, r1
 80020b2:	18db      	adds	r3, r3, r3
 80020b4:	643b      	str	r3, [r7, #64]	; 0x40
 80020b6:	4613      	mov	r3, r2
 80020b8:	eb42 0303 	adc.w	r3, r2, r3
 80020bc:	647b      	str	r3, [r7, #68]	; 0x44
 80020be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80020c6:	f7fe f8e3 	bl	8000290 <__aeabi_uldivmod>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4611      	mov	r1, r2
 80020d0:	4b3b      	ldr	r3, [pc, #236]	; (80021c0 <UART_SetConfig+0x2d4>)
 80020d2:	fba3 2301 	umull	r2, r3, r3, r1
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	2264      	movs	r2, #100	; 0x64
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	1acb      	subs	r3, r1, r3
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80020e6:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <UART_SetConfig+0x2d4>)
 80020e8:	fba3 2302 	umull	r2, r3, r3, r2
 80020ec:	095b      	lsrs	r3, r3, #5
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020f4:	441c      	add	r4, r3
 80020f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020fa:	2200      	movs	r2, #0
 80020fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002100:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002104:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002108:	4642      	mov	r2, r8
 800210a:	464b      	mov	r3, r9
 800210c:	1891      	adds	r1, r2, r2
 800210e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002110:	415b      	adcs	r3, r3
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002114:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002118:	4641      	mov	r1, r8
 800211a:	1851      	adds	r1, r2, r1
 800211c:	6339      	str	r1, [r7, #48]	; 0x30
 800211e:	4649      	mov	r1, r9
 8002120:	414b      	adcs	r3, r1
 8002122:	637b      	str	r3, [r7, #52]	; 0x34
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002130:	4659      	mov	r1, fp
 8002132:	00cb      	lsls	r3, r1, #3
 8002134:	4651      	mov	r1, sl
 8002136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800213a:	4651      	mov	r1, sl
 800213c:	00ca      	lsls	r2, r1, #3
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	4603      	mov	r3, r0
 8002144:	4642      	mov	r2, r8
 8002146:	189b      	adds	r3, r3, r2
 8002148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800214c:	464b      	mov	r3, r9
 800214e:	460a      	mov	r2, r1
 8002150:	eb42 0303 	adc.w	r3, r2, r3
 8002154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002164:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002168:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800216c:	460b      	mov	r3, r1
 800216e:	18db      	adds	r3, r3, r3
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
 8002172:	4613      	mov	r3, r2
 8002174:	eb42 0303 	adc.w	r3, r2, r3
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800217a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800217e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002182:	f7fe f885 	bl	8000290 <__aeabi_uldivmod>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <UART_SetConfig+0x2d4>)
 800218c:	fba3 1302 	umull	r1, r3, r3, r2
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	2164      	movs	r1, #100	; 0x64
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	3332      	adds	r3, #50	; 0x32
 800219e:	4a08      	ldr	r2, [pc, #32]	; (80021c0 <UART_SetConfig+0x2d4>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	f003 0207 	and.w	r2, r3, #7
 80021aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4422      	add	r2, r4
 80021b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021b4:	e105      	b.n	80023c2 <UART_SetConfig+0x4d6>
 80021b6:	bf00      	nop
 80021b8:	40011000 	.word	0x40011000
 80021bc:	40011400 	.word	0x40011400
 80021c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021c8:	2200      	movs	r2, #0
 80021ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80021ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80021d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80021d6:	4642      	mov	r2, r8
 80021d8:	464b      	mov	r3, r9
 80021da:	1891      	adds	r1, r2, r2
 80021dc:	6239      	str	r1, [r7, #32]
 80021de:	415b      	adcs	r3, r3
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021e6:	4641      	mov	r1, r8
 80021e8:	1854      	adds	r4, r2, r1
 80021ea:	4649      	mov	r1, r9
 80021ec:	eb43 0501 	adc.w	r5, r3, r1
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	00eb      	lsls	r3, r5, #3
 80021fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021fe:	00e2      	lsls	r2, r4, #3
 8002200:	4614      	mov	r4, r2
 8002202:	461d      	mov	r5, r3
 8002204:	4643      	mov	r3, r8
 8002206:	18e3      	adds	r3, r4, r3
 8002208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800220c:	464b      	mov	r3, r9
 800220e:	eb45 0303 	adc.w	r3, r5, r3
 8002212:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002222:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002232:	4629      	mov	r1, r5
 8002234:	008b      	lsls	r3, r1, #2
 8002236:	4621      	mov	r1, r4
 8002238:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800223c:	4621      	mov	r1, r4
 800223e:	008a      	lsls	r2, r1, #2
 8002240:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002244:	f7fe f824 	bl	8000290 <__aeabi_uldivmod>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4b60      	ldr	r3, [pc, #384]	; (80023d0 <UART_SetConfig+0x4e4>)
 800224e:	fba3 2302 	umull	r2, r3, r3, r2
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	011c      	lsls	r4, r3, #4
 8002256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800225a:	2200      	movs	r2, #0
 800225c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002260:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002264:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002268:	4642      	mov	r2, r8
 800226a:	464b      	mov	r3, r9
 800226c:	1891      	adds	r1, r2, r2
 800226e:	61b9      	str	r1, [r7, #24]
 8002270:	415b      	adcs	r3, r3
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002278:	4641      	mov	r1, r8
 800227a:	1851      	adds	r1, r2, r1
 800227c:	6139      	str	r1, [r7, #16]
 800227e:	4649      	mov	r1, r9
 8002280:	414b      	adcs	r3, r1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002290:	4659      	mov	r1, fp
 8002292:	00cb      	lsls	r3, r1, #3
 8002294:	4651      	mov	r1, sl
 8002296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800229a:	4651      	mov	r1, sl
 800229c:	00ca      	lsls	r2, r1, #3
 800229e:	4610      	mov	r0, r2
 80022a0:	4619      	mov	r1, r3
 80022a2:	4603      	mov	r3, r0
 80022a4:	4642      	mov	r2, r8
 80022a6:	189b      	adds	r3, r3, r2
 80022a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022ac:	464b      	mov	r3, r9
 80022ae:	460a      	mov	r2, r1
 80022b0:	eb42 0303 	adc.w	r3, r2, r3
 80022b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80022c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80022d0:	4649      	mov	r1, r9
 80022d2:	008b      	lsls	r3, r1, #2
 80022d4:	4641      	mov	r1, r8
 80022d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022da:	4641      	mov	r1, r8
 80022dc:	008a      	lsls	r2, r1, #2
 80022de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022e2:	f7fd ffd5 	bl	8000290 <__aeabi_uldivmod>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <UART_SetConfig+0x4e4>)
 80022ec:	fba3 1302 	umull	r1, r3, r3, r2
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	2164      	movs	r1, #100	; 0x64
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	3332      	adds	r3, #50	; 0x32
 80022fe:	4a34      	ldr	r2, [pc, #208]	; (80023d0 <UART_SetConfig+0x4e4>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800230a:	441c      	add	r4, r3
 800230c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002310:	2200      	movs	r2, #0
 8002312:	673b      	str	r3, [r7, #112]	; 0x70
 8002314:	677a      	str	r2, [r7, #116]	; 0x74
 8002316:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800231a:	4642      	mov	r2, r8
 800231c:	464b      	mov	r3, r9
 800231e:	1891      	adds	r1, r2, r2
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	415b      	adcs	r3, r3
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800232a:	4641      	mov	r1, r8
 800232c:	1851      	adds	r1, r2, r1
 800232e:	6039      	str	r1, [r7, #0]
 8002330:	4649      	mov	r1, r9
 8002332:	414b      	adcs	r3, r1
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002342:	4659      	mov	r1, fp
 8002344:	00cb      	lsls	r3, r1, #3
 8002346:	4651      	mov	r1, sl
 8002348:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800234c:	4651      	mov	r1, sl
 800234e:	00ca      	lsls	r2, r1, #3
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	4603      	mov	r3, r0
 8002356:	4642      	mov	r2, r8
 8002358:	189b      	adds	r3, r3, r2
 800235a:	66bb      	str	r3, [r7, #104]	; 0x68
 800235c:	464b      	mov	r3, r9
 800235e:	460a      	mov	r2, r1
 8002360:	eb42 0303 	adc.w	r3, r2, r3
 8002364:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	663b      	str	r3, [r7, #96]	; 0x60
 8002370:	667a      	str	r2, [r7, #100]	; 0x64
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800237e:	4649      	mov	r1, r9
 8002380:	008b      	lsls	r3, r1, #2
 8002382:	4641      	mov	r1, r8
 8002384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002388:	4641      	mov	r1, r8
 800238a:	008a      	lsls	r2, r1, #2
 800238c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002390:	f7fd ff7e 	bl	8000290 <__aeabi_uldivmod>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <UART_SetConfig+0x4e4>)
 800239a:	fba3 1302 	umull	r1, r3, r3, r2
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2164      	movs	r1, #100	; 0x64
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	3332      	adds	r3, #50	; 0x32
 80023ac:	4a08      	ldr	r2, [pc, #32]	; (80023d0 <UART_SetConfig+0x4e4>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	f003 020f 	and.w	r2, r3, #15
 80023b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4422      	add	r2, r4
 80023c0:	609a      	str	r2, [r3, #8]
}
 80023c2:	bf00      	nop
 80023c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80023c8:	46bd      	mov	sp, r7
 80023ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ce:	bf00      	nop
 80023d0:	51eb851f 	.word	0x51eb851f

080023d4 <__errno>:
 80023d4:	4b01      	ldr	r3, [pc, #4]	; (80023dc <__errno+0x8>)
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000034 	.word	0x20000034

080023e0 <__libc_init_array>:
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	4d0d      	ldr	r5, [pc, #52]	; (8002418 <__libc_init_array+0x38>)
 80023e4:	4c0d      	ldr	r4, [pc, #52]	; (800241c <__libc_init_array+0x3c>)
 80023e6:	1b64      	subs	r4, r4, r5
 80023e8:	10a4      	asrs	r4, r4, #2
 80023ea:	2600      	movs	r6, #0
 80023ec:	42a6      	cmp	r6, r4
 80023ee:	d109      	bne.n	8002404 <__libc_init_array+0x24>
 80023f0:	4d0b      	ldr	r5, [pc, #44]	; (8002420 <__libc_init_array+0x40>)
 80023f2:	4c0c      	ldr	r4, [pc, #48]	; (8002424 <__libc_init_array+0x44>)
 80023f4:	f000 fca2 	bl	8002d3c <_init>
 80023f8:	1b64      	subs	r4, r4, r5
 80023fa:	10a4      	asrs	r4, r4, #2
 80023fc:	2600      	movs	r6, #0
 80023fe:	42a6      	cmp	r6, r4
 8002400:	d105      	bne.n	800240e <__libc_init_array+0x2e>
 8002402:	bd70      	pop	{r4, r5, r6, pc}
 8002404:	f855 3b04 	ldr.w	r3, [r5], #4
 8002408:	4798      	blx	r3
 800240a:	3601      	adds	r6, #1
 800240c:	e7ee      	b.n	80023ec <__libc_init_array+0xc>
 800240e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002412:	4798      	blx	r3
 8002414:	3601      	adds	r6, #1
 8002416:	e7f2      	b.n	80023fe <__libc_init_array+0x1e>
 8002418:	08002dec 	.word	0x08002dec
 800241c:	08002dec 	.word	0x08002dec
 8002420:	08002dec 	.word	0x08002dec
 8002424:	08002df0 	.word	0x08002df0

08002428 <memset>:
 8002428:	4402      	add	r2, r0
 800242a:	4603      	mov	r3, r0
 800242c:	4293      	cmp	r3, r2
 800242e:	d100      	bne.n	8002432 <memset+0xa>
 8002430:	4770      	bx	lr
 8002432:	f803 1b01 	strb.w	r1, [r3], #1
 8002436:	e7f9      	b.n	800242c <memset+0x4>

08002438 <sniprintf>:
 8002438:	b40c      	push	{r2, r3}
 800243a:	b530      	push	{r4, r5, lr}
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <sniprintf+0x64>)
 800243e:	1e0c      	subs	r4, r1, #0
 8002440:	681d      	ldr	r5, [r3, #0]
 8002442:	b09d      	sub	sp, #116	; 0x74
 8002444:	da08      	bge.n	8002458 <sniprintf+0x20>
 8002446:	238b      	movs	r3, #139	; 0x8b
 8002448:	602b      	str	r3, [r5, #0]
 800244a:	f04f 30ff 	mov.w	r0, #4294967295
 800244e:	b01d      	add	sp, #116	; 0x74
 8002450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002454:	b002      	add	sp, #8
 8002456:	4770      	bx	lr
 8002458:	f44f 7302 	mov.w	r3, #520	; 0x208
 800245c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002460:	bf14      	ite	ne
 8002462:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002466:	4623      	moveq	r3, r4
 8002468:	9304      	str	r3, [sp, #16]
 800246a:	9307      	str	r3, [sp, #28]
 800246c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002470:	9002      	str	r0, [sp, #8]
 8002472:	9006      	str	r0, [sp, #24]
 8002474:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002478:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800247a:	ab21      	add	r3, sp, #132	; 0x84
 800247c:	a902      	add	r1, sp, #8
 800247e:	4628      	mov	r0, r5
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	f000 f869 	bl	8002558 <_svfiprintf_r>
 8002486:	1c43      	adds	r3, r0, #1
 8002488:	bfbc      	itt	lt
 800248a:	238b      	movlt	r3, #139	; 0x8b
 800248c:	602b      	strlt	r3, [r5, #0]
 800248e:	2c00      	cmp	r4, #0
 8002490:	d0dd      	beq.n	800244e <sniprintf+0x16>
 8002492:	9b02      	ldr	r3, [sp, #8]
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
 8002498:	e7d9      	b.n	800244e <sniprintf+0x16>
 800249a:	bf00      	nop
 800249c:	20000034 	.word	0x20000034

080024a0 <__ssputs_r>:
 80024a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024a4:	688e      	ldr	r6, [r1, #8]
 80024a6:	429e      	cmp	r6, r3
 80024a8:	4682      	mov	sl, r0
 80024aa:	460c      	mov	r4, r1
 80024ac:	4690      	mov	r8, r2
 80024ae:	461f      	mov	r7, r3
 80024b0:	d838      	bhi.n	8002524 <__ssputs_r+0x84>
 80024b2:	898a      	ldrh	r2, [r1, #12]
 80024b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80024b8:	d032      	beq.n	8002520 <__ssputs_r+0x80>
 80024ba:	6825      	ldr	r5, [r4, #0]
 80024bc:	6909      	ldr	r1, [r1, #16]
 80024be:	eba5 0901 	sub.w	r9, r5, r1
 80024c2:	6965      	ldr	r5, [r4, #20]
 80024c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80024cc:	3301      	adds	r3, #1
 80024ce:	444b      	add	r3, r9
 80024d0:	106d      	asrs	r5, r5, #1
 80024d2:	429d      	cmp	r5, r3
 80024d4:	bf38      	it	cc
 80024d6:	461d      	movcc	r5, r3
 80024d8:	0553      	lsls	r3, r2, #21
 80024da:	d531      	bpl.n	8002540 <__ssputs_r+0xa0>
 80024dc:	4629      	mov	r1, r5
 80024de:	f000 fb63 	bl	8002ba8 <_malloc_r>
 80024e2:	4606      	mov	r6, r0
 80024e4:	b950      	cbnz	r0, 80024fc <__ssputs_r+0x5c>
 80024e6:	230c      	movs	r3, #12
 80024e8:	f8ca 3000 	str.w	r3, [sl]
 80024ec:	89a3      	ldrh	r3, [r4, #12]
 80024ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024f2:	81a3      	strh	r3, [r4, #12]
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024fc:	6921      	ldr	r1, [r4, #16]
 80024fe:	464a      	mov	r2, r9
 8002500:	f000 fabe 	bl	8002a80 <memcpy>
 8002504:	89a3      	ldrh	r3, [r4, #12]
 8002506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800250a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800250e:	81a3      	strh	r3, [r4, #12]
 8002510:	6126      	str	r6, [r4, #16]
 8002512:	6165      	str	r5, [r4, #20]
 8002514:	444e      	add	r6, r9
 8002516:	eba5 0509 	sub.w	r5, r5, r9
 800251a:	6026      	str	r6, [r4, #0]
 800251c:	60a5      	str	r5, [r4, #8]
 800251e:	463e      	mov	r6, r7
 8002520:	42be      	cmp	r6, r7
 8002522:	d900      	bls.n	8002526 <__ssputs_r+0x86>
 8002524:	463e      	mov	r6, r7
 8002526:	6820      	ldr	r0, [r4, #0]
 8002528:	4632      	mov	r2, r6
 800252a:	4641      	mov	r1, r8
 800252c:	f000 fab6 	bl	8002a9c <memmove>
 8002530:	68a3      	ldr	r3, [r4, #8]
 8002532:	1b9b      	subs	r3, r3, r6
 8002534:	60a3      	str	r3, [r4, #8]
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	4433      	add	r3, r6
 800253a:	6023      	str	r3, [r4, #0]
 800253c:	2000      	movs	r0, #0
 800253e:	e7db      	b.n	80024f8 <__ssputs_r+0x58>
 8002540:	462a      	mov	r2, r5
 8002542:	f000 fba5 	bl	8002c90 <_realloc_r>
 8002546:	4606      	mov	r6, r0
 8002548:	2800      	cmp	r0, #0
 800254a:	d1e1      	bne.n	8002510 <__ssputs_r+0x70>
 800254c:	6921      	ldr	r1, [r4, #16]
 800254e:	4650      	mov	r0, sl
 8002550:	f000 fabe 	bl	8002ad0 <_free_r>
 8002554:	e7c7      	b.n	80024e6 <__ssputs_r+0x46>
	...

08002558 <_svfiprintf_r>:
 8002558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800255c:	4698      	mov	r8, r3
 800255e:	898b      	ldrh	r3, [r1, #12]
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	b09d      	sub	sp, #116	; 0x74
 8002564:	4607      	mov	r7, r0
 8002566:	460d      	mov	r5, r1
 8002568:	4614      	mov	r4, r2
 800256a:	d50e      	bpl.n	800258a <_svfiprintf_r+0x32>
 800256c:	690b      	ldr	r3, [r1, #16]
 800256e:	b963      	cbnz	r3, 800258a <_svfiprintf_r+0x32>
 8002570:	2140      	movs	r1, #64	; 0x40
 8002572:	f000 fb19 	bl	8002ba8 <_malloc_r>
 8002576:	6028      	str	r0, [r5, #0]
 8002578:	6128      	str	r0, [r5, #16]
 800257a:	b920      	cbnz	r0, 8002586 <_svfiprintf_r+0x2e>
 800257c:	230c      	movs	r3, #12
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	e0d1      	b.n	800272a <_svfiprintf_r+0x1d2>
 8002586:	2340      	movs	r3, #64	; 0x40
 8002588:	616b      	str	r3, [r5, #20]
 800258a:	2300      	movs	r3, #0
 800258c:	9309      	str	r3, [sp, #36]	; 0x24
 800258e:	2320      	movs	r3, #32
 8002590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002594:	f8cd 800c 	str.w	r8, [sp, #12]
 8002598:	2330      	movs	r3, #48	; 0x30
 800259a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002744 <_svfiprintf_r+0x1ec>
 800259e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025a2:	f04f 0901 	mov.w	r9, #1
 80025a6:	4623      	mov	r3, r4
 80025a8:	469a      	mov	sl, r3
 80025aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025ae:	b10a      	cbz	r2, 80025b4 <_svfiprintf_r+0x5c>
 80025b0:	2a25      	cmp	r2, #37	; 0x25
 80025b2:	d1f9      	bne.n	80025a8 <_svfiprintf_r+0x50>
 80025b4:	ebba 0b04 	subs.w	fp, sl, r4
 80025b8:	d00b      	beq.n	80025d2 <_svfiprintf_r+0x7a>
 80025ba:	465b      	mov	r3, fp
 80025bc:	4622      	mov	r2, r4
 80025be:	4629      	mov	r1, r5
 80025c0:	4638      	mov	r0, r7
 80025c2:	f7ff ff6d 	bl	80024a0 <__ssputs_r>
 80025c6:	3001      	adds	r0, #1
 80025c8:	f000 80aa 	beq.w	8002720 <_svfiprintf_r+0x1c8>
 80025cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025ce:	445a      	add	r2, fp
 80025d0:	9209      	str	r2, [sp, #36]	; 0x24
 80025d2:	f89a 3000 	ldrb.w	r3, [sl]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80a2 	beq.w	8002720 <_svfiprintf_r+0x1c8>
 80025dc:	2300      	movs	r3, #0
 80025de:	f04f 32ff 	mov.w	r2, #4294967295
 80025e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025e6:	f10a 0a01 	add.w	sl, sl, #1
 80025ea:	9304      	str	r3, [sp, #16]
 80025ec:	9307      	str	r3, [sp, #28]
 80025ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025f2:	931a      	str	r3, [sp, #104]	; 0x68
 80025f4:	4654      	mov	r4, sl
 80025f6:	2205      	movs	r2, #5
 80025f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025fc:	4851      	ldr	r0, [pc, #324]	; (8002744 <_svfiprintf_r+0x1ec>)
 80025fe:	f7fd fdf7 	bl	80001f0 <memchr>
 8002602:	9a04      	ldr	r2, [sp, #16]
 8002604:	b9d8      	cbnz	r0, 800263e <_svfiprintf_r+0xe6>
 8002606:	06d0      	lsls	r0, r2, #27
 8002608:	bf44      	itt	mi
 800260a:	2320      	movmi	r3, #32
 800260c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002610:	0711      	lsls	r1, r2, #28
 8002612:	bf44      	itt	mi
 8002614:	232b      	movmi	r3, #43	; 0x2b
 8002616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800261a:	f89a 3000 	ldrb.w	r3, [sl]
 800261e:	2b2a      	cmp	r3, #42	; 0x2a
 8002620:	d015      	beq.n	800264e <_svfiprintf_r+0xf6>
 8002622:	9a07      	ldr	r2, [sp, #28]
 8002624:	4654      	mov	r4, sl
 8002626:	2000      	movs	r0, #0
 8002628:	f04f 0c0a 	mov.w	ip, #10
 800262c:	4621      	mov	r1, r4
 800262e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002632:	3b30      	subs	r3, #48	; 0x30
 8002634:	2b09      	cmp	r3, #9
 8002636:	d94e      	bls.n	80026d6 <_svfiprintf_r+0x17e>
 8002638:	b1b0      	cbz	r0, 8002668 <_svfiprintf_r+0x110>
 800263a:	9207      	str	r2, [sp, #28]
 800263c:	e014      	b.n	8002668 <_svfiprintf_r+0x110>
 800263e:	eba0 0308 	sub.w	r3, r0, r8
 8002642:	fa09 f303 	lsl.w	r3, r9, r3
 8002646:	4313      	orrs	r3, r2
 8002648:	9304      	str	r3, [sp, #16]
 800264a:	46a2      	mov	sl, r4
 800264c:	e7d2      	b.n	80025f4 <_svfiprintf_r+0x9c>
 800264e:	9b03      	ldr	r3, [sp, #12]
 8002650:	1d19      	adds	r1, r3, #4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	9103      	str	r1, [sp, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	bfbb      	ittet	lt
 800265a:	425b      	neglt	r3, r3
 800265c:	f042 0202 	orrlt.w	r2, r2, #2
 8002660:	9307      	strge	r3, [sp, #28]
 8002662:	9307      	strlt	r3, [sp, #28]
 8002664:	bfb8      	it	lt
 8002666:	9204      	strlt	r2, [sp, #16]
 8002668:	7823      	ldrb	r3, [r4, #0]
 800266a:	2b2e      	cmp	r3, #46	; 0x2e
 800266c:	d10c      	bne.n	8002688 <_svfiprintf_r+0x130>
 800266e:	7863      	ldrb	r3, [r4, #1]
 8002670:	2b2a      	cmp	r3, #42	; 0x2a
 8002672:	d135      	bne.n	80026e0 <_svfiprintf_r+0x188>
 8002674:	9b03      	ldr	r3, [sp, #12]
 8002676:	1d1a      	adds	r2, r3, #4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	9203      	str	r2, [sp, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	bfb8      	it	lt
 8002680:	f04f 33ff 	movlt.w	r3, #4294967295
 8002684:	3402      	adds	r4, #2
 8002686:	9305      	str	r3, [sp, #20]
 8002688:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002754 <_svfiprintf_r+0x1fc>
 800268c:	7821      	ldrb	r1, [r4, #0]
 800268e:	2203      	movs	r2, #3
 8002690:	4650      	mov	r0, sl
 8002692:	f7fd fdad 	bl	80001f0 <memchr>
 8002696:	b140      	cbz	r0, 80026aa <_svfiprintf_r+0x152>
 8002698:	2340      	movs	r3, #64	; 0x40
 800269a:	eba0 000a 	sub.w	r0, r0, sl
 800269e:	fa03 f000 	lsl.w	r0, r3, r0
 80026a2:	9b04      	ldr	r3, [sp, #16]
 80026a4:	4303      	orrs	r3, r0
 80026a6:	3401      	adds	r4, #1
 80026a8:	9304      	str	r3, [sp, #16]
 80026aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026ae:	4826      	ldr	r0, [pc, #152]	; (8002748 <_svfiprintf_r+0x1f0>)
 80026b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026b4:	2206      	movs	r2, #6
 80026b6:	f7fd fd9b 	bl	80001f0 <memchr>
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d038      	beq.n	8002730 <_svfiprintf_r+0x1d8>
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <_svfiprintf_r+0x1f4>)
 80026c0:	bb1b      	cbnz	r3, 800270a <_svfiprintf_r+0x1b2>
 80026c2:	9b03      	ldr	r3, [sp, #12]
 80026c4:	3307      	adds	r3, #7
 80026c6:	f023 0307 	bic.w	r3, r3, #7
 80026ca:	3308      	adds	r3, #8
 80026cc:	9303      	str	r3, [sp, #12]
 80026ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026d0:	4433      	add	r3, r6
 80026d2:	9309      	str	r3, [sp, #36]	; 0x24
 80026d4:	e767      	b.n	80025a6 <_svfiprintf_r+0x4e>
 80026d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80026da:	460c      	mov	r4, r1
 80026dc:	2001      	movs	r0, #1
 80026de:	e7a5      	b.n	800262c <_svfiprintf_r+0xd4>
 80026e0:	2300      	movs	r3, #0
 80026e2:	3401      	adds	r4, #1
 80026e4:	9305      	str	r3, [sp, #20]
 80026e6:	4619      	mov	r1, r3
 80026e8:	f04f 0c0a 	mov.w	ip, #10
 80026ec:	4620      	mov	r0, r4
 80026ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026f2:	3a30      	subs	r2, #48	; 0x30
 80026f4:	2a09      	cmp	r2, #9
 80026f6:	d903      	bls.n	8002700 <_svfiprintf_r+0x1a8>
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0c5      	beq.n	8002688 <_svfiprintf_r+0x130>
 80026fc:	9105      	str	r1, [sp, #20]
 80026fe:	e7c3      	b.n	8002688 <_svfiprintf_r+0x130>
 8002700:	fb0c 2101 	mla	r1, ip, r1, r2
 8002704:	4604      	mov	r4, r0
 8002706:	2301      	movs	r3, #1
 8002708:	e7f0      	b.n	80026ec <_svfiprintf_r+0x194>
 800270a:	ab03      	add	r3, sp, #12
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	462a      	mov	r2, r5
 8002710:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <_svfiprintf_r+0x1f8>)
 8002712:	a904      	add	r1, sp, #16
 8002714:	4638      	mov	r0, r7
 8002716:	f3af 8000 	nop.w
 800271a:	1c42      	adds	r2, r0, #1
 800271c:	4606      	mov	r6, r0
 800271e:	d1d6      	bne.n	80026ce <_svfiprintf_r+0x176>
 8002720:	89ab      	ldrh	r3, [r5, #12]
 8002722:	065b      	lsls	r3, r3, #25
 8002724:	f53f af2c 	bmi.w	8002580 <_svfiprintf_r+0x28>
 8002728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800272a:	b01d      	add	sp, #116	; 0x74
 800272c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002730:	ab03      	add	r3, sp, #12
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	462a      	mov	r2, r5
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <_svfiprintf_r+0x1f8>)
 8002738:	a904      	add	r1, sp, #16
 800273a:	4638      	mov	r0, r7
 800273c:	f000 f87a 	bl	8002834 <_printf_i>
 8002740:	e7eb      	b.n	800271a <_svfiprintf_r+0x1c2>
 8002742:	bf00      	nop
 8002744:	08002db0 	.word	0x08002db0
 8002748:	08002dba 	.word	0x08002dba
 800274c:	00000000 	.word	0x00000000
 8002750:	080024a1 	.word	0x080024a1
 8002754:	08002db6 	.word	0x08002db6

08002758 <_printf_common>:
 8002758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800275c:	4616      	mov	r6, r2
 800275e:	4699      	mov	r9, r3
 8002760:	688a      	ldr	r2, [r1, #8]
 8002762:	690b      	ldr	r3, [r1, #16]
 8002764:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002768:	4293      	cmp	r3, r2
 800276a:	bfb8      	it	lt
 800276c:	4613      	movlt	r3, r2
 800276e:	6033      	str	r3, [r6, #0]
 8002770:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002774:	4607      	mov	r7, r0
 8002776:	460c      	mov	r4, r1
 8002778:	b10a      	cbz	r2, 800277e <_printf_common+0x26>
 800277a:	3301      	adds	r3, #1
 800277c:	6033      	str	r3, [r6, #0]
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	0699      	lsls	r1, r3, #26
 8002782:	bf42      	ittt	mi
 8002784:	6833      	ldrmi	r3, [r6, #0]
 8002786:	3302      	addmi	r3, #2
 8002788:	6033      	strmi	r3, [r6, #0]
 800278a:	6825      	ldr	r5, [r4, #0]
 800278c:	f015 0506 	ands.w	r5, r5, #6
 8002790:	d106      	bne.n	80027a0 <_printf_common+0x48>
 8002792:	f104 0a19 	add.w	sl, r4, #25
 8002796:	68e3      	ldr	r3, [r4, #12]
 8002798:	6832      	ldr	r2, [r6, #0]
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	42ab      	cmp	r3, r5
 800279e:	dc26      	bgt.n	80027ee <_printf_common+0x96>
 80027a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027a4:	1e13      	subs	r3, r2, #0
 80027a6:	6822      	ldr	r2, [r4, #0]
 80027a8:	bf18      	it	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	0692      	lsls	r2, r2, #26
 80027ae:	d42b      	bmi.n	8002808 <_printf_common+0xb0>
 80027b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027b4:	4649      	mov	r1, r9
 80027b6:	4638      	mov	r0, r7
 80027b8:	47c0      	blx	r8
 80027ba:	3001      	adds	r0, #1
 80027bc:	d01e      	beq.n	80027fc <_printf_common+0xa4>
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	68e5      	ldr	r5, [r4, #12]
 80027c2:	6832      	ldr	r2, [r6, #0]
 80027c4:	f003 0306 	and.w	r3, r3, #6
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	bf08      	it	eq
 80027cc:	1aad      	subeq	r5, r5, r2
 80027ce:	68a3      	ldr	r3, [r4, #8]
 80027d0:	6922      	ldr	r2, [r4, #16]
 80027d2:	bf0c      	ite	eq
 80027d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027d8:	2500      	movne	r5, #0
 80027da:	4293      	cmp	r3, r2
 80027dc:	bfc4      	itt	gt
 80027de:	1a9b      	subgt	r3, r3, r2
 80027e0:	18ed      	addgt	r5, r5, r3
 80027e2:	2600      	movs	r6, #0
 80027e4:	341a      	adds	r4, #26
 80027e6:	42b5      	cmp	r5, r6
 80027e8:	d11a      	bne.n	8002820 <_printf_common+0xc8>
 80027ea:	2000      	movs	r0, #0
 80027ec:	e008      	b.n	8002800 <_printf_common+0xa8>
 80027ee:	2301      	movs	r3, #1
 80027f0:	4652      	mov	r2, sl
 80027f2:	4649      	mov	r1, r9
 80027f4:	4638      	mov	r0, r7
 80027f6:	47c0      	blx	r8
 80027f8:	3001      	adds	r0, #1
 80027fa:	d103      	bne.n	8002804 <_printf_common+0xac>
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002804:	3501      	adds	r5, #1
 8002806:	e7c6      	b.n	8002796 <_printf_common+0x3e>
 8002808:	18e1      	adds	r1, r4, r3
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	2030      	movs	r0, #48	; 0x30
 800280e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002812:	4422      	add	r2, r4
 8002814:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002818:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800281c:	3302      	adds	r3, #2
 800281e:	e7c7      	b.n	80027b0 <_printf_common+0x58>
 8002820:	2301      	movs	r3, #1
 8002822:	4622      	mov	r2, r4
 8002824:	4649      	mov	r1, r9
 8002826:	4638      	mov	r0, r7
 8002828:	47c0      	blx	r8
 800282a:	3001      	adds	r0, #1
 800282c:	d0e6      	beq.n	80027fc <_printf_common+0xa4>
 800282e:	3601      	adds	r6, #1
 8002830:	e7d9      	b.n	80027e6 <_printf_common+0x8e>
	...

08002834 <_printf_i>:
 8002834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002838:	7e0f      	ldrb	r7, [r1, #24]
 800283a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800283c:	2f78      	cmp	r7, #120	; 0x78
 800283e:	4691      	mov	r9, r2
 8002840:	4680      	mov	r8, r0
 8002842:	460c      	mov	r4, r1
 8002844:	469a      	mov	sl, r3
 8002846:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800284a:	d807      	bhi.n	800285c <_printf_i+0x28>
 800284c:	2f62      	cmp	r7, #98	; 0x62
 800284e:	d80a      	bhi.n	8002866 <_printf_i+0x32>
 8002850:	2f00      	cmp	r7, #0
 8002852:	f000 80d8 	beq.w	8002a06 <_printf_i+0x1d2>
 8002856:	2f58      	cmp	r7, #88	; 0x58
 8002858:	f000 80a3 	beq.w	80029a2 <_printf_i+0x16e>
 800285c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002860:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002864:	e03a      	b.n	80028dc <_printf_i+0xa8>
 8002866:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800286a:	2b15      	cmp	r3, #21
 800286c:	d8f6      	bhi.n	800285c <_printf_i+0x28>
 800286e:	a101      	add	r1, pc, #4	; (adr r1, 8002874 <_printf_i+0x40>)
 8002870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002874:	080028cd 	.word	0x080028cd
 8002878:	080028e1 	.word	0x080028e1
 800287c:	0800285d 	.word	0x0800285d
 8002880:	0800285d 	.word	0x0800285d
 8002884:	0800285d 	.word	0x0800285d
 8002888:	0800285d 	.word	0x0800285d
 800288c:	080028e1 	.word	0x080028e1
 8002890:	0800285d 	.word	0x0800285d
 8002894:	0800285d 	.word	0x0800285d
 8002898:	0800285d 	.word	0x0800285d
 800289c:	0800285d 	.word	0x0800285d
 80028a0:	080029ed 	.word	0x080029ed
 80028a4:	08002911 	.word	0x08002911
 80028a8:	080029cf 	.word	0x080029cf
 80028ac:	0800285d 	.word	0x0800285d
 80028b0:	0800285d 	.word	0x0800285d
 80028b4:	08002a0f 	.word	0x08002a0f
 80028b8:	0800285d 	.word	0x0800285d
 80028bc:	08002911 	.word	0x08002911
 80028c0:	0800285d 	.word	0x0800285d
 80028c4:	0800285d 	.word	0x0800285d
 80028c8:	080029d7 	.word	0x080029d7
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	1d1a      	adds	r2, r3, #4
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	602a      	str	r2, [r5, #0]
 80028d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028dc:	2301      	movs	r3, #1
 80028de:	e0a3      	b.n	8002a28 <_printf_i+0x1f4>
 80028e0:	6820      	ldr	r0, [r4, #0]
 80028e2:	6829      	ldr	r1, [r5, #0]
 80028e4:	0606      	lsls	r6, r0, #24
 80028e6:	f101 0304 	add.w	r3, r1, #4
 80028ea:	d50a      	bpl.n	8002902 <_printf_i+0xce>
 80028ec:	680e      	ldr	r6, [r1, #0]
 80028ee:	602b      	str	r3, [r5, #0]
 80028f0:	2e00      	cmp	r6, #0
 80028f2:	da03      	bge.n	80028fc <_printf_i+0xc8>
 80028f4:	232d      	movs	r3, #45	; 0x2d
 80028f6:	4276      	negs	r6, r6
 80028f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028fc:	485e      	ldr	r0, [pc, #376]	; (8002a78 <_printf_i+0x244>)
 80028fe:	230a      	movs	r3, #10
 8002900:	e019      	b.n	8002936 <_printf_i+0x102>
 8002902:	680e      	ldr	r6, [r1, #0]
 8002904:	602b      	str	r3, [r5, #0]
 8002906:	f010 0f40 	tst.w	r0, #64	; 0x40
 800290a:	bf18      	it	ne
 800290c:	b236      	sxthne	r6, r6
 800290e:	e7ef      	b.n	80028f0 <_printf_i+0xbc>
 8002910:	682b      	ldr	r3, [r5, #0]
 8002912:	6820      	ldr	r0, [r4, #0]
 8002914:	1d19      	adds	r1, r3, #4
 8002916:	6029      	str	r1, [r5, #0]
 8002918:	0601      	lsls	r1, r0, #24
 800291a:	d501      	bpl.n	8002920 <_printf_i+0xec>
 800291c:	681e      	ldr	r6, [r3, #0]
 800291e:	e002      	b.n	8002926 <_printf_i+0xf2>
 8002920:	0646      	lsls	r6, r0, #25
 8002922:	d5fb      	bpl.n	800291c <_printf_i+0xe8>
 8002924:	881e      	ldrh	r6, [r3, #0]
 8002926:	4854      	ldr	r0, [pc, #336]	; (8002a78 <_printf_i+0x244>)
 8002928:	2f6f      	cmp	r7, #111	; 0x6f
 800292a:	bf0c      	ite	eq
 800292c:	2308      	moveq	r3, #8
 800292e:	230a      	movne	r3, #10
 8002930:	2100      	movs	r1, #0
 8002932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002936:	6865      	ldr	r5, [r4, #4]
 8002938:	60a5      	str	r5, [r4, #8]
 800293a:	2d00      	cmp	r5, #0
 800293c:	bfa2      	ittt	ge
 800293e:	6821      	ldrge	r1, [r4, #0]
 8002940:	f021 0104 	bicge.w	r1, r1, #4
 8002944:	6021      	strge	r1, [r4, #0]
 8002946:	b90e      	cbnz	r6, 800294c <_printf_i+0x118>
 8002948:	2d00      	cmp	r5, #0
 800294a:	d04d      	beq.n	80029e8 <_printf_i+0x1b4>
 800294c:	4615      	mov	r5, r2
 800294e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002952:	fb03 6711 	mls	r7, r3, r1, r6
 8002956:	5dc7      	ldrb	r7, [r0, r7]
 8002958:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800295c:	4637      	mov	r7, r6
 800295e:	42bb      	cmp	r3, r7
 8002960:	460e      	mov	r6, r1
 8002962:	d9f4      	bls.n	800294e <_printf_i+0x11a>
 8002964:	2b08      	cmp	r3, #8
 8002966:	d10b      	bne.n	8002980 <_printf_i+0x14c>
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	07de      	lsls	r6, r3, #31
 800296c:	d508      	bpl.n	8002980 <_printf_i+0x14c>
 800296e:	6923      	ldr	r3, [r4, #16]
 8002970:	6861      	ldr	r1, [r4, #4]
 8002972:	4299      	cmp	r1, r3
 8002974:	bfde      	ittt	le
 8002976:	2330      	movle	r3, #48	; 0x30
 8002978:	f805 3c01 	strble.w	r3, [r5, #-1]
 800297c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002980:	1b52      	subs	r2, r2, r5
 8002982:	6122      	str	r2, [r4, #16]
 8002984:	f8cd a000 	str.w	sl, [sp]
 8002988:	464b      	mov	r3, r9
 800298a:	aa03      	add	r2, sp, #12
 800298c:	4621      	mov	r1, r4
 800298e:	4640      	mov	r0, r8
 8002990:	f7ff fee2 	bl	8002758 <_printf_common>
 8002994:	3001      	adds	r0, #1
 8002996:	d14c      	bne.n	8002a32 <_printf_i+0x1fe>
 8002998:	f04f 30ff 	mov.w	r0, #4294967295
 800299c:	b004      	add	sp, #16
 800299e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a2:	4835      	ldr	r0, [pc, #212]	; (8002a78 <_printf_i+0x244>)
 80029a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80029a8:	6829      	ldr	r1, [r5, #0]
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80029b0:	6029      	str	r1, [r5, #0]
 80029b2:	061d      	lsls	r5, r3, #24
 80029b4:	d514      	bpl.n	80029e0 <_printf_i+0x1ac>
 80029b6:	07df      	lsls	r7, r3, #31
 80029b8:	bf44      	itt	mi
 80029ba:	f043 0320 	orrmi.w	r3, r3, #32
 80029be:	6023      	strmi	r3, [r4, #0]
 80029c0:	b91e      	cbnz	r6, 80029ca <_printf_i+0x196>
 80029c2:	6823      	ldr	r3, [r4, #0]
 80029c4:	f023 0320 	bic.w	r3, r3, #32
 80029c8:	6023      	str	r3, [r4, #0]
 80029ca:	2310      	movs	r3, #16
 80029cc:	e7b0      	b.n	8002930 <_printf_i+0xfc>
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	f043 0320 	orr.w	r3, r3, #32
 80029d4:	6023      	str	r3, [r4, #0]
 80029d6:	2378      	movs	r3, #120	; 0x78
 80029d8:	4828      	ldr	r0, [pc, #160]	; (8002a7c <_printf_i+0x248>)
 80029da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80029de:	e7e3      	b.n	80029a8 <_printf_i+0x174>
 80029e0:	0659      	lsls	r1, r3, #25
 80029e2:	bf48      	it	mi
 80029e4:	b2b6      	uxthmi	r6, r6
 80029e6:	e7e6      	b.n	80029b6 <_printf_i+0x182>
 80029e8:	4615      	mov	r5, r2
 80029ea:	e7bb      	b.n	8002964 <_printf_i+0x130>
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	6826      	ldr	r6, [r4, #0]
 80029f0:	6961      	ldr	r1, [r4, #20]
 80029f2:	1d18      	adds	r0, r3, #4
 80029f4:	6028      	str	r0, [r5, #0]
 80029f6:	0635      	lsls	r5, r6, #24
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	d501      	bpl.n	8002a00 <_printf_i+0x1cc>
 80029fc:	6019      	str	r1, [r3, #0]
 80029fe:	e002      	b.n	8002a06 <_printf_i+0x1d2>
 8002a00:	0670      	lsls	r0, r6, #25
 8002a02:	d5fb      	bpl.n	80029fc <_printf_i+0x1c8>
 8002a04:	8019      	strh	r1, [r3, #0]
 8002a06:	2300      	movs	r3, #0
 8002a08:	6123      	str	r3, [r4, #16]
 8002a0a:	4615      	mov	r5, r2
 8002a0c:	e7ba      	b.n	8002984 <_printf_i+0x150>
 8002a0e:	682b      	ldr	r3, [r5, #0]
 8002a10:	1d1a      	adds	r2, r3, #4
 8002a12:	602a      	str	r2, [r5, #0]
 8002a14:	681d      	ldr	r5, [r3, #0]
 8002a16:	6862      	ldr	r2, [r4, #4]
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f7fd fbe8 	bl	80001f0 <memchr>
 8002a20:	b108      	cbz	r0, 8002a26 <_printf_i+0x1f2>
 8002a22:	1b40      	subs	r0, r0, r5
 8002a24:	6060      	str	r0, [r4, #4]
 8002a26:	6863      	ldr	r3, [r4, #4]
 8002a28:	6123      	str	r3, [r4, #16]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a30:	e7a8      	b.n	8002984 <_printf_i+0x150>
 8002a32:	6923      	ldr	r3, [r4, #16]
 8002a34:	462a      	mov	r2, r5
 8002a36:	4649      	mov	r1, r9
 8002a38:	4640      	mov	r0, r8
 8002a3a:	47d0      	blx	sl
 8002a3c:	3001      	adds	r0, #1
 8002a3e:	d0ab      	beq.n	8002998 <_printf_i+0x164>
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	079b      	lsls	r3, r3, #30
 8002a44:	d413      	bmi.n	8002a6e <_printf_i+0x23a>
 8002a46:	68e0      	ldr	r0, [r4, #12]
 8002a48:	9b03      	ldr	r3, [sp, #12]
 8002a4a:	4298      	cmp	r0, r3
 8002a4c:	bfb8      	it	lt
 8002a4e:	4618      	movlt	r0, r3
 8002a50:	e7a4      	b.n	800299c <_printf_i+0x168>
 8002a52:	2301      	movs	r3, #1
 8002a54:	4632      	mov	r2, r6
 8002a56:	4649      	mov	r1, r9
 8002a58:	4640      	mov	r0, r8
 8002a5a:	47d0      	blx	sl
 8002a5c:	3001      	adds	r0, #1
 8002a5e:	d09b      	beq.n	8002998 <_printf_i+0x164>
 8002a60:	3501      	adds	r5, #1
 8002a62:	68e3      	ldr	r3, [r4, #12]
 8002a64:	9903      	ldr	r1, [sp, #12]
 8002a66:	1a5b      	subs	r3, r3, r1
 8002a68:	42ab      	cmp	r3, r5
 8002a6a:	dcf2      	bgt.n	8002a52 <_printf_i+0x21e>
 8002a6c:	e7eb      	b.n	8002a46 <_printf_i+0x212>
 8002a6e:	2500      	movs	r5, #0
 8002a70:	f104 0619 	add.w	r6, r4, #25
 8002a74:	e7f5      	b.n	8002a62 <_printf_i+0x22e>
 8002a76:	bf00      	nop
 8002a78:	08002dc1 	.word	0x08002dc1
 8002a7c:	08002dd2 	.word	0x08002dd2

08002a80 <memcpy>:
 8002a80:	440a      	add	r2, r1
 8002a82:	4291      	cmp	r1, r2
 8002a84:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a88:	d100      	bne.n	8002a8c <memcpy+0xc>
 8002a8a:	4770      	bx	lr
 8002a8c:	b510      	push	{r4, lr}
 8002a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a96:	4291      	cmp	r1, r2
 8002a98:	d1f9      	bne.n	8002a8e <memcpy+0xe>
 8002a9a:	bd10      	pop	{r4, pc}

08002a9c <memmove>:
 8002a9c:	4288      	cmp	r0, r1
 8002a9e:	b510      	push	{r4, lr}
 8002aa0:	eb01 0402 	add.w	r4, r1, r2
 8002aa4:	d902      	bls.n	8002aac <memmove+0x10>
 8002aa6:	4284      	cmp	r4, r0
 8002aa8:	4623      	mov	r3, r4
 8002aaa:	d807      	bhi.n	8002abc <memmove+0x20>
 8002aac:	1e43      	subs	r3, r0, #1
 8002aae:	42a1      	cmp	r1, r4
 8002ab0:	d008      	beq.n	8002ac4 <memmove+0x28>
 8002ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002aba:	e7f8      	b.n	8002aae <memmove+0x12>
 8002abc:	4402      	add	r2, r0
 8002abe:	4601      	mov	r1, r0
 8002ac0:	428a      	cmp	r2, r1
 8002ac2:	d100      	bne.n	8002ac6 <memmove+0x2a>
 8002ac4:	bd10      	pop	{r4, pc}
 8002ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ace:	e7f7      	b.n	8002ac0 <memmove+0x24>

08002ad0 <_free_r>:
 8002ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ad2:	2900      	cmp	r1, #0
 8002ad4:	d044      	beq.n	8002b60 <_free_r+0x90>
 8002ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ada:	9001      	str	r0, [sp, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f1a1 0404 	sub.w	r4, r1, #4
 8002ae2:	bfb8      	it	lt
 8002ae4:	18e4      	addlt	r4, r4, r3
 8002ae6:	f000 f913 	bl	8002d10 <__malloc_lock>
 8002aea:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <_free_r+0x94>)
 8002aec:	9801      	ldr	r0, [sp, #4]
 8002aee:	6813      	ldr	r3, [r2, #0]
 8002af0:	b933      	cbnz	r3, 8002b00 <_free_r+0x30>
 8002af2:	6063      	str	r3, [r4, #4]
 8002af4:	6014      	str	r4, [r2, #0]
 8002af6:	b003      	add	sp, #12
 8002af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002afc:	f000 b90e 	b.w	8002d1c <__malloc_unlock>
 8002b00:	42a3      	cmp	r3, r4
 8002b02:	d908      	bls.n	8002b16 <_free_r+0x46>
 8002b04:	6825      	ldr	r5, [r4, #0]
 8002b06:	1961      	adds	r1, r4, r5
 8002b08:	428b      	cmp	r3, r1
 8002b0a:	bf01      	itttt	eq
 8002b0c:	6819      	ldreq	r1, [r3, #0]
 8002b0e:	685b      	ldreq	r3, [r3, #4]
 8002b10:	1949      	addeq	r1, r1, r5
 8002b12:	6021      	streq	r1, [r4, #0]
 8002b14:	e7ed      	b.n	8002af2 <_free_r+0x22>
 8002b16:	461a      	mov	r2, r3
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	b10b      	cbz	r3, 8002b20 <_free_r+0x50>
 8002b1c:	42a3      	cmp	r3, r4
 8002b1e:	d9fa      	bls.n	8002b16 <_free_r+0x46>
 8002b20:	6811      	ldr	r1, [r2, #0]
 8002b22:	1855      	adds	r5, r2, r1
 8002b24:	42a5      	cmp	r5, r4
 8002b26:	d10b      	bne.n	8002b40 <_free_r+0x70>
 8002b28:	6824      	ldr	r4, [r4, #0]
 8002b2a:	4421      	add	r1, r4
 8002b2c:	1854      	adds	r4, r2, r1
 8002b2e:	42a3      	cmp	r3, r4
 8002b30:	6011      	str	r1, [r2, #0]
 8002b32:	d1e0      	bne.n	8002af6 <_free_r+0x26>
 8002b34:	681c      	ldr	r4, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	6053      	str	r3, [r2, #4]
 8002b3a:	4421      	add	r1, r4
 8002b3c:	6011      	str	r1, [r2, #0]
 8002b3e:	e7da      	b.n	8002af6 <_free_r+0x26>
 8002b40:	d902      	bls.n	8002b48 <_free_r+0x78>
 8002b42:	230c      	movs	r3, #12
 8002b44:	6003      	str	r3, [r0, #0]
 8002b46:	e7d6      	b.n	8002af6 <_free_r+0x26>
 8002b48:	6825      	ldr	r5, [r4, #0]
 8002b4a:	1961      	adds	r1, r4, r5
 8002b4c:	428b      	cmp	r3, r1
 8002b4e:	bf04      	itt	eq
 8002b50:	6819      	ldreq	r1, [r3, #0]
 8002b52:	685b      	ldreq	r3, [r3, #4]
 8002b54:	6063      	str	r3, [r4, #4]
 8002b56:	bf04      	itt	eq
 8002b58:	1949      	addeq	r1, r1, r5
 8002b5a:	6021      	streq	r1, [r4, #0]
 8002b5c:	6054      	str	r4, [r2, #4]
 8002b5e:	e7ca      	b.n	8002af6 <_free_r+0x26>
 8002b60:	b003      	add	sp, #12
 8002b62:	bd30      	pop	{r4, r5, pc}
 8002b64:	20000104 	.word	0x20000104

08002b68 <sbrk_aligned>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	4e0e      	ldr	r6, [pc, #56]	; (8002ba4 <sbrk_aligned+0x3c>)
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	6831      	ldr	r1, [r6, #0]
 8002b70:	4605      	mov	r5, r0
 8002b72:	b911      	cbnz	r1, 8002b7a <sbrk_aligned+0x12>
 8002b74:	f000 f8bc 	bl	8002cf0 <_sbrk_r>
 8002b78:	6030      	str	r0, [r6, #0]
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	f000 f8b7 	bl	8002cf0 <_sbrk_r>
 8002b82:	1c43      	adds	r3, r0, #1
 8002b84:	d00a      	beq.n	8002b9c <sbrk_aligned+0x34>
 8002b86:	1cc4      	adds	r4, r0, #3
 8002b88:	f024 0403 	bic.w	r4, r4, #3
 8002b8c:	42a0      	cmp	r0, r4
 8002b8e:	d007      	beq.n	8002ba0 <sbrk_aligned+0x38>
 8002b90:	1a21      	subs	r1, r4, r0
 8002b92:	4628      	mov	r0, r5
 8002b94:	f000 f8ac 	bl	8002cf0 <_sbrk_r>
 8002b98:	3001      	adds	r0, #1
 8002b9a:	d101      	bne.n	8002ba0 <sbrk_aligned+0x38>
 8002b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
 8002ba4:	20000108 	.word	0x20000108

08002ba8 <_malloc_r>:
 8002ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bac:	1ccd      	adds	r5, r1, #3
 8002bae:	f025 0503 	bic.w	r5, r5, #3
 8002bb2:	3508      	adds	r5, #8
 8002bb4:	2d0c      	cmp	r5, #12
 8002bb6:	bf38      	it	cc
 8002bb8:	250c      	movcc	r5, #12
 8002bba:	2d00      	cmp	r5, #0
 8002bbc:	4607      	mov	r7, r0
 8002bbe:	db01      	blt.n	8002bc4 <_malloc_r+0x1c>
 8002bc0:	42a9      	cmp	r1, r5
 8002bc2:	d905      	bls.n	8002bd0 <_malloc_r+0x28>
 8002bc4:	230c      	movs	r3, #12
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	2600      	movs	r6, #0
 8002bca:	4630      	mov	r0, r6
 8002bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bd0:	4e2e      	ldr	r6, [pc, #184]	; (8002c8c <_malloc_r+0xe4>)
 8002bd2:	f000 f89d 	bl	8002d10 <__malloc_lock>
 8002bd6:	6833      	ldr	r3, [r6, #0]
 8002bd8:	461c      	mov	r4, r3
 8002bda:	bb34      	cbnz	r4, 8002c2a <_malloc_r+0x82>
 8002bdc:	4629      	mov	r1, r5
 8002bde:	4638      	mov	r0, r7
 8002be0:	f7ff ffc2 	bl	8002b68 <sbrk_aligned>
 8002be4:	1c43      	adds	r3, r0, #1
 8002be6:	4604      	mov	r4, r0
 8002be8:	d14d      	bne.n	8002c86 <_malloc_r+0xde>
 8002bea:	6834      	ldr	r4, [r6, #0]
 8002bec:	4626      	mov	r6, r4
 8002bee:	2e00      	cmp	r6, #0
 8002bf0:	d140      	bne.n	8002c74 <_malloc_r+0xcc>
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	4631      	mov	r1, r6
 8002bf6:	4638      	mov	r0, r7
 8002bf8:	eb04 0803 	add.w	r8, r4, r3
 8002bfc:	f000 f878 	bl	8002cf0 <_sbrk_r>
 8002c00:	4580      	cmp	r8, r0
 8002c02:	d13a      	bne.n	8002c7a <_malloc_r+0xd2>
 8002c04:	6821      	ldr	r1, [r4, #0]
 8002c06:	3503      	adds	r5, #3
 8002c08:	1a6d      	subs	r5, r5, r1
 8002c0a:	f025 0503 	bic.w	r5, r5, #3
 8002c0e:	3508      	adds	r5, #8
 8002c10:	2d0c      	cmp	r5, #12
 8002c12:	bf38      	it	cc
 8002c14:	250c      	movcc	r5, #12
 8002c16:	4629      	mov	r1, r5
 8002c18:	4638      	mov	r0, r7
 8002c1a:	f7ff ffa5 	bl	8002b68 <sbrk_aligned>
 8002c1e:	3001      	adds	r0, #1
 8002c20:	d02b      	beq.n	8002c7a <_malloc_r+0xd2>
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	442b      	add	r3, r5
 8002c26:	6023      	str	r3, [r4, #0]
 8002c28:	e00e      	b.n	8002c48 <_malloc_r+0xa0>
 8002c2a:	6822      	ldr	r2, [r4, #0]
 8002c2c:	1b52      	subs	r2, r2, r5
 8002c2e:	d41e      	bmi.n	8002c6e <_malloc_r+0xc6>
 8002c30:	2a0b      	cmp	r2, #11
 8002c32:	d916      	bls.n	8002c62 <_malloc_r+0xba>
 8002c34:	1961      	adds	r1, r4, r5
 8002c36:	42a3      	cmp	r3, r4
 8002c38:	6025      	str	r5, [r4, #0]
 8002c3a:	bf18      	it	ne
 8002c3c:	6059      	strne	r1, [r3, #4]
 8002c3e:	6863      	ldr	r3, [r4, #4]
 8002c40:	bf08      	it	eq
 8002c42:	6031      	streq	r1, [r6, #0]
 8002c44:	5162      	str	r2, [r4, r5]
 8002c46:	604b      	str	r3, [r1, #4]
 8002c48:	4638      	mov	r0, r7
 8002c4a:	f104 060b 	add.w	r6, r4, #11
 8002c4e:	f000 f865 	bl	8002d1c <__malloc_unlock>
 8002c52:	f026 0607 	bic.w	r6, r6, #7
 8002c56:	1d23      	adds	r3, r4, #4
 8002c58:	1af2      	subs	r2, r6, r3
 8002c5a:	d0b6      	beq.n	8002bca <_malloc_r+0x22>
 8002c5c:	1b9b      	subs	r3, r3, r6
 8002c5e:	50a3      	str	r3, [r4, r2]
 8002c60:	e7b3      	b.n	8002bca <_malloc_r+0x22>
 8002c62:	6862      	ldr	r2, [r4, #4]
 8002c64:	42a3      	cmp	r3, r4
 8002c66:	bf0c      	ite	eq
 8002c68:	6032      	streq	r2, [r6, #0]
 8002c6a:	605a      	strne	r2, [r3, #4]
 8002c6c:	e7ec      	b.n	8002c48 <_malloc_r+0xa0>
 8002c6e:	4623      	mov	r3, r4
 8002c70:	6864      	ldr	r4, [r4, #4]
 8002c72:	e7b2      	b.n	8002bda <_malloc_r+0x32>
 8002c74:	4634      	mov	r4, r6
 8002c76:	6876      	ldr	r6, [r6, #4]
 8002c78:	e7b9      	b.n	8002bee <_malloc_r+0x46>
 8002c7a:	230c      	movs	r3, #12
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	4638      	mov	r0, r7
 8002c80:	f000 f84c 	bl	8002d1c <__malloc_unlock>
 8002c84:	e7a1      	b.n	8002bca <_malloc_r+0x22>
 8002c86:	6025      	str	r5, [r4, #0]
 8002c88:	e7de      	b.n	8002c48 <_malloc_r+0xa0>
 8002c8a:	bf00      	nop
 8002c8c:	20000104 	.word	0x20000104

08002c90 <_realloc_r>:
 8002c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c94:	4680      	mov	r8, r0
 8002c96:	4614      	mov	r4, r2
 8002c98:	460e      	mov	r6, r1
 8002c9a:	b921      	cbnz	r1, 8002ca6 <_realloc_r+0x16>
 8002c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	f7ff bf81 	b.w	8002ba8 <_malloc_r>
 8002ca6:	b92a      	cbnz	r2, 8002cb4 <_realloc_r+0x24>
 8002ca8:	f7ff ff12 	bl	8002ad0 <_free_r>
 8002cac:	4625      	mov	r5, r4
 8002cae:	4628      	mov	r0, r5
 8002cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cb4:	f000 f838 	bl	8002d28 <_malloc_usable_size_r>
 8002cb8:	4284      	cmp	r4, r0
 8002cba:	4607      	mov	r7, r0
 8002cbc:	d802      	bhi.n	8002cc4 <_realloc_r+0x34>
 8002cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002cc2:	d812      	bhi.n	8002cea <_realloc_r+0x5a>
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	4640      	mov	r0, r8
 8002cc8:	f7ff ff6e 	bl	8002ba8 <_malloc_r>
 8002ccc:	4605      	mov	r5, r0
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	d0ed      	beq.n	8002cae <_realloc_r+0x1e>
 8002cd2:	42bc      	cmp	r4, r7
 8002cd4:	4622      	mov	r2, r4
 8002cd6:	4631      	mov	r1, r6
 8002cd8:	bf28      	it	cs
 8002cda:	463a      	movcs	r2, r7
 8002cdc:	f7ff fed0 	bl	8002a80 <memcpy>
 8002ce0:	4631      	mov	r1, r6
 8002ce2:	4640      	mov	r0, r8
 8002ce4:	f7ff fef4 	bl	8002ad0 <_free_r>
 8002ce8:	e7e1      	b.n	8002cae <_realloc_r+0x1e>
 8002cea:	4635      	mov	r5, r6
 8002cec:	e7df      	b.n	8002cae <_realloc_r+0x1e>
	...

08002cf0 <_sbrk_r>:
 8002cf0:	b538      	push	{r3, r4, r5, lr}
 8002cf2:	4d06      	ldr	r5, [pc, #24]	; (8002d0c <_sbrk_r+0x1c>)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	4608      	mov	r0, r1
 8002cfa:	602b      	str	r3, [r5, #0]
 8002cfc:	f7fe f884 	bl	8000e08 <_sbrk>
 8002d00:	1c43      	adds	r3, r0, #1
 8002d02:	d102      	bne.n	8002d0a <_sbrk_r+0x1a>
 8002d04:	682b      	ldr	r3, [r5, #0]
 8002d06:	b103      	cbz	r3, 8002d0a <_sbrk_r+0x1a>
 8002d08:	6023      	str	r3, [r4, #0]
 8002d0a:	bd38      	pop	{r3, r4, r5, pc}
 8002d0c:	2000010c 	.word	0x2000010c

08002d10 <__malloc_lock>:
 8002d10:	4801      	ldr	r0, [pc, #4]	; (8002d18 <__malloc_lock+0x8>)
 8002d12:	f000 b811 	b.w	8002d38 <__retarget_lock_acquire_recursive>
 8002d16:	bf00      	nop
 8002d18:	20000110 	.word	0x20000110

08002d1c <__malloc_unlock>:
 8002d1c:	4801      	ldr	r0, [pc, #4]	; (8002d24 <__malloc_unlock+0x8>)
 8002d1e:	f000 b80c 	b.w	8002d3a <__retarget_lock_release_recursive>
 8002d22:	bf00      	nop
 8002d24:	20000110 	.word	0x20000110

08002d28 <_malloc_usable_size_r>:
 8002d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d2c:	1f18      	subs	r0, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bfbc      	itt	lt
 8002d32:	580b      	ldrlt	r3, [r1, r0]
 8002d34:	18c0      	addlt	r0, r0, r3
 8002d36:	4770      	bx	lr

08002d38 <__retarget_lock_acquire_recursive>:
 8002d38:	4770      	bx	lr

08002d3a <__retarget_lock_release_recursive>:
 8002d3a:	4770      	bx	lr

08002d3c <_init>:
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	bf00      	nop
 8002d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d42:	bc08      	pop	{r3}
 8002d44:	469e      	mov	lr, r3
 8002d46:	4770      	bx	lr

08002d48 <_fini>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	bf00      	nop
 8002d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4e:	bc08      	pop	{r3}
 8002d50:	469e      	mov	lr, r3
 8002d52:	4770      	bx	lr
