
Lab_2_speaker_note.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c30  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ddc  08002ddc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ddc  08002ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002de4  08002de4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002df8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002df8  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c19d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179f  00000000  00000000  0002c1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002d978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001544a  00000000  00000000  0002efb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4da  00000000  00000000  000443fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000892c1  00000000  00000000  000508d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9b95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003030  00000000  00000000  000d9be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002dac 	.word	0x08002dac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002dac 	.word	0x08002dac

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 faf4 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f816 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f94a 	bl	800077c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f91e 	bl	8000728 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004ec:	f000 f87c 	bl	80005e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80004f0:	2104      	movs	r1, #4
 80004f2:	4806      	ldr	r0, [pc, #24]	; (800050c <main+0x34>)
 80004f4:	f001 fb42 	bl	8001b7c <HAL_TIM_PWM_Start>
	HAL_Delay(3000);
 80004f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004fc:	f000 fb56 	bl	8000bac <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000500:	2104      	movs	r1, #4
 8000502:	4802      	ldr	r0, [pc, #8]	; (800050c <main+0x34>)
 8000504:	f001 fbea 	bl	8001cdc <HAL_TIM_PWM_Stop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	e7fe      	b.n	8000508 <main+0x30>
 800050a:	bf00      	nop
 800050c:	20000028 	.word	0x20000028

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	; 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fc3c 	bl	8002d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <SystemClock_Config+0xd0>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	4a28      	ldr	r2, [pc, #160]	; (80005e0 <SystemClock_Config+0xd0>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	; 0x40
 8000544:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <SystemClock_Config+0xd0>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <SystemClock_Config+0xd4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <SystemClock_Config+0xd4>)
 800055e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <SystemClock_Config+0xd4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000578:	2310      	movs	r3, #16
 800057a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057c:	2302      	movs	r3, #2
 800057e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000580:	2300      	movs	r3, #0
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000584:	2310      	movs	r3, #16
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000588:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800058e:	2304      	movs	r3, #4
 8000590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000592:	2307      	movs	r3, #7
 8000594:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	4618      	mov	r0, r3
 800059c:	f000 fdae 	bl	80010fc <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005a6:	f000 f957 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2302      	movs	r3, #2
 80005b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2102      	movs	r1, #2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f810 	bl	80015ec <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005d2:	f000 f941 	bl	8000858 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	; 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b096      	sub	sp, #88	; 0x58
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]
 8000616:	615a      	str	r2, [r3, #20]
 8000618:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2220      	movs	r2, #32
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fbbb 	bl	8002d9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000626:	4b3e      	ldr	r3, [pc, #248]	; (8000720 <MX_TIM1_Init+0x138>)
 8000628:	4a3e      	ldr	r2, [pc, #248]	; (8000724 <MX_TIM1_Init+0x13c>)
 800062a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 800062c:	4b3c      	ldr	r3, [pc, #240]	; (8000720 <MX_TIM1_Init+0x138>)
 800062e:	2263      	movs	r2, #99	; 0x63
 8000630:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	4b3b      	ldr	r3, [pc, #236]	; (8000720 <MX_TIM1_Init+0x138>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1909-1;
 8000638:	4b39      	ldr	r3, [pc, #228]	; (8000720 <MX_TIM1_Init+0x138>)
 800063a:	f240 7274 	movw	r2, #1908	; 0x774
 800063e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000640:	4b37      	ldr	r3, [pc, #220]	; (8000720 <MX_TIM1_Init+0x138>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000646:	4b36      	ldr	r3, [pc, #216]	; (8000720 <MX_TIM1_Init+0x138>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064c:	4b34      	ldr	r3, [pc, #208]	; (8000720 <MX_TIM1_Init+0x138>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000652:	4833      	ldr	r0, [pc, #204]	; (8000720 <MX_TIM1_Init+0x138>)
 8000654:	f001 f9ea 	bl	8001a2c <HAL_TIM_Base_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800065e:	f000 f8fb 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000668:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800066c:	4619      	mov	r1, r3
 800066e:	482c      	ldr	r0, [pc, #176]	; (8000720 <MX_TIM1_Init+0x138>)
 8000670:	f001 fc5a 	bl	8001f28 <HAL_TIM_ConfigClockSource>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800067a:	f000 f8ed 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800067e:	4828      	ldr	r0, [pc, #160]	; (8000720 <MX_TIM1_Init+0x138>)
 8000680:	f001 fa23 	bl	8001aca <HAL_TIM_PWM_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800068a:	f000 f8e5 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068e:	2300      	movs	r3, #0
 8000690:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000696:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800069a:	4619      	mov	r1, r3
 800069c:	4820      	ldr	r0, [pc, #128]	; (8000720 <MX_TIM1_Init+0x138>)
 800069e:	f001 ffd7 	bl	8002650 <HAL_TIMEx_MasterConfigSynchronization>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006a8:	f000 f8d6 	bl	8000858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ac:	2360      	movs	r3, #96	; 0x60
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 113-1;
 80006b0:	2370      	movs	r3, #112	; 0x70
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006b8:	2300      	movs	r3, #0
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006cc:	2204      	movs	r2, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4813      	ldr	r0, [pc, #76]	; (8000720 <MX_TIM1_Init+0x138>)
 80006d2:	f001 fb67 	bl	8001da4 <HAL_TIM_PWM_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80006dc:	f000 f8bc 	bl	8000858 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4619      	mov	r1, r3
 8000702:	4807      	ldr	r0, [pc, #28]	; (8000720 <MX_TIM1_Init+0x138>)
 8000704:	f002 f812 	bl	800272c <HAL_TIMEx_ConfigBreakDeadTime>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800070e:	f000 f8a3 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <MX_TIM1_Init+0x138>)
 8000714:	f000 f8f0 	bl	80008f8 <HAL_TIM_MspPostInit>

}
 8000718:	bf00      	nop
 800071a:	3758      	adds	r7, #88	; 0x58
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000028 	.word	0x20000028
 8000724:	40010000 	.word	0x40010000

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_USART2_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000760:	f002 f836 	bl	80027d0 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f875 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000070 	.word	0x20000070
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a2c      	ldr	r2, [pc, #176]	; (800084c <MX_GPIO_Init+0xd0>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b2a      	ldr	r3, [pc, #168]	; (800084c <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a25      	ldr	r2, [pc, #148]	; (800084c <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b23      	ldr	r3, [pc, #140]	; (800084c <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a1e      	ldr	r2, [pc, #120]	; (800084c <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <MX_GPIO_Init+0xd0>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2120      	movs	r1, #32
 8000806:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_GPIO_Init+0xd4>)
 8000808:	f000 fc5e 	bl	80010c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000812:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_GPIO_Init+0xd8>)
 8000824:	f000 facc 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000828:	2320      	movs	r3, #32
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_GPIO_Init+0xd4>)
 8000840:	f000 fabe 	bl	8000dc0 <HAL_GPIO_Init>

}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000
 8000854:	40020800 	.word	0x40020800

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <HAL_MspInit+0x4c>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_MspInit+0x4c>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008a2:	2007      	movs	r0, #7
 80008a4:	f000 fa58 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800

080008b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <HAL_TIM_Base_MspInit+0x3c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d10d      	bne.n	80008e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_TIM_Base_MspInit+0x40>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <HAL_TIM_Base_MspInit+0x40>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <HAL_TIM_Base_MspInit+0x40>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40010000 	.word	0x40010000
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a12      	ldr	r2, [pc, #72]	; (8000960 <HAL_TIM_MspPostInit+0x68>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d11e      	bne.n	8000958 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_TIM_MspPostInit+0x6c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <HAL_TIM_MspPostInit+0x6c>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_TIM_MspPostInit+0x6c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800093a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000948:	2301      	movs	r3, #1
 800094a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4619      	mov	r1, r3
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <HAL_TIM_MspPostInit+0x70>)
 8000954:	f000 fa34 	bl	8000dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000958:	bf00      	nop
 800095a:	3720      	adds	r7, #32
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40010000 	.word	0x40010000
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <HAL_UART_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12b      	bne.n	80009e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_UART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0x88>)
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009c6:	230c      	movs	r3, #12
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d6:	2307      	movs	r3, #7
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <HAL_UART_MspInit+0x8c>)
 80009e2:	f000 f9ed 	bl	8000dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40004400 	.word	0x40004400
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f890 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a7a:	490e      	ldr	r1, [pc, #56]	; (8000ab4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a90:	4c0b      	ldr	r4, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a9e:	f7ff ffd7 	bl	8000a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f002 f957 	bl	8002d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fd17 	bl	80004d8 <main>
  bx  lr    
 8000aaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab8:	08002dec 	.word	0x08002dec
  ldr r2, =_sbss
 8000abc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac0:	200000b8 	.word	0x200000b8

08000ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <HAL_Init+0x40>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_Init+0x40>)
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_Init+0x40>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f931 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 f808 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff feb2 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f93b 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 f911 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	200000b4 	.word	0x200000b4

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200000b4 	.word	0x200000b4

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff ffee 	bl	8000b94 <HAL_GetTick>
 8000bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc4:	d005      	beq.n	8000bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_Delay+0x44>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bd2:	bf00      	nop
 8000bd4:	f7ff ffde 	bl	8000b94 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8f7      	bhi.n	8000bd4 <HAL_Delay+0x28>
  {
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff47 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff5c 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffb0 	bl	8000d14 <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	e159      	b.n	8001090 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	f040 8148 	bne.w	800108a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d005      	beq.n	8000e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d130      	bne.n	8000e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	091b      	lsrs	r3, r3, #4
 8000e5e:	f003 0201 	and.w	r2, r3, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d017      	beq.n	8000eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d123      	bne.n	8000f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	69b9      	ldr	r1, [r7, #24]
 8000f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0203 	and.w	r2, r3, #3
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80a2 	beq.w	800108a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b57      	ldr	r3, [pc, #348]	; (80010a8 <HAL_GPIO_Init+0x2e8>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a56      	ldr	r2, [pc, #344]	; (80010a8 <HAL_GPIO_Init+0x2e8>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b54      	ldr	r3, [pc, #336]	; (80010a8 <HAL_GPIO_Init+0x2e8>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f62:	4a52      	ldr	r2, [pc, #328]	; (80010ac <HAL_GPIO_Init+0x2ec>)
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	220f      	movs	r2, #15
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a49      	ldr	r2, [pc, #292]	; (80010b0 <HAL_GPIO_Init+0x2f0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d019      	beq.n	8000fc2 <HAL_GPIO_Init+0x202>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a48      	ldr	r2, [pc, #288]	; (80010b4 <HAL_GPIO_Init+0x2f4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d013      	beq.n	8000fbe <HAL_GPIO_Init+0x1fe>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a47      	ldr	r2, [pc, #284]	; (80010b8 <HAL_GPIO_Init+0x2f8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d00d      	beq.n	8000fba <HAL_GPIO_Init+0x1fa>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a46      	ldr	r2, [pc, #280]	; (80010bc <HAL_GPIO_Init+0x2fc>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d007      	beq.n	8000fb6 <HAL_GPIO_Init+0x1f6>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a45      	ldr	r2, [pc, #276]	; (80010c0 <HAL_GPIO_Init+0x300>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_GPIO_Init+0x1f2>
 8000fae:	2304      	movs	r3, #4
 8000fb0:	e008      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e004      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x204>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	f002 0203 	and.w	r2, r2, #3
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	4093      	lsls	r3, r2
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd4:	4935      	ldr	r1, [pc, #212]	; (80010ac <HAL_GPIO_Init+0x2ec>)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe2:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001006:	4a2f      	ldr	r2, [pc, #188]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800100c:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <HAL_GPIO_Init+0x304>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001030:	4a24      	ldr	r2, [pc, #144]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105a:	4a1a      	ldr	r2, [pc, #104]	; (80010c4 <HAL_GPIO_Init+0x304>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001084:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3301      	adds	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	f67f aea2 	bls.w	8000ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40013800 	.word	0x40013800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40013c00 	.word	0x40013c00

080010c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e4:	e003      	b.n	80010ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	041a      	lsls	r2, r3, #16
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	619a      	str	r2, [r3, #24]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e267      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d075      	beq.n	8001206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111a:	4b88      	ldr	r3, [pc, #544]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b04      	cmp	r3, #4
 8001124:	d00c      	beq.n	8001140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4b85      	ldr	r3, [pc, #532]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112e:	2b08      	cmp	r3, #8
 8001130:	d112      	bne.n	8001158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001132:	4b82      	ldr	r3, [pc, #520]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800113e:	d10b      	bne.n	8001158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	4b7e      	ldr	r3, [pc, #504]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d05b      	beq.n	8001204 <HAL_RCC_OscConfig+0x108>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d157      	bne.n	8001204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e242      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001160:	d106      	bne.n	8001170 <HAL_RCC_OscConfig+0x74>
 8001162:	4b76      	ldr	r3, [pc, #472]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a75      	ldr	r2, [pc, #468]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e01d      	b.n	80011ac <HAL_RCC_OscConfig+0xb0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x98>
 800117a:	4b70      	ldr	r3, [pc, #448]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a6f      	ldr	r2, [pc, #444]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b6d      	ldr	r3, [pc, #436]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a6c      	ldr	r2, [pc, #432]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0xb0>
 8001194:	4b69      	ldr	r3, [pc, #420]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a68      	ldr	r2, [pc, #416]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800119a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b66      	ldr	r3, [pc, #408]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a65      	ldr	r2, [pc, #404]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcee 	bl	8000b94 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fcea 	bl	8000b94 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e207      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0xc0>
 80011da:	e014      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fcda 	bl	8000b94 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fcd6 	bl	8000b94 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1f3      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	4b51      	ldr	r3, [pc, #324]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0xe8>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d063      	beq.n	80012da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001212:	4b4a      	ldr	r3, [pc, #296]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001226:	2b08      	cmp	r3, #8
 8001228:	d11c      	bne.n	8001264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122a:	4b44      	ldr	r3, [pc, #272]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d116      	bne.n	8001264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	4b41      	ldr	r3, [pc, #260]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e1c7      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4937      	ldr	r1, [pc, #220]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	e03a      	b.n	80012da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b34      	ldr	r3, [pc, #208]	; (8001340 <HAL_RCC_OscConfig+0x244>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001272:	f7ff fc8f 	bl	8000b94 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fc8b 	bl	8000b94 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1a8      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	4b2b      	ldr	r3, [pc, #172]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4925      	ldr	r1, [pc, #148]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_RCC_OscConfig+0x244>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc6e 	bl	8000b94 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc6a 	bl	8000b94 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e187      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d036      	beq.n	8001354 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d016      	beq.n	800131c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_RCC_OscConfig+0x248>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f4:	f7ff fc4e 	bl	8000b94 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff fc4a 	bl	8000b94 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e167      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_RCC_OscConfig+0x240>)
 8001310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x200>
 800131a:	e01b      	b.n	8001354 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_RCC_OscConfig+0x248>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001322:	f7ff fc37 	bl	8000b94 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	e00e      	b.n	8001348 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132a:	f7ff fc33 	bl	8000b94 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d907      	bls.n	8001348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e150      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
 800133c:	40023800 	.word	0x40023800
 8001340:	42470000 	.word	0x42470000
 8001344:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001348:	4b88      	ldr	r3, [pc, #544]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800134a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1ea      	bne.n	800132a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8097 	beq.w	8001490 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001366:	4b81      	ldr	r3, [pc, #516]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10f      	bne.n	8001392 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	4b7d      	ldr	r3, [pc, #500]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a7c      	ldr	r2, [pc, #496]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b7a      	ldr	r3, [pc, #488]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138e:	2301      	movs	r3, #1
 8001390:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001392:	4b77      	ldr	r3, [pc, #476]	; (8001570 <HAL_RCC_OscConfig+0x474>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139a:	2b00      	cmp	r3, #0
 800139c:	d118      	bne.n	80013d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139e:	4b74      	ldr	r3, [pc, #464]	; (8001570 <HAL_RCC_OscConfig+0x474>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a73      	ldr	r2, [pc, #460]	; (8001570 <HAL_RCC_OscConfig+0x474>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fbf3 	bl	8000b94 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b2:	f7ff fbef 	bl	8000b94 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e10c      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c4:	4b6a      	ldr	r3, [pc, #424]	; (8001570 <HAL_RCC_OscConfig+0x474>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x2ea>
 80013d8:	4b64      	ldr	r3, [pc, #400]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	4a63      	ldr	r2, [pc, #396]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6713      	str	r3, [r2, #112]	; 0x70
 80013e4:	e01c      	b.n	8001420 <HAL_RCC_OscConfig+0x324>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0x30c>
 80013ee:	4b5f      	ldr	r3, [pc, #380]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	4a5e      	ldr	r2, [pc, #376]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6713      	str	r3, [r2, #112]	; 0x70
 80013fa:	4b5c      	ldr	r3, [pc, #368]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fe:	4a5b      	ldr	r2, [pc, #364]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6713      	str	r3, [r2, #112]	; 0x70
 8001406:	e00b      	b.n	8001420 <HAL_RCC_OscConfig+0x324>
 8001408:	4b58      	ldr	r3, [pc, #352]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140c:	4a57      	ldr	r2, [pc, #348]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	6713      	str	r3, [r2, #112]	; 0x70
 8001414:	4b55      	ldr	r3, [pc, #340]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001418:	4a54      	ldr	r2, [pc, #336]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800141a:	f023 0304 	bic.w	r3, r3, #4
 800141e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d015      	beq.n	8001454 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff fbb4 	bl	8000b94 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142e:	e00a      	b.n	8001446 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001430:	f7ff fbb0 	bl	8000b94 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	; 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e0cb      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001446:	4b49      	ldr	r3, [pc, #292]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0ee      	beq.n	8001430 <HAL_RCC_OscConfig+0x334>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001454:	f7ff fb9e 	bl	8000b94 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145c:	f7ff fb9a 	bl	8000b94 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	; 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e0b5      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ee      	bne.n	800145c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d105      	bne.n	8001490 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	4a38      	ldr	r2, [pc, #224]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800148a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a1 	beq.w	80015dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <HAL_RCC_OscConfig+0x470>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d05c      	beq.n	8001560 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d141      	bne.n	8001532 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ae:	4b31      	ldr	r3, [pc, #196]	; (8001574 <HAL_RCC_OscConfig+0x478>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fb6e 	bl	8000b94 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff fb6a 	bl	8000b94 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e087      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ce:	4b27      	ldr	r3, [pc, #156]	; (800156c <HAL_RCC_OscConfig+0x470>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69da      	ldr	r2, [r3, #28]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	3b01      	subs	r3, #1
 80014f4:	041b      	lsls	r3, r3, #16
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	061b      	lsls	r3, r3, #24
 80014fe:	491b      	ldr	r1, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_RCC_OscConfig+0x478>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fb43 	bl	8000b94 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff fb3f 	bl	8000b94 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e05c      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x416>
 8001530:	e054      	b.n	80015dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_RCC_OscConfig+0x478>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fb2c 	bl	8000b94 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff fb28 	bl	8000b94 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e045      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_RCC_OscConfig+0x470>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x444>
 800155e:	e03d      	b.n	80015dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e038      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000
 8001574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_RCC_OscConfig+0x4ec>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d028      	beq.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001590:	429a      	cmp	r2, r3
 8001592:	d121      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d11a      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015a8:	4013      	ands	r3, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d111      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	085b      	lsrs	r3, r3, #1
 80015c0:	3b01      	subs	r3, #1
 80015c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d107      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0cc      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d90c      	bls.n	8001628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0b8      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001640:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a58      	ldr	r2, [pc, #352]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800164a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a52      	ldr	r2, [pc, #328]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	494d      	ldr	r1, [pc, #308]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d044      	beq.n	800170c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d119      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e07f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e067      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ca:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f023 0203 	bic.w	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4934      	ldr	r1, [pc, #208]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016dc:	f7ff fa5a 	bl	8000b94 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff fa56 	bl	8000b94 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e04f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 020c 	and.w	r2, r3, #12
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d1eb      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d20c      	bcs.n	8001734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e032      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4916      	ldr	r1, [pc, #88]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	490e      	ldr	r1, [pc, #56]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001772:	f000 f821 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001776:	4602      	mov	r2, r0
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	490a      	ldr	r1, [pc, #40]	; (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	5ccb      	ldrb	r3, [r1, r3]
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff f9ba 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00
 80017a8:	40023800 	.word	0x40023800
 80017ac:	08002dc4 	.word	0x08002dc4
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000004 	.word	0x20000004

080017b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017bc:	b094      	sub	sp, #80	; 0x50
 80017be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	647b      	str	r3, [r7, #68]	; 0x44
 80017c4:	2300      	movs	r3, #0
 80017c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017c8:	2300      	movs	r3, #0
 80017ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d0:	4b79      	ldr	r3, [pc, #484]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d00d      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x40>
 80017dc:	2b08      	cmp	r3, #8
 80017de:	f200 80e1 	bhi.w	80019a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x34>
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ea:	e0db      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ec:	4b73      	ldr	r3, [pc, #460]	; (80019bc <HAL_RCC_GetSysClockFreq+0x204>)
 80017ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017f0:	e0db      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017f2:	4b73      	ldr	r3, [pc, #460]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80017f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017f6:	e0d8      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f8:	4b6f      	ldr	r3, [pc, #444]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001800:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001802:	4b6d      	ldr	r3, [pc, #436]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d063      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180e:	4b6a      	ldr	r3, [pc, #424]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	099b      	lsrs	r3, r3, #6
 8001814:	2200      	movs	r2, #0
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38
 8001818:	63fa      	str	r2, [r7, #60]	; 0x3c
 800181a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800181c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
 8001826:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800182a:	4622      	mov	r2, r4
 800182c:	462b      	mov	r3, r5
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	0159      	lsls	r1, r3, #5
 8001838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183c:	0150      	lsls	r0, r2, #5
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4621      	mov	r1, r4
 8001844:	1a51      	subs	r1, r2, r1
 8001846:	6139      	str	r1, [r7, #16]
 8001848:	4629      	mov	r1, r5
 800184a:	eb63 0301 	sbc.w	r3, r3, r1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800185c:	4659      	mov	r1, fp
 800185e:	018b      	lsls	r3, r1, #6
 8001860:	4651      	mov	r1, sl
 8001862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001866:	4651      	mov	r1, sl
 8001868:	018a      	lsls	r2, r1, #6
 800186a:	4651      	mov	r1, sl
 800186c:	ebb2 0801 	subs.w	r8, r2, r1
 8001870:	4659      	mov	r1, fp
 8001872:	eb63 0901 	sbc.w	r9, r3, r1
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800188a:	4690      	mov	r8, r2
 800188c:	4699      	mov	r9, r3
 800188e:	4623      	mov	r3, r4
 8001890:	eb18 0303 	adds.w	r3, r8, r3
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	462b      	mov	r3, r5
 8001898:	eb49 0303 	adc.w	r3, r9, r3
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018aa:	4629      	mov	r1, r5
 80018ac:	024b      	lsls	r3, r1, #9
 80018ae:	4621      	mov	r1, r4
 80018b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018b4:	4621      	mov	r1, r4
 80018b6:	024a      	lsls	r2, r1, #9
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018be:	2200      	movs	r2, #0
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018c8:	f7fe fc84 	bl	80001d4 <__aeabi_uldivmod>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018d4:	e058      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d6:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	099b      	lsrs	r3, r3, #6
 80018dc:	2200      	movs	r2, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	4611      	mov	r1, r2
 80018e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018e6:	623b      	str	r3, [r7, #32]
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
 80018ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018f0:	4642      	mov	r2, r8
 80018f2:	464b      	mov	r3, r9
 80018f4:	f04f 0000 	mov.w	r0, #0
 80018f8:	f04f 0100 	mov.w	r1, #0
 80018fc:	0159      	lsls	r1, r3, #5
 80018fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001902:	0150      	lsls	r0, r2, #5
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4641      	mov	r1, r8
 800190a:	ebb2 0a01 	subs.w	sl, r2, r1
 800190e:	4649      	mov	r1, r9
 8001910:	eb63 0b01 	sbc.w	fp, r3, r1
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001920:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001924:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001928:	ebb2 040a 	subs.w	r4, r2, sl
 800192c:	eb63 050b 	sbc.w	r5, r3, fp
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	00eb      	lsls	r3, r5, #3
 800193a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800193e:	00e2      	lsls	r2, r4, #3
 8001940:	4614      	mov	r4, r2
 8001942:	461d      	mov	r5, r3
 8001944:	4643      	mov	r3, r8
 8001946:	18e3      	adds	r3, r4, r3
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	464b      	mov	r3, r9
 800194c:	eb45 0303 	adc.w	r3, r5, r3
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800195e:	4629      	mov	r1, r5
 8001960:	028b      	lsls	r3, r1, #10
 8001962:	4621      	mov	r1, r4
 8001964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001968:	4621      	mov	r1, r4
 800196a:	028a      	lsls	r2, r1, #10
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001972:	2200      	movs	r2, #0
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	61fa      	str	r2, [r7, #28]
 8001978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800197c:	f7fe fc2a 	bl	80001d4 <__aeabi_uldivmod>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4613      	mov	r3, r2
 8001986:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	0c1b      	lsrs	r3, r3, #16
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	3301      	adds	r3, #1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001998:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800199a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019a2:	e002      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RCC_GetSysClockFreq+0x204>)
 80019a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3750      	adds	r7, #80	; 0x50
 80019b0:	46bd      	mov	sp, r7
 80019b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	00f42400 	.word	0x00f42400
 80019c0:	007a1200 	.word	0x007a1200

080019c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000000 	.word	0x20000000

080019dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019e0:	f7ff fff0 	bl	80019c4 <HAL_RCC_GetHCLKFreq>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	0a9b      	lsrs	r3, r3, #10
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	4903      	ldr	r1, [pc, #12]	; (8001a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019f2:	5ccb      	ldrb	r3, [r1, r3]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	08002dd4 	.word	0x08002dd4

08001a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a08:	f7ff ffdc 	bl	80019c4 <HAL_RCC_GetHCLKFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	0b5b      	lsrs	r3, r3, #13
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	4903      	ldr	r1, [pc, #12]	; (8001a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	08002dd4 	.word	0x08002dd4

08001a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e041      	b.n	8001ac2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7fe ff2e 	bl	80008b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3304      	adds	r3, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f000 fb24 	bl	80020b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e041      	b.n	8001b60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d106      	bne.n	8001af6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f839 	bl	8001b68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2202      	movs	r2, #2
 8001afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3304      	adds	r3, #4
 8001b06:	4619      	mov	r1, r3
 8001b08:	4610      	mov	r0, r2
 8001b0a:	f000 fad5 	bl	80020b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d109      	bne.n	8001ba0 <HAL_TIM_PWM_Start+0x24>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	bf14      	ite	ne
 8001b98:	2301      	movne	r3, #1
 8001b9a:	2300      	moveq	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	e022      	b.n	8001be6 <HAL_TIM_PWM_Start+0x6a>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d109      	bne.n	8001bba <HAL_TIM_PWM_Start+0x3e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	bf14      	ite	ne
 8001bb2:	2301      	movne	r3, #1
 8001bb4:	2300      	moveq	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	e015      	b.n	8001be6 <HAL_TIM_PWM_Start+0x6a>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d109      	bne.n	8001bd4 <HAL_TIM_PWM_Start+0x58>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	bf14      	ite	ne
 8001bcc:	2301      	movne	r3, #1
 8001bce:	2300      	moveq	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	e008      	b.n	8001be6 <HAL_TIM_PWM_Start+0x6a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e068      	b.n	8001cc0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d104      	bne.n	8001bfe <HAL_TIM_PWM_Start+0x82>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bfc:	e013      	b.n	8001c26 <HAL_TIM_PWM_Start+0xaa>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d104      	bne.n	8001c0e <HAL_TIM_PWM_Start+0x92>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c0c:	e00b      	b.n	8001c26 <HAL_TIM_PWM_Start+0xaa>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d104      	bne.n	8001c1e <HAL_TIM_PWM_Start+0xa2>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c1c:	e003      	b.n	8001c26 <HAL_TIM_PWM_Start+0xaa>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2202      	movs	r2, #2
 8001c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	6839      	ldr	r1, [r7, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 fce8 	bl	8002604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <HAL_TIM_PWM_Start+0x14c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d107      	bne.n	8001c4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_TIM_PWM_Start+0x14c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d018      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x10e>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c60:	d013      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x10e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a19      	ldr	r2, [pc, #100]	; (8001ccc <HAL_TIM_PWM_Start+0x150>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00e      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x10e>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <HAL_TIM_PWM_Start+0x154>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d009      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x10e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <HAL_TIM_PWM_Start+0x158>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d004      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x10e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <HAL_TIM_PWM_Start+0x15c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d111      	bne.n	8001cae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b06      	cmp	r3, #6
 8001c9a:	d010      	beq.n	8001cbe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cac:	e007      	b.n	8001cbe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40010000 	.word	0x40010000
 8001ccc:	40000400 	.word	0x40000400
 8001cd0:	40000800 	.word	0x40000800
 8001cd4:	40000c00 	.word	0x40000c00
 8001cd8:	40014000 	.word	0x40014000

08001cdc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	6839      	ldr	r1, [r7, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 fc88 	bl	8002604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a29      	ldr	r2, [pc, #164]	; (8001da0 <HAL_TIM_PWM_Stop+0xc4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d117      	bne.n	8001d2e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6a1a      	ldr	r2, [r3, #32]
 8001d04:	f241 1311 	movw	r3, #4369	; 0x1111
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10f      	bne.n	8001d2e <HAL_TIM_PWM_Stop+0x52>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6a1a      	ldr	r2, [r3, #32]
 8001d14:	f240 4344 	movw	r3, #1092	; 0x444
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d107      	bne.n	8001d2e <HAL_TIM_PWM_Stop+0x52>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6a1a      	ldr	r2, [r3, #32]
 8001d34:	f241 1311 	movw	r3, #4369	; 0x1111
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10f      	bne.n	8001d5e <HAL_TIM_PWM_Stop+0x82>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6a1a      	ldr	r2, [r3, #32]
 8001d44:	f240 4344 	movw	r3, #1092	; 0x444
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d107      	bne.n	8001d5e <HAL_TIM_PWM_Stop+0x82>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d104      	bne.n	8001d6e <HAL_TIM_PWM_Stop+0x92>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d6c:	e013      	b.n	8001d96 <HAL_TIM_PWM_Stop+0xba>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d104      	bne.n	8001d7e <HAL_TIM_PWM_Stop+0xa2>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d7c:	e00b      	b.n	8001d96 <HAL_TIM_PWM_Stop+0xba>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d104      	bne.n	8001d8e <HAL_TIM_PWM_Stop+0xb2>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d8c:	e003      	b.n	8001d96 <HAL_TIM_PWM_Stop+0xba>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40010000 	.word	0x40010000

08001da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e0ae      	b.n	8001f20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b0c      	cmp	r3, #12
 8001dce:	f200 809f 	bhi.w	8001f10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001dd2:	a201      	add	r2, pc, #4	; (adr r2, 8001dd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd8:	08001e0d 	.word	0x08001e0d
 8001ddc:	08001f11 	.word	0x08001f11
 8001de0:	08001f11 	.word	0x08001f11
 8001de4:	08001f11 	.word	0x08001f11
 8001de8:	08001e4d 	.word	0x08001e4d
 8001dec:	08001f11 	.word	0x08001f11
 8001df0:	08001f11 	.word	0x08001f11
 8001df4:	08001f11 	.word	0x08001f11
 8001df8:	08001e8f 	.word	0x08001e8f
 8001dfc:	08001f11 	.word	0x08001f11
 8001e00:	08001f11 	.word	0x08001f11
 8001e04:	08001f11 	.word	0x08001f11
 8001e08:	08001ecf 	.word	0x08001ecf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f9d0 	bl	80021b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0208 	orr.w	r2, r2, #8
 8001e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0204 	bic.w	r2, r2, #4
 8001e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6999      	ldr	r1, [r3, #24]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	619a      	str	r2, [r3, #24]
      break;
 8001e4a:	e064      	b.n	8001f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fa16 	bl	8002284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699a      	ldr	r2, [r3, #24]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6999      	ldr	r1, [r3, #24]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	021a      	lsls	r2, r3, #8
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	619a      	str	r2, [r3, #24]
      break;
 8001e8c:	e043      	b.n	8001f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68b9      	ldr	r1, [r7, #8]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fa61 	bl	800235c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0208 	orr.w	r2, r2, #8
 8001ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69da      	ldr	r2, [r3, #28]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0204 	bic.w	r2, r2, #4
 8001eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69d9      	ldr	r1, [r3, #28]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	61da      	str	r2, [r3, #28]
      break;
 8001ecc:	e023      	b.n	8001f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68b9      	ldr	r1, [r7, #8]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 faab 	bl	8002430 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69da      	ldr	r2, [r3, #28]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69da      	ldr	r2, [r3, #28]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69d9      	ldr	r1, [r3, #28]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	021a      	lsls	r2, r3, #8
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	61da      	str	r2, [r3, #28]
      break;
 8001f0e:	e002      	b.n	8001f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	75fb      	strb	r3, [r7, #23]
      break;
 8001f14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_TIM_ConfigClockSource+0x1c>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e0b4      	b.n	80020ae <HAL_TIM_ConfigClockSource+0x186>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f7c:	d03e      	beq.n	8001ffc <HAL_TIM_ConfigClockSource+0xd4>
 8001f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f82:	f200 8087 	bhi.w	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f8a:	f000 8086 	beq.w	800209a <HAL_TIM_ConfigClockSource+0x172>
 8001f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f92:	d87f      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001f94:	2b70      	cmp	r3, #112	; 0x70
 8001f96:	d01a      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0xa6>
 8001f98:	2b70      	cmp	r3, #112	; 0x70
 8001f9a:	d87b      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001f9c:	2b60      	cmp	r3, #96	; 0x60
 8001f9e:	d050      	beq.n	8002042 <HAL_TIM_ConfigClockSource+0x11a>
 8001fa0:	2b60      	cmp	r3, #96	; 0x60
 8001fa2:	d877      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa4:	2b50      	cmp	r3, #80	; 0x50
 8001fa6:	d03c      	beq.n	8002022 <HAL_TIM_ConfigClockSource+0xfa>
 8001fa8:	2b50      	cmp	r3, #80	; 0x50
 8001faa:	d873      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fac:	2b40      	cmp	r3, #64	; 0x40
 8001fae:	d058      	beq.n	8002062 <HAL_TIM_ConfigClockSource+0x13a>
 8001fb0:	2b40      	cmp	r3, #64	; 0x40
 8001fb2:	d86f      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb4:	2b30      	cmp	r3, #48	; 0x30
 8001fb6:	d064      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x15a>
 8001fb8:	2b30      	cmp	r3, #48	; 0x30
 8001fba:	d86b      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d060      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x15a>
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d867      	bhi.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d05c      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x15a>
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d05a      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x15a>
 8001fcc:	e062      	b.n	8002094 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6899      	ldr	r1, [r3, #8]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f000 faf1 	bl	80025c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	609a      	str	r2, [r3, #8]
      break;
 8001ffa:	e04f      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	6899      	ldr	r1, [r3, #8]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f000 fada 	bl	80025c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800201e:	609a      	str	r2, [r3, #8]
      break;
 8002020:	e03c      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6859      	ldr	r1, [r3, #4]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	461a      	mov	r2, r3
 8002030:	f000 fa4e 	bl	80024d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2150      	movs	r1, #80	; 0x50
 800203a:	4618      	mov	r0, r3
 800203c:	f000 faa7 	bl	800258e <TIM_ITRx_SetConfig>
      break;
 8002040:	e02c      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6859      	ldr	r1, [r3, #4]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	461a      	mov	r2, r3
 8002050:	f000 fa6d 	bl	800252e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2160      	movs	r1, #96	; 0x60
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fa97 	bl	800258e <TIM_ITRx_SetConfig>
      break;
 8002060:	e01c      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6859      	ldr	r1, [r3, #4]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	461a      	mov	r2, r3
 8002070:	f000 fa2e 	bl	80024d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2140      	movs	r1, #64	; 0x40
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fa87 	bl	800258e <TIM_ITRx_SetConfig>
      break;
 8002080:	e00c      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f000 fa7e 	bl	800258e <TIM_ITRx_SetConfig>
      break;
 8002092:	e003      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
      break;
 8002098:	e000      	b.n	800209c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800209a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a34      	ldr	r2, [pc, #208]	; (800219c <TIM_Base_SetConfig+0xe4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00f      	beq.n	80020f0 <TIM_Base_SetConfig+0x38>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d6:	d00b      	beq.n	80020f0 <TIM_Base_SetConfig+0x38>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a31      	ldr	r2, [pc, #196]	; (80021a0 <TIM_Base_SetConfig+0xe8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d007      	beq.n	80020f0 <TIM_Base_SetConfig+0x38>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a30      	ldr	r2, [pc, #192]	; (80021a4 <TIM_Base_SetConfig+0xec>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d003      	beq.n	80020f0 <TIM_Base_SetConfig+0x38>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a2f      	ldr	r2, [pc, #188]	; (80021a8 <TIM_Base_SetConfig+0xf0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d108      	bne.n	8002102 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a25      	ldr	r2, [pc, #148]	; (800219c <TIM_Base_SetConfig+0xe4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01b      	beq.n	8002142 <TIM_Base_SetConfig+0x8a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002110:	d017      	beq.n	8002142 <TIM_Base_SetConfig+0x8a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a22      	ldr	r2, [pc, #136]	; (80021a0 <TIM_Base_SetConfig+0xe8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <TIM_Base_SetConfig+0x8a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <TIM_Base_SetConfig+0xec>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00f      	beq.n	8002142 <TIM_Base_SetConfig+0x8a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a20      	ldr	r2, [pc, #128]	; (80021a8 <TIM_Base_SetConfig+0xf0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00b      	beq.n	8002142 <TIM_Base_SetConfig+0x8a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <TIM_Base_SetConfig+0xf4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <TIM_Base_SetConfig+0x8a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <TIM_Base_SetConfig+0xf8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d003      	beq.n	8002142 <TIM_Base_SetConfig+0x8a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <TIM_Base_SetConfig+0xfc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d108      	bne.n	8002154 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a08      	ldr	r2, [pc, #32]	; (800219c <TIM_Base_SetConfig+0xe4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d103      	bne.n	8002188 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	615a      	str	r2, [r3, #20]
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40010000 	.word	0x40010000
 80021a0:	40000400 	.word	0x40000400
 80021a4:	40000800 	.word	0x40000800
 80021a8:	40000c00 	.word	0x40000c00
 80021ac:	40014000 	.word	0x40014000
 80021b0:	40014400 	.word	0x40014400
 80021b4:	40014800 	.word	0x40014800

080021b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	f023 0201 	bic.w	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0303 	bic.w	r3, r3, #3
 80021ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f023 0302 	bic.w	r3, r3, #2
 8002200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4313      	orrs	r3, r2
 800220a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <TIM_OC1_SetConfig+0xc8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d10c      	bne.n	800222e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f023 0308 	bic.w	r3, r3, #8
 800221a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f023 0304 	bic.w	r3, r3, #4
 800222c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a13      	ldr	r2, [pc, #76]	; (8002280 <TIM_OC1_SetConfig+0xc8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d111      	bne.n	800225a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800223c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	621a      	str	r2, [r3, #32]
}
 8002274:	bf00      	nop
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	40010000 	.word	0x40010000

08002284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	f023 0210 	bic.w	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f023 0320 	bic.w	r3, r3, #32
 80022ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <TIM_OC2_SetConfig+0xd4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d10d      	bne.n	8002300 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a15      	ldr	r2, [pc, #84]	; (8002358 <TIM_OC2_SetConfig+0xd4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d113      	bne.n	8002330 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800230e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	621a      	str	r2, [r3, #32]
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40010000 	.word	0x40010000

0800235c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f023 0303 	bic.w	r3, r3, #3
 8002392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a1d      	ldr	r2, [pc, #116]	; (800242c <TIM_OC3_SetConfig+0xd0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10d      	bne.n	80023d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <TIM_OC3_SetConfig+0xd0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d113      	bne.n	8002406 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	621a      	str	r2, [r3, #32]
}
 8002420:	bf00      	nop
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	40010000 	.word	0x40010000

08002430 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800245e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800247a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	031b      	lsls	r3, r3, #12
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a10      	ldr	r2, [pc, #64]	; (80024cc <TIM_OC4_SetConfig+0x9c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d109      	bne.n	80024a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	621a      	str	r2, [r3, #32]
}
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40010000 	.word	0x40010000

080024d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	f023 0201 	bic.w	r2, r3, #1
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f023 030a 	bic.w	r3, r3, #10
 800250c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	621a      	str	r2, [r3, #32]
}
 8002522:	bf00      	nop
 8002524:	371c      	adds	r7, #28
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800252e:	b480      	push	{r7}
 8002530:	b087      	sub	sp, #28
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	f023 0210 	bic.w	r2, r3, #16
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	031b      	lsls	r3, r3, #12
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800256a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	621a      	str	r2, [r3, #32]
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800258e:	b480      	push	{r7}
 8002590:	b085      	sub	sp, #20
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f043 0307 	orr.w	r3, r3, #7
 80025b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	609a      	str	r2, [r3, #8]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	021a      	lsls	r2, r3, #8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	609a      	str	r2, [r3, #8]
}
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2201      	movs	r2, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a1a      	ldr	r2, [r3, #32]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	43db      	mvns	r3, r3
 8002626:	401a      	ands	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a1a      	ldr	r2, [r3, #32]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	431a      	orrs	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	621a      	str	r2, [r3, #32]
}
 8002642:	bf00      	nop
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002664:	2302      	movs	r3, #2
 8002666:	e050      	b.n	800270a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d018      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b4:	d013      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a18      	ldr	r2, [pc, #96]	; (800271c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00e      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a16      	ldr	r2, [pc, #88]	; (8002720 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d009      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a15      	ldr	r2, [pc, #84]	; (8002724 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d004      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a13      	ldr	r2, [pc, #76]	; (8002728 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10c      	bne.n	80026f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40010000 	.word	0x40010000
 800271c:	40000400 	.word	0x40000400
 8002720:	40000800 	.word	0x40000800
 8002724:	40000c00 	.word	0x40000c00
 8002728:	40014000 	.word	0x40014000

0800272c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002744:	2302      	movs	r3, #2
 8002746:	e03d      	b.n	80027c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4313      	orrs	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4313      	orrs	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e03f      	b.n	8002862 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe f8b8 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	; 0x24
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f829 	bl	800286c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800286c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002870:	b0c0      	sub	sp, #256	; 0x100
 8002872:	af00      	add	r7, sp, #0
 8002874:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002888:	68d9      	ldr	r1, [r3, #12]
 800288a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	ea40 0301 	orr.w	r3, r0, r1
 8002894:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028c4:	f021 010c 	bic.w	r1, r1, #12
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028d2:	430b      	orrs	r3, r1
 80028d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e6:	6999      	ldr	r1, [r3, #24]
 80028e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	ea40 0301 	orr.w	r3, r0, r1
 80028f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b8f      	ldr	r3, [pc, #572]	; (8002b38 <UART_SetConfig+0x2cc>)
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d005      	beq.n	800290c <UART_SetConfig+0xa0>
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b8d      	ldr	r3, [pc, #564]	; (8002b3c <UART_SetConfig+0x2d0>)
 8002908:	429a      	cmp	r2, r3
 800290a:	d104      	bne.n	8002916 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800290c:	f7ff f87a 	bl	8001a04 <HAL_RCC_GetPCLK2Freq>
 8002910:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002914:	e003      	b.n	800291e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002916:	f7ff f861 	bl	80019dc <HAL_RCC_GetPCLK1Freq>
 800291a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800291e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002928:	f040 810c 	bne.w	8002b44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800292c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002930:	2200      	movs	r2, #0
 8002932:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002936:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800293a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800293e:	4622      	mov	r2, r4
 8002940:	462b      	mov	r3, r5
 8002942:	1891      	adds	r1, r2, r2
 8002944:	65b9      	str	r1, [r7, #88]	; 0x58
 8002946:	415b      	adcs	r3, r3
 8002948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800294a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800294e:	4621      	mov	r1, r4
 8002950:	eb12 0801 	adds.w	r8, r2, r1
 8002954:	4629      	mov	r1, r5
 8002956:	eb43 0901 	adc.w	r9, r3, r1
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800296a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800296e:	4690      	mov	r8, r2
 8002970:	4699      	mov	r9, r3
 8002972:	4623      	mov	r3, r4
 8002974:	eb18 0303 	adds.w	r3, r8, r3
 8002978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800297c:	462b      	mov	r3, r5
 800297e:	eb49 0303 	adc.w	r3, r9, r3
 8002982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002992:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002996:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800299a:	460b      	mov	r3, r1
 800299c:	18db      	adds	r3, r3, r3
 800299e:	653b      	str	r3, [r7, #80]	; 0x50
 80029a0:	4613      	mov	r3, r2
 80029a2:	eb42 0303 	adc.w	r3, r2, r3
 80029a6:	657b      	str	r3, [r7, #84]	; 0x54
 80029a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029b0:	f7fd fc10 	bl	80001d4 <__aeabi_uldivmod>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <UART_SetConfig+0x2d4>)
 80029ba:	fba3 2302 	umull	r2, r3, r3, r2
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	011c      	lsls	r4, r3, #4
 80029c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029c6:	2200      	movs	r2, #0
 80029c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80029d4:	4642      	mov	r2, r8
 80029d6:	464b      	mov	r3, r9
 80029d8:	1891      	adds	r1, r2, r2
 80029da:	64b9      	str	r1, [r7, #72]	; 0x48
 80029dc:	415b      	adcs	r3, r3
 80029de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029e4:	4641      	mov	r1, r8
 80029e6:	eb12 0a01 	adds.w	sl, r2, r1
 80029ea:	4649      	mov	r1, r9
 80029ec:	eb43 0b01 	adc.w	fp, r3, r1
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a04:	4692      	mov	sl, r2
 8002a06:	469b      	mov	fp, r3
 8002a08:	4643      	mov	r3, r8
 8002a0a:	eb1a 0303 	adds.w	r3, sl, r3
 8002a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a12:	464b      	mov	r3, r9
 8002a14:	eb4b 0303 	adc.w	r3, fp, r3
 8002a18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a30:	460b      	mov	r3, r1
 8002a32:	18db      	adds	r3, r3, r3
 8002a34:	643b      	str	r3, [r7, #64]	; 0x40
 8002a36:	4613      	mov	r3, r2
 8002a38:	eb42 0303 	adc.w	r3, r2, r3
 8002a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a46:	f7fd fbc5 	bl	80001d4 <__aeabi_uldivmod>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <UART_SetConfig+0x2d4>)
 8002a52:	fba3 2301 	umull	r2, r3, r3, r1
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	2264      	movs	r2, #100	; 0x64
 8002a5a:	fb02 f303 	mul.w	r3, r2, r3
 8002a5e:	1acb      	subs	r3, r1, r3
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a66:	4b36      	ldr	r3, [pc, #216]	; (8002b40 <UART_SetConfig+0x2d4>)
 8002a68:	fba3 2302 	umull	r2, r3, r3, r2
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a74:	441c      	add	r4, r3
 8002a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a88:	4642      	mov	r2, r8
 8002a8a:	464b      	mov	r3, r9
 8002a8c:	1891      	adds	r1, r2, r2
 8002a8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a90:	415b      	adcs	r3, r3
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a98:	4641      	mov	r1, r8
 8002a9a:	1851      	adds	r1, r2, r1
 8002a9c:	6339      	str	r1, [r7, #48]	; 0x30
 8002a9e:	4649      	mov	r1, r9
 8002aa0:	414b      	adcs	r3, r1
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ab0:	4659      	mov	r1, fp
 8002ab2:	00cb      	lsls	r3, r1, #3
 8002ab4:	4651      	mov	r1, sl
 8002ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aba:	4651      	mov	r1, sl
 8002abc:	00ca      	lsls	r2, r1, #3
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4642      	mov	r2, r8
 8002ac6:	189b      	adds	r3, r3, r2
 8002ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002acc:	464b      	mov	r3, r9
 8002ace:	460a      	mov	r2, r1
 8002ad0:	eb42 0303 	adc.w	r3, r2, r3
 8002ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ae4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ae8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002aec:	460b      	mov	r3, r1
 8002aee:	18db      	adds	r3, r3, r3
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af2:	4613      	mov	r3, r2
 8002af4:	eb42 0303 	adc.w	r3, r2, r3
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002afe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b02:	f7fd fb67 	bl	80001d4 <__aeabi_uldivmod>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <UART_SetConfig+0x2d4>)
 8002b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	2164      	movs	r1, #100	; 0x64
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	3332      	adds	r3, #50	; 0x32
 8002b1e:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <UART_SetConfig+0x2d4>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	f003 0207 	and.w	r2, r3, #7
 8002b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4422      	add	r2, r4
 8002b32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b34:	e105      	b.n	8002d42 <UART_SetConfig+0x4d6>
 8002b36:	bf00      	nop
 8002b38:	40011000 	.word	0x40011000
 8002b3c:	40011400 	.word	0x40011400
 8002b40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b56:	4642      	mov	r2, r8
 8002b58:	464b      	mov	r3, r9
 8002b5a:	1891      	adds	r1, r2, r2
 8002b5c:	6239      	str	r1, [r7, #32]
 8002b5e:	415b      	adcs	r3, r3
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
 8002b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b66:	4641      	mov	r1, r8
 8002b68:	1854      	adds	r4, r2, r1
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	eb43 0501 	adc.w	r5, r3, r1
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	00eb      	lsls	r3, r5, #3
 8002b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b7e:	00e2      	lsls	r2, r4, #3
 8002b80:	4614      	mov	r4, r2
 8002b82:	461d      	mov	r5, r3
 8002b84:	4643      	mov	r3, r8
 8002b86:	18e3      	adds	r3, r4, r3
 8002b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b8c:	464b      	mov	r3, r9
 8002b8e:	eb45 0303 	adc.w	r3, r5, r3
 8002b92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ba2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	008b      	lsls	r3, r1, #2
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	008a      	lsls	r2, r1, #2
 8002bc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bc4:	f7fd fb06 	bl	80001d4 <__aeabi_uldivmod>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4b60      	ldr	r3, [pc, #384]	; (8002d50 <UART_SetConfig+0x4e4>)
 8002bce:	fba3 2302 	umull	r2, r3, r3, r2
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	011c      	lsls	r4, r3, #4
 8002bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002be0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002be4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002be8:	4642      	mov	r2, r8
 8002bea:	464b      	mov	r3, r9
 8002bec:	1891      	adds	r1, r2, r2
 8002bee:	61b9      	str	r1, [r7, #24]
 8002bf0:	415b      	adcs	r3, r3
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	1851      	adds	r1, r2, r1
 8002bfc:	6139      	str	r1, [r7, #16]
 8002bfe:	4649      	mov	r1, r9
 8002c00:	414b      	adcs	r3, r1
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c10:	4659      	mov	r1, fp
 8002c12:	00cb      	lsls	r3, r1, #3
 8002c14:	4651      	mov	r1, sl
 8002c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c1a:	4651      	mov	r1, sl
 8002c1c:	00ca      	lsls	r2, r1, #3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	4603      	mov	r3, r0
 8002c24:	4642      	mov	r2, r8
 8002c26:	189b      	adds	r3, r3, r2
 8002c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c2c:	464b      	mov	r3, r9
 8002c2e:	460a      	mov	r2, r1
 8002c30:	eb42 0303 	adc.w	r3, r2, r3
 8002c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c50:	4649      	mov	r1, r9
 8002c52:	008b      	lsls	r3, r1, #2
 8002c54:	4641      	mov	r1, r8
 8002c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	008a      	lsls	r2, r1, #2
 8002c5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c62:	f7fd fab7 	bl	80001d4 <__aeabi_uldivmod>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <UART_SetConfig+0x4e4>)
 8002c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	2164      	movs	r1, #100	; 0x64
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	3332      	adds	r3, #50	; 0x32
 8002c7e:	4a34      	ldr	r2, [pc, #208]	; (8002d50 <UART_SetConfig+0x4e4>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c8a:	441c      	add	r4, r3
 8002c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c90:	2200      	movs	r2, #0
 8002c92:	673b      	str	r3, [r7, #112]	; 0x70
 8002c94:	677a      	str	r2, [r7, #116]	; 0x74
 8002c96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c9a:	4642      	mov	r2, r8
 8002c9c:	464b      	mov	r3, r9
 8002c9e:	1891      	adds	r1, r2, r2
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	415b      	adcs	r3, r3
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002caa:	4641      	mov	r1, r8
 8002cac:	1851      	adds	r1, r2, r1
 8002cae:	6039      	str	r1, [r7, #0]
 8002cb0:	4649      	mov	r1, r9
 8002cb2:	414b      	adcs	r3, r1
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cc2:	4659      	mov	r1, fp
 8002cc4:	00cb      	lsls	r3, r1, #3
 8002cc6:	4651      	mov	r1, sl
 8002cc8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ccc:	4651      	mov	r1, sl
 8002cce:	00ca      	lsls	r2, r1, #3
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4642      	mov	r2, r8
 8002cd8:	189b      	adds	r3, r3, r2
 8002cda:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cdc:	464b      	mov	r3, r9
 8002cde:	460a      	mov	r2, r1
 8002ce0:	eb42 0303 	adc.w	r3, r2, r3
 8002ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	663b      	str	r3, [r7, #96]	; 0x60
 8002cf0:	667a      	str	r2, [r7, #100]	; 0x64
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002cfe:	4649      	mov	r1, r9
 8002d00:	008b      	lsls	r3, r1, #2
 8002d02:	4641      	mov	r1, r8
 8002d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d08:	4641      	mov	r1, r8
 8002d0a:	008a      	lsls	r2, r1, #2
 8002d0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d10:	f7fd fa60 	bl	80001d4 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <UART_SetConfig+0x4e4>)
 8002d1a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2164      	movs	r1, #100	; 0x64
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	3332      	adds	r3, #50	; 0x32
 8002d2c:	4a08      	ldr	r2, [pc, #32]	; (8002d50 <UART_SetConfig+0x4e4>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	f003 020f 	and.w	r2, r3, #15
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4422      	add	r2, r4
 8002d40:	609a      	str	r2, [r3, #8]
}
 8002d42:	bf00      	nop
 8002d44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4e:	bf00      	nop
 8002d50:	51eb851f 	.word	0x51eb851f

08002d54 <__libc_init_array>:
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	4d0d      	ldr	r5, [pc, #52]	; (8002d8c <__libc_init_array+0x38>)
 8002d58:	4c0d      	ldr	r4, [pc, #52]	; (8002d90 <__libc_init_array+0x3c>)
 8002d5a:	1b64      	subs	r4, r4, r5
 8002d5c:	10a4      	asrs	r4, r4, #2
 8002d5e:	2600      	movs	r6, #0
 8002d60:	42a6      	cmp	r6, r4
 8002d62:	d109      	bne.n	8002d78 <__libc_init_array+0x24>
 8002d64:	4d0b      	ldr	r5, [pc, #44]	; (8002d94 <__libc_init_array+0x40>)
 8002d66:	4c0c      	ldr	r4, [pc, #48]	; (8002d98 <__libc_init_array+0x44>)
 8002d68:	f000 f820 	bl	8002dac <_init>
 8002d6c:	1b64      	subs	r4, r4, r5
 8002d6e:	10a4      	asrs	r4, r4, #2
 8002d70:	2600      	movs	r6, #0
 8002d72:	42a6      	cmp	r6, r4
 8002d74:	d105      	bne.n	8002d82 <__libc_init_array+0x2e>
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
 8002d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7c:	4798      	blx	r3
 8002d7e:	3601      	adds	r6, #1
 8002d80:	e7ee      	b.n	8002d60 <__libc_init_array+0xc>
 8002d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d86:	4798      	blx	r3
 8002d88:	3601      	adds	r6, #1
 8002d8a:	e7f2      	b.n	8002d72 <__libc_init_array+0x1e>
 8002d8c:	08002de4 	.word	0x08002de4
 8002d90:	08002de4 	.word	0x08002de4
 8002d94:	08002de4 	.word	0x08002de4
 8002d98:	08002de8 	.word	0x08002de8

08002d9c <memset>:
 8002d9c:	4402      	add	r2, r0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d100      	bne.n	8002da6 <memset+0xa>
 8002da4:	4770      	bx	lr
 8002da6:	f803 1b01 	strb.w	r1, [r3], #1
 8002daa:	e7f9      	b.n	8002da0 <memset+0x4>

08002dac <_init>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr

08002db8 <_fini>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	bf00      	nop
 8002dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dbe:	bc08      	pop	{r3}
 8002dc0:	469e      	mov	lr, r3
 8002dc2:	4770      	bx	lr
